// Version 1.73.6 3d-force-graph - https://github.com/vasturiano/3d-force-graph
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ForceGraph3D = factory());
})(this, (function () { 'use strict';

  function styleInject$1(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z$1 = ".graph-info-msg {\n  top: 50%;\n  width: 100%;\n  text-align: center;\n  color: lavender;\n  opacity: 0.7;\n  font-size: 22px;\n  position: absolute;\n  font-family: Sans-serif;\n}\n\n.scene-container .clickable {\n  cursor: pointer;\n}\n\n.scene-container .grabbable {\n  cursor: move;\n  cursor: grab;\n  cursor: -moz-grab;\n  cursor: -webkit-grab;\n}\n\n.scene-container .grabbable:active {\n  cursor: grabbing;\n  cursor: -moz-grabbing;\n  cursor: -webkit-grabbing;\n}";
  styleInject$1(css_248z$1);

  function _arrayLikeToArray$5(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles$4(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$5(r);
  }
  function _defineProperty$3(e, r, t) {
    return (r = _toPropertyKey$4(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _iterableToArray$4(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread$4() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys$2(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2$2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {
        _defineProperty$3(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _toConsumableArray$4(r) {
    return _arrayWithoutHoles$4(r) || _iterableToArray$4(r) || _unsupportedIterableToArray$5(r) || _nonIterableSpread$4();
  }
  function _toPrimitive$4(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey$4(t) {
    var i = _toPrimitive$4(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray$5(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$5(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$5(r, a) : void 0;
    }
  }

  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION$1 = '170';

  const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
  const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
  const CullFaceNone$1 = 0;
  const CullFaceBack$1 = 1;
  const CullFaceFront$1 = 2;
  const PCFShadowMap$2 = 1;
  const PCFSoftShadowMap$1 = 2;
  const VSMShadowMap$1 = 3;
  const FrontSide$1 = 0;
  const BackSide$1 = 1;
  const DoubleSide$1 = 2;
  const NoBlending$1 = 0;
  const NormalBlending$1 = 1;
  const AdditiveBlending$1 = 2;
  const SubtractiveBlending$1 = 3;
  const MultiplyBlending$1 = 4;
  const CustomBlending$1 = 5;
  const AddEquation$1 = 100;
  const SubtractEquation$1 = 101;
  const ReverseSubtractEquation$1 = 102;
  const MinEquation$1 = 103;
  const MaxEquation$1 = 104;
  const ZeroFactor$1 = 200;
  const OneFactor$1 = 201;
  const SrcColorFactor$1 = 202;
  const OneMinusSrcColorFactor$1 = 203;
  const SrcAlphaFactor$1 = 204;
  const OneMinusSrcAlphaFactor$1 = 205;
  const DstAlphaFactor$1 = 206;
  const OneMinusDstAlphaFactor$1 = 207;
  const DstColorFactor$1 = 208;
  const OneMinusDstColorFactor$1 = 209;
  const SrcAlphaSaturateFactor$1 = 210;
  const ConstantColorFactor = 211;
  const OneMinusConstantColorFactor = 212;
  const ConstantAlphaFactor = 213;
  const OneMinusConstantAlphaFactor = 214;
  const NeverDepth$1 = 0;
  const AlwaysDepth$1 = 1;
  const LessDepth$1 = 2;
  const LessEqualDepth$1 = 3;
  const EqualDepth$1 = 4;
  const GreaterEqualDepth$1 = 5;
  const GreaterDepth$1 = 6;
  const NotEqualDepth$1 = 7;
  const MultiplyOperation$1 = 0;
  const MixOperation$1 = 1;
  const AddOperation$1 = 2;
  const NoToneMapping$1 = 0;
  const LinearToneMapping$1 = 1;
  const ReinhardToneMapping$1 = 2;
  const CineonToneMapping$1 = 3;
  const ACESFilmicToneMapping$1 = 4;
  const CustomToneMapping = 5;
  const AgXToneMapping$1 = 6;
  const NeutralToneMapping$1 = 7;

  const UVMapping$1 = 300;
  const CubeReflectionMapping$1 = 301;
  const CubeRefractionMapping$1 = 302;
  const EquirectangularReflectionMapping$1 = 303;
  const EquirectangularRefractionMapping$1 = 304;
  const CubeUVReflectionMapping$1 = 306;
  const RepeatWrapping$1 = 1000;
  const ClampToEdgeWrapping$1 = 1001;
  const MirroredRepeatWrapping$1 = 1002;
  const NearestFilter$1 = 1003;
  const NearestMipmapNearestFilter$1 = 1004;
  const NearestMipmapLinearFilter$1 = 1005;
  const LinearFilter$1 = 1006;
  const LinearMipmapNearestFilter$1 = 1007;
  const LinearMipmapLinearFilter$1 = 1008;
  const UnsignedByteType$1 = 1009;
  const ByteType$1 = 1010;
  const ShortType$1 = 1011;
  const UnsignedShortType$1 = 1012;
  const IntType$1 = 1013;
  const UnsignedIntType$1 = 1014;
  const FloatType$1 = 1015;
  const HalfFloatType$1 = 1016;
  const UnsignedShort4444Type$1 = 1017;
  const UnsignedShort5551Type$1 = 1018;
  const UnsignedInt248Type$1 = 1020;
  const UnsignedInt5999Type$1 = 35902;
  const AlphaFormat$1 = 1021;
  const RGBFormat$1 = 1022;
  const RGBAFormat$1 = 1023;
  const LuminanceFormat$1 = 1024;
  const LuminanceAlphaFormat$1 = 1025;
  const DepthFormat$1 = 1026;
  const DepthStencilFormat$1 = 1027;
  const RedFormat$1 = 1028;
  const RedIntegerFormat$1 = 1029;
  const RGFormat$1 = 1030;
  const RGIntegerFormat$1 = 1031;
  const RGBAIntegerFormat$1 = 1033;

  const RGB_S3TC_DXT1_Format$1 = 33776;
  const RGBA_S3TC_DXT1_Format$1 = 33777;
  const RGBA_S3TC_DXT3_Format$1 = 33778;
  const RGBA_S3TC_DXT5_Format$1 = 33779;
  const RGB_PVRTC_4BPPV1_Format$1 = 35840;
  const RGB_PVRTC_2BPPV1_Format$1 = 35841;
  const RGBA_PVRTC_4BPPV1_Format$1 = 35842;
  const RGBA_PVRTC_2BPPV1_Format$1 = 35843;
  const RGB_ETC1_Format$1 = 36196;
  const RGB_ETC2_Format$1 = 37492;
  const RGBA_ETC2_EAC_Format$1 = 37496;
  const RGBA_ASTC_4x4_Format$1 = 37808;
  const RGBA_ASTC_5x4_Format$1 = 37809;
  const RGBA_ASTC_5x5_Format$1 = 37810;
  const RGBA_ASTC_6x5_Format$1 = 37811;
  const RGBA_ASTC_6x6_Format$1 = 37812;
  const RGBA_ASTC_8x5_Format$1 = 37813;
  const RGBA_ASTC_8x6_Format$1 = 37814;
  const RGBA_ASTC_8x8_Format$1 = 37815;
  const RGBA_ASTC_10x5_Format$1 = 37816;
  const RGBA_ASTC_10x6_Format$1 = 37817;
  const RGBA_ASTC_10x8_Format$1 = 37818;
  const RGBA_ASTC_10x10_Format$1 = 37819;
  const RGBA_ASTC_12x10_Format$1 = 37820;
  const RGBA_ASTC_12x12_Format$1 = 37821;
  const RGBA_BPTC_Format$1 = 36492;
  const RGB_BPTC_SIGNED_Format = 36494;
  const RGB_BPTC_UNSIGNED_Format = 36495;
  const RED_RGTC1_Format$1 = 36283;
  const SIGNED_RED_RGTC1_Format$1 = 36284;
  const RED_GREEN_RGTC2_Format$1 = 36285;
  const SIGNED_RED_GREEN_RGTC2_Format$1 = 36286;
  const BasicDepthPacking = 3200;
  const RGBADepthPacking = 3201;
  const TangentSpaceNormalMap$1 = 0;
  const ObjectSpaceNormalMap$1 = 1;

  // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
  const NoColorSpace$1 = '';
  const SRGBColorSpace$1 = 'srgb';
  const LinearSRGBColorSpace$1 = 'srgb-linear';

  const LinearTransfer$1 = 'linear';
  const SRGBTransfer$1 = 'srgb';
  const KeepStencilOp$1 = 7680;
  const AlwaysStencilFunc$1 = 519;

  const NeverCompare$1 = 512;
  const LessCompare$1 = 513;
  const EqualCompare$1 = 514;
  const LessEqualCompare$1 = 515;
  const GreaterCompare$1 = 516;
  const NotEqualCompare$1 = 517;
  const GreaterEqualCompare$1 = 518;
  const AlwaysCompare$1 = 519;

  const StaticDrawUsage$1 = 35044;
  const GLSL3 = '300 es';

  const WebGLCoordinateSystem$1 = 2000;
  const WebGPUCoordinateSystem$1 = 2001;

  /**
   * https://github.com/mrdoob/eventdispatcher.js/
   */

  let EventDispatcher$1 = class EventDispatcher {

  	addEventListener( type, listener ) {

  		if ( this._listeners === undefined ) this._listeners = {};

  		const listeners = this._listeners;

  		if ( listeners[ type ] === undefined ) {

  			listeners[ type ] = [];

  		}

  		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

  			listeners[ type ].push( listener );

  		}

  	}

  	hasEventListener( type, listener ) {

  		if ( this._listeners === undefined ) return false;

  		const listeners = this._listeners;

  		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

  	}

  	removeEventListener( type, listener ) {

  		if ( this._listeners === undefined ) return;

  		const listeners = this._listeners;
  		const listenerArray = listeners[ type ];

  		if ( listenerArray !== undefined ) {

  			const index = listenerArray.indexOf( listener );

  			if ( index !== - 1 ) {

  				listenerArray.splice( index, 1 );

  			}

  		}

  	}

  	dispatchEvent( event ) {

  		if ( this._listeners === undefined ) return;

  		const listeners = this._listeners;
  		const listenerArray = listeners[ event.type ];

  		if ( listenerArray !== undefined ) {

  			event.target = this;

  			// Make a copy, in case listeners are removed while iterating.
  			const array = listenerArray.slice( 0 );

  			for ( let i = 0, l = array.length; i < l; i ++ ) {

  				array[ i ].call( this, event );

  			}

  			event.target = null;

  		}

  	}

  };

  const _lut$1 = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

  let _seed$1 = 1234567;


  const DEG2RAD$1 = Math.PI / 180;
  const RAD2DEG$1 = 180 / Math.PI;

  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
  function generateUUID$1() {

  	const d0 = Math.random() * 0xffffffff | 0;
  	const d1 = Math.random() * 0xffffffff | 0;
  	const d2 = Math.random() * 0xffffffff | 0;
  	const d3 = Math.random() * 0xffffffff | 0;
  	const uuid = _lut$1[ d0 & 0xff ] + _lut$1[ d0 >> 8 & 0xff ] + _lut$1[ d0 >> 16 & 0xff ] + _lut$1[ d0 >> 24 & 0xff ] + '-' +
  			_lut$1[ d1 & 0xff ] + _lut$1[ d1 >> 8 & 0xff ] + '-' + _lut$1[ d1 >> 16 & 0x0f | 0x40 ] + _lut$1[ d1 >> 24 & 0xff ] + '-' +
  			_lut$1[ d2 & 0x3f | 0x80 ] + _lut$1[ d2 >> 8 & 0xff ] + '-' + _lut$1[ d2 >> 16 & 0xff ] + _lut$1[ d2 >> 24 & 0xff ] +
  			_lut$1[ d3 & 0xff ] + _lut$1[ d3 >> 8 & 0xff ] + _lut$1[ d3 >> 16 & 0xff ] + _lut$1[ d3 >> 24 & 0xff ];

  	// .toLowerCase() here flattens concatenated strings to save heap memory space.
  	return uuid.toLowerCase();

  }

  function clamp$2( value, min, max ) {

  	return Math.max( min, Math.min( max, value ) );

  }

  // compute euclidean modulo of m % n
  // https://en.wikipedia.org/wiki/Modulo_operation
  function euclideanModulo$1( n, m ) {

  	return ( ( n % m ) + m ) % m;

  }

  // Linear mapping from range <a1, a2> to range <b1, b2>
  function mapLinear$1( x, a1, a2, b1, b2 ) {

  	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  }

  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
  function inverseLerp$1( x, y, value ) {

  	if ( x !== y ) {

  		return ( value - x ) / ( y - x );

  	} else {

  		return 0;

  	}

  }

  // https://en.wikipedia.org/wiki/Linear_interpolation
  function lerp$1( x, y, t ) {

  	return ( 1 - t ) * x + t * y;

  }

  // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
  function damp$1( x, y, lambda, dt ) {

  	return lerp$1( x, y, 1 - Math.exp( - lambda * dt ) );

  }

  // https://www.desmos.com/calculator/vcsjnyz7x4
  function pingpong$1( x, length = 1 ) {

  	return length - Math.abs( euclideanModulo$1( x, length * 2 ) - length );

  }

  // http://en.wikipedia.org/wiki/Smoothstep
  function smoothstep$2( x, min, max ) {

  	if ( x <= min ) return 0;
  	if ( x >= max ) return 1;

  	x = ( x - min ) / ( max - min );

  	return x * x * ( 3 - 2 * x );

  }

  function smootherstep$1( x, min, max ) {

  	if ( x <= min ) return 0;
  	if ( x >= max ) return 1;

  	x = ( x - min ) / ( max - min );

  	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

  }

  // Random integer from <low, high> interval
  function randInt$1( low, high ) {

  	return low + Math.floor( Math.random() * ( high - low + 1 ) );

  }

  // Random float from <low, high> interval
  function randFloat$1( low, high ) {

  	return low + Math.random() * ( high - low );

  }

  // Random float from <-range/2, range/2> interval
  function randFloatSpread$1( range ) {

  	return range * ( 0.5 - Math.random() );

  }

  // Deterministic pseudo-random float in the interval [ 0, 1 ]
  function seededRandom$1( s ) {

  	if ( s !== undefined ) _seed$1 = s;

  	// Mulberry32 generator

  	let t = _seed$1 += 0x6D2B79F5;

  	t = Math.imul( t ^ t >>> 15, t | 1 );

  	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

  	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

  }

  function degToRad$1( degrees ) {

  	return degrees * DEG2RAD$1;

  }

  function radToDeg$1( radians ) {

  	return radians * RAD2DEG$1;

  }

  function isPowerOfTwo$1( value ) {

  	return ( value & ( value - 1 ) ) === 0 && value !== 0;

  }

  function ceilPowerOfTwo$1( value ) {

  	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

  }

  function floorPowerOfTwo$1( value ) {

  	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

  }

  function setQuaternionFromProperEuler$1( q, a, b, c, order ) {

  	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

  	// rotations are applied to the axes in the order specified by 'order'
  	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
  	// angles are in radians

  	const cos = Math.cos;
  	const sin = Math.sin;

  	const c2 = cos( b / 2 );
  	const s2 = sin( b / 2 );

  	const c13 = cos( ( a + c ) / 2 );
  	const s13 = sin( ( a + c ) / 2 );

  	const c1_3 = cos( ( a - c ) / 2 );
  	const s1_3 = sin( ( a - c ) / 2 );

  	const c3_1 = cos( ( c - a ) / 2 );
  	const s3_1 = sin( ( c - a ) / 2 );

  	switch ( order ) {

  		case 'XYX':
  			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
  			break;

  		case 'YZY':
  			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
  			break;

  		case 'ZXZ':
  			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
  			break;

  		case 'XZX':
  			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
  			break;

  		case 'YXY':
  			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
  			break;

  		case 'ZYZ':
  			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
  			break;

  		default:
  			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

  	}

  }

  function denormalize$1( value, array ) {

  	switch ( array.constructor ) {

  		case Float32Array:

  			return value;

  		case Uint32Array:

  			return value / 4294967295.0;

  		case Uint16Array:

  			return value / 65535.0;

  		case Uint8Array:

  			return value / 255.0;

  		case Int32Array:

  			return Math.max( value / 2147483647.0, - 1.0 );

  		case Int16Array:

  			return Math.max( value / 32767.0, - 1.0 );

  		case Int8Array:

  			return Math.max( value / 127.0, - 1.0 );

  		default:

  			throw new Error( 'Invalid component type.' );

  	}

  }

  function normalize$2( value, array ) {

  	switch ( array.constructor ) {

  		case Float32Array:

  			return value;

  		case Uint32Array:

  			return Math.round( value * 4294967295.0 );

  		case Uint16Array:

  			return Math.round( value * 65535.0 );

  		case Uint8Array:

  			return Math.round( value * 255.0 );

  		case Int32Array:

  			return Math.round( value * 2147483647.0 );

  		case Int16Array:

  			return Math.round( value * 32767.0 );

  		case Int8Array:

  			return Math.round( value * 127.0 );

  		default:

  			throw new Error( 'Invalid component type.' );

  	}

  }

  const MathUtils$1 = {
  	DEG2RAD: DEG2RAD$1,
  	RAD2DEG: RAD2DEG$1,
  	generateUUID: generateUUID$1,
  	clamp: clamp$2,
  	euclideanModulo: euclideanModulo$1,
  	mapLinear: mapLinear$1,
  	inverseLerp: inverseLerp$1,
  	lerp: lerp$1,
  	damp: damp$1,
  	pingpong: pingpong$1,
  	smoothstep: smoothstep$2,
  	smootherstep: smootherstep$1,
  	randInt: randInt$1,
  	randFloat: randFloat$1,
  	randFloatSpread: randFloatSpread$1,
  	seededRandom: seededRandom$1,
  	degToRad: degToRad$1,
  	radToDeg: radToDeg$1,
  	isPowerOfTwo: isPowerOfTwo$1,
  	ceilPowerOfTwo: ceilPowerOfTwo$1,
  	floorPowerOfTwo: floorPowerOfTwo$1,
  	setQuaternionFromProperEuler: setQuaternionFromProperEuler$1,
  	normalize: normalize$2,
  	denormalize: denormalize$1
  };

  let Vector2$1 = class Vector2 {

  	constructor( x = 0, y = 0 ) {

  		Vector2.prototype.isVector2 = true;

  		this.x = x;
  		this.y = y;

  	}

  	get width() {

  		return this.x;

  	}

  	set width( value ) {

  		this.x = value;

  	}

  	get height() {

  		return this.y;

  	}

  	set height( value ) {

  		this.y = value;

  	}

  	set( x, y ) {

  		this.x = x;
  		this.y = y;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;

  		return this;

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	applyMatrix3( m ) {

  		const x = this.x, y = this.y;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

  		return this;

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y;

  	}

  	cross( v ) {

  		return this.x * v.y - this.y * v.x;

  	}

  	lengthSq() {

  		return this.x * this.x + this.y * this.y;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	angle() {

  		// computes the angle in radians with respect to the positive x-axis

  		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

  		return angle;

  	}

  	angleTo( v ) {

  		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) return Math.PI / 2;

  		const theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( clamp$2( theta, - 1, 1 ) );

  	}

  	distanceTo( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	}

  	distanceToSquared( v ) {

  		const dx = this.x - v.x, dy = this.y - v.y;
  		return dx * dx + dy * dy;

  	}

  	manhattanDistanceTo( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );

  		return this;

  	}

  	rotateAround( center, angle ) {

  		const c = Math.cos( angle ), s = Math.sin( angle );

  		const x = this.x - center.x;
  		const y = this.y - center.y;

  		this.x = x * c - y * s + center.x;
  		this.y = x * s + y * c + center.y;

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;

  	}

  };

  let Matrix3$1 = class Matrix3 {

  	constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		Matrix3.prototype.isMatrix3 = true;

  		this.elements = [

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		];

  		if ( n11 !== undefined ) {

  			this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

  		}

  	}

  	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		const te = this.elements;

  		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
  		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
  		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

  		return this;

  	}

  	identity() {

  		this.set(

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	copy( m ) {

  		const te = this.elements;
  		const me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
  		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
  		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

  		return this;

  	}

  	extractBasis( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrix3Column( this, 0 );
  		yAxis.setFromMatrix3Column( this, 1 );
  		zAxis.setFromMatrix3Column( this, 2 );

  		return this;

  	}

  	setFromMatrix4( m ) {

  		const me = m.elements;

  		this.set(

  			me[ 0 ], me[ 4 ], me[ 8 ],
  			me[ 1 ], me[ 5 ], me[ 9 ],
  			me[ 2 ], me[ 6 ], me[ 10 ]

  		);

  		return this;

  	}

  	multiply( m ) {

  		return this.multiplyMatrices( this, m );

  	}

  	premultiply( m ) {

  		return this.multiplyMatrices( m, this );

  	}

  	multiplyMatrices( a, b ) {

  		const ae = a.elements;
  		const be = b.elements;
  		const te = this.elements;

  		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
  		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
  		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

  		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
  		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
  		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
  		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
  		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
  		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
  		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
  		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
  		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

  		return this;

  	}

  	multiplyScalar( s ) {

  		const te = this.elements;

  		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
  		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
  		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

  		return this;

  	}

  	determinant() {

  		const te = this.elements;

  		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
  			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
  			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

  		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

  	}

  	invert() {

  		const te = this.elements,

  			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
  			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
  			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

  			t11 = n33 * n22 - n32 * n23,
  			t12 = n32 * n13 - n33 * n12,
  			t13 = n23 * n12 - n22 * n13,

  			det = n11 * t11 + n21 * t12 + n31 * t13;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		const detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
  		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

  		te[ 3 ] = t12 * detInv;
  		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
  		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

  		te[ 6 ] = t13 * detInv;
  		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
  		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

  		return this;

  	}

  	transpose() {

  		let tmp;
  		const m = this.elements;

  		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
  		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
  		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

  		return this;

  	}

  	getNormalMatrix( matrix4 ) {

  		return this.setFromMatrix4( matrix4 ).invert().transpose();

  	}

  	transposeIntoArray( r ) {

  		const m = this.elements;

  		r[ 0 ] = m[ 0 ];
  		r[ 1 ] = m[ 3 ];
  		r[ 2 ] = m[ 6 ];
  		r[ 3 ] = m[ 1 ];
  		r[ 4 ] = m[ 4 ];
  		r[ 5 ] = m[ 7 ];
  		r[ 6 ] = m[ 2 ];
  		r[ 7 ] = m[ 5 ];
  		r[ 8 ] = m[ 8 ];

  		return this;

  	}

  	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

  		const c = Math.cos( rotation );
  		const s = Math.sin( rotation );

  		this.set(
  			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
  			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
  			0, 0, 1
  		);

  		return this;

  	}

  	//

  	scale( sx, sy ) {

  		this.premultiply( _m3$1.makeScale( sx, sy ) );

  		return this;

  	}

  	rotate( theta ) {

  		this.premultiply( _m3$1.makeRotation( - theta ) );

  		return this;

  	}

  	translate( tx, ty ) {

  		this.premultiply( _m3$1.makeTranslation( tx, ty ) );

  		return this;

  	}

  	// for 2D Transforms

  	makeTranslation( x, y ) {

  		if ( x.isVector2 ) {

  			this.set(

  				1, 0, x.x,
  				0, 1, x.y,
  				0, 0, 1

  			);

  		} else {

  			this.set(

  				1, 0, x,
  				0, 1, y,
  				0, 0, 1

  			);

  		}

  		return this;

  	}

  	makeRotation( theta ) {

  		// counterclockwise

  		const c = Math.cos( theta );
  		const s = Math.sin( theta );

  		this.set(

  			c, - s, 0,
  			s, c, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	makeScale( x, y ) {

  		this.set(

  			x, 0, 0,
  			0, y, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	//

  	equals( matrix ) {

  		const te = this.elements;
  		const me = matrix.elements;

  		for ( let i = 0; i < 9; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	}

  	fromArray( array, offset = 0 ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		const te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];

  		array[ offset + 3 ] = te[ 3 ];
  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];

  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];
  		array[ offset + 8 ] = te[ 8 ];

  		return array;

  	}

  	clone() {

  		return new this.constructor().fromArray( this.elements );

  	}

  };

  const _m3$1 = /*@__PURE__*/ new Matrix3$1();

  function arrayNeedsUint32$2( array ) {

  	// assumes larger values usually on last

  	for ( let i = array.length - 1; i >= 0; -- i ) {

  		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

  	}

  	return false;

  }

  function createElementNS$1( name ) {

  	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

  }

  function createCanvasElement$1() {

  	const canvas = createElementNS$1( 'canvas' );
  	canvas.style.display = 'block';
  	return canvas;

  }

  const _cache$3 = {};

  function warnOnce$1( message ) {

  	if ( message in _cache$3 ) return;

  	_cache$3[ message ] = true;

  	console.warn( message );

  }

  function probeAsync( gl, sync, interval ) {

  	return new Promise( function ( resolve, reject ) {

  		function probe() {

  			switch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {

  				case gl.WAIT_FAILED:
  					reject();
  					break;

  				case gl.TIMEOUT_EXPIRED:
  					setTimeout( probe, interval );
  					break;

  				default:
  					resolve();

  			}

  		}

  		setTimeout( probe, interval );

  	} );

  }

  function toNormalizedProjectionMatrix( projectionMatrix ) {

  	const m = projectionMatrix.elements;

  	// Convert [-1, 1] to [0, 1] projection matrix
  	m[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];
  	m[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];
  	m[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];
  	m[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];

  }

  function toReversedProjectionMatrix( projectionMatrix ) {

  	const m = projectionMatrix.elements;
  	const isPerspectiveMatrix = m[ 11 ] === - 1;

  	// Reverse [0, 1] projection matrix
  	if ( isPerspectiveMatrix ) {

  		m[ 10 ] = - m[ 10 ] - 1;
  		m[ 14 ] = - m[ 14 ];

  	} else {

  		m[ 10 ] = - m[ 10 ];
  		m[ 14 ] = - m[ 14 ] + 1;

  	}

  }

  const ColorManagement$1 = {

  	enabled: true,

  	workingColorSpace: LinearSRGBColorSpace$1,

  	/**
  	 * Implementations of supported color spaces.
  	 *
  	 * Required:
  	 *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
  	 *	- whitePoint: reference white [ x y ]
  	 *	- transfer: transfer function (pre-defined)
  	 *	- toXYZ: Matrix3 RGB to XYZ transform
  	 *	- fromXYZ: Matrix3 XYZ to RGB transform
  	 *	- luminanceCoefficients: RGB luminance coefficients
  	 *
  	 * Optional:
  	 *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
  	 *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
  	 *
  	 * Reference:
  	 * - https://www.russellcottrell.com/photo/matrixCalculator.htm
  	 */
  	spaces: {},

  	convert: function ( color, sourceColorSpace, targetColorSpace ) {

  		if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

  			return color;

  		}

  		if ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer$1 ) {

  			color.r = SRGBToLinear$1( color.r );
  			color.g = SRGBToLinear$1( color.g );
  			color.b = SRGBToLinear$1( color.b );

  		}

  		if ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {

  			color.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );
  			color.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );

  		}

  		if ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer$1 ) {

  			color.r = LinearToSRGB$1( color.r );
  			color.g = LinearToSRGB$1( color.g );
  			color.b = LinearToSRGB$1( color.b );

  		}

  		return color;

  	},

  	fromWorkingColorSpace: function ( color, targetColorSpace ) {

  		return this.convert( color, this.workingColorSpace, targetColorSpace );

  	},

  	toWorkingColorSpace: function ( color, sourceColorSpace ) {

  		return this.convert( color, sourceColorSpace, this.workingColorSpace );

  	},

  	getPrimaries: function ( colorSpace ) {

  		return this.spaces[ colorSpace ].primaries;

  	},

  	getTransfer: function ( colorSpace ) {

  		if ( colorSpace === NoColorSpace$1 ) return LinearTransfer$1;

  		return this.spaces[ colorSpace ].transfer;

  	},

  	getLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {

  		return target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );

  	},

  	define: function ( colorSpaces ) {

  		Object.assign( this.spaces, colorSpaces );

  	},

  	// Internal APIs

  	_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {

  		return targetMatrix
  			.copy( this.spaces[ sourceColorSpace ].toXYZ )
  			.multiply( this.spaces[ targetColorSpace ].fromXYZ );

  	},

  	_getDrawingBufferColorSpace: function ( colorSpace ) {

  		return this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;

  	},

  	_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {

  		return this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;

  	}

  };

  function SRGBToLinear$1( c ) {

  	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

  }

  function LinearToSRGB$1( c ) {

  	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

  }

  /******************************************************************************
   * sRGB definitions
   */

  const REC709_PRIMARIES$1 = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];
  const REC709_LUMINANCE_COEFFICIENTS$1 = [ 0.2126, 0.7152, 0.0722 ];
  const D65$1 = [ 0.3127, 0.3290 ];

  const LINEAR_REC709_TO_XYZ$1 = /*@__PURE__*/ new Matrix3$1().set(
  	0.4123908, 0.3575843, 0.1804808,
  	0.2126390, 0.7151687, 0.0721923,
  	0.0193308, 0.1191948, 0.9505322
  );

  const XYZ_TO_LINEAR_REC709$1 = /*@__PURE__*/ new Matrix3$1().set(
  	3.2409699, - 1.5373832, - 0.4986108,
  	- 0.9692436, 1.8759675, 0.0415551,
  	0.0556301, - 0.2039770, 1.0569715
  );

  ColorManagement$1.define( {

  	[ LinearSRGBColorSpace$1 ]: {
  		primaries: REC709_PRIMARIES$1,
  		whitePoint: D65$1,
  		transfer: LinearTransfer$1,
  		toXYZ: LINEAR_REC709_TO_XYZ$1,
  		fromXYZ: XYZ_TO_LINEAR_REC709$1,
  		luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS$1,
  		workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace$1 },
  		outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace$1 }
  	},

  	[ SRGBColorSpace$1 ]: {
  		primaries: REC709_PRIMARIES$1,
  		whitePoint: D65$1,
  		transfer: SRGBTransfer$1,
  		toXYZ: LINEAR_REC709_TO_XYZ$1,
  		fromXYZ: XYZ_TO_LINEAR_REC709$1,
  		luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS$1,
  		outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace$1 }
  	},

  } );

  let _canvas$1;

  let ImageUtils$1 = class ImageUtils {

  	static getDataURL( image ) {

  		if ( /^data:/i.test( image.src ) ) {

  			return image.src;

  		}

  		if ( typeof HTMLCanvasElement === 'undefined' ) {

  			return image.src;

  		}

  		let canvas;

  		if ( image instanceof HTMLCanvasElement ) {

  			canvas = image;

  		} else {

  			if ( _canvas$1 === undefined ) _canvas$1 = createElementNS$1( 'canvas' );

  			_canvas$1.width = image.width;
  			_canvas$1.height = image.height;

  			const context = _canvas$1.getContext( '2d' );

  			if ( image instanceof ImageData ) {

  				context.putImageData( image, 0, 0 );

  			} else {

  				context.drawImage( image, 0, 0, image.width, image.height );

  			}

  			canvas = _canvas$1;

  		}

  		if ( canvas.width > 2048 || canvas.height > 2048 ) {

  			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

  			return canvas.toDataURL( 'image/jpeg', 0.6 );

  		} else {

  			return canvas.toDataURL( 'image/png' );

  		}

  	}

  	static sRGBToLinear( image ) {

  		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  			const canvas = createElementNS$1( 'canvas' );

  			canvas.width = image.width;
  			canvas.height = image.height;

  			const context = canvas.getContext( '2d' );
  			context.drawImage( image, 0, 0, image.width, image.height );

  			const imageData = context.getImageData( 0, 0, image.width, image.height );
  			const data = imageData.data;

  			for ( let i = 0; i < data.length; i ++ ) {

  				data[ i ] = SRGBToLinear$1( data[ i ] / 255 ) * 255;

  			}

  			context.putImageData( imageData, 0, 0 );

  			return canvas;

  		} else if ( image.data ) {

  			const data = image.data.slice( 0 );

  			for ( let i = 0; i < data.length; i ++ ) {

  				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

  					data[ i ] = Math.floor( SRGBToLinear$1( data[ i ] / 255 ) * 255 );

  				} else {

  					// assuming float

  					data[ i ] = SRGBToLinear$1( data[ i ] );

  				}

  			}

  			return {
  				data: data,
  				width: image.width,
  				height: image.height
  			};

  		} else {

  			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
  			return image;

  		}

  	}

  };

  let _sourceId$1 = 0;

  let Source$1 = class Source {

  	constructor( data = null ) {

  		this.isSource = true;

  		Object.defineProperty( this, 'id', { value: _sourceId$1 ++ } );

  		this.uuid = generateUUID$1();

  		this.data = data;
  		this.dataReady = true;

  		this.version = 0;

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

  			return meta.images[ this.uuid ];

  		}

  		const output = {
  			uuid: this.uuid,
  			url: ''
  		};

  		const data = this.data;

  		if ( data !== null ) {

  			let url;

  			if ( Array.isArray( data ) ) {

  				// cube texture

  				url = [];

  				for ( let i = 0, l = data.length; i < l; i ++ ) {

  					if ( data[ i ].isDataTexture ) {

  						url.push( serializeImage$1( data[ i ].image ) );

  					} else {

  						url.push( serializeImage$1( data[ i ] ) );

  					}

  				}

  			} else {

  				// texture

  				url = serializeImage$1( data );

  			}

  			output.url = url;

  		}

  		if ( ! isRootObject ) {

  			meta.images[ this.uuid ] = output;

  		}

  		return output;

  	}

  };

  function serializeImage$1( image ) {

  	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  		// default images

  		return ImageUtils$1.getDataURL( image );

  	} else {

  		if ( image.data ) {

  			// images of DataTexture

  			return {
  				data: Array.from( image.data ),
  				width: image.width,
  				height: image.height,
  				type: image.data.constructor.name
  			};

  		} else {

  			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
  			return {};

  		}

  	}

  }

  let _textureId$1 = 0;

  let Texture$1 = class Texture extends EventDispatcher$1 {

  	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping$1, wrapT = ClampToEdgeWrapping$1, magFilter = LinearFilter$1, minFilter = LinearMipmapLinearFilter$1, format = RGBAFormat$1, type = UnsignedByteType$1, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace$1 ) {

  		super();

  		this.isTexture = true;

  		Object.defineProperty( this, 'id', { value: _textureId$1 ++ } );

  		this.uuid = generateUUID$1();

  		this.name = '';

  		this.source = new Source$1( image );
  		this.mipmaps = [];

  		this.mapping = mapping;
  		this.channel = 0;

  		this.wrapS = wrapS;
  		this.wrapT = wrapT;

  		this.magFilter = magFilter;
  		this.minFilter = minFilter;

  		this.anisotropy = anisotropy;

  		this.format = format;
  		this.internalFormat = null;
  		this.type = type;

  		this.offset = new Vector2$1( 0, 0 );
  		this.repeat = new Vector2$1( 1, 1 );
  		this.center = new Vector2$1( 0, 0 );
  		this.rotation = 0;

  		this.matrixAutoUpdate = true;
  		this.matrix = new Matrix3$1();

  		this.generateMipmaps = true;
  		this.premultiplyAlpha = false;
  		this.flipY = true;
  		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  		this.colorSpace = colorSpace;

  		this.userData = {};

  		this.version = 0;
  		this.onUpdate = null;

  		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
  		this.pmremVersion = 0; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

  	}

  	get image() {

  		return this.source.data;

  	}

  	set image( value = null ) {

  		this.source.data = value;

  	}

  	updateMatrix() {

  		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.name = source.name;

  		this.source = source.source;
  		this.mipmaps = source.mipmaps.slice( 0 );

  		this.mapping = source.mapping;
  		this.channel = source.channel;

  		this.wrapS = source.wrapS;
  		this.wrapT = source.wrapT;

  		this.magFilter = source.magFilter;
  		this.minFilter = source.minFilter;

  		this.anisotropy = source.anisotropy;

  		this.format = source.format;
  		this.internalFormat = source.internalFormat;
  		this.type = source.type;

  		this.offset.copy( source.offset );
  		this.repeat.copy( source.repeat );
  		this.center.copy( source.center );
  		this.rotation = source.rotation;

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrix.copy( source.matrix );

  		this.generateMipmaps = source.generateMipmaps;
  		this.premultiplyAlpha = source.premultiplyAlpha;
  		this.flipY = source.flipY;
  		this.unpackAlignment = source.unpackAlignment;
  		this.colorSpace = source.colorSpace;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		this.needsUpdate = true;

  		return this;

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

  			return meta.textures[ this.uuid ];

  		}

  		const output = {

  			metadata: {
  				version: 4.6,
  				type: 'Texture',
  				generator: 'Texture.toJSON'
  			},

  			uuid: this.uuid,
  			name: this.name,

  			image: this.source.toJSON( meta ).uuid,

  			mapping: this.mapping,
  			channel: this.channel,

  			repeat: [ this.repeat.x, this.repeat.y ],
  			offset: [ this.offset.x, this.offset.y ],
  			center: [ this.center.x, this.center.y ],
  			rotation: this.rotation,

  			wrap: [ this.wrapS, this.wrapT ],

  			format: this.format,
  			internalFormat: this.internalFormat,
  			type: this.type,
  			colorSpace: this.colorSpace,

  			minFilter: this.minFilter,
  			magFilter: this.magFilter,
  			anisotropy: this.anisotropy,

  			flipY: this.flipY,

  			generateMipmaps: this.generateMipmaps,
  			premultiplyAlpha: this.premultiplyAlpha,
  			unpackAlignment: this.unpackAlignment

  		};

  		if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

  		if ( ! isRootObject ) {

  			meta.textures[ this.uuid ] = output;

  		}

  		return output;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	transformUv( uv ) {

  		if ( this.mapping !== UVMapping$1 ) return uv;

  		uv.applyMatrix3( this.matrix );

  		if ( uv.x < 0 || uv.x > 1 ) {

  			switch ( this.wrapS ) {

  				case RepeatWrapping$1:

  					uv.x = uv.x - Math.floor( uv.x );
  					break;

  				case ClampToEdgeWrapping$1:

  					uv.x = uv.x < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping$1:

  					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

  						uv.x = Math.ceil( uv.x ) - uv.x;

  					} else {

  						uv.x = uv.x - Math.floor( uv.x );

  					}

  					break;

  			}

  		}

  		if ( uv.y < 0 || uv.y > 1 ) {

  			switch ( this.wrapT ) {

  				case RepeatWrapping$1:

  					uv.y = uv.y - Math.floor( uv.y );
  					break;

  				case ClampToEdgeWrapping$1:

  					uv.y = uv.y < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping$1:

  					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

  						uv.y = Math.ceil( uv.y ) - uv.y;

  					} else {

  						uv.y = uv.y - Math.floor( uv.y );

  					}

  					break;

  			}

  		}

  		if ( this.flipY ) {

  			uv.y = 1 - uv.y;

  		}

  		return uv;

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) {

  			this.version ++;
  			this.source.needsUpdate = true;

  		}

  	}

  	set needsPMREMUpdate( value ) {

  		if ( value === true ) {

  			this.pmremVersion ++;

  		}

  	}

  };

  Texture$1.DEFAULT_IMAGE = null;
  Texture$1.DEFAULT_MAPPING = UVMapping$1;
  Texture$1.DEFAULT_ANISOTROPY = 1;

  let Vector4$1 = class Vector4 {

  	constructor( x = 0, y = 0, z = 0, w = 1 ) {

  		Vector4.prototype.isVector4 = true;

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  	}

  	get width() {

  		return this.z;

  	}

  	set width( value ) {

  		this.z = value;

  	}

  	get height() {

  		return this.w;

  	}

  	set height( value ) {

  		this.w = value;

  	}

  	set( x, y, z, w ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;
  		this.w = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setZ( z ) {

  		this.z = z;

  		return this;

  	}

  	setW( w ) {

  		this.w = w;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			case 3: this.w = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			case 3: return this.w;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y, this.z, this.w );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;
  		this.w = ( v.w !== undefined ) ? v.w : 1;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;
  		this.w += v.w;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;
  		this.w += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;
  		this.w = a.w + b.w;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;
  		this.w += v.w * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;
  		this.w -= v.w;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;
  		this.w -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;
  		this.w = a.w - b.w;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;
  		this.w *= v.w;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;
  		this.w *= scalar;

  		return this;

  	}

  	applyMatrix4( m ) {

  		const x = this.x, y = this.y, z = this.z, w = this.w;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
  		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

  		return this;

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;
  		this.w /= v.w;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	setAxisAngleFromQuaternion( q ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

  		// q is assumed to be normalized

  		this.w = 2 * Math.acos( q.w );

  		const s = Math.sqrt( 1 - q.w * q.w );

  		if ( s < 0.0001 ) {

  			this.x = 1;
  			this.y = 0;
  			this.z = 0;

  		} else {

  			this.x = q.x / s;
  			this.y = q.y / s;
  			this.z = q.z / s;

  		}

  		return this;

  	}

  	setAxisAngleFromRotationMatrix( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		let angle, x, y, z; // variables for result
  		const epsilon = 0.01,		// margin to allow for rounding errors
  			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

  			te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
  		     ( Math.abs( m13 - m31 ) < epsilon ) &&
  		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

  			// singularity found
  			// first check for identity matrix which must have +1 for all terms
  			// in leading diagonal and zero in other terms

  			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
  			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
  			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
  			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

  				// this singularity is identity matrix so angle = 0

  				this.set( 1, 0, 0, 0 );

  				return this; // zero angle, arbitrary axis

  			}

  			// otherwise this singularity is angle = 180

  			angle = Math.PI;

  			const xx = ( m11 + 1 ) / 2;
  			const yy = ( m22 + 1 ) / 2;
  			const zz = ( m33 + 1 ) / 2;
  			const xy = ( m12 + m21 ) / 4;
  			const xz = ( m13 + m31 ) / 4;
  			const yz = ( m23 + m32 ) / 4;

  			if ( ( xx > yy ) && ( xx > zz ) ) {

  				// m11 is the largest diagonal term

  				if ( xx < epsilon ) {

  					x = 0;
  					y = 0.707106781;
  					z = 0.707106781;

  				} else {

  					x = Math.sqrt( xx );
  					y = xy / x;
  					z = xz / x;

  				}

  			} else if ( yy > zz ) {

  				// m22 is the largest diagonal term

  				if ( yy < epsilon ) {

  					x = 0.707106781;
  					y = 0;
  					z = 0.707106781;

  				} else {

  					y = Math.sqrt( yy );
  					x = xy / y;
  					z = yz / y;

  				}

  			} else {

  				// m33 is the largest diagonal term so base result on this

  				if ( zz < epsilon ) {

  					x = 0.707106781;
  					y = 0.707106781;
  					z = 0;

  				} else {

  					z = Math.sqrt( zz );
  					x = xz / z;
  					y = yz / z;

  				}

  			}

  			this.set( x, y, z, angle );

  			return this; // return 180 deg rotation

  		}

  		// as we have reached here there are no singularities so we can handle normally

  		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
  			( m13 - m31 ) * ( m13 - m31 ) +
  			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

  		if ( Math.abs( s ) < 0.001 ) s = 1;

  		// prevent divide by zero, should not happen if matrix is orthogonal and should be
  		// caught by singularity test above, but I've left it in just in case

  		this.x = ( m32 - m23 ) / s;
  		this.y = ( m13 - m31 ) / s;
  		this.z = ( m21 - m12 ) / s;
  		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

  		return this;

  	}

  	setFromMatrixPosition( m ) {

  		const e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];
  		this.w = e[ 15 ];

  		return this;

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );
  		this.w = Math.min( this.w, v.w );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );
  		this.w = Math.max( this.w, v.w );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
  		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
  		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );
  		this.w = Math.floor( this.w );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );
  		this.w = Math.ceil( this.w );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );
  		this.w = Math.round( this.w );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );
  		this.z = Math.trunc( this.z );
  		this.w = Math.trunc( this.w );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;
  		this.w = - this.w;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  	}

  	lengthSq() {

  		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;
  		this.w += ( v.w - this.w ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;
  		this.w = v1.w + ( v2.w - v1.w ) * alpha;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];
  		this.w = array[ offset + 3 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;
  		array[ offset + 3 ] = this.w;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );
  		this.w = attribute.getW( index );

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();
  		this.w = Math.random();

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;
  		yield this.z;
  		yield this.w;

  	}

  };

  /*
   In options, we can specify:
   * Texture parameters for an auto-generated target texture
   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
  */
  let RenderTarget$1 = class RenderTarget extends EventDispatcher$1 {

  	constructor( width = 1, height = 1, options = {} ) {

  		super();

  		this.isRenderTarget = true;

  		this.width = width;
  		this.height = height;
  		this.depth = 1;

  		this.scissor = new Vector4$1( 0, 0, width, height );
  		this.scissorTest = false;

  		this.viewport = new Vector4$1( 0, 0, width, height );

  		const image = { width: width, height: height, depth: 1 };

  		options = Object.assign( {
  			generateMipmaps: false,
  			internalFormat: null,
  			minFilter: LinearFilter$1,
  			depthBuffer: true,
  			stencilBuffer: false,
  			resolveDepthBuffer: true,
  			resolveStencilBuffer: true,
  			depthTexture: null,
  			samples: 0,
  			count: 1
  		}, options );

  		const texture = new Texture$1( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

  		texture.flipY = false;
  		texture.generateMipmaps = options.generateMipmaps;
  		texture.internalFormat = options.internalFormat;

  		this.textures = [];

  		const count = options.count;
  		for ( let i = 0; i < count; i ++ ) {

  			this.textures[ i ] = texture.clone();
  			this.textures[ i ].isRenderTargetTexture = true;

  		}

  		this.depthBuffer = options.depthBuffer;
  		this.stencilBuffer = options.stencilBuffer;

  		this.resolveDepthBuffer = options.resolveDepthBuffer;
  		this.resolveStencilBuffer = options.resolveStencilBuffer;

  		this.depthTexture = options.depthTexture;

  		this.samples = options.samples;

  	}

  	get texture() {

  		return this.textures[ 0 ];

  	}

  	set texture( value ) {

  		this.textures[ 0 ] = value;

  	}

  	setSize( width, height, depth = 1 ) {

  		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

  			this.width = width;
  			this.height = height;
  			this.depth = depth;

  			for ( let i = 0, il = this.textures.length; i < il; i ++ ) {

  				this.textures[ i ].image.width = width;
  				this.textures[ i ].image.height = height;
  				this.textures[ i ].image.depth = depth;

  			}

  			this.dispose();

  		}

  		this.viewport.set( 0, 0, width, height );
  		this.scissor.set( 0, 0, width, height );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.width = source.width;
  		this.height = source.height;
  		this.depth = source.depth;

  		this.scissor.copy( source.scissor );
  		this.scissorTest = source.scissorTest;

  		this.viewport.copy( source.viewport );

  		this.textures.length = 0;

  		for ( let i = 0, il = source.textures.length; i < il; i ++ ) {

  			this.textures[ i ] = source.textures[ i ].clone();
  			this.textures[ i ].isRenderTargetTexture = true;

  		}

  		// ensure image object is not shared, see #20328

  		const image = Object.assign( {}, source.texture.image );
  		this.texture.source = new Source$1( image );

  		this.depthBuffer = source.depthBuffer;
  		this.stencilBuffer = source.stencilBuffer;

  		this.resolveDepthBuffer = source.resolveDepthBuffer;
  		this.resolveStencilBuffer = source.resolveStencilBuffer;

  		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

  		this.samples = source.samples;

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  };

  let WebGLRenderTarget$1 = class WebGLRenderTarget extends RenderTarget$1 {

  	constructor( width = 1, height = 1, options = {} ) {

  		super( width, height, options );

  		this.isWebGLRenderTarget = true;

  	}

  };

  let DataArrayTexture$1 = class DataArrayTexture extends Texture$1 {

  	constructor( data = null, width = 1, height = 1, depth = 1 ) {

  		super( null );

  		this.isDataArrayTexture = true;

  		this.image = { data, width, height, depth };

  		this.magFilter = NearestFilter$1;
  		this.minFilter = NearestFilter$1;

  		this.wrapR = ClampToEdgeWrapping$1;

  		this.generateMipmaps = false;
  		this.flipY = false;
  		this.unpackAlignment = 1;

  		this.layerUpdates = new Set();

  	}

  	addLayerUpdate( layerIndex ) {

  		this.layerUpdates.add( layerIndex );

  	}

  	clearLayerUpdates() {

  		this.layerUpdates.clear();

  	}

  };

  class Data3DTexture extends Texture$1 {

  	constructor( data = null, width = 1, height = 1, depth = 1 ) {

  		// We're going to add .setXXX() methods for setting properties later.
  		// Users can still set in DataTexture3D directly.
  		//
  		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
  		// 	texture.anisotropy = 16;
  		//
  		// See #14839

  		super( null );

  		this.isData3DTexture = true;

  		this.image = { data, width, height, depth };

  		this.magFilter = NearestFilter$1;
  		this.minFilter = NearestFilter$1;

  		this.wrapR = ClampToEdgeWrapping$1;

  		this.generateMipmaps = false;
  		this.flipY = false;
  		this.unpackAlignment = 1;

  	}

  }

  let Quaternion$1 = class Quaternion {

  	constructor( x = 0, y = 0, z = 0, w = 1 ) {

  		this.isQuaternion = true;

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  	}

  	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

  		// fuzz-free, array-based Quaternion SLERP operation

  		let x0 = src0[ srcOffset0 + 0 ],
  			y0 = src0[ srcOffset0 + 1 ],
  			z0 = src0[ srcOffset0 + 2 ],
  			w0 = src0[ srcOffset0 + 3 ];

  		const x1 = src1[ srcOffset1 + 0 ],
  			y1 = src1[ srcOffset1 + 1 ],
  			z1 = src1[ srcOffset1 + 2 ],
  			w1 = src1[ srcOffset1 + 3 ];

  		if ( t === 0 ) {

  			dst[ dstOffset + 0 ] = x0;
  			dst[ dstOffset + 1 ] = y0;
  			dst[ dstOffset + 2 ] = z0;
  			dst[ dstOffset + 3 ] = w0;
  			return;

  		}

  		if ( t === 1 ) {

  			dst[ dstOffset + 0 ] = x1;
  			dst[ dstOffset + 1 ] = y1;
  			dst[ dstOffset + 2 ] = z1;
  			dst[ dstOffset + 3 ] = w1;
  			return;

  		}

  		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

  			let s = 1 - t;
  			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
  				dir = ( cos >= 0 ? 1 : - 1 ),
  				sqrSin = 1 - cos * cos;

  			// Skip the Slerp for tiny steps to avoid numeric problems:
  			if ( sqrSin > Number.EPSILON ) {

  				const sin = Math.sqrt( sqrSin ),
  					len = Math.atan2( sin, cos * dir );

  				s = Math.sin( s * len ) / sin;
  				t = Math.sin( t * len ) / sin;

  			}

  			const tDir = t * dir;

  			x0 = x0 * s + x1 * tDir;
  			y0 = y0 * s + y1 * tDir;
  			z0 = z0 * s + z1 * tDir;
  			w0 = w0 * s + w1 * tDir;

  			// Normalize in case we just did a lerp:
  			if ( s === 1 - t ) {

  				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

  				x0 *= f;
  				y0 *= f;
  				z0 *= f;
  				w0 *= f;

  			}

  		}

  		dst[ dstOffset ] = x0;
  		dst[ dstOffset + 1 ] = y0;
  		dst[ dstOffset + 2 ] = z0;
  		dst[ dstOffset + 3 ] = w0;

  	}

  	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

  		const x0 = src0[ srcOffset0 ];
  		const y0 = src0[ srcOffset0 + 1 ];
  		const z0 = src0[ srcOffset0 + 2 ];
  		const w0 = src0[ srcOffset0 + 3 ];

  		const x1 = src1[ srcOffset1 ];
  		const y1 = src1[ srcOffset1 + 1 ];
  		const z1 = src1[ srcOffset1 + 2 ];
  		const w1 = src1[ srcOffset1 + 3 ];

  		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
  		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
  		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
  		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

  		return dst;

  	}

  	get x() {

  		return this._x;

  	}

  	set x( value ) {

  		this._x = value;
  		this._onChangeCallback();

  	}

  	get y() {

  		return this._y;

  	}

  	set y( value ) {

  		this._y = value;
  		this._onChangeCallback();

  	}

  	get z() {

  		return this._z;

  	}

  	set z( value ) {

  		this._z = value;
  		this._onChangeCallback();

  	}

  	get w() {

  		return this._w;

  	}

  	set w( value ) {

  		this._w = value;
  		this._onChangeCallback();

  	}

  	set( x, y, z, w ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  		this._onChangeCallback();

  		return this;

  	}

  	clone() {

  		return new this.constructor( this._x, this._y, this._z, this._w );

  	}

  	copy( quaternion ) {

  		this._x = quaternion.x;
  		this._y = quaternion.y;
  		this._z = quaternion.z;
  		this._w = quaternion.w;

  		this._onChangeCallback();

  		return this;

  	}

  	setFromEuler( euler, update = true ) {

  		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

  		// http://www.mathworks.com/matlabcentral/fileexchange/
  		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
  		//	content/SpinCalc.m

  		const cos = Math.cos;
  		const sin = Math.sin;

  		const c1 = cos( x / 2 );
  		const c2 = cos( y / 2 );
  		const c3 = cos( z / 2 );

  		const s1 = sin( x / 2 );
  		const s2 = sin( y / 2 );
  		const s3 = sin( z / 2 );

  		switch ( order ) {

  			case 'XYZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'YXZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'ZXY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'ZYX':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'YZX':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'XZY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			default:
  				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

  		}

  		if ( update === true ) this._onChangeCallback();

  		return this;

  	}

  	setFromAxisAngle( axis, angle ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

  		// assumes axis is normalized

  		const halfAngle = angle / 2, s = Math.sin( halfAngle );

  		this._x = axis.x * s;
  		this._y = axis.y * s;
  		this._z = axis.z * s;
  		this._w = Math.cos( halfAngle );

  		this._onChangeCallback();

  		return this;

  	}

  	setFromRotationMatrix( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		const te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

  			trace = m11 + m22 + m33;

  		if ( trace > 0 ) {

  			const s = 0.5 / Math.sqrt( trace + 1.0 );

  			this._w = 0.25 / s;
  			this._x = ( m32 - m23 ) * s;
  			this._y = ( m13 - m31 ) * s;
  			this._z = ( m21 - m12 ) * s;

  		} else if ( m11 > m22 && m11 > m33 ) {

  			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

  			this._w = ( m32 - m23 ) / s;
  			this._x = 0.25 * s;
  			this._y = ( m12 + m21 ) / s;
  			this._z = ( m13 + m31 ) / s;

  		} else if ( m22 > m33 ) {

  			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

  			this._w = ( m13 - m31 ) / s;
  			this._x = ( m12 + m21 ) / s;
  			this._y = 0.25 * s;
  			this._z = ( m23 + m32 ) / s;

  		} else {

  			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

  			this._w = ( m21 - m12 ) / s;
  			this._x = ( m13 + m31 ) / s;
  			this._y = ( m23 + m32 ) / s;
  			this._z = 0.25 * s;

  		}

  		this._onChangeCallback();

  		return this;

  	}

  	setFromUnitVectors( vFrom, vTo ) {

  		// assumes direction vectors vFrom and vTo are normalized

  		let r = vFrom.dot( vTo ) + 1;

  		if ( r < Number.EPSILON ) {

  			// vFrom and vTo point in opposite directions

  			r = 0;

  			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

  				this._x = - vFrom.y;
  				this._y = vFrom.x;
  				this._z = 0;
  				this._w = r;

  			} else {

  				this._x = 0;
  				this._y = - vFrom.z;
  				this._z = vFrom.y;
  				this._w = r;

  			}

  		} else {

  			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

  			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
  			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
  			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
  			this._w = r;

  		}

  		return this.normalize();

  	}

  	angleTo( q ) {

  		return 2 * Math.acos( Math.abs( clamp$2( this.dot( q ), - 1, 1 ) ) );

  	}

  	rotateTowards( q, step ) {

  		const angle = this.angleTo( q );

  		if ( angle === 0 ) return this;

  		const t = Math.min( 1, step / angle );

  		this.slerp( q, t );

  		return this;

  	}

  	identity() {

  		return this.set( 0, 0, 0, 1 );

  	}

  	invert() {

  		// quaternion is assumed to have unit length

  		return this.conjugate();

  	}

  	conjugate() {

  		this._x *= - 1;
  		this._y *= - 1;
  		this._z *= - 1;

  		this._onChangeCallback();

  		return this;

  	}

  	dot( v ) {

  		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

  	}

  	lengthSq() {

  		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  	}

  	length() {

  		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  	}

  	normalize() {

  		let l = this.length();

  		if ( l === 0 ) {

  			this._x = 0;
  			this._y = 0;
  			this._z = 0;
  			this._w = 1;

  		} else {

  			l = 1 / l;

  			this._x = this._x * l;
  			this._y = this._y * l;
  			this._z = this._z * l;
  			this._w = this._w * l;

  		}

  		this._onChangeCallback();

  		return this;

  	}

  	multiply( q ) {

  		return this.multiplyQuaternions( this, q );

  	}

  	premultiply( q ) {

  		return this.multiplyQuaternions( q, this );

  	}

  	multiplyQuaternions( a, b ) {

  		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

  		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
  		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

  		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

  		this._onChangeCallback();

  		return this;

  	}

  	slerp( qb, t ) {

  		if ( t === 0 ) return this;
  		if ( t === 1 ) return this.copy( qb );

  		const x = this._x, y = this._y, z = this._z, w = this._w;

  		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

  		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

  		if ( cosHalfTheta < 0 ) {

  			this._w = - qb._w;
  			this._x = - qb._x;
  			this._y = - qb._y;
  			this._z = - qb._z;

  			cosHalfTheta = - cosHalfTheta;

  		} else {

  			this.copy( qb );

  		}

  		if ( cosHalfTheta >= 1.0 ) {

  			this._w = w;
  			this._x = x;
  			this._y = y;
  			this._z = z;

  			return this;

  		}

  		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

  		if ( sqrSinHalfTheta <= Number.EPSILON ) {

  			const s = 1 - t;
  			this._w = s * w + t * this._w;
  			this._x = s * x + t * this._x;
  			this._y = s * y + t * this._y;
  			this._z = s * z + t * this._z;

  			this.normalize(); // normalize calls _onChangeCallback()

  			return this;

  		}

  		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
  		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
  		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
  			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

  		this._w = ( w * ratioA + this._w * ratioB );
  		this._x = ( x * ratioA + this._x * ratioB );
  		this._y = ( y * ratioA + this._y * ratioB );
  		this._z = ( z * ratioA + this._z * ratioB );

  		this._onChangeCallback();

  		return this;

  	}

  	slerpQuaternions( qa, qb, t ) {

  		return this.copy( qa ).slerp( qb, t );

  	}

  	random() {

  		// sets this quaternion to a uniform random unit quaternnion

  		// Ken Shoemake
  		// Uniform random rotations
  		// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.

  		const theta1 = 2 * Math.PI * Math.random();
  		const theta2 = 2 * Math.PI * Math.random();

  		const x0 = Math.random();
  		const r1 = Math.sqrt( 1 - x0 );
  		const r2 = Math.sqrt( x0 );

  		return this.set(
  			r1 * Math.sin( theta1 ),
  			r1 * Math.cos( theta1 ),
  			r2 * Math.sin( theta2 ),
  			r2 * Math.cos( theta2 ),
  		);

  	}

  	equals( quaternion ) {

  		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  	}

  	fromArray( array, offset = 0 ) {

  		this._x = array[ offset ];
  		this._y = array[ offset + 1 ];
  		this._z = array[ offset + 2 ];
  		this._w = array[ offset + 3 ];

  		this._onChangeCallback();

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._w;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this._x = attribute.getX( index );
  		this._y = attribute.getY( index );
  		this._z = attribute.getZ( index );
  		this._w = attribute.getW( index );

  		this._onChangeCallback();

  		return this;

  	}

  	toJSON() {

  		return this.toArray();

  	}

  	_onChange( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	}

  	_onChangeCallback() {}

  	*[ Symbol.iterator ]() {

  		yield this._x;
  		yield this._y;
  		yield this._z;
  		yield this._w;

  	}

  };

  let Vector3$1 = class Vector3 {

  	constructor( x = 0, y = 0, z = 0 ) {

  		Vector3.prototype.isVector3 = true;

  		this.x = x;
  		this.y = y;
  		this.z = z;

  	}

  	set( x, y, z ) {

  		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

  		this.x = x;
  		this.y = y;
  		this.z = z;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setZ( z ) {

  		this.z = z;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y, this.z );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;

  		return this;

  	}

  	multiplyVectors( a, b ) {

  		this.x = a.x * b.x;
  		this.y = a.y * b.y;
  		this.z = a.z * b.z;

  		return this;

  	}

  	applyEuler( euler ) {

  		return this.applyQuaternion( _quaternion$4$1.setFromEuler( euler ) );

  	}

  	applyAxisAngle( axis, angle ) {

  		return this.applyQuaternion( _quaternion$4$1.setFromAxisAngle( axis, angle ) );

  	}

  	applyMatrix3( m ) {

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
  		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

  		return this;

  	}

  	applyNormalMatrix( m ) {

  		return this.applyMatrix3( m ).normalize();

  	}

  	applyMatrix4( m ) {

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

  		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
  		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
  		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

  		return this;

  	}

  	applyQuaternion( q ) {

  		// quaternion q is assumed to have unit length

  		const vx = this.x, vy = this.y, vz = this.z;
  		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

  		// t = 2 * cross( q.xyz, v );
  		const tx = 2 * ( qy * vz - qz * vy );
  		const ty = 2 * ( qz * vx - qx * vz );
  		const tz = 2 * ( qx * vy - qy * vx );

  		// v + q.w * t + cross( q.xyz, t );
  		this.x = vx + qw * tx + qy * tz - qz * ty;
  		this.y = vy + qw * ty + qz * tx - qx * tz;
  		this.z = vz + qw * tz + qx * ty - qy * tx;

  		return this;

  	}

  	project( camera ) {

  		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

  	}

  	unproject( camera ) {

  		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

  	}

  	transformDirection( m ) {

  		// input: THREE.Matrix4 affine matrix
  		// vector interpreted as a direction

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

  		return this.normalize();

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );
  		this.z = Math.trunc( this.z );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z;

  	}

  	// TODO lengthSquared?

  	lengthSq() {

  		return this.x * this.x + this.y * this.y + this.z * this.z;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;

  		return this;

  	}

  	cross( v ) {

  		return this.crossVectors( this, v );

  	}

  	crossVectors( a, b ) {

  		const ax = a.x, ay = a.y, az = a.z;
  		const bx = b.x, by = b.y, bz = b.z;

  		this.x = ay * bz - az * by;
  		this.y = az * bx - ax * bz;
  		this.z = ax * by - ay * bx;

  		return this;

  	}

  	projectOnVector( v ) {

  		const denominator = v.lengthSq();

  		if ( denominator === 0 ) return this.set( 0, 0, 0 );

  		const scalar = v.dot( this ) / denominator;

  		return this.copy( v ).multiplyScalar( scalar );

  	}

  	projectOnPlane( planeNormal ) {

  		_vector$c$1.copy( this ).projectOnVector( planeNormal );

  		return this.sub( _vector$c$1 );

  	}

  	reflect( normal ) {

  		// reflect incident vector off plane orthogonal to normal
  		// normal is assumed to have unit length

  		return this.sub( _vector$c$1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

  	}

  	angleTo( v ) {

  		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) return Math.PI / 2;

  		const theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( clamp$2( theta, - 1, 1 ) );

  	}

  	distanceTo( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	}

  	distanceToSquared( v ) {

  		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

  		return dx * dx + dy * dy + dz * dz;

  	}

  	manhattanDistanceTo( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

  	}

  	setFromSpherical( s ) {

  		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

  	}

  	setFromSphericalCoords( radius, phi, theta ) {

  		const sinPhiRadius = Math.sin( phi ) * radius;

  		this.x = sinPhiRadius * Math.sin( theta );
  		this.y = Math.cos( phi ) * radius;
  		this.z = sinPhiRadius * Math.cos( theta );

  		return this;

  	}

  	setFromCylindrical( c ) {

  		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

  	}

  	setFromCylindricalCoords( radius, theta, y ) {

  		this.x = radius * Math.sin( theta );
  		this.y = y;
  		this.z = radius * Math.cos( theta );

  		return this;

  	}

  	setFromMatrixPosition( m ) {

  		const e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];

  		return this;

  	}

  	setFromMatrixScale( m ) {

  		const sx = this.setFromMatrixColumn( m, 0 ).length();
  		const sy = this.setFromMatrixColumn( m, 1 ).length();
  		const sz = this.setFromMatrixColumn( m, 2 ).length();

  		this.x = sx;
  		this.y = sy;
  		this.z = sz;

  		return this;

  	}

  	setFromMatrixColumn( m, index ) {

  		return this.fromArray( m.elements, index * 4 );

  	}

  	setFromMatrix3Column( m, index ) {

  		return this.fromArray( m.elements, index * 3 );

  	}

  	setFromEuler( e ) {

  		this.x = e._x;
  		this.y = e._y;
  		this.z = e._z;

  		return this;

  	}

  	setFromColor( c ) {

  		this.x = c.r;
  		this.y = c.g;
  		this.z = c.b;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();

  		return this;

  	}

  	randomDirection() {

  		// https://mathworld.wolfram.com/SpherePointPicking.html

  		const theta = Math.random() * Math.PI * 2;
  		const u = Math.random() * 2 - 1;
  		const c = Math.sqrt( 1 - u * u );

  		this.x = c * Math.cos( theta );
  		this.y = u;
  		this.z = c * Math.sin( theta );

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;
  		yield this.z;

  	}

  };

  const _vector$c$1 = /*@__PURE__*/ new Vector3$1();
  const _quaternion$4$1 = /*@__PURE__*/ new Quaternion$1();

  let Box3$1 = class Box3 {

  	constructor( min = new Vector3$1( + Infinity, + Infinity, + Infinity ), max = new Vector3$1( - Infinity, - Infinity, - Infinity ) ) {

  		this.isBox3 = true;

  		this.min = min;
  		this.max = max;

  	}

  	set( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	}

  	setFromArray( array ) {

  		this.makeEmpty();

  		for ( let i = 0, il = array.length; i < il; i += 3 ) {

  			this.expandByPoint( _vector$b$1.fromArray( array, i ) );

  		}

  		return this;

  	}

  	setFromBufferAttribute( attribute ) {

  		this.makeEmpty();

  		for ( let i = 0, il = attribute.count; i < il; i ++ ) {

  			this.expandByPoint( _vector$b$1.fromBufferAttribute( attribute, i ) );

  		}

  		return this;

  	}

  	setFromPoints( points ) {

  		this.makeEmpty();

  		for ( let i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	}

  	setFromCenterAndSize( center, size ) {

  		const halfSize = _vector$b$1.copy( size ).multiplyScalar( 0.5 );

  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	}

  	setFromObject( object, precise = false ) {

  		this.makeEmpty();

  		return this.expandByObject( object, precise );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	}

  	makeEmpty() {

  		this.min.x = this.min.y = this.min.z = + Infinity;
  		this.max.x = this.max.y = this.max.z = - Infinity;

  		return this;

  	}

  	isEmpty() {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  	}

  	getCenter( target ) {

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	}

  	getSize( target ) {

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

  	}

  	expandByPoint( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	}

  	expandByVector( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	}

  	expandByScalar( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	}

  	expandByObject( object, precise = false ) {

  		// Computes the world-axis-aligned bounding box of an object (including its children),
  		// accounting for both the object's, and children's, world transforms

  		object.updateWorldMatrix( false, false );

  		const geometry = object.geometry;

  		if ( geometry !== undefined ) {

  			const positionAttribute = geometry.getAttribute( 'position' );

  			// precise AABB computation based on vertex data requires at least a position attribute.
  			// instancing isn't supported so far and uses the normal (conservative) code path.

  			if ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {

  				for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

  					if ( object.isMesh === true ) {

  						object.getVertexPosition( i, _vector$b$1 );

  					} else {

  						_vector$b$1.fromBufferAttribute( positionAttribute, i );

  					}

  					_vector$b$1.applyMatrix4( object.matrixWorld );
  					this.expandByPoint( _vector$b$1 );

  				}

  			} else {

  				if ( object.boundingBox !== undefined ) {

  					// object-level bounding box

  					if ( object.boundingBox === null ) {

  						object.computeBoundingBox();

  					}

  					_box$4$1.copy( object.boundingBox );


  				} else {

  					// geometry-level bounding box

  					if ( geometry.boundingBox === null ) {

  						geometry.computeBoundingBox();

  					}

  					_box$4$1.copy( geometry.boundingBox );

  				}

  				_box$4$1.applyMatrix4( object.matrixWorld );

  				this.union( _box$4$1 );

  			}

  		}

  		const children = object.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			this.expandByObject( children[ i ], precise );

  		}

  		return this;

  	}

  	containsPoint( point ) {

  		return point.x >= this.min.x && point.x <= this.max.x &&
  			point.y >= this.min.y && point.y <= this.max.y &&
  			point.z >= this.min.z && point.z <= this.max.z;

  	}

  	containsBox( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y &&
  			this.min.z <= box.min.z && box.max.z <= this.max.z;

  	}

  	getParameter( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
  			( point.z - this.min.z ) / ( this.max.z - this.min.z )
  		);

  	}

  	intersectsBox( box ) {

  		// using 6 splitting planes to rule out intersections.
  		return box.max.x >= this.min.x && box.min.x <= this.max.x &&
  			box.max.y >= this.min.y && box.min.y <= this.max.y &&
  			box.max.z >= this.min.z && box.min.z <= this.max.z;

  	}

  	intersectsSphere( sphere ) {

  		// Find the point on the AABB closest to the sphere center.
  		this.clampPoint( sphere.center, _vector$b$1 );

  		// If that point is inside the sphere, the AABB and sphere intersect.
  		return _vector$b$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

  	}

  	intersectsPlane( plane ) {

  		// We compute the minimum and maximum dot product values. If those values
  		// are on the same side (back or front) of the plane, then there is no intersection.

  		let min, max;

  		if ( plane.normal.x > 0 ) {

  			min = plane.normal.x * this.min.x;
  			max = plane.normal.x * this.max.x;

  		} else {

  			min = plane.normal.x * this.max.x;
  			max = plane.normal.x * this.min.x;

  		}

  		if ( plane.normal.y > 0 ) {

  			min += plane.normal.y * this.min.y;
  			max += plane.normal.y * this.max.y;

  		} else {

  			min += plane.normal.y * this.max.y;
  			max += plane.normal.y * this.min.y;

  		}

  		if ( plane.normal.z > 0 ) {

  			min += plane.normal.z * this.min.z;
  			max += plane.normal.z * this.max.z;

  		} else {

  			min += plane.normal.z * this.max.z;
  			max += plane.normal.z * this.min.z;

  		}

  		return ( min <= - plane.constant && max >= - plane.constant );

  	}

  	intersectsTriangle( triangle ) {

  		if ( this.isEmpty() ) {

  			return false;

  		}

  		// compute box center and extents
  		this.getCenter( _center$1 );
  		_extents$1.subVectors( this.max, _center$1 );

  		// translate triangle to aabb origin
  		_v0$3.subVectors( triangle.a, _center$1 );
  		_v1$7$1.subVectors( triangle.b, _center$1 );
  		_v2$4$1.subVectors( triangle.c, _center$1 );

  		// compute edge vectors for triangle
  		_f0$1.subVectors( _v1$7$1, _v0$3 );
  		_f1$1.subVectors( _v2$4$1, _v1$7$1 );
  		_f2$1.subVectors( _v0$3, _v2$4$1 );

  		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
  		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
  		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
  		let axes = [
  			0, - _f0$1.z, _f0$1.y, 0, - _f1$1.z, _f1$1.y, 0, - _f2$1.z, _f2$1.y,
  			_f0$1.z, 0, - _f0$1.x, _f1$1.z, 0, - _f1$1.x, _f2$1.z, 0, - _f2$1.x,
  			- _f0$1.y, _f0$1.x, 0, - _f1$1.y, _f1$1.x, 0, - _f2$1.y, _f2$1.x, 0
  		];
  		if ( ! satForAxes$1( axes, _v0$3, _v1$7$1, _v2$4$1, _extents$1 ) ) {

  			return false;

  		}

  		// test 3 face normals from the aabb
  		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
  		if ( ! satForAxes$1( axes, _v0$3, _v1$7$1, _v2$4$1, _extents$1 ) ) {

  			return false;

  		}

  		// finally testing the face normal of the triangle
  		// use already existing triangle edge vectors here
  		_triangleNormal$1.crossVectors( _f0$1, _f1$1 );
  		axes = [ _triangleNormal$1.x, _triangleNormal$1.y, _triangleNormal$1.z ];

  		return satForAxes$1( axes, _v0$3, _v1$7$1, _v2$4$1, _extents$1 );

  	}

  	clampPoint( point, target ) {

  		return target.copy( point ).clamp( this.min, this.max );

  	}

  	distanceToPoint( point ) {

  		return this.clampPoint( point, _vector$b$1 ).distanceTo( point );

  	}

  	getBoundingSphere( target ) {

  		if ( this.isEmpty() ) {

  			target.makeEmpty();

  		} else {

  			this.getCenter( target.center );

  			target.radius = this.getSize( _vector$b$1 ).length() * 0.5;

  		}

  		return target;

  	}

  	intersect( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
  		if ( this.isEmpty() ) this.makeEmpty();

  		return this;

  	}

  	union( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	}

  	applyMatrix4( matrix ) {

  		// transform of empty box is an empty box.
  		if ( this.isEmpty() ) return this;

  		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
  		_points$1[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
  		_points$1[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
  		_points$1[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
  		_points$1[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
  		_points$1[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
  		_points$1[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
  		_points$1[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
  		_points$1[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

  		this.setFromPoints( _points$1 );

  		return this;

  	}

  	translate( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	}

  	equals( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  };

  const _points$1 = [
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1(),
  	/*@__PURE__*/ new Vector3$1()
  ];

  const _vector$b$1 = /*@__PURE__*/ new Vector3$1();

  const _box$4$1 = /*@__PURE__*/ new Box3$1();

  // triangle centered vertices

  const _v0$3 = /*@__PURE__*/ new Vector3$1();
  const _v1$7$1 = /*@__PURE__*/ new Vector3$1();
  const _v2$4$1 = /*@__PURE__*/ new Vector3$1();

  // triangle edge vectors

  const _f0$1 = /*@__PURE__*/ new Vector3$1();
  const _f1$1 = /*@__PURE__*/ new Vector3$1();
  const _f2$1 = /*@__PURE__*/ new Vector3$1();

  const _center$1 = /*@__PURE__*/ new Vector3$1();
  const _extents$1 = /*@__PURE__*/ new Vector3$1();
  const _triangleNormal$1 = /*@__PURE__*/ new Vector3$1();
  const _testAxis$1 = /*@__PURE__*/ new Vector3$1();

  function satForAxes$1( axes, v0, v1, v2, extents ) {

  	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

  		_testAxis$1.fromArray( axes, i );
  		// project the aabb onto the separating axis
  		const r = extents.x * Math.abs( _testAxis$1.x ) + extents.y * Math.abs( _testAxis$1.y ) + extents.z * Math.abs( _testAxis$1.z );
  		// project all 3 vertices of the triangle onto the separating axis
  		const p0 = v0.dot( _testAxis$1 );
  		const p1 = v1.dot( _testAxis$1 );
  		const p2 = v2.dot( _testAxis$1 );
  		// actual test, basically see if either of the most extreme of the triangle points intersects r
  		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

  			// points of the projected triangle are outside the projected half-length of the aabb
  			// the axis is separating and we can exit
  			return false;

  		}

  	}

  	return true;

  }

  const _box$3$1 = /*@__PURE__*/ new Box3$1();
  const _v1$6$1 = /*@__PURE__*/ new Vector3$1();
  const _v2$3$1 = /*@__PURE__*/ new Vector3$1();

  let Sphere$1 = class Sphere {

  	constructor( center = new Vector3$1(), radius = - 1 ) {

  		this.isSphere = true;

  		this.center = center;
  		this.radius = radius;

  	}

  	set( center, radius ) {

  		this.center.copy( center );
  		this.radius = radius;

  		return this;

  	}

  	setFromPoints( points, optionalCenter ) {

  		const center = this.center;

  		if ( optionalCenter !== undefined ) {

  			center.copy( optionalCenter );

  		} else {

  			_box$3$1.setFromPoints( points ).getCenter( center );

  		}

  		let maxRadiusSq = 0;

  		for ( let i = 0, il = points.length; i < il; i ++ ) {

  			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

  		}

  		this.radius = Math.sqrt( maxRadiusSq );

  		return this;

  	}

  	copy( sphere ) {

  		this.center.copy( sphere.center );
  		this.radius = sphere.radius;

  		return this;

  	}

  	isEmpty() {

  		return ( this.radius < 0 );

  	}

  	makeEmpty() {

  		this.center.set( 0, 0, 0 );
  		this.radius = - 1;

  		return this;

  	}

  	containsPoint( point ) {

  		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  	}

  	distanceToPoint( point ) {

  		return ( point.distanceTo( this.center ) - this.radius );

  	}

  	intersectsSphere( sphere ) {

  		const radiusSum = this.radius + sphere.radius;

  		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  	}

  	intersectsBox( box ) {

  		return box.intersectsSphere( this );

  	}

  	intersectsPlane( plane ) {

  		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

  	}

  	clampPoint( point, target ) {

  		const deltaLengthSq = this.center.distanceToSquared( point );

  		target.copy( point );

  		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

  			target.sub( this.center ).normalize();
  			target.multiplyScalar( this.radius ).add( this.center );

  		}

  		return target;

  	}

  	getBoundingBox( target ) {

  		if ( this.isEmpty() ) {

  			// Empty sphere produces empty bounding box
  			target.makeEmpty();
  			return target;

  		}

  		target.set( this.center, this.center );
  		target.expandByScalar( this.radius );

  		return target;

  	}

  	applyMatrix4( matrix ) {

  		this.center.applyMatrix4( matrix );
  		this.radius = this.radius * matrix.getMaxScaleOnAxis();

  		return this;

  	}

  	translate( offset ) {

  		this.center.add( offset );

  		return this;

  	}

  	expandByPoint( point ) {

  		if ( this.isEmpty() ) {

  			this.center.copy( point );

  			this.radius = 0;

  			return this;

  		}

  		_v1$6$1.subVectors( point, this.center );

  		const lengthSq = _v1$6$1.lengthSq();

  		if ( lengthSq > ( this.radius * this.radius ) ) {

  			// calculate the minimal sphere

  			const length = Math.sqrt( lengthSq );

  			const delta = ( length - this.radius ) * 0.5;

  			this.center.addScaledVector( _v1$6$1, delta / length );

  			this.radius += delta;

  		}

  		return this;

  	}

  	union( sphere ) {

  		if ( sphere.isEmpty() ) {

  			return this;

  		}

  		if ( this.isEmpty() ) {

  			this.copy( sphere );

  			return this;

  		}

  		if ( this.center.equals( sphere.center ) === true ) {

  			 this.radius = Math.max( this.radius, sphere.radius );

  		} else {

  			_v2$3$1.subVectors( sphere.center, this.center ).setLength( sphere.radius );

  			this.expandByPoint( _v1$6$1.copy( sphere.center ).add( _v2$3$1 ) );

  			this.expandByPoint( _v1$6$1.copy( sphere.center ).sub( _v2$3$1 ) );

  		}

  		return this;

  	}

  	equals( sphere ) {

  		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  };

  const _vector$a$1 = /*@__PURE__*/ new Vector3$1();
  const _segCenter$1 = /*@__PURE__*/ new Vector3$1();
  const _segDir$1 = /*@__PURE__*/ new Vector3$1();
  const _diff$2 = /*@__PURE__*/ new Vector3$1();

  const _edge1$1 = /*@__PURE__*/ new Vector3$1();
  const _edge2$1 = /*@__PURE__*/ new Vector3$1();
  const _normal$1 = /*@__PURE__*/ new Vector3$1();

  let Ray$1 = class Ray {

  	constructor( origin = new Vector3$1(), direction = new Vector3$1( 0, 0, - 1 ) ) {

  		this.origin = origin;
  		this.direction = direction;

  	}

  	set( origin, direction ) {

  		this.origin.copy( origin );
  		this.direction.copy( direction );

  		return this;

  	}

  	copy( ray ) {

  		this.origin.copy( ray.origin );
  		this.direction.copy( ray.direction );

  		return this;

  	}

  	at( t, target ) {

  		return target.copy( this.origin ).addScaledVector( this.direction, t );

  	}

  	lookAt( v ) {

  		this.direction.copy( v ).sub( this.origin ).normalize();

  		return this;

  	}

  	recast( t ) {

  		this.origin.copy( this.at( t, _vector$a$1 ) );

  		return this;

  	}

  	closestPointToPoint( point, target ) {

  		target.subVectors( point, this.origin );

  		const directionDistance = target.dot( this.direction );

  		if ( directionDistance < 0 ) {

  			return target.copy( this.origin );

  		}

  		return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

  	}

  	distanceToPoint( point ) {

  		return Math.sqrt( this.distanceSqToPoint( point ) );

  	}

  	distanceSqToPoint( point ) {

  		const directionDistance = _vector$a$1.subVectors( point, this.origin ).dot( this.direction );

  		// point behind the ray

  		if ( directionDistance < 0 ) {

  			return this.origin.distanceToSquared( point );

  		}

  		_vector$a$1.copy( this.origin ).addScaledVector( this.direction, directionDistance );

  		return _vector$a$1.distanceToSquared( point );

  	}

  	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

  		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
  		// It returns the min distance between the ray and the segment
  		// defined by v0 and v1
  		// It can also set two optional targets :
  		// - The closest point on the ray
  		// - The closest point on the segment

  		_segCenter$1.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
  		_segDir$1.copy( v1 ).sub( v0 ).normalize();
  		_diff$2.copy( this.origin ).sub( _segCenter$1 );

  		const segExtent = v0.distanceTo( v1 ) * 0.5;
  		const a01 = - this.direction.dot( _segDir$1 );
  		const b0 = _diff$2.dot( this.direction );
  		const b1 = - _diff$2.dot( _segDir$1 );
  		const c = _diff$2.lengthSq();
  		const det = Math.abs( 1 - a01 * a01 );
  		let s0, s1, sqrDist, extDet;

  		if ( det > 0 ) {

  			// The ray and segment are not parallel.

  			s0 = a01 * b1 - b0;
  			s1 = a01 * b0 - b1;
  			extDet = segExtent * det;

  			if ( s0 >= 0 ) {

  				if ( s1 >= - extDet ) {

  					if ( s1 <= extDet ) {

  						// region 0
  						// Minimum at interior points of ray and segment.

  						const invDet = 1 / det;
  						s0 *= invDet;
  						s1 *= invDet;
  						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

  					} else {

  						// region 1

  						s1 = segExtent;
  						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				} else {

  					// region 5

  					s1 = - segExtent;
  					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			} else {

  				if ( s1 <= - extDet ) {

  					// region 4

  					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				} else if ( s1 <= extDet ) {

  					// region 3

  					s0 = 0;
  					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

  				} else {

  					// region 2

  					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			}

  		} else {

  			// Ray and segment are parallel.

  			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
  			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  		}

  		if ( optionalPointOnRay ) {

  			optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

  		}

  		if ( optionalPointOnSegment ) {

  			optionalPointOnSegment.copy( _segCenter$1 ).addScaledVector( _segDir$1, s1 );

  		}

  		return sqrDist;

  	}

  	intersectSphere( sphere, target ) {

  		_vector$a$1.subVectors( sphere.center, this.origin );
  		const tca = _vector$a$1.dot( this.direction );
  		const d2 = _vector$a$1.dot( _vector$a$1 ) - tca * tca;
  		const radius2 = sphere.radius * sphere.radius;

  		if ( d2 > radius2 ) return null;

  		const thc = Math.sqrt( radius2 - d2 );

  		// t0 = first intersect point - entrance on front of sphere
  		const t0 = tca - thc;

  		// t1 = second intersect point - exit point on back of sphere
  		const t1 = tca + thc;

  		// test to see if t1 is behind the ray - if so, return null
  		if ( t1 < 0 ) return null;

  		// test to see if t0 is behind the ray:
  		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
  		// in order to always return an intersect point that is in front of the ray.
  		if ( t0 < 0 ) return this.at( t1, target );

  		// else t0 is in front of the ray, so return the first collision point scaled by t0
  		return this.at( t0, target );

  	}

  	intersectsSphere( sphere ) {

  		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

  	}

  	distanceToPlane( plane ) {

  		const denominator = plane.normal.dot( this.direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( plane.distanceToPoint( this.origin ) === 0 ) {

  				return 0;

  			}

  			// Null is preferable to undefined since undefined means.... it is undefined

  			return null;

  		}

  		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

  		// Return if the ray never intersects the plane

  		return t >= 0 ? t : null;

  	}

  	intersectPlane( plane, target ) {

  		const t = this.distanceToPlane( plane );

  		if ( t === null ) {

  			return null;

  		}

  		return this.at( t, target );

  	}

  	intersectsPlane( plane ) {

  		// check if the ray lies on the plane first

  		const distToPoint = plane.distanceToPoint( this.origin );

  		if ( distToPoint === 0 ) {

  			return true;

  		}

  		const denominator = plane.normal.dot( this.direction );

  		if ( denominator * distToPoint < 0 ) {

  			return true;

  		}

  		// ray origin is behind the plane (and is pointing behind it)

  		return false;

  	}

  	intersectBox( box, target ) {

  		let tmin, tmax, tymin, tymax, tzmin, tzmax;

  		const invdirx = 1 / this.direction.x,
  			invdiry = 1 / this.direction.y,
  			invdirz = 1 / this.direction.z;

  		const origin = this.origin;

  		if ( invdirx >= 0 ) {

  			tmin = ( box.min.x - origin.x ) * invdirx;
  			tmax = ( box.max.x - origin.x ) * invdirx;

  		} else {

  			tmin = ( box.max.x - origin.x ) * invdirx;
  			tmax = ( box.min.x - origin.x ) * invdirx;

  		}

  		if ( invdiry >= 0 ) {

  			tymin = ( box.min.y - origin.y ) * invdiry;
  			tymax = ( box.max.y - origin.y ) * invdiry;

  		} else {

  			tymin = ( box.max.y - origin.y ) * invdiry;
  			tymax = ( box.min.y - origin.y ) * invdiry;

  		}

  		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

  		if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

  		if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

  		if ( invdirz >= 0 ) {

  			tzmin = ( box.min.z - origin.z ) * invdirz;
  			tzmax = ( box.max.z - origin.z ) * invdirz;

  		} else {

  			tzmin = ( box.max.z - origin.z ) * invdirz;
  			tzmax = ( box.min.z - origin.z ) * invdirz;

  		}

  		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

  		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

  		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

  		//return point closest to the ray (positive side)

  		if ( tmax < 0 ) return null;

  		return this.at( tmin >= 0 ? tmin : tmax, target );

  	}

  	intersectsBox( box ) {

  		return this.intersectBox( box, _vector$a$1 ) !== null;

  	}

  	intersectTriangle( a, b, c, backfaceCulling, target ) {

  		// Compute the offset origin, edges, and normal.

  		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

  		_edge1$1.subVectors( b, a );
  		_edge2$1.subVectors( c, a );
  		_normal$1.crossVectors( _edge1$1, _edge2$1 );

  		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
  		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
  		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
  		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
  		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
  		let DdN = this.direction.dot( _normal$1 );
  		let sign;

  		if ( DdN > 0 ) {

  			if ( backfaceCulling ) return null;
  			sign = 1;

  		} else if ( DdN < 0 ) {

  			sign = - 1;
  			DdN = - DdN;

  		} else {

  			return null;

  		}

  		_diff$2.subVectors( this.origin, a );
  		const DdQxE2 = sign * this.direction.dot( _edge2$1.crossVectors( _diff$2, _edge2$1 ) );

  		// b1 < 0, no intersection
  		if ( DdQxE2 < 0 ) {

  			return null;

  		}

  		const DdE1xQ = sign * this.direction.dot( _edge1$1.cross( _diff$2 ) );

  		// b2 < 0, no intersection
  		if ( DdE1xQ < 0 ) {

  			return null;

  		}

  		// b1+b2 > 1, no intersection
  		if ( DdQxE2 + DdE1xQ > DdN ) {

  			return null;

  		}

  		// Line intersects triangle, check if ray does.
  		const QdN = - sign * _diff$2.dot( _normal$1 );

  		// t < 0, no intersection
  		if ( QdN < 0 ) {

  			return null;

  		}

  		// Ray intersects triangle.
  		return this.at( QdN / DdN, target );

  	}

  	applyMatrix4( matrix4 ) {

  		this.origin.applyMatrix4( matrix4 );
  		this.direction.transformDirection( matrix4 );

  		return this;

  	}

  	equals( ray ) {

  		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  };

  let Matrix4$1 = class Matrix4 {

  	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		Matrix4.prototype.isMatrix4 = true;

  		this.elements = [

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		];

  		if ( n11 !== undefined ) {

  			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

  		}

  	}

  	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		const te = this.elements;

  		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
  		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
  		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
  		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

  		return this;

  	}

  	identity() {

  		this.set(

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	clone() {

  		return new Matrix4().fromArray( this.elements );

  	}

  	copy( m ) {

  		const te = this.elements;
  		const me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
  		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
  		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
  		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

  		return this;

  	}

  	copyPosition( m ) {

  		const te = this.elements, me = m.elements;

  		te[ 12 ] = me[ 12 ];
  		te[ 13 ] = me[ 13 ];
  		te[ 14 ] = me[ 14 ];

  		return this;

  	}

  	setFromMatrix3( m ) {

  		const me = m.elements;

  		this.set(

  			me[ 0 ], me[ 3 ], me[ 6 ], 0,
  			me[ 1 ], me[ 4 ], me[ 7 ], 0,
  			me[ 2 ], me[ 5 ], me[ 8 ], 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	extractBasis( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrixColumn( this, 0 );
  		yAxis.setFromMatrixColumn( this, 1 );
  		zAxis.setFromMatrixColumn( this, 2 );

  		return this;

  	}

  	makeBasis( xAxis, yAxis, zAxis ) {

  		this.set(
  			xAxis.x, yAxis.x, zAxis.x, 0,
  			xAxis.y, yAxis.y, zAxis.y, 0,
  			xAxis.z, yAxis.z, zAxis.z, 0,
  			0, 0, 0, 1
  		);

  		return this;

  	}

  	extractRotation( m ) {

  		// this method does not support reflection matrices

  		const te = this.elements;
  		const me = m.elements;

  		const scaleX = 1 / _v1$5$1.setFromMatrixColumn( m, 0 ).length();
  		const scaleY = 1 / _v1$5$1.setFromMatrixColumn( m, 1 ).length();
  		const scaleZ = 1 / _v1$5$1.setFromMatrixColumn( m, 2 ).length();

  		te[ 0 ] = me[ 0 ] * scaleX;
  		te[ 1 ] = me[ 1 ] * scaleX;
  		te[ 2 ] = me[ 2 ] * scaleX;
  		te[ 3 ] = 0;

  		te[ 4 ] = me[ 4 ] * scaleY;
  		te[ 5 ] = me[ 5 ] * scaleY;
  		te[ 6 ] = me[ 6 ] * scaleY;
  		te[ 7 ] = 0;

  		te[ 8 ] = me[ 8 ] * scaleZ;
  		te[ 9 ] = me[ 9 ] * scaleZ;
  		te[ 10 ] = me[ 10 ] * scaleZ;
  		te[ 11 ] = 0;

  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	}

  	makeRotationFromEuler( euler ) {

  		const te = this.elements;

  		const x = euler.x, y = euler.y, z = euler.z;
  		const a = Math.cos( x ), b = Math.sin( x );
  		const c = Math.cos( y ), d = Math.sin( y );
  		const e = Math.cos( z ), f = Math.sin( z );

  		if ( euler.order === 'XYZ' ) {

  			const ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - c * f;
  			te[ 8 ] = d;

  			te[ 1 ] = af + be * d;
  			te[ 5 ] = ae - bf * d;
  			te[ 9 ] = - b * c;

  			te[ 2 ] = bf - ae * d;
  			te[ 6 ] = be + af * d;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YXZ' ) {

  			const ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce + df * b;
  			te[ 4 ] = de * b - cf;
  			te[ 8 ] = a * d;

  			te[ 1 ] = a * f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b;

  			te[ 2 ] = cf * b - de;
  			te[ 6 ] = df + ce * b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZXY' ) {

  			const ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce - df * b;
  			te[ 4 ] = - a * f;
  			te[ 8 ] = de + cf * b;

  			te[ 1 ] = cf + de * b;
  			te[ 5 ] = a * e;
  			te[ 9 ] = df - ce * b;

  			te[ 2 ] = - a * d;
  			te[ 6 ] = b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZYX' ) {

  			const ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = be * d - af;
  			te[ 8 ] = ae * d + bf;

  			te[ 1 ] = c * f;
  			te[ 5 ] = bf * d + ae;
  			te[ 9 ] = af * d - be;

  			te[ 2 ] = - d;
  			te[ 6 ] = b * c;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YZX' ) {

  			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = bd - ac * f;
  			te[ 8 ] = bc * f + ad;

  			te[ 1 ] = f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b * e;

  			te[ 2 ] = - d * e;
  			te[ 6 ] = ad * f + bc;
  			te[ 10 ] = ac - bd * f;

  		} else if ( euler.order === 'XZY' ) {

  			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - f;
  			te[ 8 ] = d * e;

  			te[ 1 ] = ac * f + bd;
  			te[ 5 ] = a * e;
  			te[ 9 ] = ad * f - bc;

  			te[ 2 ] = bc * f - ad;
  			te[ 6 ] = b * e;
  			te[ 10 ] = bd * f + ac;

  		}

  		// bottom row
  		te[ 3 ] = 0;
  		te[ 7 ] = 0;
  		te[ 11 ] = 0;

  		// last column
  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	}

  	makeRotationFromQuaternion( q ) {

  		return this.compose( _zero$1, q, _one$1 );

  	}

  	lookAt( eye, target, up ) {

  		const te = this.elements;

  		_z$1.subVectors( eye, target );

  		if ( _z$1.lengthSq() === 0 ) {

  			// eye and target are in the same position

  			_z$1.z = 1;

  		}

  		_z$1.normalize();
  		_x$1.crossVectors( up, _z$1 );

  		if ( _x$1.lengthSq() === 0 ) {

  			// up and z are parallel

  			if ( Math.abs( up.z ) === 1 ) {

  				_z$1.x += 0.0001;

  			} else {

  				_z$1.z += 0.0001;

  			}

  			_z$1.normalize();
  			_x$1.crossVectors( up, _z$1 );

  		}

  		_x$1.normalize();
  		_y$1.crossVectors( _z$1, _x$1 );

  		te[ 0 ] = _x$1.x; te[ 4 ] = _y$1.x; te[ 8 ] = _z$1.x;
  		te[ 1 ] = _x$1.y; te[ 5 ] = _y$1.y; te[ 9 ] = _z$1.y;
  		te[ 2 ] = _x$1.z; te[ 6 ] = _y$1.z; te[ 10 ] = _z$1.z;

  		return this;

  	}

  	multiply( m ) {

  		return this.multiplyMatrices( this, m );

  	}

  	premultiply( m ) {

  		return this.multiplyMatrices( m, this );

  	}

  	multiplyMatrices( a, b ) {

  		const ae = a.elements;
  		const be = b.elements;
  		const te = this.elements;

  		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
  		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
  		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
  		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

  		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
  		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
  		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
  		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

  		return this;

  	}

  	multiplyScalar( s ) {

  		const te = this.elements;

  		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
  		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
  		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
  		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

  		return this;

  	}

  	determinant() {

  		const te = this.elements;

  		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
  		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
  		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
  		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

  		//TODO: make this more efficient
  		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

  		return (
  			n41 * (
  				+ n14 * n23 * n32
  				 - n13 * n24 * n32
  				 - n14 * n22 * n33
  				 + n12 * n24 * n33
  				 + n13 * n22 * n34
  				 - n12 * n23 * n34
  			) +
  			n42 * (
  				+ n11 * n23 * n34
  				 - n11 * n24 * n33
  				 + n14 * n21 * n33
  				 - n13 * n21 * n34
  				 + n13 * n24 * n31
  				 - n14 * n23 * n31
  			) +
  			n43 * (
  				+ n11 * n24 * n32
  				 - n11 * n22 * n34
  				 - n14 * n21 * n32
  				 + n12 * n21 * n34
  				 + n14 * n22 * n31
  				 - n12 * n24 * n31
  			) +
  			n44 * (
  				- n13 * n22 * n31
  				 - n11 * n23 * n32
  				 + n11 * n22 * n33
  				 + n13 * n21 * n32
  				 - n12 * n21 * n33
  				 + n12 * n23 * n31
  			)

  		);

  	}

  	transpose() {

  		const te = this.elements;
  		let tmp;

  		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
  		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
  		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

  		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
  		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
  		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

  		return this;

  	}

  	setPosition( x, y, z ) {

  		const te = this.elements;

  		if ( x.isVector3 ) {

  			te[ 12 ] = x.x;
  			te[ 13 ] = x.y;
  			te[ 14 ] = x.z;

  		} else {

  			te[ 12 ] = x;
  			te[ 13 ] = y;
  			te[ 14 ] = z;

  		}

  		return this;

  	}

  	invert() {

  		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
  		const te = this.elements,

  			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
  			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
  			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
  			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

  			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
  			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
  			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
  			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

  		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		const detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
  		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
  		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

  		te[ 4 ] = t12 * detInv;
  		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
  		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
  		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

  		te[ 8 ] = t13 * detInv;
  		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
  		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
  		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

  		te[ 12 ] = t14 * detInv;
  		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
  		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
  		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

  		return this;

  	}

  	scale( v ) {

  		const te = this.elements;
  		const x = v.x, y = v.y, z = v.z;

  		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
  		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
  		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
  		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

  		return this;

  	}

  	getMaxScaleOnAxis() {

  		const te = this.elements;

  		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
  		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
  		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

  		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

  	}

  	makeTranslation( x, y, z ) {

  		if ( x.isVector3 ) {

  			this.set(

  				1, 0, 0, x.x,
  				0, 1, 0, x.y,
  				0, 0, 1, x.z,
  				0, 0, 0, 1

  			);

  		} else {

  			this.set(

  				1, 0, 0, x,
  				0, 1, 0, y,
  				0, 0, 1, z,
  				0, 0, 0, 1

  			);

  		}

  		return this;

  	}

  	makeRotationX( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			1, 0, 0, 0,
  			0, c, - s, 0,
  			0, s, c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationY( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			 c, 0, s, 0,
  			 0, 1, 0, 0,
  			- s, 0, c, 0,
  			 0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationZ( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			c, - s, 0, 0,
  			s, c, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationAxis( axis, angle ) {

  		// Based on http://www.gamedev.net/reference/articles/article1199.asp

  		const c = Math.cos( angle );
  		const s = Math.sin( angle );
  		const t = 1 - c;
  		const x = axis.x, y = axis.y, z = axis.z;
  		const tx = t * x, ty = t * y;

  		this.set(

  			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
  			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
  			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeScale( x, y, z ) {

  		this.set(

  			x, 0, 0, 0,
  			0, y, 0, 0,
  			0, 0, z, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeShear( xy, xz, yx, yz, zx, zy ) {

  		this.set(

  			1, yx, zx, 0,
  			xy, 1, zy, 0,
  			xz, yz, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	compose( position, quaternion, scale ) {

  		const te = this.elements;

  		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
  		const x2 = x + x,	y2 = y + y, z2 = z + z;
  		const xx = x * x2, xy = x * y2, xz = x * z2;
  		const yy = y * y2, yz = y * z2, zz = z * z2;
  		const wx = w * x2, wy = w * y2, wz = w * z2;

  		const sx = scale.x, sy = scale.y, sz = scale.z;

  		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
  		te[ 1 ] = ( xy + wz ) * sx;
  		te[ 2 ] = ( xz - wy ) * sx;
  		te[ 3 ] = 0;

  		te[ 4 ] = ( xy - wz ) * sy;
  		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
  		te[ 6 ] = ( yz + wx ) * sy;
  		te[ 7 ] = 0;

  		te[ 8 ] = ( xz + wy ) * sz;
  		te[ 9 ] = ( yz - wx ) * sz;
  		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
  		te[ 11 ] = 0;

  		te[ 12 ] = position.x;
  		te[ 13 ] = position.y;
  		te[ 14 ] = position.z;
  		te[ 15 ] = 1;

  		return this;

  	}

  	decompose( position, quaternion, scale ) {

  		const te = this.elements;

  		let sx = _v1$5$1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
  		const sy = _v1$5$1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
  		const sz = _v1$5$1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

  		// if determine is negative, we need to invert one scale
  		const det = this.determinant();
  		if ( det < 0 ) sx = - sx;

  		position.x = te[ 12 ];
  		position.y = te[ 13 ];
  		position.z = te[ 14 ];

  		// scale the rotation part
  		_m1$4.copy( this );

  		const invSX = 1 / sx;
  		const invSY = 1 / sy;
  		const invSZ = 1 / sz;

  		_m1$4.elements[ 0 ] *= invSX;
  		_m1$4.elements[ 1 ] *= invSX;
  		_m1$4.elements[ 2 ] *= invSX;

  		_m1$4.elements[ 4 ] *= invSY;
  		_m1$4.elements[ 5 ] *= invSY;
  		_m1$4.elements[ 6 ] *= invSY;

  		_m1$4.elements[ 8 ] *= invSZ;
  		_m1$4.elements[ 9 ] *= invSZ;
  		_m1$4.elements[ 10 ] *= invSZ;

  		quaternion.setFromRotationMatrix( _m1$4 );

  		scale.x = sx;
  		scale.y = sy;
  		scale.z = sz;

  		return this;

  	}

  	makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem$1 ) {

  		const te = this.elements;
  		const x = 2 * near / ( right - left );
  		const y = 2 * near / ( top - bottom );

  		const a = ( right + left ) / ( right - left );
  		const b = ( top + bottom ) / ( top - bottom );

  		let c, d;

  		if ( coordinateSystem === WebGLCoordinateSystem$1 ) {

  			c = - ( far + near ) / ( far - near );
  			d = ( - 2 * far * near ) / ( far - near );

  		} else if ( coordinateSystem === WebGPUCoordinateSystem$1 ) {

  			c = - far / ( far - near );
  			d = ( - far * near ) / ( far - near );

  		} else {

  			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
  		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

  		return this;

  	}

  	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem$1 ) {

  		const te = this.elements;
  		const w = 1.0 / ( right - left );
  		const h = 1.0 / ( top - bottom );
  		const p = 1.0 / ( far - near );

  		const x = ( right + left ) * w;
  		const y = ( top + bottom ) * h;

  		let z, zInv;

  		if ( coordinateSystem === WebGLCoordinateSystem$1 ) {

  			z = ( far + near ) * p;
  			zInv = - 2 * p;

  		} else if ( coordinateSystem === WebGPUCoordinateSystem$1 ) {

  			z = near * p;
  			zInv = - 1 * p;

  		} else {

  			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
  		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
  		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
  		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

  		return this;

  	}

  	equals( matrix ) {

  		const te = this.elements;
  		const me = matrix.elements;

  		for ( let i = 0; i < 16; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	}

  	fromArray( array, offset = 0 ) {

  		for ( let i = 0; i < 16; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		const te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];
  		array[ offset + 3 ] = te[ 3 ];

  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];
  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];

  		array[ offset + 8 ] = te[ 8 ];
  		array[ offset + 9 ] = te[ 9 ];
  		array[ offset + 10 ] = te[ 10 ];
  		array[ offset + 11 ] = te[ 11 ];

  		array[ offset + 12 ] = te[ 12 ];
  		array[ offset + 13 ] = te[ 13 ];
  		array[ offset + 14 ] = te[ 14 ];
  		array[ offset + 15 ] = te[ 15 ];

  		return array;

  	}

  };

  const _v1$5$1 = /*@__PURE__*/ new Vector3$1();
  const _m1$4 = /*@__PURE__*/ new Matrix4$1();
  const _zero$1 = /*@__PURE__*/ new Vector3$1( 0, 0, 0 );
  const _one$1 = /*@__PURE__*/ new Vector3$1( 1, 1, 1 );
  const _x$1 = /*@__PURE__*/ new Vector3$1();
  const _y$1 = /*@__PURE__*/ new Vector3$1();
  const _z$1 = /*@__PURE__*/ new Vector3$1();

  const _matrix$2$1 = /*@__PURE__*/ new Matrix4$1();
  const _quaternion$3$1 = /*@__PURE__*/ new Quaternion$1();

  let Euler$1 = class Euler {

  	constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

  		this.isEuler = true;

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order;

  	}

  	get x() {

  		return this._x;

  	}

  	set x( value ) {

  		this._x = value;
  		this._onChangeCallback();

  	}

  	get y() {

  		return this._y;

  	}

  	set y( value ) {

  		this._y = value;
  		this._onChangeCallback();

  	}

  	get z() {

  		return this._z;

  	}

  	set z( value ) {

  		this._z = value;
  		this._onChangeCallback();

  	}

  	get order() {

  		return this._order;

  	}

  	set order( value ) {

  		this._order = value;
  		this._onChangeCallback();

  	}

  	set( x, y, z, order = this._order ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order;

  		this._onChangeCallback();

  		return this;

  	}

  	clone() {

  		return new this.constructor( this._x, this._y, this._z, this._order );

  	}

  	copy( euler ) {

  		this._x = euler._x;
  		this._y = euler._y;
  		this._z = euler._z;
  		this._order = euler._order;

  		this._onChangeCallback();

  		return this;

  	}

  	setFromRotationMatrix( m, order = this._order, update = true ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		const te = m.elements;
  		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
  		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
  		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		switch ( order ) {

  			case 'XYZ':

  				this._y = Math.asin( clamp$2( m13, - 1, 1 ) );

  				if ( Math.abs( m13 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m33 );
  					this._z = Math.atan2( - m12, m11 );

  				} else {

  					this._x = Math.atan2( m32, m22 );
  					this._z = 0;

  				}

  				break;

  			case 'YXZ':

  				this._x = Math.asin( - clamp$2( m23, - 1, 1 ) );

  				if ( Math.abs( m23 ) < 0.9999999 ) {

  					this._y = Math.atan2( m13, m33 );
  					this._z = Math.atan2( m21, m22 );

  				} else {

  					this._y = Math.atan2( - m31, m11 );
  					this._z = 0;

  				}

  				break;

  			case 'ZXY':

  				this._x = Math.asin( clamp$2( m32, - 1, 1 ) );

  				if ( Math.abs( m32 ) < 0.9999999 ) {

  					this._y = Math.atan2( - m31, m33 );
  					this._z = Math.atan2( - m12, m22 );

  				} else {

  					this._y = 0;
  					this._z = Math.atan2( m21, m11 );

  				}

  				break;

  			case 'ZYX':

  				this._y = Math.asin( - clamp$2( m31, - 1, 1 ) );

  				if ( Math.abs( m31 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m33 );
  					this._z = Math.atan2( m21, m11 );

  				} else {

  					this._x = 0;
  					this._z = Math.atan2( - m12, m22 );

  				}

  				break;

  			case 'YZX':

  				this._z = Math.asin( clamp$2( m21, - 1, 1 ) );

  				if ( Math.abs( m21 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m22 );
  					this._y = Math.atan2( - m31, m11 );

  				} else {

  					this._x = 0;
  					this._y = Math.atan2( m13, m33 );

  				}

  				break;

  			case 'XZY':

  				this._z = Math.asin( - clamp$2( m12, - 1, 1 ) );

  				if ( Math.abs( m12 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m22 );
  					this._y = Math.atan2( m13, m11 );

  				} else {

  					this._x = Math.atan2( - m23, m33 );
  					this._y = 0;

  				}

  				break;

  			default:

  				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

  		}

  		this._order = order;

  		if ( update === true ) this._onChangeCallback();

  		return this;

  	}

  	setFromQuaternion( q, order, update ) {

  		_matrix$2$1.makeRotationFromQuaternion( q );

  		return this.setFromRotationMatrix( _matrix$2$1, order, update );

  	}

  	setFromVector3( v, order = this._order ) {

  		return this.set( v.x, v.y, v.z, order );

  	}

  	reorder( newOrder ) {

  		// WARNING: this discards revolution information -bhouston

  		_quaternion$3$1.setFromEuler( this );

  		return this.setFromQuaternion( _quaternion$3$1, newOrder );

  	}

  	equals( euler ) {

  		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  	}

  	fromArray( array ) {

  		this._x = array[ 0 ];
  		this._y = array[ 1 ];
  		this._z = array[ 2 ];
  		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

  		this._onChangeCallback();

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._order;

  		return array;

  	}

  	_onChange( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	}

  	_onChangeCallback() {}

  	*[ Symbol.iterator ]() {

  		yield this._x;
  		yield this._y;
  		yield this._z;
  		yield this._order;

  	}

  };

  Euler$1.DEFAULT_ORDER = 'XYZ';

  let Layers$1 = class Layers {

  	constructor() {

  		this.mask = 1 | 0;

  	}

  	set( channel ) {

  		this.mask = ( 1 << channel | 0 ) >>> 0;

  	}

  	enable( channel ) {

  		this.mask |= 1 << channel | 0;

  	}

  	enableAll() {

  		this.mask = 0xffffffff | 0;

  	}

  	toggle( channel ) {

  		this.mask ^= 1 << channel | 0;

  	}

  	disable( channel ) {

  		this.mask &= ~ ( 1 << channel | 0 );

  	}

  	disableAll() {

  		this.mask = 0;

  	}

  	test( layers ) {

  		return ( this.mask & layers.mask ) !== 0;

  	}

  	isEnabled( channel ) {

  		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

  	}

  };

  let _object3DId$1 = 0;

  const _v1$4$1 = /*@__PURE__*/ new Vector3$1();
  const _q1$1 = /*@__PURE__*/ new Quaternion$1();
  const _m1$3$1 = /*@__PURE__*/ new Matrix4$1();
  const _target = /*@__PURE__*/ new Vector3$1();

  const _position$3$1 = /*@__PURE__*/ new Vector3$1();
  const _scale$2$1 = /*@__PURE__*/ new Vector3$1();
  const _quaternion$2$1 = /*@__PURE__*/ new Quaternion$1();

  const _xAxis$1 = /*@__PURE__*/ new Vector3$1( 1, 0, 0 );
  const _yAxis$1 = /*@__PURE__*/ new Vector3$1( 0, 1, 0 );
  const _zAxis$1 = /*@__PURE__*/ new Vector3$1( 0, 0, 1 );

  const _addedEvent$1 = { type: 'added' };
  const _removedEvent$1 = { type: 'removed' };

  const _childaddedEvent$1 = { type: 'childadded', child: null };
  const _childremovedEvent$1 = { type: 'childremoved', child: null };

  let Object3D$1 = class Object3D extends EventDispatcher$1 {

  	constructor() {

  		super();

  		this.isObject3D = true;

  		Object.defineProperty( this, 'id', { value: _object3DId$1 ++ } );

  		this.uuid = generateUUID$1();

  		this.name = '';
  		this.type = 'Object3D';

  		this.parent = null;
  		this.children = [];

  		this.up = Object3D.DEFAULT_UP.clone();

  		const position = new Vector3$1();
  		const rotation = new Euler$1();
  		const quaternion = new Quaternion$1();
  		const scale = new Vector3$1( 1, 1, 1 );

  		function onRotationChange() {

  			quaternion.setFromEuler( rotation, false );

  		}

  		function onQuaternionChange() {

  			rotation.setFromQuaternion( quaternion, undefined, false );

  		}

  		rotation._onChange( onRotationChange );
  		quaternion._onChange( onQuaternionChange );

  		Object.defineProperties( this, {
  			position: {
  				configurable: true,
  				enumerable: true,
  				value: position
  			},
  			rotation: {
  				configurable: true,
  				enumerable: true,
  				value: rotation
  			},
  			quaternion: {
  				configurable: true,
  				enumerable: true,
  				value: quaternion
  			},
  			scale: {
  				configurable: true,
  				enumerable: true,
  				value: scale
  			},
  			modelViewMatrix: {
  				value: new Matrix4$1()
  			},
  			normalMatrix: {
  				value: new Matrix3$1()
  			}
  		} );

  		this.matrix = new Matrix4$1();
  		this.matrixWorld = new Matrix4$1();

  		this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;

  		this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer
  		this.matrixWorldNeedsUpdate = false;

  		this.layers = new Layers$1();
  		this.visible = true;

  		this.castShadow = false;
  		this.receiveShadow = false;

  		this.frustumCulled = true;
  		this.renderOrder = 0;

  		this.animations = [];

  		this.userData = {};

  	}

  	onBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

  	onAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

  	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

  	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

  	applyMatrix4( matrix ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		this.matrix.premultiply( matrix );

  		this.matrix.decompose( this.position, this.quaternion, this.scale );

  	}

  	applyQuaternion( q ) {

  		this.quaternion.premultiply( q );

  		return this;

  	}

  	setRotationFromAxisAngle( axis, angle ) {

  		// assumes axis is normalized

  		this.quaternion.setFromAxisAngle( axis, angle );

  	}

  	setRotationFromEuler( euler ) {

  		this.quaternion.setFromEuler( euler, true );

  	}

  	setRotationFromMatrix( m ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		this.quaternion.setFromRotationMatrix( m );

  	}

  	setRotationFromQuaternion( q ) {

  		// assumes q is normalized

  		this.quaternion.copy( q );

  	}

  	rotateOnAxis( axis, angle ) {

  		// rotate object on axis in object space
  		// axis is assumed to be normalized

  		_q1$1.setFromAxisAngle( axis, angle );

  		this.quaternion.multiply( _q1$1 );

  		return this;

  	}

  	rotateOnWorldAxis( axis, angle ) {

  		// rotate object on axis in world space
  		// axis is assumed to be normalized
  		// method assumes no rotated parent

  		_q1$1.setFromAxisAngle( axis, angle );

  		this.quaternion.premultiply( _q1$1 );

  		return this;

  	}

  	rotateX( angle ) {

  		return this.rotateOnAxis( _xAxis$1, angle );

  	}

  	rotateY( angle ) {

  		return this.rotateOnAxis( _yAxis$1, angle );

  	}

  	rotateZ( angle ) {

  		return this.rotateOnAxis( _zAxis$1, angle );

  	}

  	translateOnAxis( axis, distance ) {

  		// translate object by distance along axis in object space
  		// axis is assumed to be normalized

  		_v1$4$1.copy( axis ).applyQuaternion( this.quaternion );

  		this.position.add( _v1$4$1.multiplyScalar( distance ) );

  		return this;

  	}

  	translateX( distance ) {

  		return this.translateOnAxis( _xAxis$1, distance );

  	}

  	translateY( distance ) {

  		return this.translateOnAxis( _yAxis$1, distance );

  	}

  	translateZ( distance ) {

  		return this.translateOnAxis( _zAxis$1, distance );

  	}

  	localToWorld( vector ) {

  		this.updateWorldMatrix( true, false );

  		return vector.applyMatrix4( this.matrixWorld );

  	}

  	worldToLocal( vector ) {

  		this.updateWorldMatrix( true, false );

  		return vector.applyMatrix4( _m1$3$1.copy( this.matrixWorld ).invert() );

  	}

  	lookAt( x, y, z ) {

  		// This method does not support objects having non-uniformly-scaled parent(s)

  		if ( x.isVector3 ) {

  			_target.copy( x );

  		} else {

  			_target.set( x, y, z );

  		}

  		const parent = this.parent;

  		this.updateWorldMatrix( true, false );

  		_position$3$1.setFromMatrixPosition( this.matrixWorld );

  		if ( this.isCamera || this.isLight ) {

  			_m1$3$1.lookAt( _position$3$1, _target, this.up );

  		} else {

  			_m1$3$1.lookAt( _target, _position$3$1, this.up );

  		}

  		this.quaternion.setFromRotationMatrix( _m1$3$1 );

  		if ( parent ) {

  			_m1$3$1.extractRotation( parent.matrixWorld );
  			_q1$1.setFromRotationMatrix( _m1$3$1 );
  			this.quaternion.premultiply( _q1$1.invert() );

  		}

  	}

  	add( object ) {

  		if ( arguments.length > 1 ) {

  			for ( let i = 0; i < arguments.length; i ++ ) {

  				this.add( arguments[ i ] );

  			}

  			return this;

  		}

  		if ( object === this ) {

  			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
  			return this;

  		}

  		if ( object && object.isObject3D ) {

  			object.removeFromParent();
  			object.parent = this;
  			this.children.push( object );

  			object.dispatchEvent( _addedEvent$1 );

  			_childaddedEvent$1.child = object;
  			this.dispatchEvent( _childaddedEvent$1 );
  			_childaddedEvent$1.child = null;

  		} else {

  			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

  		}

  		return this;

  	}

  	remove( object ) {

  		if ( arguments.length > 1 ) {

  			for ( let i = 0; i < arguments.length; i ++ ) {

  				this.remove( arguments[ i ] );

  			}

  			return this;

  		}

  		const index = this.children.indexOf( object );

  		if ( index !== - 1 ) {

  			object.parent = null;
  			this.children.splice( index, 1 );

  			object.dispatchEvent( _removedEvent$1 );

  			_childremovedEvent$1.child = object;
  			this.dispatchEvent( _childremovedEvent$1 );
  			_childremovedEvent$1.child = null;

  		}

  		return this;

  	}

  	removeFromParent() {

  		const parent = this.parent;

  		if ( parent !== null ) {

  			parent.remove( this );

  		}

  		return this;

  	}

  	clear() {

  		return this.remove( ... this.children );

  	}

  	attach( object ) {

  		// adds object as a child of this, while maintaining the object's world transform

  		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

  		this.updateWorldMatrix( true, false );

  		_m1$3$1.copy( this.matrixWorld ).invert();

  		if ( object.parent !== null ) {

  			object.parent.updateWorldMatrix( true, false );

  			_m1$3$1.multiply( object.parent.matrixWorld );

  		}

  		object.applyMatrix4( _m1$3$1 );

  		object.removeFromParent();
  		object.parent = this;
  		this.children.push( object );

  		object.updateWorldMatrix( false, true );

  		object.dispatchEvent( _addedEvent$1 );

  		_childaddedEvent$1.child = object;
  		this.dispatchEvent( _childaddedEvent$1 );
  		_childaddedEvent$1.child = null;

  		return this;

  	}

  	getObjectById( id ) {

  		return this.getObjectByProperty( 'id', id );

  	}

  	getObjectByName( name ) {

  		return this.getObjectByProperty( 'name', name );

  	}

  	getObjectByProperty( name, value ) {

  		if ( this[ name ] === value ) return this;

  		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

  			const child = this.children[ i ];
  			const object = child.getObjectByProperty( name, value );

  			if ( object !== undefined ) {

  				return object;

  			}

  		}

  		return undefined;

  	}

  	getObjectsByProperty( name, value, result = [] ) {

  		if ( this[ name ] === value ) result.push( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].getObjectsByProperty( name, value, result );

  		}

  		return result;

  	}

  	getWorldPosition( target ) {

  		this.updateWorldMatrix( true, false );

  		return target.setFromMatrixPosition( this.matrixWorld );

  	}

  	getWorldQuaternion( target ) {

  		this.updateWorldMatrix( true, false );

  		this.matrixWorld.decompose( _position$3$1, target, _scale$2$1 );

  		return target;

  	}

  	getWorldScale( target ) {

  		this.updateWorldMatrix( true, false );

  		this.matrixWorld.decompose( _position$3$1, _quaternion$2$1, target );

  		return target;

  	}

  	getWorldDirection( target ) {

  		this.updateWorldMatrix( true, false );

  		const e = this.matrixWorld.elements;

  		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

  	}

  	raycast( /* raycaster, intersects */ ) {}

  	traverse( callback ) {

  		callback( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverse( callback );

  		}

  	}

  	traverseVisible( callback ) {

  		if ( this.visible === false ) return;

  		callback( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverseVisible( callback );

  		}

  	}

  	traverseAncestors( callback ) {

  		const parent = this.parent;

  		if ( parent !== null ) {

  			callback( parent );

  			parent.traverseAncestors( callback );

  		}

  	}

  	updateMatrix() {

  		this.matrix.compose( this.position, this.quaternion, this.scale );

  		this.matrixWorldNeedsUpdate = true;

  	}

  	updateMatrixWorld( force ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldNeedsUpdate || force ) {

  			if ( this.matrixWorldAutoUpdate === true ) {

  				if ( this.parent === null ) {

  					this.matrixWorld.copy( this.matrix );

  				} else {

  					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  				}

  			}

  			this.matrixWorldNeedsUpdate = false;

  			force = true;

  		}

  		// make sure descendants are updated if required

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			const child = children[ i ];

  			child.updateMatrixWorld( force );

  		}

  	}

  	updateWorldMatrix( updateParents, updateChildren ) {

  		const parent = this.parent;

  		if ( updateParents === true && parent !== null ) {

  			parent.updateWorldMatrix( true, false );

  		}

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldAutoUpdate === true ) {

  			if ( this.parent === null ) {

  				this.matrixWorld.copy( this.matrix );

  			} else {

  				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  			}

  		}

  		// make sure descendants are updated

  		if ( updateChildren === true ) {

  			const children = this.children;

  			for ( let i = 0, l = children.length; i < l; i ++ ) {

  				const child = children[ i ];

  				child.updateWorldMatrix( false, true );

  			}

  		}

  	}

  	toJSON( meta ) {

  		// meta is a string when called from JSON.stringify
  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		const output = {};

  		// meta is a hash used to collect geometries, materials.
  		// not providing it implies that this is the root object
  		// being serialized.
  		if ( isRootObject ) {

  			// initialize meta obj
  			meta = {
  				geometries: {},
  				materials: {},
  				textures: {},
  				images: {},
  				shapes: {},
  				skeletons: {},
  				animations: {},
  				nodes: {}
  			};

  			output.metadata = {
  				version: 4.6,
  				type: 'Object',
  				generator: 'Object3D.toJSON'
  			};

  		}

  		// standard Object3D serialization

  		const object = {};

  		object.uuid = this.uuid;
  		object.type = this.type;

  		if ( this.name !== '' ) object.name = this.name;
  		if ( this.castShadow === true ) object.castShadow = true;
  		if ( this.receiveShadow === true ) object.receiveShadow = true;
  		if ( this.visible === false ) object.visible = false;
  		if ( this.frustumCulled === false ) object.frustumCulled = false;
  		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
  		if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

  		object.layers = this.layers.mask;
  		object.matrix = this.matrix.toArray();
  		object.up = this.up.toArray();

  		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

  		// object specific properties

  		if ( this.isInstancedMesh ) {

  			object.type = 'InstancedMesh';
  			object.count = this.count;
  			object.instanceMatrix = this.instanceMatrix.toJSON();
  			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

  		}

  		if ( this.isBatchedMesh ) {

  			object.type = 'BatchedMesh';
  			object.perObjectFrustumCulled = this.perObjectFrustumCulled;
  			object.sortObjects = this.sortObjects;

  			object.drawRanges = this._drawRanges;
  			object.reservedRanges = this._reservedRanges;

  			object.visibility = this._visibility;
  			object.active = this._active;
  			object.bounds = this._bounds.map( bound => ( {
  				boxInitialized: bound.boxInitialized,
  				boxMin: bound.box.min.toArray(),
  				boxMax: bound.box.max.toArray(),

  				sphereInitialized: bound.sphereInitialized,
  				sphereRadius: bound.sphere.radius,
  				sphereCenter: bound.sphere.center.toArray()
  			} ) );

  			object.maxInstanceCount = this._maxInstanceCount;
  			object.maxVertexCount = this._maxVertexCount;
  			object.maxIndexCount = this._maxIndexCount;

  			object.geometryInitialized = this._geometryInitialized;
  			object.geometryCount = this._geometryCount;

  			object.matricesTexture = this._matricesTexture.toJSON( meta );

  			if ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );

  			if ( this.boundingSphere !== null ) {

  				object.boundingSphere = {
  					center: object.boundingSphere.center.toArray(),
  					radius: object.boundingSphere.radius
  				};

  			}

  			if ( this.boundingBox !== null ) {

  				object.boundingBox = {
  					min: object.boundingBox.min.toArray(),
  					max: object.boundingBox.max.toArray()
  				};

  			}

  		}

  		//

  		function serialize( library, element ) {

  			if ( library[ element.uuid ] === undefined ) {

  				library[ element.uuid ] = element.toJSON( meta );

  			}

  			return element.uuid;

  		}

  		if ( this.isScene ) {

  			if ( this.background ) {

  				if ( this.background.isColor ) {

  					object.background = this.background.toJSON();

  				} else if ( this.background.isTexture ) {

  					object.background = this.background.toJSON( meta ).uuid;

  				}

  			}

  			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

  				object.environment = this.environment.toJSON( meta ).uuid;

  			}

  		} else if ( this.isMesh || this.isLine || this.isPoints ) {

  			object.geometry = serialize( meta.geometries, this.geometry );

  			const parameters = this.geometry.parameters;

  			if ( parameters !== undefined && parameters.shapes !== undefined ) {

  				const shapes = parameters.shapes;

  				if ( Array.isArray( shapes ) ) {

  					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

  						const shape = shapes[ i ];

  						serialize( meta.shapes, shape );

  					}

  				} else {

  					serialize( meta.shapes, shapes );

  				}

  			}

  		}

  		if ( this.isSkinnedMesh ) {

  			object.bindMode = this.bindMode;
  			object.bindMatrix = this.bindMatrix.toArray();

  			if ( this.skeleton !== undefined ) {

  				serialize( meta.skeletons, this.skeleton );

  				object.skeleton = this.skeleton.uuid;

  			}

  		}

  		if ( this.material !== undefined ) {

  			if ( Array.isArray( this.material ) ) {

  				const uuids = [];

  				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

  					uuids.push( serialize( meta.materials, this.material[ i ] ) );

  				}

  				object.material = uuids;

  			} else {

  				object.material = serialize( meta.materials, this.material );

  			}

  		}

  		//

  		if ( this.children.length > 0 ) {

  			object.children = [];

  			for ( let i = 0; i < this.children.length; i ++ ) {

  				object.children.push( this.children[ i ].toJSON( meta ).object );

  			}

  		}

  		//

  		if ( this.animations.length > 0 ) {

  			object.animations = [];

  			for ( let i = 0; i < this.animations.length; i ++ ) {

  				const animation = this.animations[ i ];

  				object.animations.push( serialize( meta.animations, animation ) );

  			}

  		}

  		if ( isRootObject ) {

  			const geometries = extractFromCache( meta.geometries );
  			const materials = extractFromCache( meta.materials );
  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );
  			const shapes = extractFromCache( meta.shapes );
  			const skeletons = extractFromCache( meta.skeletons );
  			const animations = extractFromCache( meta.animations );
  			const nodes = extractFromCache( meta.nodes );

  			if ( geometries.length > 0 ) output.geometries = geometries;
  			if ( materials.length > 0 ) output.materials = materials;
  			if ( textures.length > 0 ) output.textures = textures;
  			if ( images.length > 0 ) output.images = images;
  			if ( shapes.length > 0 ) output.shapes = shapes;
  			if ( skeletons.length > 0 ) output.skeletons = skeletons;
  			if ( animations.length > 0 ) output.animations = animations;
  			if ( nodes.length > 0 ) output.nodes = nodes;

  		}

  		output.object = object;

  		return output;

  		// extract data from the cache hash
  		// remove metadata on each item
  		// and return as array
  		function extractFromCache( cache ) {

  			const values = [];
  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  	}

  	clone( recursive ) {

  		return new this.constructor().copy( this, recursive );

  	}

  	copy( source, recursive = true ) {

  		this.name = source.name;

  		this.up.copy( source.up );

  		this.position.copy( source.position );
  		this.rotation.order = source.rotation.order;
  		this.quaternion.copy( source.quaternion );
  		this.scale.copy( source.scale );

  		this.matrix.copy( source.matrix );
  		this.matrixWorld.copy( source.matrixWorld );

  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
  		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

  		this.layers.mask = source.layers.mask;
  		this.visible = source.visible;

  		this.castShadow = source.castShadow;
  		this.receiveShadow = source.receiveShadow;

  		this.frustumCulled = source.frustumCulled;
  		this.renderOrder = source.renderOrder;

  		this.animations = source.animations.slice();

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		if ( recursive === true ) {

  			for ( let i = 0; i < source.children.length; i ++ ) {

  				const child = source.children[ i ];
  				this.add( child.clone() );

  			}

  		}

  		return this;

  	}

  };

  Object3D$1.DEFAULT_UP = /*@__PURE__*/ new Vector3$1( 0, 1, 0 );
  Object3D$1.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D$1.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

  const _v0$2$1 = /*@__PURE__*/ new Vector3$1();
  const _v1$3$1 = /*@__PURE__*/ new Vector3$1();
  const _v2$2$1 = /*@__PURE__*/ new Vector3$1();
  const _v3$2$1 = /*@__PURE__*/ new Vector3$1();

  const _vab$1 = /*@__PURE__*/ new Vector3$1();
  const _vac$1 = /*@__PURE__*/ new Vector3$1();
  const _vbc$1 = /*@__PURE__*/ new Vector3$1();
  const _vap$1 = /*@__PURE__*/ new Vector3$1();
  const _vbp$1 = /*@__PURE__*/ new Vector3$1();
  const _vcp$1 = /*@__PURE__*/ new Vector3$1();

  const _v40$1 = /*@__PURE__*/ new Vector4$1();
  const _v41$1 = /*@__PURE__*/ new Vector4$1();
  const _v42$1 = /*@__PURE__*/ new Vector4$1();

  let Triangle$1 = class Triangle {

  	constructor( a = new Vector3$1(), b = new Vector3$1(), c = new Vector3$1() ) {

  		this.a = a;
  		this.b = b;
  		this.c = c;

  	}

  	static getNormal( a, b, c, target ) {

  		target.subVectors( c, b );
  		_v0$2$1.subVectors( a, b );
  		target.cross( _v0$2$1 );

  		const targetLengthSq = target.lengthSq();
  		if ( targetLengthSq > 0 ) {

  			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

  		}

  		return target.set( 0, 0, 0 );

  	}

  	// static/instance method to calculate barycentric coordinates
  	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  	static getBarycoord( point, a, b, c, target ) {

  		_v0$2$1.subVectors( c, a );
  		_v1$3$1.subVectors( b, a );
  		_v2$2$1.subVectors( point, a );

  		const dot00 = _v0$2$1.dot( _v0$2$1 );
  		const dot01 = _v0$2$1.dot( _v1$3$1 );
  		const dot02 = _v0$2$1.dot( _v2$2$1 );
  		const dot11 = _v1$3$1.dot( _v1$3$1 );
  		const dot12 = _v1$3$1.dot( _v2$2$1 );

  		const denom = ( dot00 * dot11 - dot01 * dot01 );

  		// collinear or singular triangle
  		if ( denom === 0 ) {

  			target.set( 0, 0, 0 );
  			return null;

  		}

  		const invDenom = 1 / denom;
  		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
  		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

  		// barycentric coordinates must always sum to 1
  		return target.set( 1 - u - v, v, u );

  	}

  	static containsPoint( point, a, b, c ) {

  		// if the triangle is degenerate then we can't contain a point
  		if ( this.getBarycoord( point, a, b, c, _v3$2$1 ) === null ) {

  			return false;

  		}

  		return ( _v3$2$1.x >= 0 ) && ( _v3$2$1.y >= 0 ) && ( ( _v3$2$1.x + _v3$2$1.y ) <= 1 );

  	}

  	static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

  		if ( this.getBarycoord( point, p1, p2, p3, _v3$2$1 ) === null ) {

  			target.x = 0;
  			target.y = 0;
  			if ( 'z' in target ) target.z = 0;
  			if ( 'w' in target ) target.w = 0;
  			return null;

  		}

  		target.setScalar( 0 );
  		target.addScaledVector( v1, _v3$2$1.x );
  		target.addScaledVector( v2, _v3$2$1.y );
  		target.addScaledVector( v3, _v3$2$1.z );

  		return target;

  	}

  	static getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {

  		_v40$1.setScalar( 0 );
  		_v41$1.setScalar( 0 );
  		_v42$1.setScalar( 0 );

  		_v40$1.fromBufferAttribute( attr, i1 );
  		_v41$1.fromBufferAttribute( attr, i2 );
  		_v42$1.fromBufferAttribute( attr, i3 );

  		target.setScalar( 0 );
  		target.addScaledVector( _v40$1, barycoord.x );
  		target.addScaledVector( _v41$1, barycoord.y );
  		target.addScaledVector( _v42$1, barycoord.z );

  		return target;

  	}

  	static isFrontFacing( a, b, c, direction ) {

  		_v0$2$1.subVectors( c, b );
  		_v1$3$1.subVectors( a, b );

  		// strictly front facing
  		return ( _v0$2$1.cross( _v1$3$1 ).dot( direction ) < 0 ) ? true : false;

  	}

  	set( a, b, c ) {

  		this.a.copy( a );
  		this.b.copy( b );
  		this.c.copy( c );

  		return this;

  	}

  	setFromPointsAndIndices( points, i0, i1, i2 ) {

  		this.a.copy( points[ i0 ] );
  		this.b.copy( points[ i1 ] );
  		this.c.copy( points[ i2 ] );

  		return this;

  	}

  	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

  		this.a.fromBufferAttribute( attribute, i0 );
  		this.b.fromBufferAttribute( attribute, i1 );
  		this.c.fromBufferAttribute( attribute, i2 );

  		return this;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( triangle ) {

  		this.a.copy( triangle.a );
  		this.b.copy( triangle.b );
  		this.c.copy( triangle.c );

  		return this;

  	}

  	getArea() {

  		_v0$2$1.subVectors( this.c, this.b );
  		_v1$3$1.subVectors( this.a, this.b );

  		return _v0$2$1.cross( _v1$3$1 ).length() * 0.5;

  	}

  	getMidpoint( target ) {

  		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  	}

  	getNormal( target ) {

  		return Triangle.getNormal( this.a, this.b, this.c, target );

  	}

  	getPlane( target ) {

  		return target.setFromCoplanarPoints( this.a, this.b, this.c );

  	}

  	getBarycoord( point, target ) {

  		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

  	}

  	getInterpolation( point, v1, v2, v3, target ) {

  		return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

  	}

  	containsPoint( point ) {

  		return Triangle.containsPoint( point, this.a, this.b, this.c );

  	}

  	isFrontFacing( direction ) {

  		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

  	}

  	intersectsBox( box ) {

  		return box.intersectsTriangle( this );

  	}

  	closestPointToPoint( p, target ) {

  		const a = this.a, b = this.b, c = this.c;
  		let v, w;

  		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
  		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
  		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
  		// basically, we're distinguishing which of the voronoi regions of the triangle
  		// the point lies in with the minimum amount of redundant computation.

  		_vab$1.subVectors( b, a );
  		_vac$1.subVectors( c, a );
  		_vap$1.subVectors( p, a );
  		const d1 = _vab$1.dot( _vap$1 );
  		const d2 = _vac$1.dot( _vap$1 );
  		if ( d1 <= 0 && d2 <= 0 ) {

  			// vertex region of A; barycentric coords (1, 0, 0)
  			return target.copy( a );

  		}

  		_vbp$1.subVectors( p, b );
  		const d3 = _vab$1.dot( _vbp$1 );
  		const d4 = _vac$1.dot( _vbp$1 );
  		if ( d3 >= 0 && d4 <= d3 ) {

  			// vertex region of B; barycentric coords (0, 1, 0)
  			return target.copy( b );

  		}

  		const vc = d1 * d4 - d3 * d2;
  		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

  			v = d1 / ( d1 - d3 );
  			// edge region of AB; barycentric coords (1-v, v, 0)
  			return target.copy( a ).addScaledVector( _vab$1, v );

  		}

  		_vcp$1.subVectors( p, c );
  		const d5 = _vab$1.dot( _vcp$1 );
  		const d6 = _vac$1.dot( _vcp$1 );
  		if ( d6 >= 0 && d5 <= d6 ) {

  			// vertex region of C; barycentric coords (0, 0, 1)
  			return target.copy( c );

  		}

  		const vb = d5 * d2 - d1 * d6;
  		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

  			w = d2 / ( d2 - d6 );
  			// edge region of AC; barycentric coords (1-w, 0, w)
  			return target.copy( a ).addScaledVector( _vac$1, w );

  		}

  		const va = d3 * d6 - d5 * d4;
  		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

  			_vbc$1.subVectors( c, b );
  			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
  			// edge region of BC; barycentric coords (0, 1-w, w)
  			return target.copy( b ).addScaledVector( _vbc$1, w ); // edge region of BC

  		}

  		// face region
  		const denom = 1 / ( va + vb + vc );
  		// u = va * denom
  		v = vb * denom;
  		w = vc * denom;

  		return target.copy( a ).addScaledVector( _vab$1, v ).addScaledVector( _vac$1, w );

  	}

  	equals( triangle ) {

  		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  	}

  };

  const _colorKeywords$1 = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
  	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
  	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
  	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
  	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
  	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
  	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
  	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
  	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
  	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
  	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
  	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
  	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
  	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
  	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
  	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
  	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
  	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
  	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
  	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
  	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
  	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
  	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
  	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

  const _hslA$1 = { h: 0, s: 0, l: 0 };
  const _hslB$1 = { h: 0, s: 0, l: 0 };

  function hue2rgb$1( p, q, t ) {

  	if ( t < 0 ) t += 1;
  	if ( t > 1 ) t -= 1;
  	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
  	if ( t < 1 / 2 ) return q;
  	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
  	return p;

  }

  let Color$1 = class Color {

  	constructor( r, g, b ) {

  		this.isColor = true;

  		this.r = 1;
  		this.g = 1;
  		this.b = 1;

  		return this.set( r, g, b );

  	}

  	set( r, g, b ) {

  		if ( g === undefined && b === undefined ) {

  			// r is THREE.Color, hex or string

  			const value = r;

  			if ( value && value.isColor ) {

  				this.copy( value );

  			} else if ( typeof value === 'number' ) {

  				this.setHex( value );

  			} else if ( typeof value === 'string' ) {

  				this.setStyle( value );

  			}

  		} else {

  			this.setRGB( r, g, b );

  		}

  		return this;

  	}

  	setScalar( scalar ) {

  		this.r = scalar;
  		this.g = scalar;
  		this.b = scalar;

  		return this;

  	}

  	setHex( hex, colorSpace = SRGBColorSpace$1 ) {

  		hex = Math.floor( hex );

  		this.r = ( hex >> 16 & 255 ) / 255;
  		this.g = ( hex >> 8 & 255 ) / 255;
  		this.b = ( hex & 255 ) / 255;

  		ColorManagement$1.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setRGB( r, g, b, colorSpace = ColorManagement$1.workingColorSpace ) {

  		this.r = r;
  		this.g = g;
  		this.b = b;

  		ColorManagement$1.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setHSL( h, s, l, colorSpace = ColorManagement$1.workingColorSpace ) {

  		// h,s,l ranges are in 0.0 - 1.0
  		h = euclideanModulo$1( h, 1 );
  		s = clamp$2( s, 0, 1 );
  		l = clamp$2( l, 0, 1 );

  		if ( s === 0 ) {

  			this.r = this.g = this.b = l;

  		} else {

  			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
  			const q = ( 2 * l ) - p;

  			this.r = hue2rgb$1( q, p, h + 1 / 3 );
  			this.g = hue2rgb$1( q, p, h );
  			this.b = hue2rgb$1( q, p, h - 1 / 3 );

  		}

  		ColorManagement$1.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setStyle( style, colorSpace = SRGBColorSpace$1 ) {

  		function handleAlpha( string ) {

  			if ( string === undefined ) return;

  			if ( parseFloat( string ) < 1 ) {

  				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

  			}

  		}


  		let m;

  		if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

  			// rgb / hsl

  			let color;
  			const name = m[ 1 ];
  			const components = m[ 2 ];

  			switch ( name ) {

  				case 'rgb':
  				case 'rgba':

  					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// rgb(255,0,0) rgba(255,0,0,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setRGB(
  							Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
  							Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
  							Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
  							colorSpace
  						);

  					}

  					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setRGB(
  							Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
  							Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
  							Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
  							colorSpace
  						);

  					}

  					break;

  				case 'hsl':
  				case 'hsla':

  					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setHSL(
  							parseFloat( color[ 1 ] ) / 360,
  							parseFloat( color[ 2 ] ) / 100,
  							parseFloat( color[ 3 ] ) / 100,
  							colorSpace
  						);

  					}

  					break;

  				default:

  					console.warn( 'THREE.Color: Unknown color model ' + style );

  			}

  		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

  			// hex color

  			const hex = m[ 1 ];
  			const size = hex.length;

  			if ( size === 3 ) {

  				// #ff0
  				return this.setRGB(
  					parseInt( hex.charAt( 0 ), 16 ) / 15,
  					parseInt( hex.charAt( 1 ), 16 ) / 15,
  					parseInt( hex.charAt( 2 ), 16 ) / 15,
  					colorSpace
  				);

  			} else if ( size === 6 ) {

  				// #ff0000
  				return this.setHex( parseInt( hex, 16 ), colorSpace );

  			} else {

  				console.warn( 'THREE.Color: Invalid hex color ' + style );

  			}

  		} else if ( style && style.length > 0 ) {

  			return this.setColorName( style, colorSpace );

  		}

  		return this;

  	}

  	setColorName( style, colorSpace = SRGBColorSpace$1 ) {

  		// color keywords
  		const hex = _colorKeywords$1[ style.toLowerCase() ];

  		if ( hex !== undefined ) {

  			// red
  			this.setHex( hex, colorSpace );

  		} else {

  			// unknown color
  			console.warn( 'THREE.Color: Unknown color ' + style );

  		}

  		return this;

  	}

  	clone() {

  		return new this.constructor( this.r, this.g, this.b );

  	}

  	copy( color ) {

  		this.r = color.r;
  		this.g = color.g;
  		this.b = color.b;

  		return this;

  	}

  	copySRGBToLinear( color ) {

  		this.r = SRGBToLinear$1( color.r );
  		this.g = SRGBToLinear$1( color.g );
  		this.b = SRGBToLinear$1( color.b );

  		return this;

  	}

  	copyLinearToSRGB( color ) {

  		this.r = LinearToSRGB$1( color.r );
  		this.g = LinearToSRGB$1( color.g );
  		this.b = LinearToSRGB$1( color.b );

  		return this;

  	}

  	convertSRGBToLinear() {

  		this.copySRGBToLinear( this );

  		return this;

  	}

  	convertLinearToSRGB() {

  		this.copyLinearToSRGB( this );

  		return this;

  	}

  	getHex( colorSpace = SRGBColorSpace$1 ) {

  		ColorManagement$1.fromWorkingColorSpace( _color$1.copy( this ), colorSpace );

  		return Math.round( clamp$2( _color$1.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp$2( _color$1.g * 255, 0, 255 ) ) * 256 + Math.round( clamp$2( _color$1.b * 255, 0, 255 ) );

  	}

  	getHexString( colorSpace = SRGBColorSpace$1 ) {

  		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

  	}

  	getHSL( target, colorSpace = ColorManagement$1.workingColorSpace ) {

  		// h,s,l ranges are in 0.0 - 1.0

  		ColorManagement$1.fromWorkingColorSpace( _color$1.copy( this ), colorSpace );

  		const r = _color$1.r, g = _color$1.g, b = _color$1.b;

  		const max = Math.max( r, g, b );
  		const min = Math.min( r, g, b );

  		let hue, saturation;
  		const lightness = ( min + max ) / 2.0;

  		if ( min === max ) {

  			hue = 0;
  			saturation = 0;

  		} else {

  			const delta = max - min;

  			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

  			switch ( max ) {

  				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
  				case g: hue = ( b - r ) / delta + 2; break;
  				case b: hue = ( r - g ) / delta + 4; break;

  			}

  			hue /= 6;

  		}

  		target.h = hue;
  		target.s = saturation;
  		target.l = lightness;

  		return target;

  	}

  	getRGB( target, colorSpace = ColorManagement$1.workingColorSpace ) {

  		ColorManagement$1.fromWorkingColorSpace( _color$1.copy( this ), colorSpace );

  		target.r = _color$1.r;
  		target.g = _color$1.g;
  		target.b = _color$1.b;

  		return target;

  	}

  	getStyle( colorSpace = SRGBColorSpace$1 ) {

  		ColorManagement$1.fromWorkingColorSpace( _color$1.copy( this ), colorSpace );

  		const r = _color$1.r, g = _color$1.g, b = _color$1.b;

  		if ( colorSpace !== SRGBColorSpace$1 ) {

  			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
  			return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

  		}

  		return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

  	}

  	offsetHSL( h, s, l ) {

  		this.getHSL( _hslA$1 );

  		return this.setHSL( _hslA$1.h + h, _hslA$1.s + s, _hslA$1.l + l );

  	}

  	add( color ) {

  		this.r += color.r;
  		this.g += color.g;
  		this.b += color.b;

  		return this;

  	}

  	addColors( color1, color2 ) {

  		this.r = color1.r + color2.r;
  		this.g = color1.g + color2.g;
  		this.b = color1.b + color2.b;

  		return this;

  	}

  	addScalar( s ) {

  		this.r += s;
  		this.g += s;
  		this.b += s;

  		return this;

  	}

  	sub( color ) {

  		this.r = Math.max( 0, this.r - color.r );
  		this.g = Math.max( 0, this.g - color.g );
  		this.b = Math.max( 0, this.b - color.b );

  		return this;

  	}

  	multiply( color ) {

  		this.r *= color.r;
  		this.g *= color.g;
  		this.b *= color.b;

  		return this;

  	}

  	multiplyScalar( s ) {

  		this.r *= s;
  		this.g *= s;
  		this.b *= s;

  		return this;

  	}

  	lerp( color, alpha ) {

  		this.r += ( color.r - this.r ) * alpha;
  		this.g += ( color.g - this.g ) * alpha;
  		this.b += ( color.b - this.b ) * alpha;

  		return this;

  	}

  	lerpColors( color1, color2, alpha ) {

  		this.r = color1.r + ( color2.r - color1.r ) * alpha;
  		this.g = color1.g + ( color2.g - color1.g ) * alpha;
  		this.b = color1.b + ( color2.b - color1.b ) * alpha;

  		return this;

  	}

  	lerpHSL( color, alpha ) {

  		this.getHSL( _hslA$1 );
  		color.getHSL( _hslB$1 );

  		const h = lerp$1( _hslA$1.h, _hslB$1.h, alpha );
  		const s = lerp$1( _hslA$1.s, _hslB$1.s, alpha );
  		const l = lerp$1( _hslA$1.l, _hslB$1.l, alpha );

  		this.setHSL( h, s, l );

  		return this;

  	}

  	setFromVector3( v ) {

  		this.r = v.x;
  		this.g = v.y;
  		this.b = v.z;

  		return this;

  	}

  	applyMatrix3( m ) {

  		const r = this.r, g = this.g, b = this.b;
  		const e = m.elements;

  		this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
  		this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
  		this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

  		return this;

  	}

  	equals( c ) {

  		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  	}

  	fromArray( array, offset = 0 ) {

  		this.r = array[ offset ];
  		this.g = array[ offset + 1 ];
  		this.b = array[ offset + 2 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.r;
  		array[ offset + 1 ] = this.g;
  		array[ offset + 2 ] = this.b;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.r = attribute.getX( index );
  		this.g = attribute.getY( index );
  		this.b = attribute.getZ( index );

  		return this;

  	}

  	toJSON() {

  		return this.getHex();

  	}

  	*[ Symbol.iterator ]() {

  		yield this.r;
  		yield this.g;
  		yield this.b;

  	}

  };

  const _color$1 = /*@__PURE__*/ new Color$1();

  Color$1.NAMES = _colorKeywords$1;

  let _materialId$1 = 0;

  let Material$1 = class Material extends EventDispatcher$1 {

  	static get type() {

  		return 'Material';

  	}

  	get type() {

  		return this.constructor.type;

  	}

  	set type( _value ) { /* */ }

  	constructor() {

  		super();

  		this.isMaterial = true;

  		Object.defineProperty( this, 'id', { value: _materialId$1 ++ } );

  		this.uuid = generateUUID$1();

  		this.name = '';

  		this.blending = NormalBlending$1;
  		this.side = FrontSide$1;
  		this.vertexColors = false;

  		this.opacity = 1;
  		this.transparent = false;
  		this.alphaHash = false;

  		this.blendSrc = SrcAlphaFactor$1;
  		this.blendDst = OneMinusSrcAlphaFactor$1;
  		this.blendEquation = AddEquation$1;
  		this.blendSrcAlpha = null;
  		this.blendDstAlpha = null;
  		this.blendEquationAlpha = null;
  		this.blendColor = new Color$1( 0, 0, 0 );
  		this.blendAlpha = 0;

  		this.depthFunc = LessEqualDepth$1;
  		this.depthTest = true;
  		this.depthWrite = true;

  		this.stencilWriteMask = 0xff;
  		this.stencilFunc = AlwaysStencilFunc$1;
  		this.stencilRef = 0;
  		this.stencilFuncMask = 0xff;
  		this.stencilFail = KeepStencilOp$1;
  		this.stencilZFail = KeepStencilOp$1;
  		this.stencilZPass = KeepStencilOp$1;
  		this.stencilWrite = false;

  		this.clippingPlanes = null;
  		this.clipIntersection = false;
  		this.clipShadows = false;

  		this.shadowSide = null;

  		this.colorWrite = true;

  		this.precision = null; // override the renderer's default precision for this material

  		this.polygonOffset = false;
  		this.polygonOffsetFactor = 0;
  		this.polygonOffsetUnits = 0;

  		this.dithering = false;

  		this.alphaToCoverage = false;
  		this.premultipliedAlpha = false;
  		this.forceSinglePass = false;

  		this.visible = true;

  		this.toneMapped = true;

  		this.userData = {};

  		this.version = 0;

  		this._alphaTest = 0;

  	}

  	get alphaTest() {

  		return this._alphaTest;

  	}

  	set alphaTest( value ) {

  		if ( this._alphaTest > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._alphaTest = value;

  	}

  	// onBeforeRender and onBeforeCompile only supported in WebGLRenderer

  	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

  	onBeforeCompile( /* shaderobject, renderer */ ) {}

  	customProgramCacheKey() {

  		return this.onBeforeCompile.toString();

  	}

  	setValues( values ) {

  		if ( values === undefined ) return;

  		for ( const key in values ) {

  			const newValue = values[ key ];

  			if ( newValue === undefined ) {

  				console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
  				continue;

  			}

  			const currentValue = this[ key ];

  			if ( currentValue === undefined ) {

  				console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
  				continue;

  			}

  			if ( currentValue && currentValue.isColor ) {

  				currentValue.set( newValue );

  			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

  				currentValue.copy( newValue );

  			} else {

  				this[ key ] = newValue;

  			}

  		}

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( isRootObject ) {

  			meta = {
  				textures: {},
  				images: {}
  			};

  		}

  		const data = {
  			metadata: {
  				version: 4.6,
  				type: 'Material',
  				generator: 'Material.toJSON'
  			}
  		};

  		// standard Material serialization
  		data.uuid = this.uuid;
  		data.type = this.type;

  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

  		if ( this.roughness !== undefined ) data.roughness = this.roughness;
  		if ( this.metalness !== undefined ) data.metalness = this.metalness;

  		if ( this.sheen !== undefined ) data.sheen = this.sheen;
  		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
  		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
  		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
  		if ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

  		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
  		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
  		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
  		if ( this.shininess !== undefined ) data.shininess = this.shininess;
  		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
  		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

  		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

  			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

  			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

  			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
  			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

  		}

  		if ( this.dispersion !== undefined ) data.dispersion = this.dispersion;

  		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
  		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
  		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

  		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

  			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

  		}

  		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

  			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

  		}

  		if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
  		if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

  		if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

  			data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

  		}

  		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
  		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
  		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

  		if ( this.lightMap && this.lightMap.isTexture ) {

  			data.lightMap = this.lightMap.toJSON( meta ).uuid;
  			data.lightMapIntensity = this.lightMapIntensity;

  		}

  		if ( this.aoMap && this.aoMap.isTexture ) {

  			data.aoMap = this.aoMap.toJSON( meta ).uuid;
  			data.aoMapIntensity = this.aoMapIntensity;

  		}

  		if ( this.bumpMap && this.bumpMap.isTexture ) {

  			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
  			data.bumpScale = this.bumpScale;

  		}

  		if ( this.normalMap && this.normalMap.isTexture ) {

  			data.normalMap = this.normalMap.toJSON( meta ).uuid;
  			data.normalMapType = this.normalMapType;
  			data.normalScale = this.normalScale.toArray();

  		}

  		if ( this.displacementMap && this.displacementMap.isTexture ) {

  			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
  			data.displacementScale = this.displacementScale;
  			data.displacementBias = this.displacementBias;

  		}

  		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
  		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

  		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
  		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
  		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
  		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

  		if ( this.envMap && this.envMap.isTexture ) {

  			data.envMap = this.envMap.toJSON( meta ).uuid;

  			if ( this.combine !== undefined ) data.combine = this.combine;

  		}

  		if ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();
  		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
  		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
  		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

  		if ( this.gradientMap && this.gradientMap.isTexture ) {

  			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

  		}

  		if ( this.transmission !== undefined ) data.transmission = this.transmission;
  		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
  		if ( this.thickness !== undefined ) data.thickness = this.thickness;
  		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
  		if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
  		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

  		if ( this.size !== undefined ) data.size = this.size;
  		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
  		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

  		if ( this.blending !== NormalBlending$1 ) data.blending = this.blending;
  		if ( this.side !== FrontSide$1 ) data.side = this.side;
  		if ( this.vertexColors === true ) data.vertexColors = true;

  		if ( this.opacity < 1 ) data.opacity = this.opacity;
  		if ( this.transparent === true ) data.transparent = true;

  		if ( this.blendSrc !== SrcAlphaFactor$1 ) data.blendSrc = this.blendSrc;
  		if ( this.blendDst !== OneMinusSrcAlphaFactor$1 ) data.blendDst = this.blendDst;
  		if ( this.blendEquation !== AddEquation$1 ) data.blendEquation = this.blendEquation;
  		if ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;
  		if ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;
  		if ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;
  		if ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();
  		if ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;

  		if ( this.depthFunc !== LessEqualDepth$1 ) data.depthFunc = this.depthFunc;
  		if ( this.depthTest === false ) data.depthTest = this.depthTest;
  		if ( this.depthWrite === false ) data.depthWrite = this.depthWrite;
  		if ( this.colorWrite === false ) data.colorWrite = this.colorWrite;

  		if ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;
  		if ( this.stencilFunc !== AlwaysStencilFunc$1 ) data.stencilFunc = this.stencilFunc;
  		if ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;
  		if ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;
  		if ( this.stencilFail !== KeepStencilOp$1 ) data.stencilFail = this.stencilFail;
  		if ( this.stencilZFail !== KeepStencilOp$1 ) data.stencilZFail = this.stencilZFail;
  		if ( this.stencilZPass !== KeepStencilOp$1 ) data.stencilZPass = this.stencilZPass;
  		if ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;

  		// rotation (SpriteMaterial)
  		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

  		if ( this.polygonOffset === true ) data.polygonOffset = true;
  		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
  		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

  		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
  		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
  		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
  		if ( this.scale !== undefined ) data.scale = this.scale;

  		if ( this.dithering === true ) data.dithering = true;

  		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
  		if ( this.alphaHash === true ) data.alphaHash = true;
  		if ( this.alphaToCoverage === true ) data.alphaToCoverage = true;
  		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;
  		if ( this.forceSinglePass === true ) data.forceSinglePass = true;

  		if ( this.wireframe === true ) data.wireframe = true;
  		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
  		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
  		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

  		if ( this.flatShading === true ) data.flatShading = true;

  		if ( this.visible === false ) data.visible = false;

  		if ( this.toneMapped === false ) data.toneMapped = false;

  		if ( this.fog === false ) data.fog = false;

  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			const values = [];

  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRootObject ) {

  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;

  		}

  		return data;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.name = source.name;

  		this.blending = source.blending;
  		this.side = source.side;
  		this.vertexColors = source.vertexColors;

  		this.opacity = source.opacity;
  		this.transparent = source.transparent;

  		this.blendSrc = source.blendSrc;
  		this.blendDst = source.blendDst;
  		this.blendEquation = source.blendEquation;
  		this.blendSrcAlpha = source.blendSrcAlpha;
  		this.blendDstAlpha = source.blendDstAlpha;
  		this.blendEquationAlpha = source.blendEquationAlpha;
  		this.blendColor.copy( source.blendColor );
  		this.blendAlpha = source.blendAlpha;

  		this.depthFunc = source.depthFunc;
  		this.depthTest = source.depthTest;
  		this.depthWrite = source.depthWrite;

  		this.stencilWriteMask = source.stencilWriteMask;
  		this.stencilFunc = source.stencilFunc;
  		this.stencilRef = source.stencilRef;
  		this.stencilFuncMask = source.stencilFuncMask;
  		this.stencilFail = source.stencilFail;
  		this.stencilZFail = source.stencilZFail;
  		this.stencilZPass = source.stencilZPass;
  		this.stencilWrite = source.stencilWrite;

  		const srcPlanes = source.clippingPlanes;
  		let dstPlanes = null;

  		if ( srcPlanes !== null ) {

  			const n = srcPlanes.length;
  			dstPlanes = new Array( n );

  			for ( let i = 0; i !== n; ++ i ) {

  				dstPlanes[ i ] = srcPlanes[ i ].clone();

  			}

  		}

  		this.clippingPlanes = dstPlanes;
  		this.clipIntersection = source.clipIntersection;
  		this.clipShadows = source.clipShadows;

  		this.shadowSide = source.shadowSide;

  		this.colorWrite = source.colorWrite;

  		this.precision = source.precision;

  		this.polygonOffset = source.polygonOffset;
  		this.polygonOffsetFactor = source.polygonOffsetFactor;
  		this.polygonOffsetUnits = source.polygonOffsetUnits;

  		this.dithering = source.dithering;

  		this.alphaTest = source.alphaTest;
  		this.alphaHash = source.alphaHash;
  		this.alphaToCoverage = source.alphaToCoverage;
  		this.premultipliedAlpha = source.premultipliedAlpha;
  		this.forceSinglePass = source.forceSinglePass;

  		this.visible = source.visible;

  		this.toneMapped = source.toneMapped;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	onBuild( /* shaderobject, renderer */ ) {

  		console.warn( 'Material: onBuild() has been removed.' ); // @deprecated, r166

  	}

  };

  let MeshBasicMaterial$1 = class MeshBasicMaterial extends Material$1 {

  	static get type() {

  		return 'MeshBasicMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshBasicMaterial = true;

  		this.color = new Color$1( 0xffffff ); // emissive

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.specularMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler$1();
  		this.combine = MultiplyOperation$1;
  		this.reflectivity = 1;
  		this.refractionRatio = 0.98;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.specularMap = source.specularMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.combine = source.combine;
  		this.reflectivity = source.reflectivity;
  		this.refractionRatio = source.refractionRatio;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.fog = source.fog;

  		return this;

  	}

  };

  const _vector$9$1 = /*@__PURE__*/ new Vector3$1();
  const _vector2$1$1 = /*@__PURE__*/ new Vector2$1();

  let BufferAttribute$1 = class BufferAttribute {

  	constructor( array, itemSize, normalized = false ) {

  		if ( Array.isArray( array ) ) {

  			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  		}

  		this.isBufferAttribute = true;

  		this.name = '';

  		this.array = array;
  		this.itemSize = itemSize;
  		this.count = array !== undefined ? array.length / itemSize : 0;
  		this.normalized = normalized;

  		this.usage = StaticDrawUsage$1;
  		this.updateRanges = [];
  		this.gpuType = FloatType$1;

  		this.version = 0;

  	}

  	onUploadCallback() {}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	setUsage( value ) {

  		this.usage = value;

  		return this;

  	}

  	addUpdateRange( start, count ) {

  		this.updateRanges.push( { start, count } );

  	}

  	clearUpdateRanges() {

  		this.updateRanges.length = 0;

  	}

  	copy( source ) {

  		this.name = source.name;
  		this.array = new source.array.constructor( source.array );
  		this.itemSize = source.itemSize;
  		this.count = source.count;
  		this.normalized = source.normalized;

  		this.usage = source.usage;
  		this.gpuType = source.gpuType;

  		return this;

  	}

  	copyAt( index1, attribute, index2 ) {

  		index1 *= this.itemSize;
  		index2 *= attribute.itemSize;

  		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	}

  	copyArray( array ) {

  		this.array.set( array );

  		return this;

  	}

  	applyMatrix3( m ) {

  		if ( this.itemSize === 2 ) {

  			for ( let i = 0, l = this.count; i < l; i ++ ) {

  				_vector2$1$1.fromBufferAttribute( this, i );
  				_vector2$1$1.applyMatrix3( m );

  				this.setXY( i, _vector2$1$1.x, _vector2$1$1.y );

  			}

  		} else if ( this.itemSize === 3 ) {

  			for ( let i = 0, l = this.count; i < l; i ++ ) {

  				_vector$9$1.fromBufferAttribute( this, i );
  				_vector$9$1.applyMatrix3( m );

  				this.setXYZ( i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z );

  			}

  		}

  		return this;

  	}

  	applyMatrix4( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9$1.fromBufferAttribute( this, i );

  			_vector$9$1.applyMatrix4( m );

  			this.setXYZ( i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z );

  		}

  		return this;

  	}

  	applyNormalMatrix( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9$1.fromBufferAttribute( this, i );

  			_vector$9$1.applyNormalMatrix( m );

  			this.setXYZ( i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z );

  		}

  		return this;

  	}

  	transformDirection( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9$1.fromBufferAttribute( this, i );

  			_vector$9$1.transformDirection( m );

  			this.setXYZ( i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z );

  		}

  		return this;

  	}

  	set( value, offset = 0 ) {

  		// Matching BufferAttribute constructor, do not normalize the array.
  		this.array.set( value, offset );

  		return this;

  	}

  	getComponent( index, component ) {

  		let value = this.array[ index * this.itemSize + component ];

  		if ( this.normalized ) value = denormalize$1( value, this.array );

  		return value;

  	}

  	setComponent( index, component, value ) {

  		if ( this.normalized ) value = normalize$2( value, this.array );

  		this.array[ index * this.itemSize + component ] = value;

  		return this;

  	}

  	getX( index ) {

  		let x = this.array[ index * this.itemSize ];

  		if ( this.normalized ) x = denormalize$1( x, this.array );

  		return x;

  	}

  	setX( index, x ) {

  		if ( this.normalized ) x = normalize$2( x, this.array );

  		this.array[ index * this.itemSize ] = x;

  		return this;

  	}

  	getY( index ) {

  		let y = this.array[ index * this.itemSize + 1 ];

  		if ( this.normalized ) y = denormalize$1( y, this.array );

  		return y;

  	}

  	setY( index, y ) {

  		if ( this.normalized ) y = normalize$2( y, this.array );

  		this.array[ index * this.itemSize + 1 ] = y;

  		return this;

  	}

  	getZ( index ) {

  		let z = this.array[ index * this.itemSize + 2 ];

  		if ( this.normalized ) z = denormalize$1( z, this.array );

  		return z;

  	}

  	setZ( index, z ) {

  		if ( this.normalized ) z = normalize$2( z, this.array );

  		this.array[ index * this.itemSize + 2 ] = z;

  		return this;

  	}

  	getW( index ) {

  		let w = this.array[ index * this.itemSize + 3 ];

  		if ( this.normalized ) w = denormalize$1( w, this.array );

  		return w;

  	}

  	setW( index, w ) {

  		if ( this.normalized ) w = normalize$2( w, this.array );

  		this.array[ index * this.itemSize + 3 ] = w;

  		return this;

  	}

  	setXY( index, x, y ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$2( x, this.array );
  			y = normalize$2( y, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;

  		return this;

  	}

  	setXYZ( index, x, y, z ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$2( x, this.array );
  			y = normalize$2( y, this.array );
  			z = normalize$2( z, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;

  		return this;

  	}

  	setXYZW( index, x, y, z, w ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$2( x, this.array );
  			y = normalize$2( y, this.array );
  			z = normalize$2( z, this.array );
  			w = normalize$2( w, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;
  		this.array[ index + 3 ] = w;

  		return this;

  	}

  	onUpload( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	}

  	clone() {

  		return new this.constructor( this.array, this.itemSize ).copy( this );

  	}

  	toJSON() {

  		const data = {
  			itemSize: this.itemSize,
  			type: this.array.constructor.name,
  			array: Array.from( this.array ),
  			normalized: this.normalized
  		};

  		if ( this.name !== '' ) data.name = this.name;
  		if ( this.usage !== StaticDrawUsage$1 ) data.usage = this.usage;

  		return data;

  	}

  };

  let Uint16BufferAttribute$1 = class Uint16BufferAttribute extends BufferAttribute$1 {

  	constructor( array, itemSize, normalized ) {

  		super( new Uint16Array( array ), itemSize, normalized );

  	}

  };

  let Uint32BufferAttribute$1 = class Uint32BufferAttribute extends BufferAttribute$1 {

  	constructor( array, itemSize, normalized ) {

  		super( new Uint32Array( array ), itemSize, normalized );

  	}

  };


  let Float32BufferAttribute$1 = class Float32BufferAttribute extends BufferAttribute$1 {

  	constructor( array, itemSize, normalized ) {

  		super( new Float32Array( array ), itemSize, normalized );

  	}

  };

  let _id$2$1 = 0;

  const _m1$2$1 = /*@__PURE__*/ new Matrix4$1();
  const _obj$1 = /*@__PURE__*/ new Object3D$1();
  const _offset$2 = /*@__PURE__*/ new Vector3$1();
  const _box$2$1 = /*@__PURE__*/ new Box3$1();
  const _boxMorphTargets$1 = /*@__PURE__*/ new Box3$1();
  const _vector$8$1 = /*@__PURE__*/ new Vector3$1();

  let BufferGeometry$1 = class BufferGeometry extends EventDispatcher$1 {

  	constructor() {

  		super();

  		this.isBufferGeometry = true;

  		Object.defineProperty( this, 'id', { value: _id$2$1 ++ } );

  		this.uuid = generateUUID$1();

  		this.name = '';
  		this.type = 'BufferGeometry';

  		this.index = null;
  		this.indirect = null;
  		this.attributes = {};

  		this.morphAttributes = {};
  		this.morphTargetsRelative = false;

  		this.groups = [];

  		this.boundingBox = null;
  		this.boundingSphere = null;

  		this.drawRange = { start: 0, count: Infinity };

  		this.userData = {};

  	}

  	getIndex() {

  		return this.index;

  	}

  	setIndex( index ) {

  		if ( Array.isArray( index ) ) {

  			this.index = new ( arrayNeedsUint32$2( index ) ? Uint32BufferAttribute$1 : Uint16BufferAttribute$1 )( index, 1 );

  		} else {

  			this.index = index;

  		}

  		return this;

  	}

  	setIndirect( indirect ) {

  		this.indirect = indirect;

  		return this;

  	}

  	getIndirect() {

  		return this.indirect;

  	}

  	getAttribute( name ) {

  		return this.attributes[ name ];

  	}

  	setAttribute( name, attribute ) {

  		this.attributes[ name ] = attribute;

  		return this;

  	}

  	deleteAttribute( name ) {

  		delete this.attributes[ name ];

  		return this;

  	}

  	hasAttribute( name ) {

  		return this.attributes[ name ] !== undefined;

  	}

  	addGroup( start, count, materialIndex = 0 ) {

  		this.groups.push( {

  			start: start,
  			count: count,
  			materialIndex: materialIndex

  		} );

  	}

  	clearGroups() {

  		this.groups = [];

  	}

  	setDrawRange( start, count ) {

  		this.drawRange.start = start;
  		this.drawRange.count = count;

  	}

  	applyMatrix4( matrix ) {

  		const position = this.attributes.position;

  		if ( position !== undefined ) {

  			position.applyMatrix4( matrix );

  			position.needsUpdate = true;

  		}

  		const normal = this.attributes.normal;

  		if ( normal !== undefined ) {

  			const normalMatrix = new Matrix3$1().getNormalMatrix( matrix );

  			normal.applyNormalMatrix( normalMatrix );

  			normal.needsUpdate = true;

  		}

  		const tangent = this.attributes.tangent;

  		if ( tangent !== undefined ) {

  			tangent.transformDirection( matrix );

  			tangent.needsUpdate = true;

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		return this;

  	}

  	applyQuaternion( q ) {

  		_m1$2$1.makeRotationFromQuaternion( q );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	rotateX( angle ) {

  		// rotate geometry around world x-axis

  		_m1$2$1.makeRotationX( angle );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	rotateY( angle ) {

  		// rotate geometry around world y-axis

  		_m1$2$1.makeRotationY( angle );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	rotateZ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$2$1.makeRotationZ( angle );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	translate( x, y, z ) {

  		// translate geometry

  		_m1$2$1.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	scale( x, y, z ) {

  		// scale geometry

  		_m1$2$1.makeScale( x, y, z );

  		this.applyMatrix4( _m1$2$1 );

  		return this;

  	}

  	lookAt( vector ) {

  		_obj$1.lookAt( vector );

  		_obj$1.updateMatrix();

  		this.applyMatrix4( _obj$1.matrix );

  		return this;

  	}

  	center() {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset$2 ).negate();

  		this.translate( _offset$2.x, _offset$2.y, _offset$2.z );

  		return this;

  	}

  	setFromPoints( points ) {

  		const positionAttribute = this.getAttribute( 'position' );

  		if ( positionAttribute === undefined ) {

  			const position = [];

  			for ( let i = 0, l = points.length; i < l; i ++ ) {

  				const point = points[ i ];
  				position.push( point.x, point.y, point.z || 0 );

  			}

  			this.setAttribute( 'position', new Float32BufferAttribute$1( position, 3 ) );

  		} else {

  			for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

  				const point = points[ i ];
  				positionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );

  			}

  			if ( points.length > positionAttribute.count ) {

  				console.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );

  			}

  			positionAttribute.needsUpdate = true;

  		}

  		return this;

  	}

  	computeBoundingBox() {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3$1();

  		}

  		const position = this.attributes.position;
  		const morphAttributesPosition = this.morphAttributes.position;

  		if ( position && position.isGLBufferAttribute ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );

  			this.boundingBox.set(
  				new Vector3$1( - Infinity, - Infinity, - Infinity ),
  				new Vector3$1( + Infinity, + Infinity, + Infinity )
  			);

  			return;

  		}

  		if ( position !== undefined ) {

  			this.boundingBox.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					_box$2$1.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$8$1.addVectors( this.boundingBox.min, _box$2$1.min );
  						this.boundingBox.expandByPoint( _vector$8$1 );

  						_vector$8$1.addVectors( this.boundingBox.max, _box$2$1.max );
  						this.boundingBox.expandByPoint( _vector$8$1 );

  					} else {

  						this.boundingBox.expandByPoint( _box$2$1.min );
  						this.boundingBox.expandByPoint( _box$2$1.max );

  					}

  				}

  			}

  		} else {

  			this.boundingBox.makeEmpty();

  		}

  		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

  		}

  	}

  	computeBoundingSphere() {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere$1();

  		}

  		const position = this.attributes.position;
  		const morphAttributesPosition = this.morphAttributes.position;

  		if ( position && position.isGLBufferAttribute ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );

  			this.boundingSphere.set( new Vector3$1(), Infinity );

  			return;

  		}

  		if ( position ) {

  			// first, find the center of the bounding sphere

  			const center = this.boundingSphere.center;

  			_box$2$1.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					_boxMorphTargets$1.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$8$1.addVectors( _box$2$1.min, _boxMorphTargets$1.min );
  						_box$2$1.expandByPoint( _vector$8$1 );

  						_vector$8$1.addVectors( _box$2$1.max, _boxMorphTargets$1.max );
  						_box$2$1.expandByPoint( _vector$8$1 );

  					} else {

  						_box$2$1.expandByPoint( _boxMorphTargets$1.min );
  						_box$2$1.expandByPoint( _boxMorphTargets$1.max );

  					}

  				}

  			}

  			_box$2$1.getCenter( center );

  			// second, try to find a boundingSphere with a radius smaller than the
  			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

  			let maxRadiusSq = 0;

  			for ( let i = 0, il = position.count; i < il; i ++ ) {

  				_vector$8$1.fromBufferAttribute( position, i );

  				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8$1 ) );

  			}

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					const morphTargetsRelative = this.morphTargetsRelative;

  					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

  						_vector$8$1.fromBufferAttribute( morphAttribute, j );

  						if ( morphTargetsRelative ) {

  							_offset$2.fromBufferAttribute( position, j );
  							_vector$8$1.add( _offset$2 );

  						}

  						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8$1 ) );

  					}

  				}

  			}

  			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

  			if ( isNaN( this.boundingSphere.radius ) ) {

  				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

  			}

  		}

  	}

  	computeTangents() {

  		const index = this.index;
  		const attributes = this.attributes;

  		// based on http://www.terathon.com/code/tangent.html
  		// (per vertex tangents)

  		if ( index === null ||
  			 attributes.position === undefined ||
  			 attributes.normal === undefined ||
  			 attributes.uv === undefined ) {

  			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
  			return;

  		}

  		const positionAttribute = attributes.position;
  		const normalAttribute = attributes.normal;
  		const uvAttribute = attributes.uv;

  		if ( this.hasAttribute( 'tangent' ) === false ) {

  			this.setAttribute( 'tangent', new BufferAttribute$1( new Float32Array( 4 * positionAttribute.count ), 4 ) );

  		}

  		const tangentAttribute = this.getAttribute( 'tangent' );

  		const tan1 = [], tan2 = [];

  		for ( let i = 0; i < positionAttribute.count; i ++ ) {

  			tan1[ i ] = new Vector3$1();
  			tan2[ i ] = new Vector3$1();

  		}

  		const vA = new Vector3$1(),
  			vB = new Vector3$1(),
  			vC = new Vector3$1(),

  			uvA = new Vector2$1(),
  			uvB = new Vector2$1(),
  			uvC = new Vector2$1(),

  			sdir = new Vector3$1(),
  			tdir = new Vector3$1();

  		function handleTriangle( a, b, c ) {

  			vA.fromBufferAttribute( positionAttribute, a );
  			vB.fromBufferAttribute( positionAttribute, b );
  			vC.fromBufferAttribute( positionAttribute, c );

  			uvA.fromBufferAttribute( uvAttribute, a );
  			uvB.fromBufferAttribute( uvAttribute, b );
  			uvC.fromBufferAttribute( uvAttribute, c );

  			vB.sub( vA );
  			vC.sub( vA );

  			uvB.sub( uvA );
  			uvC.sub( uvA );

  			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

  			// silently ignore degenerate uv triangles having coincident or colinear vertices

  			if ( ! isFinite( r ) ) return;

  			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
  			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

  			tan1[ a ].add( sdir );
  			tan1[ b ].add( sdir );
  			tan1[ c ].add( sdir );

  			tan2[ a ].add( tdir );
  			tan2[ b ].add( tdir );
  			tan2[ c ].add( tdir );

  		}

  		let groups = this.groups;

  		if ( groups.length === 0 ) {

  			groups = [ {
  				start: 0,
  				count: index.count
  			} ];

  		}

  		for ( let i = 0, il = groups.length; i < il; ++ i ) {

  			const group = groups[ i ];

  			const start = group.start;
  			const count = group.count;

  			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

  				handleTriangle(
  					index.getX( j + 0 ),
  					index.getX( j + 1 ),
  					index.getX( j + 2 )
  				);

  			}

  		}

  		const tmp = new Vector3$1(), tmp2 = new Vector3$1();
  		const n = new Vector3$1(), n2 = new Vector3$1();

  		function handleVertex( v ) {

  			n.fromBufferAttribute( normalAttribute, v );
  			n2.copy( n );

  			const t = tan1[ v ];

  			// Gram-Schmidt orthogonalize

  			tmp.copy( t );
  			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

  			// Calculate handedness

  			tmp2.crossVectors( n2, t );
  			const test = tmp2.dot( tan2[ v ] );
  			const w = ( test < 0.0 ) ? - 1.0 : 1.0;

  			tangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );

  		}

  		for ( let i = 0, il = groups.length; i < il; ++ i ) {

  			const group = groups[ i ];

  			const start = group.start;
  			const count = group.count;

  			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

  				handleVertex( index.getX( j + 0 ) );
  				handleVertex( index.getX( j + 1 ) );
  				handleVertex( index.getX( j + 2 ) );

  			}

  		}

  	}

  	computeVertexNormals() {

  		const index = this.index;
  		const positionAttribute = this.getAttribute( 'position' );

  		if ( positionAttribute !== undefined ) {

  			let normalAttribute = this.getAttribute( 'normal' );

  			if ( normalAttribute === undefined ) {

  				normalAttribute = new BufferAttribute$1( new Float32Array( positionAttribute.count * 3 ), 3 );
  				this.setAttribute( 'normal', normalAttribute );

  			} else {

  				// reset existing normals to zero

  				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

  					normalAttribute.setXYZ( i, 0, 0, 0 );

  				}

  			}

  			const pA = new Vector3$1(), pB = new Vector3$1(), pC = new Vector3$1();
  			const nA = new Vector3$1(), nB = new Vector3$1(), nC = new Vector3$1();
  			const cb = new Vector3$1(), ab = new Vector3$1();

  			// indexed elements

  			if ( index ) {

  				for ( let i = 0, il = index.count; i < il; i += 3 ) {

  					const vA = index.getX( i + 0 );
  					const vB = index.getX( i + 1 );
  					const vC = index.getX( i + 2 );

  					pA.fromBufferAttribute( positionAttribute, vA );
  					pB.fromBufferAttribute( positionAttribute, vB );
  					pC.fromBufferAttribute( positionAttribute, vC );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					nA.fromBufferAttribute( normalAttribute, vA );
  					nB.fromBufferAttribute( normalAttribute, vB );
  					nC.fromBufferAttribute( normalAttribute, vC );

  					nA.add( cb );
  					nB.add( cb );
  					nC.add( cb );

  					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
  					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
  					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

  				}

  			} else {

  				// non-indexed elements (unconnected triangle soup)

  				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

  					pA.fromBufferAttribute( positionAttribute, i + 0 );
  					pB.fromBufferAttribute( positionAttribute, i + 1 );
  					pC.fromBufferAttribute( positionAttribute, i + 2 );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

  				}

  			}

  			this.normalizeNormals();

  			normalAttribute.needsUpdate = true;

  		}

  	}

  	normalizeNormals() {

  		const normals = this.attributes.normal;

  		for ( let i = 0, il = normals.count; i < il; i ++ ) {

  			_vector$8$1.fromBufferAttribute( normals, i );

  			_vector$8$1.normalize();

  			normals.setXYZ( i, _vector$8$1.x, _vector$8$1.y, _vector$8$1.z );

  		}

  	}

  	toNonIndexed() {

  		function convertBufferAttribute( attribute, indices ) {

  			const array = attribute.array;
  			const itemSize = attribute.itemSize;
  			const normalized = attribute.normalized;

  			const array2 = new array.constructor( indices.length * itemSize );

  			let index = 0, index2 = 0;

  			for ( let i = 0, l = indices.length; i < l; i ++ ) {

  				if ( attribute.isInterleavedBufferAttribute ) {

  					index = indices[ i ] * attribute.data.stride + attribute.offset;

  				} else {

  					index = indices[ i ] * itemSize;

  				}

  				for ( let j = 0; j < itemSize; j ++ ) {

  					array2[ index2 ++ ] = array[ index ++ ];

  				}

  			}

  			return new BufferAttribute$1( array2, itemSize, normalized );

  		}

  		//

  		if ( this.index === null ) {

  			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
  			return this;

  		}

  		const geometry2 = new BufferGeometry();

  		const indices = this.index.array;
  		const attributes = this.attributes;

  		// attributes

  		for ( const name in attributes ) {

  			const attribute = attributes[ name ];

  			const newAttribute = convertBufferAttribute( attribute, indices );

  			geometry2.setAttribute( name, newAttribute );

  		}

  		// morph attributes

  		const morphAttributes = this.morphAttributes;

  		for ( const name in morphAttributes ) {

  			const morphArray = [];
  			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

  				const attribute = morphAttribute[ i ];

  				const newAttribute = convertBufferAttribute( attribute, indices );

  				morphArray.push( newAttribute );

  			}

  			geometry2.morphAttributes[ name ] = morphArray;

  		}

  		geometry2.morphTargetsRelative = this.morphTargetsRelative;

  		// groups

  		const groups = this.groups;

  		for ( let i = 0, l = groups.length; i < l; i ++ ) {

  			const group = groups[ i ];
  			geometry2.addGroup( group.start, group.count, group.materialIndex );

  		}

  		return geometry2;

  	}

  	toJSON() {

  		const data = {
  			metadata: {
  				version: 4.6,
  				type: 'BufferGeometry',
  				generator: 'BufferGeometry.toJSON'
  			}
  		};

  		// standard BufferGeometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;
  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		if ( this.parameters !== undefined ) {

  			const parameters = this.parameters;

  			for ( const key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		// for simplicity the code assumes attributes are not shared across geometries, see #15811

  		data.data = { attributes: {} };

  		const index = this.index;

  		if ( index !== null ) {

  			data.data.index = {
  				type: index.array.constructor.name,
  				array: Array.prototype.slice.call( index.array )
  			};

  		}

  		const attributes = this.attributes;

  		for ( const key in attributes ) {

  			const attribute = attributes[ key ];

  			data.data.attributes[ key ] = attribute.toJSON( data.data );

  		}

  		const morphAttributes = {};
  		let hasMorphAttributes = false;

  		for ( const key in this.morphAttributes ) {

  			const attributeArray = this.morphAttributes[ key ];

  			const array = [];

  			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

  				const attribute = attributeArray[ i ];

  				array.push( attribute.toJSON( data.data ) );

  			}

  			if ( array.length > 0 ) {

  				morphAttributes[ key ] = array;

  				hasMorphAttributes = true;

  			}

  		}

  		if ( hasMorphAttributes ) {

  			data.data.morphAttributes = morphAttributes;
  			data.data.morphTargetsRelative = this.morphTargetsRelative;

  		}

  		const groups = this.groups;

  		if ( groups.length > 0 ) {

  			data.data.groups = JSON.parse( JSON.stringify( groups ) );

  		}

  		const boundingSphere = this.boundingSphere;

  		if ( boundingSphere !== null ) {

  			data.data.boundingSphere = {
  				center: boundingSphere.center.toArray(),
  				radius: boundingSphere.radius
  			};

  		}

  		return data;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		// reset

  		this.index = null;
  		this.attributes = {};
  		this.morphAttributes = {};
  		this.groups = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// used for storing cloned, shared data

  		const data = {};

  		// name

  		this.name = source.name;

  		// index

  		const index = source.index;

  		if ( index !== null ) {

  			this.setIndex( index.clone( data ) );

  		}

  		// attributes

  		const attributes = source.attributes;

  		for ( const name in attributes ) {

  			const attribute = attributes[ name ];
  			this.setAttribute( name, attribute.clone( data ) );

  		}

  		// morph attributes

  		const morphAttributes = source.morphAttributes;

  		for ( const name in morphAttributes ) {

  			const array = [];
  			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

  				array.push( morphAttribute[ i ].clone( data ) );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		this.morphTargetsRelative = source.morphTargetsRelative;

  		// groups

  		const groups = source.groups;

  		for ( let i = 0, l = groups.length; i < l; i ++ ) {

  			const group = groups[ i ];
  			this.addGroup( group.start, group.count, group.materialIndex );

  		}

  		// bounding box

  		const boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		const boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// draw range

  		this.drawRange.start = source.drawRange.start;
  		this.drawRange.count = source.drawRange.count;

  		// user data

  		this.userData = source.userData;

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  };

  const _inverseMatrix$3$1 = /*@__PURE__*/ new Matrix4$1();
  const _ray$3$1 = /*@__PURE__*/ new Ray$1();
  const _sphere$6$1 = /*@__PURE__*/ new Sphere$1();
  const _sphereHitAt$1 = /*@__PURE__*/ new Vector3$1();

  const _vA$1$1 = /*@__PURE__*/ new Vector3$1();
  const _vB$1$1 = /*@__PURE__*/ new Vector3$1();
  const _vC$1$1 = /*@__PURE__*/ new Vector3$1();

  const _tempA$1 = /*@__PURE__*/ new Vector3$1();
  const _morphA$1 = /*@__PURE__*/ new Vector3$1();

  const _intersectionPoint$1 = /*@__PURE__*/ new Vector3$1();
  const _intersectionPointWorld$1 = /*@__PURE__*/ new Vector3$1();

  let Mesh$1 = class Mesh extends Object3D$1 {

  	constructor( geometry = new BufferGeometry$1(), material = new MeshBasicMaterial$1() ) {

  		super();

  		this.isMesh = true;

  		this.type = 'Mesh';

  		this.geometry = geometry;
  		this.material = material;

  		this.updateMorphTargets();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		if ( source.morphTargetInfluences !== undefined ) {

  			this.morphTargetInfluences = source.morphTargetInfluences.slice();

  		}

  		if ( source.morphTargetDictionary !== undefined ) {

  			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

  		}

  		this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
  		this.geometry = source.geometry;

  		return this;

  	}

  	updateMorphTargets() {

  		const geometry = this.geometry;

  		const morphAttributes = geometry.morphAttributes;
  		const keys = Object.keys( morphAttributes );

  		if ( keys.length > 0 ) {

  			const morphAttribute = morphAttributes[ keys[ 0 ] ];

  			if ( morphAttribute !== undefined ) {

  				this.morphTargetInfluences = [];
  				this.morphTargetDictionary = {};

  				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  					const name = morphAttribute[ m ].name || String( m );

  					this.morphTargetInfluences.push( 0 );
  					this.morphTargetDictionary[ name ] = m;

  				}

  			}

  		}

  	}

  	getVertexPosition( index, target ) {

  		const geometry = this.geometry;
  		const position = geometry.attributes.position;
  		const morphPosition = geometry.morphAttributes.position;
  		const morphTargetsRelative = geometry.morphTargetsRelative;

  		target.fromBufferAttribute( position, index );

  		const morphInfluences = this.morphTargetInfluences;

  		if ( morphPosition && morphInfluences ) {

  			_morphA$1.set( 0, 0, 0 );

  			for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

  				const influence = morphInfluences[ i ];
  				const morphAttribute = morphPosition[ i ];

  				if ( influence === 0 ) continue;

  				_tempA$1.fromBufferAttribute( morphAttribute, index );

  				if ( morphTargetsRelative ) {

  					_morphA$1.addScaledVector( _tempA$1, influence );

  				} else {

  					_morphA$1.addScaledVector( _tempA$1.sub( target ), influence );

  				}

  			}

  			target.add( _morphA$1 );

  		}

  		return target;

  	}

  	raycast( raycaster, intersects ) {

  		const geometry = this.geometry;
  		const material = this.material;
  		const matrixWorld = this.matrixWorld;

  		if ( material === undefined ) return;

  		// test with bounding sphere in world space

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$6$1.copy( geometry.boundingSphere );
  		_sphere$6$1.applyMatrix4( matrixWorld );

  		// check distance from ray origin to bounding sphere

  		_ray$3$1.copy( raycaster.ray ).recast( raycaster.near );

  		if ( _sphere$6$1.containsPoint( _ray$3$1.origin ) === false ) {

  			if ( _ray$3$1.intersectSphere( _sphere$6$1, _sphereHitAt$1 ) === null ) return;

  			if ( _ray$3$1.origin.distanceToSquared( _sphereHitAt$1 ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

  		}

  		// convert ray to local space of mesh

  		_inverseMatrix$3$1.copy( matrixWorld ).invert();
  		_ray$3$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3$1 );

  		// test with bounding box in local space

  		if ( geometry.boundingBox !== null ) {

  			if ( _ray$3$1.intersectsBox( geometry.boundingBox ) === false ) return;

  		}

  		// test for intersections with geometry

  		this._computeIntersections( raycaster, intersects, _ray$3$1 );

  	}

  	_computeIntersections( raycaster, intersects, rayLocalSpace ) {

  		let intersection;

  		const geometry = this.geometry;
  		const material = this.material;

  		const index = geometry.index;
  		const position = geometry.attributes.position;
  		const uv = geometry.attributes.uv;
  		const uv1 = geometry.attributes.uv1;
  		const normal = geometry.attributes.normal;
  		const groups = geometry.groups;
  		const drawRange = geometry.drawRange;

  		if ( index !== null ) {

  			// indexed buffer geometry

  			if ( Array.isArray( material ) ) {

  				for ( let i = 0, il = groups.length; i < il; i ++ ) {

  					const group = groups[ i ];
  					const groupMaterial = material[ group.materialIndex ];

  					const start = Math.max( group.start, drawRange.start );
  					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

  					for ( let j = start, jl = end; j < jl; j += 3 ) {

  						const a = index.getX( j );
  						const b = index.getX( j + 1 );
  						const c = index.getX( j + 2 );

  						intersection = checkGeometryIntersection$1( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
  							intersection.face.materialIndex = group.materialIndex;
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else {

  				const start = Math.max( 0, drawRange.start );
  				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  				for ( let i = start, il = end; i < il; i += 3 ) {

  					const a = index.getX( i );
  					const b = index.getX( i + 1 );
  					const c = index.getX( i + 2 );

  					intersection = checkGeometryIntersection$1( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  					if ( intersection ) {

  						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
  						intersects.push( intersection );

  					}

  				}

  			}

  		} else if ( position !== undefined ) {

  			// non-indexed buffer geometry

  			if ( Array.isArray( material ) ) {

  				for ( let i = 0, il = groups.length; i < il; i ++ ) {

  					const group = groups[ i ];
  					const groupMaterial = material[ group.materialIndex ];

  					const start = Math.max( group.start, drawRange.start );
  					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

  					for ( let j = start, jl = end; j < jl; j += 3 ) {

  						const a = j;
  						const b = j + 1;
  						const c = j + 2;

  						intersection = checkGeometryIntersection$1( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
  							intersection.face.materialIndex = group.materialIndex;
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else {

  				const start = Math.max( 0, drawRange.start );
  				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

  				for ( let i = start, il = end; i < il; i += 3 ) {

  					const a = i;
  					const b = i + 1;
  					const c = i + 2;

  					intersection = checkGeometryIntersection$1( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  					if ( intersection ) {

  						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
  						intersects.push( intersection );

  					}

  				}

  			}

  		}

  	}

  };

  function checkIntersection$1$1( object, material, raycaster, ray, pA, pB, pC, point ) {

  	let intersect;

  	if ( material.side === BackSide$1 ) {

  		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

  	} else {

  		intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide$1 ), point );

  	}

  	if ( intersect === null ) return null;

  	_intersectionPointWorld$1.copy( point );
  	_intersectionPointWorld$1.applyMatrix4( object.matrixWorld );

  	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld$1 );

  	if ( distance < raycaster.near || distance > raycaster.far ) return null;

  	return {
  		distance: distance,
  		point: _intersectionPointWorld$1.clone(),
  		object: object
  	};

  }

  function checkGeometryIntersection$1( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

  	object.getVertexPosition( a, _vA$1$1 );
  	object.getVertexPosition( b, _vB$1$1 );
  	object.getVertexPosition( c, _vC$1$1 );

  	const intersection = checkIntersection$1$1( object, material, raycaster, ray, _vA$1$1, _vB$1$1, _vC$1$1, _intersectionPoint$1 );

  	if ( intersection ) {

  		const barycoord = new Vector3$1();
  		Triangle$1.getBarycoord( _intersectionPoint$1, _vA$1$1, _vB$1$1, _vC$1$1, barycoord );

  		if ( uv ) {

  			intersection.uv = Triangle$1.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2$1() );

  		}

  		if ( uv1 ) {

  			intersection.uv1 = Triangle$1.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2$1() );

  		}

  		if ( normal ) {

  			intersection.normal = Triangle$1.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3$1() );

  			if ( intersection.normal.dot( ray.direction ) > 0 ) {

  				intersection.normal.multiplyScalar( - 1 );

  			}

  		}

  		const face = {
  			a: a,
  			b: b,
  			c: c,
  			normal: new Vector3$1(),
  			materialIndex: 0
  		};

  		Triangle$1.getNormal( _vA$1$1, _vB$1$1, _vC$1$1, face.normal );

  		intersection.face = face;
  		intersection.barycoord = barycoord;

  	}

  	return intersection;

  }

  let BoxGeometry$1 = class BoxGeometry extends BufferGeometry$1 {

  	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

  		super();

  		this.type = 'BoxGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		const scope = this;

  		// segments

  		widthSegments = Math.floor( widthSegments );
  		heightSegments = Math.floor( heightSegments );
  		depthSegments = Math.floor( depthSegments );

  		// buffers

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		// helper variables

  		let numberOfVertices = 0;
  		let groupStart = 0;

  		// build each side of the box geometry

  		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
  		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
  		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
  		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
  		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
  		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute$1( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute$1( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( uvs, 2 ) );

  		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

  			const segmentWidth = width / gridX;
  			const segmentHeight = height / gridY;

  			const widthHalf = width / 2;
  			const heightHalf = height / 2;
  			const depthHalf = depth / 2;

  			const gridX1 = gridX + 1;
  			const gridY1 = gridY + 1;

  			let vertexCounter = 0;
  			let groupCount = 0;

  			const vector = new Vector3$1();

  			// generate vertices, normals and uvs

  			for ( let iy = 0; iy < gridY1; iy ++ ) {

  				const y = iy * segmentHeight - heightHalf;

  				for ( let ix = 0; ix < gridX1; ix ++ ) {

  					const x = ix * segmentWidth - widthHalf;

  					// set values to correct vector component

  					vector[ u ] = x * udir;
  					vector[ v ] = y * vdir;
  					vector[ w ] = depthHalf;

  					// now apply vector to vertex buffer

  					vertices.push( vector.x, vector.y, vector.z );

  					// set values to correct vector component

  					vector[ u ] = 0;
  					vector[ v ] = 0;
  					vector[ w ] = depth > 0 ? 1 : - 1;

  					// now apply vector to normal buffer

  					normals.push( vector.x, vector.y, vector.z );

  					// uvs

  					uvs.push( ix / gridX );
  					uvs.push( 1 - ( iy / gridY ) );

  					// counters

  					vertexCounter += 1;

  				}

  			}

  			// indices

  			// 1. you need three indices to draw a single face
  			// 2. a single segment consists of two faces
  			// 3. so we need to generate six (2*3) indices per segment

  			for ( let iy = 0; iy < gridY; iy ++ ) {

  				for ( let ix = 0; ix < gridX; ix ++ ) {

  					const a = numberOfVertices + ix + gridX1 * iy;
  					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
  					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
  					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

  					// faces

  					indices.push( a, b, d );
  					indices.push( b, c, d );

  					// increase counter

  					groupCount += 6;

  				}

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, materialIndex );

  			// calculate new start value for groups

  			groupStart += groupCount;

  			// update total number of vertices

  			numberOfVertices += vertexCounter;

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

  	}

  };

  /**
   * Uniform Utilities
   */

  function cloneUniforms$1( src ) {

  	const dst = {};

  	for ( const u in src ) {

  		dst[ u ] = {};

  		for ( const p in src[ u ] ) {

  			const property = src[ u ][ p ];

  			if ( property && ( property.isColor ||
  				property.isMatrix3 || property.isMatrix4 ||
  				property.isVector2 || property.isVector3 || property.isVector4 ||
  				property.isTexture || property.isQuaternion ) ) {

  				if ( property.isRenderTargetTexture ) {

  					console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
  					dst[ u ][ p ] = null;

  				} else {

  					dst[ u ][ p ] = property.clone();

  				}

  			} else if ( Array.isArray( property ) ) {

  				dst[ u ][ p ] = property.slice();

  			} else {

  				dst[ u ][ p ] = property;

  			}

  		}

  	}

  	return dst;

  }

  function mergeUniforms( uniforms ) {

  	const merged = {};

  	for ( let u = 0; u < uniforms.length; u ++ ) {

  		const tmp = cloneUniforms$1( uniforms[ u ] );

  		for ( const p in tmp ) {

  			merged[ p ] = tmp[ p ];

  		}

  	}

  	return merged;

  }

  function cloneUniformsGroups$1( src ) {

  	const dst = [];

  	for ( let u = 0; u < src.length; u ++ ) {

  		dst.push( src[ u ].clone() );

  	}

  	return dst;

  }

  function getUnlitUniformColorSpace( renderer ) {

  	const currentRenderTarget = renderer.getRenderTarget();

  	if ( currentRenderTarget === null ) {

  		// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
  		return renderer.outputColorSpace;

  	}

  	// https://github.com/mrdoob/three.js/issues/27868
  	if ( currentRenderTarget.isXRRenderTarget === true ) {

  		return currentRenderTarget.texture.colorSpace;

  	}

  	return ColorManagement$1.workingColorSpace;

  }

  // Legacy

  const UniformsUtils = { clone: cloneUniforms$1, merge: mergeUniforms };

  var default_vertex$1 = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

  var default_fragment$1 = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

  let ShaderMaterial$1 = class ShaderMaterial extends Material$1 {

  	static get type() {

  		return 'ShaderMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isShaderMaterial = true;

  		this.defines = {};
  		this.uniforms = {};
  		this.uniformsGroups = [];

  		this.vertexShader = default_vertex$1;
  		this.fragmentShader = default_fragment$1;

  		this.linewidth = 1;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;

  		this.fog = false; // set to use scene fog
  		this.lights = false; // set to use scene lights
  		this.clipping = false; // set to use user-defined clipping planes

  		this.forceSinglePass = true;

  		this.extensions = {
  			clipCullDistance: false, // set to use vertex shader clipping
  			multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID
  		};

  		// When rendered geometry doesn't include these attributes but the material does,
  		// use these default values in WebGL. This avoids errors when buffer data is missing.
  		this.defaultAttributeValues = {
  			'color': [ 1, 1, 1 ],
  			'uv': [ 0, 0 ],
  			'uv1': [ 0, 0 ]
  		};

  		this.index0AttributeName = undefined;
  		this.uniformsNeedUpdate = false;

  		this.glslVersion = null;

  		if ( parameters !== undefined ) {

  			this.setValues( parameters );

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.fragmentShader = source.fragmentShader;
  		this.vertexShader = source.vertexShader;

  		this.uniforms = cloneUniforms$1( source.uniforms );
  		this.uniformsGroups = cloneUniformsGroups$1( source.uniformsGroups );

  		this.defines = Object.assign( {}, source.defines );

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;

  		this.fog = source.fog;
  		this.lights = source.lights;
  		this.clipping = source.clipping;

  		this.extensions = Object.assign( {}, source.extensions );

  		this.glslVersion = source.glslVersion;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.glslVersion = this.glslVersion;
  		data.uniforms = {};

  		for ( const name in this.uniforms ) {

  			const uniform = this.uniforms[ name ];
  			const value = uniform.value;

  			if ( value && value.isTexture ) {

  				data.uniforms[ name ] = {
  					type: 't',
  					value: value.toJSON( meta ).uuid
  				};

  			} else if ( value && value.isColor ) {

  				data.uniforms[ name ] = {
  					type: 'c',
  					value: value.getHex()
  				};

  			} else if ( value && value.isVector2 ) {

  				data.uniforms[ name ] = {
  					type: 'v2',
  					value: value.toArray()
  				};

  			} else if ( value && value.isVector3 ) {

  				data.uniforms[ name ] = {
  					type: 'v3',
  					value: value.toArray()
  				};

  			} else if ( value && value.isVector4 ) {

  				data.uniforms[ name ] = {
  					type: 'v4',
  					value: value.toArray()
  				};

  			} else if ( value && value.isMatrix3 ) {

  				data.uniforms[ name ] = {
  					type: 'm3',
  					value: value.toArray()
  				};

  			} else if ( value && value.isMatrix4 ) {

  				data.uniforms[ name ] = {
  					type: 'm4',
  					value: value.toArray()
  				};

  			} else {

  				data.uniforms[ name ] = {
  					value: value
  				};

  				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

  			}

  		}

  		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

  		data.vertexShader = this.vertexShader;
  		data.fragmentShader = this.fragmentShader;

  		data.lights = this.lights;
  		data.clipping = this.clipping;

  		const extensions = {};

  		for ( const key in this.extensions ) {

  			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

  		}

  		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

  		return data;

  	}

  };

  let Camera$1 = class Camera extends Object3D$1 {

  	constructor() {

  		super();

  		this.isCamera = true;

  		this.type = 'Camera';

  		this.matrixWorldInverse = new Matrix4$1();

  		this.projectionMatrix = new Matrix4$1();
  		this.projectionMatrixInverse = new Matrix4$1();

  		this.coordinateSystem = WebGLCoordinateSystem$1;

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.matrixWorldInverse.copy( source.matrixWorldInverse );

  		this.projectionMatrix.copy( source.projectionMatrix );
  		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

  		this.coordinateSystem = source.coordinateSystem;

  		return this;

  	}

  	getWorldDirection( target ) {

  		return super.getWorldDirection( target ).negate();

  	}

  	updateMatrixWorld( force ) {

  		super.updateMatrixWorld( force );

  		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

  	}

  	updateWorldMatrix( updateParents, updateChildren ) {

  		super.updateWorldMatrix( updateParents, updateChildren );

  		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  };

  const _v3$1$1 = /*@__PURE__*/ new Vector3$1();
  const _minTarget$1 = /*@__PURE__*/ new Vector2$1();
  const _maxTarget$1 = /*@__PURE__*/ new Vector2$1();


  let PerspectiveCamera$1 = class PerspectiveCamera extends Camera$1 {

  	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

  		super();

  		this.isPerspectiveCamera = true;

  		this.type = 'PerspectiveCamera';

  		this.fov = fov;
  		this.zoom = 1;

  		this.near = near;
  		this.far = far;
  		this.focus = 10;

  		this.aspect = aspect;
  		this.view = null;

  		this.filmGauge = 35;	// width of the film (default in millimeters)
  		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

  		this.updateProjectionMatrix();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.fov = source.fov;
  		this.zoom = source.zoom;

  		this.near = source.near;
  		this.far = source.far;
  		this.focus = source.focus;

  		this.aspect = source.aspect;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		this.filmGauge = source.filmGauge;
  		this.filmOffset = source.filmOffset;

  		return this;

  	}

  	/**
  	 * Sets the FOV by focal length in respect to the current .filmGauge.
  	 *
  	 * The default film gauge is 35, so that the focal length can be specified for
  	 * a 35mm (full frame) camera.
  	 *
  	 * Values for focal length and film gauge must have the same unit.
  	 */
  	setFocalLength( focalLength ) {

  		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
  		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

  		this.fov = RAD2DEG$1 * 2 * Math.atan( vExtentSlope );
  		this.updateProjectionMatrix();

  	}

  	/**
  	 * Calculates the focal length from the current .fov and .filmGauge.
  	 */
  	getFocalLength() {

  		const vExtentSlope = Math.tan( DEG2RAD$1 * 0.5 * this.fov );

  		return 0.5 * this.getFilmHeight() / vExtentSlope;

  	}

  	getEffectiveFOV() {

  		return RAD2DEG$1 * 2 * Math.atan(
  			Math.tan( DEG2RAD$1 * 0.5 * this.fov ) / this.zoom );

  	}

  	getFilmWidth() {

  		// film not completely covered in portrait format (aspect < 1)
  		return this.filmGauge * Math.min( this.aspect, 1 );

  	}

  	getFilmHeight() {

  		// film not completely covered in landscape format (aspect > 1)
  		return this.filmGauge / Math.max( this.aspect, 1 );

  	}

  	/**
  	 * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
  	 * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
  	 */
  	getViewBounds( distance, minTarget, maxTarget ) {

  		_v3$1$1.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

  		minTarget.set( _v3$1$1.x, _v3$1$1.y ).multiplyScalar( - distance / _v3$1$1.z );

  		_v3$1$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

  		maxTarget.set( _v3$1$1.x, _v3$1$1.y ).multiplyScalar( - distance / _v3$1$1.z );

  	}

  	/**
  	 * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
  	 * Copies the result into the target Vector2, where x is width and y is height.
  	 */
  	getViewSize( distance, target ) {

  		this.getViewBounds( distance, _minTarget$1, _maxTarget$1 );

  		return target.subVectors( _maxTarget$1, _minTarget$1 );

  	}

  	/**
  	 * Sets an offset in a larger frustum. This is useful for multi-window or
  	 * multi-monitor/multi-machine setups.
  	 *
  	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
  	 * the monitors are in grid like this
  	 *
  	 *   +---+---+---+
  	 *   | A | B | C |
  	 *   +---+---+---+
  	 *   | D | E | F |
  	 *   +---+---+---+
  	 *
  	 * then for each monitor you would call it like this
  	 *
  	 *   const w = 1920;
  	 *   const h = 1080;
  	 *   const fullWidth = w * 3;
  	 *   const fullHeight = h * 2;
  	 *
  	 *   --A--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
  	 *   --B--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
  	 *   --C--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
  	 *   --D--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
  	 *   --E--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
  	 *   --F--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
  	 *
  	 *   Note there is no reason monitors have to be the same size or in a grid.
  	 */
  	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

  		this.aspect = fullWidth / fullHeight;

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	}

  	clearViewOffset() {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	}

  	updateProjectionMatrix() {

  		const near = this.near;
  		let top = near * Math.tan( DEG2RAD$1 * 0.5 * this.fov ) / this.zoom;
  		let height = 2 * top;
  		let width = this.aspect * height;
  		let left = - 0.5 * width;
  		const view = this.view;

  		if ( this.view !== null && this.view.enabled ) {

  			const fullWidth = view.fullWidth,
  				fullHeight = view.fullHeight;

  			left += view.offsetX * width / fullWidth;
  			top -= view.offsetY * height / fullHeight;
  			width *= view.width / fullWidth;
  			height *= view.height / fullHeight;

  		}

  		const skew = this.filmOffset;
  		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

  		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

  		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.fov = this.fov;
  		data.object.zoom = this.zoom;

  		data.object.near = this.near;
  		data.object.far = this.far;
  		data.object.focus = this.focus;

  		data.object.aspect = this.aspect;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		data.object.filmGauge = this.filmGauge;
  		data.object.filmOffset = this.filmOffset;

  		return data;

  	}

  };

  const fov$1 = - 90; // negative fov is not an error
  const aspect$1 = 1;

  let CubeCamera$1 = class CubeCamera extends Object3D$1 {

  	constructor( near, far, renderTarget ) {

  		super();

  		this.type = 'CubeCamera';

  		this.renderTarget = renderTarget;
  		this.coordinateSystem = null;
  		this.activeMipmapLevel = 0;

  		const cameraPX = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraPX.layers = this.layers;
  		this.add( cameraPX );

  		const cameraNX = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraNX.layers = this.layers;
  		this.add( cameraNX );

  		const cameraPY = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraPY.layers = this.layers;
  		this.add( cameraPY );

  		const cameraNY = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraNY.layers = this.layers;
  		this.add( cameraNY );

  		const cameraPZ = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraPZ.layers = this.layers;
  		this.add( cameraPZ );

  		const cameraNZ = new PerspectiveCamera$1( fov$1, aspect$1, near, far );
  		cameraNZ.layers = this.layers;
  		this.add( cameraNZ );

  	}

  	updateCoordinateSystem() {

  		const coordinateSystem = this.coordinateSystem;

  		const cameras = this.children.concat();

  		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

  		for ( const camera of cameras ) this.remove( camera );

  		if ( coordinateSystem === WebGLCoordinateSystem$1 ) {

  			cameraPX.up.set( 0, 1, 0 );
  			cameraPX.lookAt( 1, 0, 0 );

  			cameraNX.up.set( 0, 1, 0 );
  			cameraNX.lookAt( - 1, 0, 0 );

  			cameraPY.up.set( 0, 0, - 1 );
  			cameraPY.lookAt( 0, 1, 0 );

  			cameraNY.up.set( 0, 0, 1 );
  			cameraNY.lookAt( 0, - 1, 0 );

  			cameraPZ.up.set( 0, 1, 0 );
  			cameraPZ.lookAt( 0, 0, 1 );

  			cameraNZ.up.set( 0, 1, 0 );
  			cameraNZ.lookAt( 0, 0, - 1 );

  		} else if ( coordinateSystem === WebGPUCoordinateSystem$1 ) {

  			cameraPX.up.set( 0, - 1, 0 );
  			cameraPX.lookAt( - 1, 0, 0 );

  			cameraNX.up.set( 0, - 1, 0 );
  			cameraNX.lookAt( 1, 0, 0 );

  			cameraPY.up.set( 0, 0, 1 );
  			cameraPY.lookAt( 0, 1, 0 );

  			cameraNY.up.set( 0, 0, - 1 );
  			cameraNY.lookAt( 0, - 1, 0 );

  			cameraPZ.up.set( 0, - 1, 0 );
  			cameraPZ.lookAt( 0, 0, 1 );

  			cameraNZ.up.set( 0, - 1, 0 );
  			cameraNZ.lookAt( 0, 0, - 1 );

  		} else {

  			throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		for ( const camera of cameras ) {

  			this.add( camera );

  			camera.updateMatrixWorld();

  		}

  	}

  	update( renderer, scene ) {

  		if ( this.parent === null ) this.updateMatrixWorld();

  		const { renderTarget, activeMipmapLevel } = this;

  		if ( this.coordinateSystem !== renderer.coordinateSystem ) {

  			this.coordinateSystem = renderer.coordinateSystem;

  			this.updateCoordinateSystem();

  		}

  		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

  		const currentRenderTarget = renderer.getRenderTarget();
  		const currentActiveCubeFace = renderer.getActiveCubeFace();
  		const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();

  		const currentXrEnabled = renderer.xr.enabled;

  		renderer.xr.enabled = false;

  		const generateMipmaps = renderTarget.texture.generateMipmaps;

  		renderTarget.texture.generateMipmaps = false;

  		renderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );
  		renderer.render( scene, cameraPX );

  		renderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );
  		renderer.render( scene, cameraNX );

  		renderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );
  		renderer.render( scene, cameraPY );

  		renderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );
  		renderer.render( scene, cameraNY );

  		renderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );
  		renderer.render( scene, cameraPZ );

  		// mipmaps are generated during the last call of render()
  		// at this point, all sides of the cube render target are defined

  		renderTarget.texture.generateMipmaps = generateMipmaps;

  		renderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );
  		renderer.render( scene, cameraNZ );

  		renderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );

  		renderer.xr.enabled = currentXrEnabled;

  		renderTarget.texture.needsPMREMUpdate = true;

  	}

  };

  let CubeTexture$1 = class CubeTexture extends Texture$1 {

  	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

  		images = images !== undefined ? images : [];
  		mapping = mapping !== undefined ? mapping : CubeReflectionMapping$1;

  		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

  		this.isCubeTexture = true;

  		this.flipY = false;

  	}

  	get images() {

  		return this.image;

  	}

  	set images( value ) {

  		this.image = value;

  	}

  };

  let WebGLCubeRenderTarget$1 = class WebGLCubeRenderTarget extends WebGLRenderTarget$1 {

  	constructor( size = 1, options = {} ) {

  		super( size, size, options );

  		this.isWebGLCubeRenderTarget = true;

  		const image = { width: size, height: size, depth: 1 };
  		const images = [ image, image, image, image, image, image ];

  		this.texture = new CubeTexture$1( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

  		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
  		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
  		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

  		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
  		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
  		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

  		this.texture.isRenderTargetTexture = true;

  		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter$1;

  	}

  	fromEquirectangularTexture( renderer, texture ) {

  		this.texture.type = texture.type;
  		this.texture.colorSpace = texture.colorSpace;

  		this.texture.generateMipmaps = texture.generateMipmaps;
  		this.texture.minFilter = texture.minFilter;
  		this.texture.magFilter = texture.magFilter;

  		const shader = {

  			uniforms: {
  				tEquirect: { value: null },
  			},

  			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

  			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
  		};

  		const geometry = new BoxGeometry$1( 5, 5, 5 );

  		const material = new ShaderMaterial$1( {

  			name: 'CubemapFromEquirect',

  			uniforms: cloneUniforms$1( shader.uniforms ),
  			vertexShader: shader.vertexShader,
  			fragmentShader: shader.fragmentShader,
  			side: BackSide$1,
  			blending: NoBlending$1

  		} );

  		material.uniforms.tEquirect.value = texture;

  		const mesh = new Mesh$1( geometry, material );

  		const currentMinFilter = texture.minFilter;

  		// Avoid blurred poles
  		if ( texture.minFilter === LinearMipmapLinearFilter$1 ) texture.minFilter = LinearFilter$1;

  		const camera = new CubeCamera$1( 1, 10, this );
  		camera.update( renderer, mesh );

  		texture.minFilter = currentMinFilter;

  		mesh.geometry.dispose();
  		mesh.material.dispose();

  		return this;

  	}

  	clear( renderer, color, depth, stencil ) {

  		const currentRenderTarget = renderer.getRenderTarget();

  		for ( let i = 0; i < 6; i ++ ) {

  			renderer.setRenderTarget( this, i );

  			renderer.clear( color, depth, stencil );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  	}

  };

  const _vector1$1 = /*@__PURE__*/ new Vector3$1();
  const _vector2$2 = /*@__PURE__*/ new Vector3$1();
  const _normalMatrix$1 = /*@__PURE__*/ new Matrix3$1();

  let Plane$1 = class Plane {

  	constructor( normal = new Vector3$1( 1, 0, 0 ), constant = 0 ) {

  		this.isPlane = true;

  		// normal is assumed to be normalized

  		this.normal = normal;
  		this.constant = constant;

  	}

  	set( normal, constant ) {

  		this.normal.copy( normal );
  		this.constant = constant;

  		return this;

  	}

  	setComponents( x, y, z, w ) {

  		this.normal.set( x, y, z );
  		this.constant = w;

  		return this;

  	}

  	setFromNormalAndCoplanarPoint( normal, point ) {

  		this.normal.copy( normal );
  		this.constant = - point.dot( this.normal );

  		return this;

  	}

  	setFromCoplanarPoints( a, b, c ) {

  		const normal = _vector1$1.subVectors( c, b ).cross( _vector2$2.subVectors( a, b ) ).normalize();

  		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

  		this.setFromNormalAndCoplanarPoint( normal, a );

  		return this;

  	}

  	copy( plane ) {

  		this.normal.copy( plane.normal );
  		this.constant = plane.constant;

  		return this;

  	}

  	normalize() {

  		// Note: will lead to a divide by zero if the plane is invalid.

  		const inverseNormalLength = 1.0 / this.normal.length();
  		this.normal.multiplyScalar( inverseNormalLength );
  		this.constant *= inverseNormalLength;

  		return this;

  	}

  	negate() {

  		this.constant *= - 1;
  		this.normal.negate();

  		return this;

  	}

  	distanceToPoint( point ) {

  		return this.normal.dot( point ) + this.constant;

  	}

  	distanceToSphere( sphere ) {

  		return this.distanceToPoint( sphere.center ) - sphere.radius;

  	}

  	projectPoint( point, target ) {

  		return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

  	}

  	intersectLine( line, target ) {

  		const direction = line.delta( _vector1$1 );

  		const denominator = this.normal.dot( direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( this.distanceToPoint( line.start ) === 0 ) {

  				return target.copy( line.start );

  			}

  			// Unsure if this is the correct method to handle this case.
  			return null;

  		}

  		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

  		if ( t < 0 || t > 1 ) {

  			return null;

  		}

  		return target.copy( line.start ).addScaledVector( direction, t );

  	}

  	intersectsLine( line ) {

  		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

  		const startSign = this.distanceToPoint( line.start );
  		const endSign = this.distanceToPoint( line.end );

  		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  	}

  	intersectsBox( box ) {

  		return box.intersectsPlane( this );

  	}

  	intersectsSphere( sphere ) {

  		return sphere.intersectsPlane( this );

  	}

  	coplanarPoint( target ) {

  		return target.copy( this.normal ).multiplyScalar( - this.constant );

  	}

  	applyMatrix4( matrix, optionalNormalMatrix ) {

  		const normalMatrix = optionalNormalMatrix || _normalMatrix$1.getNormalMatrix( matrix );

  		const referencePoint = this.coplanarPoint( _vector1$1 ).applyMatrix4( matrix );

  		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

  		this.constant = - referencePoint.dot( normal );

  		return this;

  	}

  	translate( offset ) {

  		this.constant -= offset.dot( this.normal );

  		return this;

  	}

  	equals( plane ) {

  		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  };

  const _sphere$5 = /*@__PURE__*/ new Sphere$1();
  const _vector$7$1 = /*@__PURE__*/ new Vector3$1();

  let Frustum$1 = class Frustum {

  	constructor( p0 = new Plane$1(), p1 = new Plane$1(), p2 = new Plane$1(), p3 = new Plane$1(), p4 = new Plane$1(), p5 = new Plane$1() ) {

  		this.planes = [ p0, p1, p2, p3, p4, p5 ];

  	}

  	set( p0, p1, p2, p3, p4, p5 ) {

  		const planes = this.planes;

  		planes[ 0 ].copy( p0 );
  		planes[ 1 ].copy( p1 );
  		planes[ 2 ].copy( p2 );
  		planes[ 3 ].copy( p3 );
  		planes[ 4 ].copy( p4 );
  		planes[ 5 ].copy( p5 );

  		return this;

  	}

  	copy( frustum ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			planes[ i ].copy( frustum.planes[ i ] );

  		}

  		return this;

  	}

  	setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem$1 ) {

  		const planes = this.planes;
  		const me = m.elements;
  		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
  		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
  		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
  		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

  		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
  		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
  		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
  		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
  		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

  		if ( coordinateSystem === WebGLCoordinateSystem$1 ) {

  			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

  		} else if ( coordinateSystem === WebGPUCoordinateSystem$1 ) {

  			planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

  		} else {

  			throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		return this;

  	}

  	intersectsObject( object ) {

  		if ( object.boundingSphere !== undefined ) {

  			if ( object.boundingSphere === null ) object.computeBoundingSphere();

  			_sphere$5.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

  		} else {

  			const geometry = object.geometry;

  			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  			_sphere$5.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

  		}

  		return this.intersectsSphere( _sphere$5 );

  	}

  	intersectsSprite( sprite ) {

  		_sphere$5.center.set( 0, 0, 0 );
  		_sphere$5.radius = 0.7071067811865476;
  		_sphere$5.applyMatrix4( sprite.matrixWorld );

  		return this.intersectsSphere( _sphere$5 );

  	}

  	intersectsSphere( sphere ) {

  		const planes = this.planes;
  		const center = sphere.center;
  		const negRadius = - sphere.radius;

  		for ( let i = 0; i < 6; i ++ ) {

  			const distance = planes[ i ].distanceToPoint( center );

  			if ( distance < negRadius ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	intersectsBox( box ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			const plane = planes[ i ];

  			// corner at max distance

  			_vector$7$1.x = plane.normal.x > 0 ? box.max.x : box.min.x;
  			_vector$7$1.y = plane.normal.y > 0 ? box.max.y : box.min.y;
  			_vector$7$1.z = plane.normal.z > 0 ? box.max.z : box.min.z;

  			if ( plane.distanceToPoint( _vector$7$1 ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	containsPoint( point ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  };

  function WebGLAnimation() {

  	let context = null;
  	let isAnimating = false;
  	let animationLoop = null;
  	let requestId = null;

  	function onAnimationFrame( time, frame ) {

  		animationLoop( time, frame );

  		requestId = context.requestAnimationFrame( onAnimationFrame );

  	}

  	return {

  		start: function () {

  			if ( isAnimating === true ) return;
  			if ( animationLoop === null ) return;

  			requestId = context.requestAnimationFrame( onAnimationFrame );

  			isAnimating = true;

  		},

  		stop: function () {

  			context.cancelAnimationFrame( requestId );

  			isAnimating = false;

  		},

  		setAnimationLoop: function ( callback ) {

  			animationLoop = callback;

  		},

  		setContext: function ( value ) {

  			context = value;

  		}

  	};

  }

  function WebGLAttributes( gl ) {

  	const buffers = new WeakMap();

  	function createBuffer( attribute, bufferType ) {

  		const array = attribute.array;
  		const usage = attribute.usage;
  		const size = array.byteLength;

  		const buffer = gl.createBuffer();

  		gl.bindBuffer( bufferType, buffer );
  		gl.bufferData( bufferType, array, usage );

  		attribute.onUploadCallback();

  		let type;

  		if ( array instanceof Float32Array ) {

  			type = gl.FLOAT;

  		} else if ( array instanceof Uint16Array ) {

  			if ( attribute.isFloat16BufferAttribute ) {

  				type = gl.HALF_FLOAT;

  			} else {

  				type = gl.UNSIGNED_SHORT;

  			}

  		} else if ( array instanceof Int16Array ) {

  			type = gl.SHORT;

  		} else if ( array instanceof Uint32Array ) {

  			type = gl.UNSIGNED_INT;

  		} else if ( array instanceof Int32Array ) {

  			type = gl.INT;

  		} else if ( array instanceof Int8Array ) {

  			type = gl.BYTE;

  		} else if ( array instanceof Uint8Array ) {

  			type = gl.UNSIGNED_BYTE;

  		} else if ( array instanceof Uint8ClampedArray ) {

  			type = gl.UNSIGNED_BYTE;

  		} else {

  			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

  		}

  		return {
  			buffer: buffer,
  			type: type,
  			bytesPerElement: array.BYTES_PER_ELEMENT,
  			version: attribute.version,
  			size: size
  		};

  	}

  	function updateBuffer( buffer, attribute, bufferType ) {

  		const array = attribute.array;
  		const updateRanges = attribute.updateRanges;

  		gl.bindBuffer( bufferType, buffer );

  		if ( updateRanges.length === 0 ) {

  			// Not using update ranges
  			gl.bufferSubData( bufferType, 0, array );

  		} else {

  			// Before applying update ranges, we merge any adjacent / overlapping
  			// ranges to reduce load on `gl.bufferSubData`. Empirically, this has led
  			// to performance improvements for applications which make heavy use of
  			// update ranges. Likely due to GPU command overhead.
  			//
  			// Note that to reduce garbage collection between frames, we merge the
  			// update ranges in-place. This is safe because this method will clear the
  			// update ranges once updated.

  			updateRanges.sort( ( a, b ) => a.start - b.start );

  			// To merge the update ranges in-place, we work from left to right in the
  			// existing updateRanges array, merging ranges. This may result in a final
  			// array which is smaller than the original. This index tracks the last
  			// index representing a merged range, any data after this index can be
  			// trimmed once the merge algorithm is completed.
  			let mergeIndex = 0;

  			for ( let i = 1; i < updateRanges.length; i ++ ) {

  				const previousRange = updateRanges[ mergeIndex ];
  				const range = updateRanges[ i ];

  				// We add one here to merge adjacent ranges. This is safe because ranges
  				// operate over positive integers.
  				if ( range.start <= previousRange.start + previousRange.count + 1 ) {

  					previousRange.count = Math.max(
  						previousRange.count,
  						range.start + range.count - previousRange.start
  					);

  				} else {

  					++ mergeIndex;
  					updateRanges[ mergeIndex ] = range;

  				}

  			}

  			// Trim the array to only contain the merged ranges.
  			updateRanges.length = mergeIndex + 1;

  			for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

  				const range = updateRanges[ i ];

  				gl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,
  					array, range.start, range.count );

  			}

  			attribute.clearUpdateRanges();

  		}

  		attribute.onUploadCallback();

  	}

  	//

  	function get( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		return buffers.get( attribute );

  	}

  	function remove( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		const data = buffers.get( attribute );

  		if ( data ) {

  			gl.deleteBuffer( data.buffer );

  			buffers.delete( attribute );

  		}

  	}

  	function update( attribute, bufferType ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		if ( attribute.isGLBufferAttribute ) {

  			const cached = buffers.get( attribute );

  			if ( ! cached || cached.version < attribute.version ) {

  				buffers.set( attribute, {
  					buffer: attribute.buffer,
  					type: attribute.type,
  					bytesPerElement: attribute.elementSize,
  					version: attribute.version
  				} );

  			}

  			return;

  		}

  		const data = buffers.get( attribute );

  		if ( data === undefined ) {

  			buffers.set( attribute, createBuffer( attribute, bufferType ) );

  		} else if ( data.version < attribute.version ) {

  			if ( data.size !== attribute.array.byteLength ) {

  				throw new Error( 'THREE.WebGLAttributes: The size of the buffer attribute\'s array buffer does not match the original size. Resizing buffer attributes is not supported.' );

  			}

  			updateBuffer( data.buffer, attribute, bufferType );

  			data.version = attribute.version;

  		}

  	}

  	return {

  		get: get,
  		remove: remove,
  		update: update

  	};

  }

  class PlaneGeometry extends BufferGeometry$1 {

  	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

  		super();

  		this.type = 'PlaneGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments
  		};

  		const width_half = width / 2;
  		const height_half = height / 2;

  		const gridX = Math.floor( widthSegments );
  		const gridY = Math.floor( heightSegments );

  		const gridX1 = gridX + 1;
  		const gridY1 = gridY + 1;

  		const segment_width = width / gridX;
  		const segment_height = height / gridY;

  		//

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		for ( let iy = 0; iy < gridY1; iy ++ ) {

  			const y = iy * segment_height - height_half;

  			for ( let ix = 0; ix < gridX1; ix ++ ) {

  				const x = ix * segment_width - width_half;

  				vertices.push( x, - y, 0 );

  				normals.push( 0, 0, 1 );

  				uvs.push( ix / gridX );
  				uvs.push( 1 - ( iy / gridY ) );

  			}

  		}

  		for ( let iy = 0; iy < gridY; iy ++ ) {

  			for ( let ix = 0; ix < gridX; ix ++ ) {

  				const a = ix + gridX1 * iy;
  				const b = ix + gridX1 * ( iy + 1 );
  				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
  				const d = ( ix + 1 ) + gridX1 * iy;

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  			}

  		}

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute$1( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute$1( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( uvs, 2 ) );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

  	}

  }

  var alphahash_fragment = "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";

  var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";

  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";

  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var alphatest_fragment = "#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";

  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

  var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

  var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

  var batching_pars_vertex = "#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif";

  var batching_vertex = "#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";

  var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";

  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

  var bsdfs = "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";

  var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";

  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";

  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif";

  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif";

  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";

  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";

  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

  var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

  var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

  var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

  var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

  var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

  var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

  var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

  var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";

  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

  var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";

  var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";

  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

  var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";

  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";

  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";

  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";

  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

  var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";

  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";

  var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

  var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

  var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

  var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";

  var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";

  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif";

  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";

  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";

  var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

  var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

  var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

  var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";

  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";

  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";

  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";

  var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

  var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";

  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

  var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

  var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

  var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif";

  var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

  var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";

  var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

  var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

  var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";

  var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

  var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

  var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";

  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";

  var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

  var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

  var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";

  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

  const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

  const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

  const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

  const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

  const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

  const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

  const vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

  const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}";

  const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

  const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

  const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

  const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

  const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  const vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

  const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

  const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

  const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

  const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  const vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

  const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

  const ShaderChunk = {
  	alphahash_fragment: alphahash_fragment,
  	alphahash_pars_fragment: alphahash_pars_fragment,
  	alphamap_fragment: alphamap_fragment,
  	alphamap_pars_fragment: alphamap_pars_fragment,
  	alphatest_fragment: alphatest_fragment,
  	alphatest_pars_fragment: alphatest_pars_fragment,
  	aomap_fragment: aomap_fragment,
  	aomap_pars_fragment: aomap_pars_fragment,
  	batching_pars_vertex: batching_pars_vertex,
  	batching_vertex: batching_vertex,
  	begin_vertex: begin_vertex,
  	beginnormal_vertex: beginnormal_vertex,
  	bsdfs: bsdfs,
  	iridescence_fragment: iridescence_fragment,
  	bumpmap_pars_fragment: bumpmap_pars_fragment,
  	clipping_planes_fragment: clipping_planes_fragment,
  	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  	clipping_planes_vertex: clipping_planes_vertex,
  	color_fragment: color_fragment,
  	color_pars_fragment: color_pars_fragment,
  	color_pars_vertex: color_pars_vertex,
  	color_vertex: color_vertex,
  	common: common,
  	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  	defaultnormal_vertex: defaultnormal_vertex,
  	displacementmap_pars_vertex: displacementmap_pars_vertex,
  	displacementmap_vertex: displacementmap_vertex,
  	emissivemap_fragment: emissivemap_fragment,
  	emissivemap_pars_fragment: emissivemap_pars_fragment,
  	colorspace_fragment: colorspace_fragment,
  	colorspace_pars_fragment: colorspace_pars_fragment,
  	envmap_fragment: envmap_fragment,
  	envmap_common_pars_fragment: envmap_common_pars_fragment,
  	envmap_pars_fragment: envmap_pars_fragment,
  	envmap_pars_vertex: envmap_pars_vertex,
  	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  	envmap_vertex: envmap_vertex,
  	fog_vertex: fog_vertex,
  	fog_pars_vertex: fog_pars_vertex,
  	fog_fragment: fog_fragment,
  	fog_pars_fragment: fog_pars_fragment,
  	gradientmap_pars_fragment: gradientmap_pars_fragment,
  	lightmap_pars_fragment: lightmap_pars_fragment,
  	lights_lambert_fragment: lights_lambert_fragment,
  	lights_lambert_pars_fragment: lights_lambert_pars_fragment,
  	lights_pars_begin: lights_pars_begin,
  	lights_toon_fragment: lights_toon_fragment,
  	lights_toon_pars_fragment: lights_toon_pars_fragment,
  	lights_phong_fragment: lights_phong_fragment,
  	lights_phong_pars_fragment: lights_phong_pars_fragment,
  	lights_physical_fragment: lights_physical_fragment,
  	lights_physical_pars_fragment: lights_physical_pars_fragment,
  	lights_fragment_begin: lights_fragment_begin,
  	lights_fragment_maps: lights_fragment_maps,
  	lights_fragment_end: lights_fragment_end,
  	logdepthbuf_fragment: logdepthbuf_fragment,
  	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  	logdepthbuf_vertex: logdepthbuf_vertex,
  	map_fragment: map_fragment,
  	map_pars_fragment: map_pars_fragment,
  	map_particle_fragment: map_particle_fragment,
  	map_particle_pars_fragment: map_particle_pars_fragment,
  	metalnessmap_fragment: metalnessmap_fragment,
  	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  	morphinstance_vertex: morphinstance_vertex,
  	morphcolor_vertex: morphcolor_vertex,
  	morphnormal_vertex: morphnormal_vertex,
  	morphtarget_pars_vertex: morphtarget_pars_vertex,
  	morphtarget_vertex: morphtarget_vertex,
  	normal_fragment_begin: normal_fragment_begin,
  	normal_fragment_maps: normal_fragment_maps,
  	normal_pars_fragment: normal_pars_fragment,
  	normal_pars_vertex: normal_pars_vertex,
  	normal_vertex: normal_vertex,
  	normalmap_pars_fragment: normalmap_pars_fragment,
  	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
  	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
  	clearcoat_pars_fragment: clearcoat_pars_fragment,
  	iridescence_pars_fragment: iridescence_pars_fragment,
  	opaque_fragment: opaque_fragment,
  	packing: packing,
  	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  	project_vertex: project_vertex,
  	dithering_fragment: dithering_fragment,
  	dithering_pars_fragment: dithering_pars_fragment,
  	roughnessmap_fragment: roughnessmap_fragment,
  	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  	shadowmap_pars_fragment: shadowmap_pars_fragment,
  	shadowmap_pars_vertex: shadowmap_pars_vertex,
  	shadowmap_vertex: shadowmap_vertex,
  	shadowmask_pars_fragment: shadowmask_pars_fragment,
  	skinbase_vertex: skinbase_vertex,
  	skinning_pars_vertex: skinning_pars_vertex,
  	skinning_vertex: skinning_vertex,
  	skinnormal_vertex: skinnormal_vertex,
  	specularmap_fragment: specularmap_fragment,
  	specularmap_pars_fragment: specularmap_pars_fragment,
  	tonemapping_fragment: tonemapping_fragment,
  	tonemapping_pars_fragment: tonemapping_pars_fragment,
  	transmission_fragment: transmission_fragment,
  	transmission_pars_fragment: transmission_pars_fragment,
  	uv_pars_fragment: uv_pars_fragment,
  	uv_pars_vertex: uv_pars_vertex,
  	uv_vertex: uv_vertex,
  	worldpos_vertex: worldpos_vertex,

  	background_vert: vertex$h,
  	background_frag: fragment$h,
  	backgroundCube_vert: vertex$g,
  	backgroundCube_frag: fragment$g,
  	cube_vert: vertex$f,
  	cube_frag: fragment$f,
  	depth_vert: vertex$e,
  	depth_frag: fragment$e,
  	distanceRGBA_vert: vertex$d,
  	distanceRGBA_frag: fragment$d,
  	equirect_vert: vertex$c,
  	equirect_frag: fragment$c,
  	linedashed_vert: vertex$b,
  	linedashed_frag: fragment$b,
  	meshbasic_vert: vertex$a,
  	meshbasic_frag: fragment$a,
  	meshlambert_vert: vertex$9,
  	meshlambert_frag: fragment$9,
  	meshmatcap_vert: vertex$8,
  	meshmatcap_frag: fragment$8,
  	meshnormal_vert: vertex$7,
  	meshnormal_frag: fragment$7,
  	meshphong_vert: vertex$6,
  	meshphong_frag: fragment$6,
  	meshphysical_vert: vertex$5,
  	meshphysical_frag: fragment$5,
  	meshtoon_vert: vertex$4,
  	meshtoon_frag: fragment$4,
  	points_vert: vertex$3,
  	points_frag: fragment$3,
  	shadow_vert: vertex$2,
  	shadow_frag: fragment$2,
  	sprite_vert: vertex$1,
  	sprite_frag: fragment$1
  };

  /**
   * Uniforms library for shared webgl shaders
   */

  const UniformsLib = {

  	common: {

  		diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
  		opacity: { value: 1.0 },

  		map: { value: null },
  		mapTransform: { value: /*@__PURE__*/ new Matrix3$1() },

  		alphaMap: { value: null },
  		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },

  		alphaTest: { value: 0 }

  	},

  	specularmap: {

  		specularMap: { value: null },
  		specularMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	envmap: {

  		envMap: { value: null },
  		envMapRotation: { value: /*@__PURE__*/ new Matrix3$1() },
  		flipEnvMap: { value: - 1 },
  		reflectivity: { value: 1.0 }, // basic, lambert, phong
  		ior: { value: 1.5 }, // physical
  		refractionRatio: { value: 0.98 }, // basic, lambert, phong

  	},

  	aomap: {

  		aoMap: { value: null },
  		aoMapIntensity: { value: 1 },
  		aoMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	lightmap: {

  		lightMap: { value: null },
  		lightMapIntensity: { value: 1 },
  		lightMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	bumpmap: {

  		bumpMap: { value: null },
  		bumpMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		bumpScale: { value: 1 }

  	},

  	normalmap: {

  		normalMap: { value: null },
  		normalMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		normalScale: { value: /*@__PURE__*/ new Vector2$1( 1, 1 ) }

  	},

  	displacementmap: {

  		displacementMap: { value: null },
  		displacementMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		displacementScale: { value: 1 },
  		displacementBias: { value: 0 }

  	},

  	emissivemap: {

  		emissiveMap: { value: null },
  		emissiveMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	metalnessmap: {

  		metalnessMap: { value: null },
  		metalnessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	roughnessmap: {

  		roughnessMap: { value: null },
  		roughnessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	gradientmap: {

  		gradientMap: { value: null }

  	},

  	fog: {

  		fogDensity: { value: 0.00025 },
  		fogNear: { value: 1 },
  		fogFar: { value: 2000 },
  		fogColor: { value: /*@__PURE__*/ new Color$1( 0xffffff ) }

  	},

  	lights: {

  		ambientLightColor: { value: [] },

  		lightProbe: { value: [] },

  		directionalLights: { value: [], properties: {
  			direction: {},
  			color: {}
  		} },

  		directionalLightShadows: { value: [], properties: {
  			shadowIntensity: 1,
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		directionalShadowMap: { value: [] },
  		directionalShadowMatrix: { value: [] },

  		spotLights: { value: [], properties: {
  			color: {},
  			position: {},
  			direction: {},
  			distance: {},
  			coneCos: {},
  			penumbraCos: {},
  			decay: {}
  		} },

  		spotLightShadows: { value: [], properties: {
  			shadowIntensity: 1,
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		spotLightMap: { value: [] },
  		spotShadowMap: { value: [] },
  		spotLightMatrix: { value: [] },

  		pointLights: { value: [], properties: {
  			color: {},
  			position: {},
  			decay: {},
  			distance: {}
  		} },

  		pointLightShadows: { value: [], properties: {
  			shadowIntensity: 1,
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {},
  			shadowCameraNear: {},
  			shadowCameraFar: {}
  		} },

  		pointShadowMap: { value: [] },
  		pointShadowMatrix: { value: [] },

  		hemisphereLights: { value: [], properties: {
  			direction: {},
  			skyColor: {},
  			groundColor: {}
  		} },

  		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
  		rectAreaLights: { value: [], properties: {
  			color: {},
  			position: {},
  			width: {},
  			height: {}
  		} },

  		ltc_1: { value: null },
  		ltc_2: { value: null }

  	},

  	points: {

  		diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
  		opacity: { value: 1.0 },
  		size: { value: 1.0 },
  		scale: { value: 1.0 },
  		map: { value: null },
  		alphaMap: { value: null },
  		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		alphaTest: { value: 0 },
  		uvTransform: { value: /*@__PURE__*/ new Matrix3$1() }

  	},

  	sprite: {

  		diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
  		opacity: { value: 1.0 },
  		center: { value: /*@__PURE__*/ new Vector2$1( 0.5, 0.5 ) },
  		rotation: { value: 0.0 },
  		map: { value: null },
  		mapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		alphaMap: { value: null },
  		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		alphaTest: { value: 0 }

  	}

  };

  const ShaderLib = {

  	basic: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.meshbasic_vert,
  		fragmentShader: ShaderChunk.meshbasic_frag

  	},

  	lambert: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshlambert_vert,
  		fragmentShader: ShaderChunk.meshlambert_frag

  	},

  	phong: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
  				specular: { value: /*@__PURE__*/ new Color$1( 0x111111 ) },
  				shininess: { value: 30 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphong_vert,
  		fragmentShader: ShaderChunk.meshphong_frag

  	},

  	standard: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.roughnessmap,
  			UniformsLib.metalnessmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
  				roughness: { value: 1.0 },
  				metalness: { value: 0.0 },
  				envMapIntensity: { value: 1 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphysical_vert,
  		fragmentShader: ShaderChunk.meshphysical_frag

  	},

  	toon: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.gradientmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshtoon_vert,
  		fragmentShader: ShaderChunk.meshtoon_frag

  	},

  	matcap: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			{
  				matcap: { value: null }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshmatcap_vert,
  		fragmentShader: ShaderChunk.meshmatcap_frag

  	},

  	points: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.points,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.points_vert,
  		fragmentShader: ShaderChunk.points_frag

  	},

  	dashed: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.fog,
  			{
  				scale: { value: 1 },
  				dashSize: { value: 1 },
  				totalSize: { value: 2 }
  			}
  		] ),

  		vertexShader: ShaderChunk.linedashed_vert,
  		fragmentShader: ShaderChunk.linedashed_frag

  	},

  	depth: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap
  		] ),

  		vertexShader: ShaderChunk.depth_vert,
  		fragmentShader: ShaderChunk.depth_frag

  	},

  	normal: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshnormal_vert,
  		fragmentShader: ShaderChunk.meshnormal_frag

  	},

  	sprite: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.sprite,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.sprite_vert,
  		fragmentShader: ShaderChunk.sprite_frag

  	},

  	background: {

  		uniforms: {
  			uvTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			t2D: { value: null },
  			backgroundIntensity: { value: 1 }
  		},

  		vertexShader: ShaderChunk.background_vert,
  		fragmentShader: ShaderChunk.background_frag

  	},

  	backgroundCube: {

  		uniforms: {
  			envMap: { value: null },
  			flipEnvMap: { value: - 1 },
  			backgroundBlurriness: { value: 0 },
  			backgroundIntensity: { value: 1 },
  			backgroundRotation: { value: /*@__PURE__*/ new Matrix3$1() }
  		},

  		vertexShader: ShaderChunk.backgroundCube_vert,
  		fragmentShader: ShaderChunk.backgroundCube_frag

  	},

  	cube: {

  		uniforms: {
  			tCube: { value: null },
  			tFlip: { value: - 1 },
  			opacity: { value: 1.0 }
  		},

  		vertexShader: ShaderChunk.cube_vert,
  		fragmentShader: ShaderChunk.cube_frag

  	},

  	equirect: {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: ShaderChunk.equirect_vert,
  		fragmentShader: ShaderChunk.equirect_frag

  	},

  	distanceRGBA: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap,
  			{
  				referencePosition: { value: /*@__PURE__*/ new Vector3$1() },
  				nearDistance: { value: 1 },
  				farDistance: { value: 1000 }
  			}
  		] ),

  		vertexShader: ShaderChunk.distanceRGBA_vert,
  		fragmentShader: ShaderChunk.distanceRGBA_frag

  	},

  	shadow: {

  		uniforms: /*@__PURE__*/ mergeUniforms( [
  			UniformsLib.lights,
  			UniformsLib.fog,
  			{
  				color: { value: /*@__PURE__*/ new Color$1( 0x00000 ) },
  				opacity: { value: 1.0 }
  			},
  		] ),

  		vertexShader: ShaderChunk.shadow_vert,
  		fragmentShader: ShaderChunk.shadow_frag

  	}

  };

  ShaderLib.physical = {

  	uniforms: /*@__PURE__*/ mergeUniforms( [
  		ShaderLib.standard.uniforms,
  		{
  			clearcoat: { value: 0 },
  			clearcoatMap: { value: null },
  			clearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			clearcoatNormalMap: { value: null },
  			clearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2$1( 1, 1 ) },
  			clearcoatRoughness: { value: 0 },
  			clearcoatRoughnessMap: { value: null },
  			clearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			dispersion: { value: 0 },
  			iridescence: { value: 0 },
  			iridescenceMap: { value: null },
  			iridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			iridescenceIOR: { value: 1.3 },
  			iridescenceThicknessMinimum: { value: 100 },
  			iridescenceThicknessMaximum: { value: 400 },
  			iridescenceThicknessMap: { value: null },
  			iridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			sheen: { value: 0 },
  			sheenColor: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
  			sheenColorMap: { value: null },
  			sheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			sheenRoughness: { value: 1 },
  			sheenRoughnessMap: { value: null },
  			sheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			transmission: { value: 0 },
  			transmissionMap: { value: null },
  			transmissionMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2$1() },
  			transmissionSamplerMap: { value: null },
  			thickness: { value: 0 },
  			thicknessMap: { value: null },
  			thicknessMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			attenuationDistance: { value: 0 },
  			attenuationColor: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
  			specularColor: { value: /*@__PURE__*/ new Color$1( 1, 1, 1 ) },
  			specularColorMap: { value: null },
  			specularColorMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			specularIntensity: { value: 1 },
  			specularIntensityMap: { value: null },
  			specularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  			anisotropyVector: { value: /*@__PURE__*/ new Vector2$1() },
  			anisotropyMap: { value: null },
  			anisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3$1() },
  		}
  	] ),

  	vertexShader: ShaderChunk.meshphysical_vert,
  	fragmentShader: ShaderChunk.meshphysical_frag

  };

  const _rgb = { r: 0, b: 0, g: 0 };
  const _e1$1 = /*@__PURE__*/ new Euler$1();
  const _m1$1$1 = /*@__PURE__*/ new Matrix4$1();

  function WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {

  	const clearColor = new Color$1( 0x000000 );
  	let clearAlpha = alpha === true ? 0 : 1;

  	let planeMesh;
  	let boxMesh;

  	let currentBackground = null;
  	let currentBackgroundVersion = 0;
  	let currentTonemapping = null;

  	function getBackground( scene ) {

  		let background = scene.isScene === true ? scene.background : null;

  		if ( background && background.isTexture ) {

  			const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
  			background = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );

  		}

  		return background;

  	}

  	function render( scene ) {

  		let forceClear = false;
  		const background = getBackground( scene );

  		if ( background === null ) {

  			setClear( clearColor, clearAlpha );

  		} else if ( background && background.isColor ) {

  			setClear( background, 1 );
  			forceClear = true;

  		}

  		const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();

  		if ( environmentBlendMode === 'additive' ) {

  			state.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );

  		} else if ( environmentBlendMode === 'alpha-blend' ) {

  			state.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );

  		}

  		if ( renderer.autoClear || forceClear ) {

  			// buffers might not be writable which is required to ensure a correct clear

  			state.buffers.depth.setTest( true );
  			state.buffers.depth.setMask( true );
  			state.buffers.color.setMask( true );

  			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

  		}

  	}

  	function addToRenderList( renderList, scene ) {

  		const background = getBackground( scene );

  		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping$1 ) ) {

  			if ( boxMesh === undefined ) {

  				boxMesh = new Mesh$1(
  					new BoxGeometry$1( 1, 1, 1 ),
  					new ShaderMaterial$1( {
  						name: 'BackgroundCubeMaterial',
  						uniforms: cloneUniforms$1( ShaderLib.backgroundCube.uniforms ),
  						vertexShader: ShaderLib.backgroundCube.vertexShader,
  						fragmentShader: ShaderLib.backgroundCube.fragmentShader,
  						side: BackSide$1,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				boxMesh.geometry.deleteAttribute( 'normal' );
  				boxMesh.geometry.deleteAttribute( 'uv' );

  				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

  					this.matrixWorld.copyPosition( camera.matrixWorld );

  				};

  				// add "envMap" material property so the renderer can evaluate it like for built-in materials
  				Object.defineProperty( boxMesh.material, 'envMap', {

  					get: function () {

  						return this.uniforms.envMap.value;

  					}

  				} );

  				objects.update( boxMesh );

  			}

  			_e1$1.copy( scene.backgroundRotation );

  			// accommodate left-handed frame
  			_e1$1.x *= - 1; _e1$1.y *= - 1; _e1$1.z *= - 1;

  			if ( background.isCubeTexture && background.isRenderTargetTexture === false ) {

  				// environment maps which are not cube render targets or PMREMs follow a different convention
  				_e1$1.y *= - 1;
  				_e1$1.z *= - 1;

  			}

  			boxMesh.material.uniforms.envMap.value = background;
  			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
  			boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
  			boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
  			boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4( _m1$1$1.makeRotationFromEuler( _e1$1 ) );
  			boxMesh.material.toneMapped = ColorManagement$1.getTransfer( background.colorSpace ) !== SRGBTransfer$1;

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== background.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				boxMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = background.version;
  				currentTonemapping = renderer.toneMapping;

  			}

  			boxMesh.layers.enableAll();

  			// push to the pre-sorted opaque render list
  			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

  		} else if ( background && background.isTexture ) {

  			if ( planeMesh === undefined ) {

  				planeMesh = new Mesh$1(
  					new PlaneGeometry( 2, 2 ),
  					new ShaderMaterial$1( {
  						name: 'BackgroundMaterial',
  						uniforms: cloneUniforms$1( ShaderLib.background.uniforms ),
  						vertexShader: ShaderLib.background.vertexShader,
  						fragmentShader: ShaderLib.background.fragmentShader,
  						side: FrontSide$1,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				planeMesh.geometry.deleteAttribute( 'normal' );

  				// add "map" material property so the renderer can evaluate it like for built-in materials
  				Object.defineProperty( planeMesh.material, 'map', {

  					get: function () {

  						return this.uniforms.t2D.value;

  					}

  				} );

  				objects.update( planeMesh );

  			}

  			planeMesh.material.uniforms.t2D.value = background;
  			planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
  			planeMesh.material.toneMapped = ColorManagement$1.getTransfer( background.colorSpace ) !== SRGBTransfer$1;

  			if ( background.matrixAutoUpdate === true ) {

  				background.updateMatrix();

  			}

  			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== background.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				planeMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = background.version;
  				currentTonemapping = renderer.toneMapping;

  			}

  			planeMesh.layers.enableAll();

  			// push to the pre-sorted opaque render list
  			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

  		}

  	}

  	function setClear( color, alpha ) {

  		color.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );

  		state.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );

  	}

  	return {

  		getClearColor: function () {

  			return clearColor;

  		},
  		setClearColor: function ( color, alpha = 1 ) {

  			clearColor.set( color );
  			clearAlpha = alpha;
  			setClear( clearColor, clearAlpha );

  		},
  		getClearAlpha: function () {

  			return clearAlpha;

  		},
  		setClearAlpha: function ( alpha ) {

  			clearAlpha = alpha;
  			setClear( clearColor, clearAlpha );

  		},
  		render: render,
  		addToRenderList: addToRenderList

  	};

  }

  function WebGLBindingStates( gl, attributes ) {

  	const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

  	const bindingStates = {};

  	const defaultState = createBindingState( null );
  	let currentState = defaultState;
  	let forceUpdate = false;

  	function setup( object, material, program, geometry, index ) {

  		let updateBuffers = false;

  		const state = getBindingState( geometry, program, material );

  		if ( currentState !== state ) {

  			currentState = state;
  			bindVertexArrayObject( currentState.object );

  		}

  		updateBuffers = needsUpdate( object, geometry, program, index );

  		if ( updateBuffers ) saveCache( object, geometry, program, index );

  		if ( index !== null ) {

  			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

  		}

  		if ( updateBuffers || forceUpdate ) {

  			forceUpdate = false;

  			setupVertexAttributes( object, material, program, geometry );

  			if ( index !== null ) {

  				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

  			}

  		}

  	}

  	function createVertexArrayObject() {

  		return gl.createVertexArray();

  	}

  	function bindVertexArrayObject( vao ) {

  		return gl.bindVertexArray( vao );

  	}

  	function deleteVertexArrayObject( vao ) {

  		return gl.deleteVertexArray( vao );

  	}

  	function getBindingState( geometry, program, material ) {

  		const wireframe = ( material.wireframe === true );

  		let programMap = bindingStates[ geometry.id ];

  		if ( programMap === undefined ) {

  			programMap = {};
  			bindingStates[ geometry.id ] = programMap;

  		}

  		let stateMap = programMap[ program.id ];

  		if ( stateMap === undefined ) {

  			stateMap = {};
  			programMap[ program.id ] = stateMap;

  		}

  		let state = stateMap[ wireframe ];

  		if ( state === undefined ) {

  			state = createBindingState( createVertexArrayObject() );
  			stateMap[ wireframe ] = state;

  		}

  		return state;

  	}

  	function createBindingState( vao ) {

  		const newAttributes = [];
  		const enabledAttributes = [];
  		const attributeDivisors = [];

  		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

  			newAttributes[ i ] = 0;
  			enabledAttributes[ i ] = 0;
  			attributeDivisors[ i ] = 0;

  		}

  		return {

  			// for backward compatibility on non-VAO support browser
  			geometry: null,
  			program: null,
  			wireframe: false,

  			newAttributes: newAttributes,
  			enabledAttributes: enabledAttributes,
  			attributeDivisors: attributeDivisors,
  			object: vao,
  			attributes: {},
  			index: null

  		};

  	}

  	function needsUpdate( object, geometry, program, index ) {

  		const cachedAttributes = currentState.attributes;
  		const geometryAttributes = geometry.attributes;

  		let attributesNum = 0;

  		const programAttributes = program.getAttributes();

  		for ( const name in programAttributes ) {

  			const programAttribute = programAttributes[ name ];

  			if ( programAttribute.location >= 0 ) {

  				const cachedAttribute = cachedAttributes[ name ];
  				let geometryAttribute = geometryAttributes[ name ];

  				if ( geometryAttribute === undefined ) {

  					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
  					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

  				}

  				if ( cachedAttribute === undefined ) return true;

  				if ( cachedAttribute.attribute !== geometryAttribute ) return true;

  				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

  				attributesNum ++;

  			}

  		}

  		if ( currentState.attributesNum !== attributesNum ) return true;

  		if ( currentState.index !== index ) return true;

  		return false;

  	}

  	function saveCache( object, geometry, program, index ) {

  		const cache = {};
  		const attributes = geometry.attributes;
  		let attributesNum = 0;

  		const programAttributes = program.getAttributes();

  		for ( const name in programAttributes ) {

  			const programAttribute = programAttributes[ name ];

  			if ( programAttribute.location >= 0 ) {

  				let attribute = attributes[ name ];

  				if ( attribute === undefined ) {

  					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
  					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

  				}

  				const data = {};
  				data.attribute = attribute;

  				if ( attribute && attribute.data ) {

  					data.data = attribute.data;

  				}

  				cache[ name ] = data;

  				attributesNum ++;

  			}

  		}

  		currentState.attributes = cache;
  		currentState.attributesNum = attributesNum;

  		currentState.index = index;

  	}

  	function initAttributes() {

  		const newAttributes = currentState.newAttributes;

  		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

  			newAttributes[ i ] = 0;

  		}

  	}

  	function enableAttribute( attribute ) {

  		enableAttributeAndDivisor( attribute, 0 );

  	}

  	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

  		const newAttributes = currentState.newAttributes;
  		const enabledAttributes = currentState.enabledAttributes;
  		const attributeDivisors = currentState.attributeDivisors;

  		newAttributes[ attribute ] = 1;

  		if ( enabledAttributes[ attribute ] === 0 ) {

  			gl.enableVertexAttribArray( attribute );
  			enabledAttributes[ attribute ] = 1;

  		}

  		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

  			gl.vertexAttribDivisor( attribute, meshPerAttribute );
  			attributeDivisors[ attribute ] = meshPerAttribute;

  		}

  	}

  	function disableUnusedAttributes() {

  		const newAttributes = currentState.newAttributes;
  		const enabledAttributes = currentState.enabledAttributes;

  		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

  			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  	}

  	function vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {

  		if ( integer === true ) {

  			gl.vertexAttribIPointer( index, size, type, stride, offset );

  		} else {

  			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

  		}

  	}

  	function setupVertexAttributes( object, material, program, geometry ) {

  		initAttributes();

  		const geometryAttributes = geometry.attributes;

  		const programAttributes = program.getAttributes();

  		const materialDefaultAttributeValues = material.defaultAttributeValues;

  		for ( const name in programAttributes ) {

  			const programAttribute = programAttributes[ name ];

  			if ( programAttribute.location >= 0 ) {

  				let geometryAttribute = geometryAttributes[ name ];

  				if ( geometryAttribute === undefined ) {

  					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
  					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

  				}

  				if ( geometryAttribute !== undefined ) {

  					const normalized = geometryAttribute.normalized;
  					const size = geometryAttribute.itemSize;

  					const attribute = attributes.get( geometryAttribute );

  					// TODO Attribute may not be available on context restore

  					if ( attribute === undefined ) continue;

  					const buffer = attribute.buffer;
  					const type = attribute.type;
  					const bytesPerElement = attribute.bytesPerElement;

  					// check for integer attributes

  					const integer = ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType$1 );

  					if ( geometryAttribute.isInterleavedBufferAttribute ) {

  						const data = geometryAttribute.data;
  						const stride = data.stride;
  						const offset = geometryAttribute.offset;

  						if ( data.isInstancedInterleavedBuffer ) {

  							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

  							}

  							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

  								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

  							}

  						} else {

  							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  								enableAttribute( programAttribute.location + i );

  							}

  						}

  						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

  						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  							vertexAttribPointer(
  								programAttribute.location + i,
  								size / programAttribute.locationSize,
  								type,
  								normalized,
  								stride * bytesPerElement,
  								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,
  								integer
  							);

  						}

  					} else {

  						if ( geometryAttribute.isInstancedBufferAttribute ) {

  							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

  							}

  							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

  								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

  							}

  						} else {

  							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  								enableAttribute( programAttribute.location + i );

  							}

  						}

  						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

  						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

  							vertexAttribPointer(
  								programAttribute.location + i,
  								size / programAttribute.locationSize,
  								type,
  								normalized,
  								size * bytesPerElement,
  								( size / programAttribute.locationSize ) * i * bytesPerElement,
  								integer
  							);

  						}

  					}

  				} else if ( materialDefaultAttributeValues !== undefined ) {

  					const value = materialDefaultAttributeValues[ name ];

  					if ( value !== undefined ) {

  						switch ( value.length ) {

  							case 2:
  								gl.vertexAttrib2fv( programAttribute.location, value );
  								break;

  							case 3:
  								gl.vertexAttrib3fv( programAttribute.location, value );
  								break;

  							case 4:
  								gl.vertexAttrib4fv( programAttribute.location, value );
  								break;

  							default:
  								gl.vertexAttrib1fv( programAttribute.location, value );

  						}

  					}

  				}

  			}

  		}

  		disableUnusedAttributes();

  	}

  	function dispose() {

  		reset();

  		for ( const geometryId in bindingStates ) {

  			const programMap = bindingStates[ geometryId ];

  			for ( const programId in programMap ) {

  				const stateMap = programMap[ programId ];

  				for ( const wireframe in stateMap ) {

  					deleteVertexArrayObject( stateMap[ wireframe ].object );

  					delete stateMap[ wireframe ];

  				}

  				delete programMap[ programId ];

  			}

  			delete bindingStates[ geometryId ];

  		}

  	}

  	function releaseStatesOfGeometry( geometry ) {

  		if ( bindingStates[ geometry.id ] === undefined ) return;

  		const programMap = bindingStates[ geometry.id ];

  		for ( const programId in programMap ) {

  			const stateMap = programMap[ programId ];

  			for ( const wireframe in stateMap ) {

  				deleteVertexArrayObject( stateMap[ wireframe ].object );

  				delete stateMap[ wireframe ];

  			}

  			delete programMap[ programId ];

  		}

  		delete bindingStates[ geometry.id ];

  	}

  	function releaseStatesOfProgram( program ) {

  		for ( const geometryId in bindingStates ) {

  			const programMap = bindingStates[ geometryId ];

  			if ( programMap[ program.id ] === undefined ) continue;

  			const stateMap = programMap[ program.id ];

  			for ( const wireframe in stateMap ) {

  				deleteVertexArrayObject( stateMap[ wireframe ].object );

  				delete stateMap[ wireframe ];

  			}

  			delete programMap[ program.id ];

  		}

  	}

  	function reset() {

  		resetDefaultState();
  		forceUpdate = true;

  		if ( currentState === defaultState ) return;

  		currentState = defaultState;
  		bindVertexArrayObject( currentState.object );

  	}

  	// for backward-compatibility

  	function resetDefaultState() {

  		defaultState.geometry = null;
  		defaultState.program = null;
  		defaultState.wireframe = false;

  	}

  	return {

  		setup: setup,
  		reset: reset,
  		resetDefaultState: resetDefaultState,
  		dispose: dispose,
  		releaseStatesOfGeometry: releaseStatesOfGeometry,
  		releaseStatesOfProgram: releaseStatesOfProgram,

  		initAttributes: initAttributes,
  		enableAttribute: enableAttribute,
  		disableUnusedAttributes: disableUnusedAttributes

  	};

  }

  function WebGLBufferRenderer$1( gl, extensions, info ) {

  	let mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	function render( start, count ) {

  		gl.drawArrays( mode, start, count );

  		info.update( count, mode, 1 );

  	}

  	function renderInstances( start, count, primcount ) {

  		if ( primcount === 0 ) return;

  		gl.drawArraysInstanced( mode, start, count, primcount );

  		info.update( count, mode, primcount );

  	}

  	function renderMultiDraw( starts, counts, drawCount ) {

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );
  		extension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );

  		let elementCount = 0;
  		for ( let i = 0; i < drawCount; i ++ ) {

  			elementCount += counts[ i ];

  		}

  		info.update( elementCount, mode, 1 );

  	}

  	function renderMultiDrawInstances( starts, counts, drawCount, primcount ) {

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );

  		if ( extension === null ) {

  			for ( let i = 0; i < starts.length; i ++ ) {

  				renderInstances( starts[ i ], counts[ i ], primcount[ i ] );

  			}

  		} else {

  			extension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );

  			let elementCount = 0;
  			for ( let i = 0; i < drawCount; i ++ ) {

  				elementCount += counts[ i ] * primcount[ i ];

  			}

  			info.update( elementCount, mode, 1 );

  		}

  	}

  	//

  	this.setMode = setMode;
  	this.render = render;
  	this.renderInstances = renderInstances;
  	this.renderMultiDraw = renderMultiDraw;
  	this.renderMultiDrawInstances = renderMultiDrawInstances;

  }

  function WebGLCapabilities$1( gl, extensions, parameters, utils ) {

  	let maxAnisotropy;

  	function getMaxAnisotropy() {

  		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

  		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

  			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

  		} else {

  			maxAnisotropy = 0;

  		}

  		return maxAnisotropy;

  	}

  	function textureFormatReadable( textureFormat ) {

  		if ( textureFormat !== RGBAFormat$1 && utils.convert( textureFormat ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

  			return false;

  		}

  		return true;

  	}

  	function textureTypeReadable( textureType ) {

  		const halfFloatSupportedByExt = ( textureType === HalfFloatType$1 ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) );

  		if ( textureType !== UnsignedByteType$1 && utils.convert( textureType ) !== gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)
  			textureType !== FloatType$1 && ! halfFloatSupportedByExt ) {

  			return false;

  		}

  		return true;

  	}

  	function getMaxPrecision( precision ) {

  		if ( precision === 'highp' ) {

  			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
  				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

  				return 'highp';

  			}

  			precision = 'mediump';

  		}

  		if ( precision === 'mediump' ) {

  			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
  				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

  				return 'mediump';

  			}

  		}

  		return 'lowp';

  	}

  	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  	const maxPrecision = getMaxPrecision( precision );

  	if ( maxPrecision !== precision ) {

  		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
  		precision = maxPrecision;

  	}

  	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  	const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has( 'EXT_clip_control' );

  	const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
  	const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
  	const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
  	const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

  	const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
  	const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
  	const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
  	const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

  	const vertexTextures = maxVertexTextures > 0;

  	const maxSamples = gl.getParameter( gl.MAX_SAMPLES );

  	return {

  		isWebGL2: true, // keeping this for backwards compatibility

  		getMaxAnisotropy: getMaxAnisotropy,
  		getMaxPrecision: getMaxPrecision,

  		textureFormatReadable: textureFormatReadable,
  		textureTypeReadable: textureTypeReadable,

  		precision: precision,
  		logarithmicDepthBuffer: logarithmicDepthBuffer,
  		reverseDepthBuffer: reverseDepthBuffer,

  		maxTextures: maxTextures,
  		maxVertexTextures: maxVertexTextures,
  		maxTextureSize: maxTextureSize,
  		maxCubemapSize: maxCubemapSize,

  		maxAttributes: maxAttributes,
  		maxVertexUniforms: maxVertexUniforms,
  		maxVaryings: maxVaryings,
  		maxFragmentUniforms: maxFragmentUniforms,

  		vertexTextures: vertexTextures,

  		maxSamples: maxSamples

  	};

  }

  function WebGLClipping( properties ) {

  	const scope = this;

  	let globalState = null,
  		numGlobalPlanes = 0,
  		localClippingEnabled = false,
  		renderingShadows = false;

  	const plane = new Plane$1(),
  		viewNormalMatrix = new Matrix3$1(),

  		uniform = { value: null, needsUpdate: false };

  	this.uniform = uniform;
  	this.numPlanes = 0;
  	this.numIntersection = 0;

  	this.init = function ( planes, enableLocalClipping ) {

  		const enabled =
  			planes.length !== 0 ||
  			enableLocalClipping ||
  			// enable state of previous frame - the clipping code has to
  			// run another frame in order to reset the state:
  			numGlobalPlanes !== 0 ||
  			localClippingEnabled;

  		localClippingEnabled = enableLocalClipping;

  		numGlobalPlanes = planes.length;

  		return enabled;

  	};

  	this.beginShadows = function () {

  		renderingShadows = true;
  		projectPlanes( null );

  	};

  	this.endShadows = function () {

  		renderingShadows = false;

  	};

  	this.setGlobalState = function ( planes, camera ) {

  		globalState = projectPlanes( planes, camera, 0 );

  	};

  	this.setState = function ( material, camera, useCache ) {

  		const planes = material.clippingPlanes,
  			clipIntersection = material.clipIntersection,
  			clipShadows = material.clipShadows;

  		const materialProperties = properties.get( material );

  		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

  			// there's no local clipping

  			if ( renderingShadows ) {

  				// there's no global clipping

  				projectPlanes( null );

  			} else {

  				resetGlobalState();

  			}

  		} else {

  			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
  				lGlobal = nGlobal * 4;

  			let dstArray = materialProperties.clippingState || null;

  			uniform.value = dstArray; // ensure unique state

  			dstArray = projectPlanes( planes, camera, lGlobal, useCache );

  			for ( let i = 0; i !== lGlobal; ++ i ) {

  				dstArray[ i ] = globalState[ i ];

  			}

  			materialProperties.clippingState = dstArray;
  			this.numIntersection = clipIntersection ? this.numPlanes : 0;
  			this.numPlanes += nGlobal;

  		}


  	};

  	function resetGlobalState() {

  		if ( uniform.value !== globalState ) {

  			uniform.value = globalState;
  			uniform.needsUpdate = numGlobalPlanes > 0;

  		}

  		scope.numPlanes = numGlobalPlanes;
  		scope.numIntersection = 0;

  	}

  	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

  		const nPlanes = planes !== null ? planes.length : 0;
  		let dstArray = null;

  		if ( nPlanes !== 0 ) {

  			dstArray = uniform.value;

  			if ( skipTransform !== true || dstArray === null ) {

  				const flatSize = dstOffset + nPlanes * 4,
  					viewMatrix = camera.matrixWorldInverse;

  				viewNormalMatrix.getNormalMatrix( viewMatrix );

  				if ( dstArray === null || dstArray.length < flatSize ) {

  					dstArray = new Float32Array( flatSize );

  				}

  				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

  					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

  					plane.normal.toArray( dstArray, i4 );
  					dstArray[ i4 + 3 ] = plane.constant;

  				}

  			}

  			uniform.value = dstArray;
  			uniform.needsUpdate = true;

  		}

  		scope.numPlanes = nPlanes;
  		scope.numIntersection = 0;

  		return dstArray;

  	}

  }

  function WebGLCubeMaps( renderer ) {

  	let cubemaps = new WeakMap();

  	function mapTextureMapping( texture, mapping ) {

  		if ( mapping === EquirectangularReflectionMapping$1 ) {

  			texture.mapping = CubeReflectionMapping$1;

  		} else if ( mapping === EquirectangularRefractionMapping$1 ) {

  			texture.mapping = CubeRefractionMapping$1;

  		}

  		return texture;

  	}

  	function get( texture ) {

  		if ( texture && texture.isTexture ) {

  			const mapping = texture.mapping;

  			if ( mapping === EquirectangularReflectionMapping$1 || mapping === EquirectangularRefractionMapping$1 ) {

  				if ( cubemaps.has( texture ) ) {

  					const cubemap = cubemaps.get( texture ).texture;
  					return mapTextureMapping( cubemap, texture.mapping );

  				} else {

  					const image = texture.image;

  					if ( image && image.height > 0 ) {

  						const renderTarget = new WebGLCubeRenderTarget$1( image.height );
  						renderTarget.fromEquirectangularTexture( renderer, texture );
  						cubemaps.set( texture, renderTarget );

  						texture.addEventListener( 'dispose', onTextureDispose );

  						return mapTextureMapping( renderTarget.texture, texture.mapping );

  					} else {

  						// image not yet ready. try the conversion next frame

  						return null;

  					}

  				}

  			}

  		}

  		return texture;

  	}

  	function onTextureDispose( event ) {

  		const texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		const cubemap = cubemaps.get( texture );

  		if ( cubemap !== undefined ) {

  			cubemaps.delete( texture );
  			cubemap.dispose();

  		}

  	}

  	function dispose() {

  		cubemaps = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  let OrthographicCamera$1 = class OrthographicCamera extends Camera$1 {

  	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

  		super();

  		this.isOrthographicCamera = true;

  		this.type = 'OrthographicCamera';

  		this.zoom = 1;
  		this.view = null;

  		this.left = left;
  		this.right = right;
  		this.top = top;
  		this.bottom = bottom;

  		this.near = near;
  		this.far = far;

  		this.updateProjectionMatrix();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.left = source.left;
  		this.right = source.right;
  		this.top = source.top;
  		this.bottom = source.bottom;
  		this.near = source.near;
  		this.far = source.far;

  		this.zoom = source.zoom;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		return this;

  	}

  	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	}

  	clearViewOffset() {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	}

  	updateProjectionMatrix() {

  		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
  		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
  		const cx = ( this.right + this.left ) / 2;
  		const cy = ( this.top + this.bottom ) / 2;

  		let left = cx - dx;
  		let right = cx + dx;
  		let top = cy + dy;
  		let bottom = cy - dy;

  		if ( this.view !== null && this.view.enabled ) {

  			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
  			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

  			left += scaleW * this.view.offsetX;
  			right = left + scaleW * this.view.width;
  			top -= scaleH * this.view.offsetY;
  			bottom = top - scaleH * this.view.height;

  		}

  		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

  		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.zoom = this.zoom;
  		data.object.left = this.left;
  		data.object.right = this.right;
  		data.object.top = this.top;
  		data.object.bottom = this.bottom;
  		data.object.near = this.near;
  		data.object.far = this.far;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		return data;

  	}

  };

  const LOD_MIN$1 = 4;

  // The standard deviations (radians) associated with the extra mips. These are
  // chosen to approximate a Trowbridge-Reitz distribution function times the
  // geometric shadowing function. These sigma values squared must match the
  // variance #defines in cube_uv_reflection_fragment.glsl.js.
  const EXTRA_LOD_SIGMA$1 = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

  // The maximum length of the blur for loop. Smaller sigmas will use fewer
  // samples and exit early, but not recompile the shader.
  const MAX_SAMPLES$1 = 20;

  const _flatCamera$1 = /*@__PURE__*/ new OrthographicCamera$1();
  const _clearColor$2 = /*@__PURE__*/ new Color$1();
  let _oldTarget$1 = null;
  let _oldActiveCubeFace$1 = 0;
  let _oldActiveMipmapLevel$1 = 0;
  let _oldXrEnabled = false;

  // Golden Ratio
  const PHI$1 = ( 1 + Math.sqrt( 5 ) ) / 2;
  const INV_PHI$1 = 1 / PHI$1;

  // Vertices of a dodecahedron (except the opposites, which represent the
  // same axis), used as axis directions evenly spread on a sphere.
  const _axisDirections$1 = [
  	/*@__PURE__*/ new Vector3$1( - PHI$1, INV_PHI$1, 0 ),
  	/*@__PURE__*/ new Vector3$1( PHI$1, INV_PHI$1, 0 ),
  	/*@__PURE__*/ new Vector3$1( - INV_PHI$1, 0, PHI$1 ),
  	/*@__PURE__*/ new Vector3$1( INV_PHI$1, 0, PHI$1 ),
  	/*@__PURE__*/ new Vector3$1( 0, PHI$1, - INV_PHI$1 ),
  	/*@__PURE__*/ new Vector3$1( 0, PHI$1, INV_PHI$1 ),
  	/*@__PURE__*/ new Vector3$1( - 1, 1, - 1 ),
  	/*@__PURE__*/ new Vector3$1( 1, 1, - 1 ),
  	/*@__PURE__*/ new Vector3$1( - 1, 1, 1 ),
  	/*@__PURE__*/ new Vector3$1( 1, 1, 1 ) ];

  /**
   * This class generates a Prefiltered, Mipmapped Radiance Environment Map
   * (PMREM) from a cubeMap environment texture. This allows different levels of
   * blur to be quickly accessed based on material roughness. It is packed into a
   * special CubeUV format that allows us to perform custom interpolation so that
   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
   * chain, it only goes down to the LOD_MIN level (above), and then creates extra
   * even more filtered 'mips' at the same LOD_MIN resolution, associated with
   * higher roughness levels. In this way we maintain resolution to smoothly
   * interpolate diffuse lighting while limiting sampling computation.
   *
   * Paper: Fast, Accurate Image-Based Lighting
   * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
  */

  let PMREMGenerator$1 = class PMREMGenerator {

  	constructor( renderer ) {

  		this._renderer = renderer;
  		this._pingPongRenderTarget = null;

  		this._lodMax = 0;
  		this._cubeSize = 0;
  		this._lodPlanes = [];
  		this._sizeLods = [];
  		this._sigmas = [];

  		this._blurMaterial = null;
  		this._cubemapMaterial = null;
  		this._equirectMaterial = null;

  		this._compileMaterial( this._blurMaterial );

  	}

  	/**
  	 * Generates a PMREM from a supplied Scene, which can be faster than using an
  	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
  	 * in radians to be applied to the scene before PMREM generation. Optional near
  	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
  	 * is placed at the origin).
  	 */
  	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

  		_oldTarget$1 = this._renderer.getRenderTarget();
  		_oldActiveCubeFace$1 = this._renderer.getActiveCubeFace();
  		_oldActiveMipmapLevel$1 = this._renderer.getActiveMipmapLevel();
  		_oldXrEnabled = this._renderer.xr.enabled;

  		this._renderer.xr.enabled = false;

  		this._setSize( 256 );

  		const cubeUVRenderTarget = this._allocateTargets();
  		cubeUVRenderTarget.depthBuffer = true;

  		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

  		if ( sigma > 0 ) {

  			this._blur( cubeUVRenderTarget, 0, 0, sigma );

  		}

  		this._applyPMREM( cubeUVRenderTarget );
  		this._cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	}

  	/**
  	 * Generates a PMREM from an equirectangular texture, which can be either LDR
  	 * or HDR. The ideal input image size is 1k (1024 x 512),
  	 * as this matches best with the 256 x 256 cubemap output.
  	 * The smallest supported equirectangular image size is 64 x 32.
  	 */
  	fromEquirectangular( equirectangular, renderTarget = null ) {

  		return this._fromTexture( equirectangular, renderTarget );

  	}

  	/**
  	 * Generates a PMREM from an cubemap texture, which can be either LDR
  	 * or HDR. The ideal input cube size is 256 x 256,
  	 * as this matches best with the 256 x 256 cubemap output.
  	 * The smallest supported cube size is 16 x 16.
  	 */
  	fromCubemap( cubemap, renderTarget = null ) {

  		return this._fromTexture( cubemap, renderTarget );

  	}

  	/**
  	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	compileCubemapShader() {

  		if ( this._cubemapMaterial === null ) {

  			this._cubemapMaterial = _getCubemapMaterial$1();
  			this._compileMaterial( this._cubemapMaterial );

  		}

  	}

  	/**
  	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	compileEquirectangularShader() {

  		if ( this._equirectMaterial === null ) {

  			this._equirectMaterial = _getEquirectMaterial$1();
  			this._compileMaterial( this._equirectMaterial );

  		}

  	}

  	/**
  	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
  	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
  	 * one of them will cause any others to also become unusable.
  	 */
  	dispose() {

  		this._dispose();

  		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
  		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

  	}

  	// private interface

  	_setSize( cubeSize ) {

  		this._lodMax = Math.floor( Math.log2( cubeSize ) );
  		this._cubeSize = Math.pow( 2, this._lodMax );

  	}

  	_dispose() {

  		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

  		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

  		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

  			this._lodPlanes[ i ].dispose();

  		}

  	}

  	_cleanup( outputTarget ) {

  		this._renderer.setRenderTarget( _oldTarget$1, _oldActiveCubeFace$1, _oldActiveMipmapLevel$1 );
  		this._renderer.xr.enabled = _oldXrEnabled;

  		outputTarget.scissorTest = false;
  		_setViewport$1( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

  	}

  	_fromTexture( texture, renderTarget ) {

  		if ( texture.mapping === CubeReflectionMapping$1 || texture.mapping === CubeRefractionMapping$1 ) {

  			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

  		} else { // Equirectangular

  			this._setSize( texture.image.width / 4 );

  		}

  		_oldTarget$1 = this._renderer.getRenderTarget();
  		_oldActiveCubeFace$1 = this._renderer.getActiveCubeFace();
  		_oldActiveMipmapLevel$1 = this._renderer.getActiveMipmapLevel();
  		_oldXrEnabled = this._renderer.xr.enabled;

  		this._renderer.xr.enabled = false;

  		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
  		this._textureToCubeUV( texture, cubeUVRenderTarget );
  		this._applyPMREM( cubeUVRenderTarget );
  		this._cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	}

  	_allocateTargets() {

  		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
  		const height = 4 * this._cubeSize;

  		const params = {
  			magFilter: LinearFilter$1,
  			minFilter: LinearFilter$1,
  			generateMipmaps: false,
  			type: HalfFloatType$1,
  			format: RGBAFormat$1,
  			colorSpace: LinearSRGBColorSpace$1,
  			depthBuffer: false
  		};

  		const cubeUVRenderTarget = _createRenderTarget$1( width, height, params );

  		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

  			if ( this._pingPongRenderTarget !== null ) {

  				this._dispose();

  			}

  			this._pingPongRenderTarget = _createRenderTarget$1( width, height, params );

  			const { _lodMax } = this;
  			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes$1( _lodMax ) );

  			this._blurMaterial = _getBlurShader$1( _lodMax, width, height );

  		}

  		return cubeUVRenderTarget;

  	}

  	_compileMaterial( material ) {

  		const tmpMesh = new Mesh$1( this._lodPlanes[ 0 ], material );
  		this._renderer.compile( tmpMesh, _flatCamera$1 );

  	}

  	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

  		const fov = 90;
  		const aspect = 1;
  		const cubeCamera = new PerspectiveCamera$1( fov, aspect, near, far );
  		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
  		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
  		const renderer = this._renderer;

  		const originalAutoClear = renderer.autoClear;
  		const toneMapping = renderer.toneMapping;
  		renderer.getClearColor( _clearColor$2 );

  		renderer.toneMapping = NoToneMapping$1;
  		renderer.autoClear = false;

  		const backgroundMaterial = new MeshBasicMaterial$1( {
  			name: 'PMREM.Background',
  			side: BackSide$1,
  			depthWrite: false,
  			depthTest: false,
  		} );

  		const backgroundBox = new Mesh$1( new BoxGeometry$1(), backgroundMaterial );

  		let useSolidColor = false;
  		const background = scene.background;

  		if ( background ) {

  			if ( background.isColor ) {

  				backgroundMaterial.color.copy( background );
  				scene.background = null;
  				useSolidColor = true;

  			}

  		} else {

  			backgroundMaterial.color.copy( _clearColor$2 );
  			useSolidColor = true;

  		}

  		for ( let i = 0; i < 6; i ++ ) {

  			const col = i % 3;

  			if ( col === 0 ) {

  				cubeCamera.up.set( 0, upSign[ i ], 0 );
  				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

  			} else if ( col === 1 ) {

  				cubeCamera.up.set( 0, 0, upSign[ i ] );
  				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

  			} else {

  				cubeCamera.up.set( 0, upSign[ i ], 0 );
  				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

  			}

  			const size = this._cubeSize;

  			_setViewport$1( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

  			renderer.setRenderTarget( cubeUVRenderTarget );

  			if ( useSolidColor ) {

  				renderer.render( backgroundBox, cubeCamera );

  			}

  			renderer.render( scene, cubeCamera );

  		}

  		backgroundBox.geometry.dispose();
  		backgroundBox.material.dispose();

  		renderer.toneMapping = toneMapping;
  		renderer.autoClear = originalAutoClear;
  		scene.background = background;

  	}

  	_textureToCubeUV( texture, cubeUVRenderTarget ) {

  		const renderer = this._renderer;

  		const isCubeTexture = ( texture.mapping === CubeReflectionMapping$1 || texture.mapping === CubeRefractionMapping$1 );

  		if ( isCubeTexture ) {

  			if ( this._cubemapMaterial === null ) {

  				this._cubemapMaterial = _getCubemapMaterial$1();

  			}

  			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;

  		} else {

  			if ( this._equirectMaterial === null ) {

  				this._equirectMaterial = _getEquirectMaterial$1();

  			}

  		}

  		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
  		const mesh = new Mesh$1( this._lodPlanes[ 0 ], material );

  		const uniforms = material.uniforms;

  		uniforms[ 'envMap' ].value = texture;

  		const size = this._cubeSize;

  		_setViewport$1( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

  		renderer.setRenderTarget( cubeUVRenderTarget );
  		renderer.render( mesh, _flatCamera$1 );

  	}

  	_applyPMREM( cubeUVRenderTarget ) {

  		const renderer = this._renderer;
  		const autoClear = renderer.autoClear;
  		renderer.autoClear = false;
  		const n = this._lodPlanes.length;

  		for ( let i = 1; i < n; i ++ ) {

  			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

  			const poleAxis = _axisDirections$1[ ( n - i - 1 ) % _axisDirections$1.length ];

  			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

  		}

  		renderer.autoClear = autoClear;

  	}

  	/**
  	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
  	 * vertically and horizontally, but this breaks down on a cube. Here we apply
  	 * the blur latitudinally (around the poles), and then longitudinally (towards
  	 * the poles) to approximate the orthogonally-separable blur. It is least
  	 * accurate at the poles, but still does a decent job.
  	 */
  	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

  		const pingPongRenderTarget = this._pingPongRenderTarget;

  		this._halfBlur(
  			cubeUVRenderTarget,
  			pingPongRenderTarget,
  			lodIn,
  			lodOut,
  			sigma,
  			'latitudinal',
  			poleAxis );

  		this._halfBlur(
  			pingPongRenderTarget,
  			cubeUVRenderTarget,
  			lodOut,
  			lodOut,
  			sigma,
  			'longitudinal',
  			poleAxis );

  	}

  	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

  		const renderer = this._renderer;
  		const blurMaterial = this._blurMaterial;

  		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

  			console.error(
  				'blur direction must be either latitudinal or longitudinal!' );

  		}

  		// Number of standard deviations at which to cut off the discrete approximation.
  		const STANDARD_DEVIATIONS = 3;

  		const blurMesh = new Mesh$1( this._lodPlanes[ lodOut ], blurMaterial );
  		const blurUniforms = blurMaterial.uniforms;

  		const pixels = this._sizeLods[ lodIn ] - 1;
  		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES$1 - 1 );
  		const sigmaPixels = sigmaRadians / radiansPerPixel;
  		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES$1;

  		if ( samples > MAX_SAMPLES$1 ) {

  			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES$1}` );

  		}

  		const weights = [];
  		let sum = 0;

  		for ( let i = 0; i < MAX_SAMPLES$1; ++ i ) {

  			const x = i / sigmaPixels;
  			const weight = Math.exp( - x * x / 2 );
  			weights.push( weight );

  			if ( i === 0 ) {

  				sum += weight;

  			} else if ( i < samples ) {

  				sum += 2 * weight;

  			}

  		}

  		for ( let i = 0; i < weights.length; i ++ ) {

  			weights[ i ] = weights[ i ] / sum;

  		}

  		blurUniforms[ 'envMap' ].value = targetIn.texture;
  		blurUniforms[ 'samples' ].value = samples;
  		blurUniforms[ 'weights' ].value = weights;
  		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

  		if ( poleAxis ) {

  			blurUniforms[ 'poleAxis' ].value = poleAxis;

  		}

  		const { _lodMax } = this;
  		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
  		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

  		const outputSize = this._sizeLods[ lodOut ];
  		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN$1 ? lodOut - _lodMax + LOD_MIN$1 : 0 );
  		const y = 4 * ( this._cubeSize - outputSize );

  		_setViewport$1( targetOut, x, y, 3 * outputSize, 2 * outputSize );
  		renderer.setRenderTarget( targetOut );
  		renderer.render( blurMesh, _flatCamera$1 );

  	}

  };



  function _createPlanes$1( lodMax ) {

  	const lodPlanes = [];
  	const sizeLods = [];
  	const sigmas = [];

  	let lod = lodMax;

  	const totalLods = lodMax - LOD_MIN$1 + 1 + EXTRA_LOD_SIGMA$1.length;

  	for ( let i = 0; i < totalLods; i ++ ) {

  		const sizeLod = Math.pow( 2, lod );
  		sizeLods.push( sizeLod );
  		let sigma = 1.0 / sizeLod;

  		if ( i > lodMax - LOD_MIN$1 ) {

  			sigma = EXTRA_LOD_SIGMA$1[ i - lodMax + LOD_MIN$1 - 1 ];

  		} else if ( i === 0 ) {

  			sigma = 0;

  		}

  		sigmas.push( sigma );

  		const texelSize = 1.0 / ( sizeLod - 2 );
  		const min = - texelSize;
  		const max = 1 + texelSize;
  		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

  		const cubeFaces = 6;
  		const vertices = 6;
  		const positionSize = 3;
  		const uvSize = 2;
  		const faceIndexSize = 1;

  		const position = new Float32Array( positionSize * vertices * cubeFaces );
  		const uv = new Float32Array( uvSize * vertices * cubeFaces );
  		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

  		for ( let face = 0; face < cubeFaces; face ++ ) {

  			const x = ( face % 3 ) * 2 / 3 - 1;
  			const y = face > 2 ? 0 : - 1;
  			const coordinates = [
  				x, y, 0,
  				x + 2 / 3, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y + 1, 0
  			];
  			position.set( coordinates, positionSize * vertices * face );
  			uv.set( uv1, uvSize * vertices * face );
  			const fill = [ face, face, face, face, face, face ];
  			faceIndex.set( fill, faceIndexSize * vertices * face );

  		}

  		const planes = new BufferGeometry$1();
  		planes.setAttribute( 'position', new BufferAttribute$1( position, positionSize ) );
  		planes.setAttribute( 'uv', new BufferAttribute$1( uv, uvSize ) );
  		planes.setAttribute( 'faceIndex', new BufferAttribute$1( faceIndex, faceIndexSize ) );
  		lodPlanes.push( planes );

  		if ( lod > LOD_MIN$1 ) {

  			lod --;

  		}

  	}

  	return { lodPlanes, sizeLods, sigmas };

  }

  function _createRenderTarget$1( width, height, params ) {

  	const cubeUVRenderTarget = new WebGLRenderTarget$1( width, height, params );
  	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping$1;
  	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
  	cubeUVRenderTarget.scissorTest = true;
  	return cubeUVRenderTarget;

  }

  function _setViewport$1( target, x, y, width, height ) {

  	target.viewport.set( x, y, width, height );
  	target.scissor.set( x, y, width, height );

  }

  function _getBlurShader$1( lodMax, width, height ) {

  	const weights = new Float32Array( MAX_SAMPLES$1 );
  	const poleAxis = new Vector3$1( 0, 1, 0 );
  	const shaderMaterial = new ShaderMaterial$1( {

  		name: 'SphericalGaussianBlur',

  		defines: {
  			'n': MAX_SAMPLES$1,
  			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
  			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
  			'CUBEUV_MAX_MIP': `${lodMax}.0`,
  		},

  		uniforms: {
  			'envMap': { value: null },
  			'samples': { value: 1 },
  			'weights': { value: weights },
  			'latitudinal': { value: false },
  			'dTheta': { value: 0 },
  			'mipInt': { value: 0 },
  			'poleAxis': { value: poleAxis }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

  		blending: NoBlending$1,
  		depthTest: false,
  		depthWrite: false

  	} );

  	return shaderMaterial;

  }

  function _getEquirectMaterial$1() {

  	return new ShaderMaterial$1( {

  		name: 'EquirectangularToCubeUV',

  		uniforms: {
  			'envMap': { value: null }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

  		blending: NoBlending$1,
  		depthTest: false,
  		depthWrite: false

  	} );

  }

  function _getCubemapMaterial$1() {

  	return new ShaderMaterial$1( {

  		name: 'CubemapToCubeUV',

  		uniforms: {
  			'envMap': { value: null },
  			'flipEnvMap': { value: - 1 }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

  		blending: NoBlending$1,
  		depthTest: false,
  		depthWrite: false

  	} );

  }

  function _getCommonVertexShader() {

  	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

  }

  function WebGLCubeUVMaps( renderer ) {

  	let cubeUVmaps = new WeakMap();

  	let pmremGenerator = null;

  	function get( texture ) {

  		if ( texture && texture.isTexture ) {

  			const mapping = texture.mapping;

  			const isEquirectMap = ( mapping === EquirectangularReflectionMapping$1 || mapping === EquirectangularRefractionMapping$1 );
  			const isCubeMap = ( mapping === CubeReflectionMapping$1 || mapping === CubeRefractionMapping$1 );

  			// equirect/cube map to cubeUV conversion

  			if ( isEquirectMap || isCubeMap ) {

  				let renderTarget = cubeUVmaps.get( texture );

  				const currentPMREMVersion = renderTarget !== undefined ? renderTarget.texture.pmremVersion : 0;

  				if ( texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion ) {

  					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator$1( renderer );

  					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
  					renderTarget.texture.pmremVersion = texture.pmremVersion;

  					cubeUVmaps.set( texture, renderTarget );

  					return renderTarget.texture;

  				} else {

  					if ( renderTarget !== undefined ) {

  						return renderTarget.texture;

  					} else {

  						const image = texture.image;

  						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

  							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator$1( renderer );

  							renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
  							renderTarget.texture.pmremVersion = texture.pmremVersion;

  							cubeUVmaps.set( texture, renderTarget );

  							texture.addEventListener( 'dispose', onTextureDispose );

  							return renderTarget.texture;

  						} else {

  							// image not yet ready. try the conversion next frame

  							return null;

  						}

  					}

  				}

  			}

  		}

  		return texture;

  	}

  	function isCubeTextureComplete( image ) {

  		let count = 0;
  		const length = 6;

  		for ( let i = 0; i < length; i ++ ) {

  			if ( image[ i ] !== undefined ) count ++;

  		}

  		return count === length;


  	}

  	function onTextureDispose( event ) {

  		const texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		const cubemapUV = cubeUVmaps.get( texture );

  		if ( cubemapUV !== undefined ) {

  			cubeUVmaps.delete( texture );
  			cubemapUV.dispose();

  		}

  	}

  	function dispose() {

  		cubeUVmaps = new WeakMap();

  		if ( pmremGenerator !== null ) {

  			pmremGenerator.dispose();
  			pmremGenerator = null;

  		}

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  function WebGLExtensions$1( gl ) {

  	const extensions = {};

  	function getExtension( name ) {

  		if ( extensions[ name ] !== undefined ) {

  			return extensions[ name ];

  		}

  		let extension;

  		switch ( name ) {

  			case 'WEBGL_depth_texture':
  				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
  				break;

  			case 'EXT_texture_filter_anisotropic':
  				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
  				break;

  			case 'WEBGL_compressed_texture_s3tc':
  				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
  				break;

  			case 'WEBGL_compressed_texture_pvrtc':
  				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
  				break;

  			default:
  				extension = gl.getExtension( name );

  		}

  		extensions[ name ] = extension;

  		return extension;

  	}

  	return {

  		has: function ( name ) {

  			return getExtension( name ) !== null;

  		},

  		init: function () {

  			getExtension( 'EXT_color_buffer_float' );
  			getExtension( 'WEBGL_clip_cull_distance' );
  			getExtension( 'OES_texture_float_linear' );
  			getExtension( 'EXT_color_buffer_half_float' );
  			getExtension( 'WEBGL_multisampled_render_to_texture' );
  			getExtension( 'WEBGL_render_shared_exponent' );

  		},

  		get: function ( name ) {

  			const extension = getExtension( name );

  			if ( extension === null ) {

  				warnOnce$1( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

  			}

  			return extension;

  		}

  	};

  }

  function WebGLGeometries( gl, attributes, info, bindingStates ) {

  	const geometries = {};
  	const wireframeAttributes = new WeakMap();

  	function onGeometryDispose( event ) {

  		const geometry = event.target;

  		if ( geometry.index !== null ) {

  			attributes.remove( geometry.index );

  		}

  		for ( const name in geometry.attributes ) {

  			attributes.remove( geometry.attributes[ name ] );

  		}

  		for ( const name in geometry.morphAttributes ) {

  			const array = geometry.morphAttributes[ name ];

  			for ( let i = 0, l = array.length; i < l; i ++ ) {

  				attributes.remove( array[ i ] );

  			}

  		}

  		geometry.removeEventListener( 'dispose', onGeometryDispose );

  		delete geometries[ geometry.id ];

  		const attribute = wireframeAttributes.get( geometry );

  		if ( attribute ) {

  			attributes.remove( attribute );
  			wireframeAttributes.delete( geometry );

  		}

  		bindingStates.releaseStatesOfGeometry( geometry );

  		if ( geometry.isInstancedBufferGeometry === true ) {

  			delete geometry._maxInstanceCount;

  		}

  		//

  		info.memory.geometries --;

  	}

  	function get( object, geometry ) {

  		if ( geometries[ geometry.id ] === true ) return geometry;

  		geometry.addEventListener( 'dispose', onGeometryDispose );

  		geometries[ geometry.id ] = true;

  		info.memory.geometries ++;

  		return geometry;

  	}

  	function update( geometry ) {

  		const geometryAttributes = geometry.attributes;

  		// Updating index buffer in VAO now. See WebGLBindingStates.

  		for ( const name in geometryAttributes ) {

  			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

  		}

  		// morph targets

  		const morphAttributes = geometry.morphAttributes;

  		for ( const name in morphAttributes ) {

  			const array = morphAttributes[ name ];

  			for ( let i = 0, l = array.length; i < l; i ++ ) {

  				attributes.update( array[ i ], gl.ARRAY_BUFFER );

  			}

  		}

  	}

  	function updateWireframeAttribute( geometry ) {

  		const indices = [];

  		const geometryIndex = geometry.index;
  		const geometryPosition = geometry.attributes.position;
  		let version = 0;

  		if ( geometryIndex !== null ) {

  			const array = geometryIndex.array;
  			version = geometryIndex.version;

  			for ( let i = 0, l = array.length; i < l; i += 3 ) {

  				const a = array[ i + 0 ];
  				const b = array[ i + 1 ];
  				const c = array[ i + 2 ];

  				indices.push( a, b, b, c, c, a );

  			}

  		} else if ( geometryPosition !== undefined ) {

  			const array = geometryPosition.array;
  			version = geometryPosition.version;

  			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

  				const a = i + 0;
  				const b = i + 1;
  				const c = i + 2;

  				indices.push( a, b, b, c, c, a );

  			}

  		} else {

  			return;

  		}

  		const attribute = new ( arrayNeedsUint32$2( indices ) ? Uint32BufferAttribute$1 : Uint16BufferAttribute$1 )( indices, 1 );
  		attribute.version = version;

  		// Updating index buffer in VAO now. See WebGLBindingStates

  		//

  		const previousAttribute = wireframeAttributes.get( geometry );

  		if ( previousAttribute ) attributes.remove( previousAttribute );

  		//

  		wireframeAttributes.set( geometry, attribute );

  	}

  	function getWireframeAttribute( geometry ) {

  		const currentAttribute = wireframeAttributes.get( geometry );

  		if ( currentAttribute ) {

  			const geometryIndex = geometry.index;

  			if ( geometryIndex !== null ) {

  				// if the attribute is obsolete, create a new one

  				if ( currentAttribute.version < geometryIndex.version ) {

  					updateWireframeAttribute( geometry );

  				}

  			}

  		} else {

  			updateWireframeAttribute( geometry );

  		}

  		return wireframeAttributes.get( geometry );

  	}

  	return {

  		get: get,
  		update: update,

  		getWireframeAttribute: getWireframeAttribute

  	};

  }

  function WebGLIndexedBufferRenderer( gl, extensions, info ) {

  	let mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	let type, bytesPerElement;

  	function setIndex( value ) {

  		type = value.type;
  		bytesPerElement = value.bytesPerElement;

  	}

  	function render( start, count ) {

  		gl.drawElements( mode, count, type, start * bytesPerElement );

  		info.update( count, mode, 1 );

  	}

  	function renderInstances( start, count, primcount ) {

  		if ( primcount === 0 ) return;

  		gl.drawElementsInstanced( mode, count, type, start * bytesPerElement, primcount );

  		info.update( count, mode, primcount );

  	}

  	function renderMultiDraw( starts, counts, drawCount ) {

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );
  		extension.multiDrawElementsWEBGL( mode, counts, 0, type, starts, 0, drawCount );

  		let elementCount = 0;
  		for ( let i = 0; i < drawCount; i ++ ) {

  			elementCount += counts[ i ];

  		}

  		info.update( elementCount, mode, 1 );


  	}

  	function renderMultiDrawInstances( starts, counts, drawCount, primcount ) {

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );

  		if ( extension === null ) {

  			for ( let i = 0; i < starts.length; i ++ ) {

  				renderInstances( starts[ i ] / bytesPerElement, counts[ i ], primcount[ i ] );

  			}

  		} else {

  			extension.multiDrawElementsInstancedWEBGL( mode, counts, 0, type, starts, 0, primcount, 0, drawCount );

  			let elementCount = 0;
  			for ( let i = 0; i < drawCount; i ++ ) {

  				elementCount += counts[ i ] * primcount[ i ];

  			}

  			info.update( elementCount, mode, 1 );

  		}

  	}

  	//

  	this.setMode = setMode;
  	this.setIndex = setIndex;
  	this.render = render;
  	this.renderInstances = renderInstances;
  	this.renderMultiDraw = renderMultiDraw;
  	this.renderMultiDrawInstances = renderMultiDrawInstances;

  }

  function WebGLInfo( gl ) {

  	const memory = {
  		geometries: 0,
  		textures: 0
  	};

  	const render = {
  		frame: 0,
  		calls: 0,
  		triangles: 0,
  		points: 0,
  		lines: 0
  	};

  	function update( count, mode, instanceCount ) {

  		render.calls ++;

  		switch ( mode ) {

  			case gl.TRIANGLES:
  				render.triangles += instanceCount * ( count / 3 );
  				break;

  			case gl.LINES:
  				render.lines += instanceCount * ( count / 2 );
  				break;

  			case gl.LINE_STRIP:
  				render.lines += instanceCount * ( count - 1 );
  				break;

  			case gl.LINE_LOOP:
  				render.lines += instanceCount * count;
  				break;

  			case gl.POINTS:
  				render.points += instanceCount * count;
  				break;

  			default:
  				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
  				break;

  		}

  	}

  	function reset() {

  		render.calls = 0;
  		render.triangles = 0;
  		render.points = 0;
  		render.lines = 0;

  	}

  	return {
  		memory: memory,
  		render: render,
  		programs: null,
  		autoReset: true,
  		reset: reset,
  		update: update
  	};

  }

  function WebGLMorphtargets( gl, capabilities, textures ) {

  	const morphTextures = new WeakMap();
  	const morph = new Vector4$1();

  	function update( object, geometry, program ) {

  		const objectInfluences = object.morphTargetInfluences;

  		// the following encodes morph targets into an array of data textures. Each layer represents a single morph target.

  		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

  		let entry = morphTextures.get( geometry );

  		if ( entry === undefined || entry.count !== morphTargetsCount ) {

  			if ( entry !== undefined ) entry.texture.dispose();

  			const hasMorphPosition = geometry.morphAttributes.position !== undefined;
  			const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
  			const hasMorphColors = geometry.morphAttributes.color !== undefined;

  			const morphTargets = geometry.morphAttributes.position || [];
  			const morphNormals = geometry.morphAttributes.normal || [];
  			const morphColors = geometry.morphAttributes.color || [];

  			let vertexDataCount = 0;

  			if ( hasMorphPosition === true ) vertexDataCount = 1;
  			if ( hasMorphNormals === true ) vertexDataCount = 2;
  			if ( hasMorphColors === true ) vertexDataCount = 3;

  			let width = geometry.attributes.position.count * vertexDataCount;
  			let height = 1;

  			if ( width > capabilities.maxTextureSize ) {

  				height = Math.ceil( width / capabilities.maxTextureSize );
  				width = capabilities.maxTextureSize;

  			}

  			const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

  			const texture = new DataArrayTexture$1( buffer, width, height, morphTargetsCount );
  			texture.type = FloatType$1;
  			texture.needsUpdate = true;

  			// fill buffer

  			const vertexDataStride = vertexDataCount * 4;

  			for ( let i = 0; i < morphTargetsCount; i ++ ) {

  				const morphTarget = morphTargets[ i ];
  				const morphNormal = morphNormals[ i ];
  				const morphColor = morphColors[ i ];

  				const offset = width * height * 4 * i;

  				for ( let j = 0; j < morphTarget.count; j ++ ) {

  					const stride = j * vertexDataStride;

  					if ( hasMorphPosition === true ) {

  						morph.fromBufferAttribute( morphTarget, j );

  						buffer[ offset + stride + 0 ] = morph.x;
  						buffer[ offset + stride + 1 ] = morph.y;
  						buffer[ offset + stride + 2 ] = morph.z;
  						buffer[ offset + stride + 3 ] = 0;

  					}

  					if ( hasMorphNormals === true ) {

  						morph.fromBufferAttribute( morphNormal, j );

  						buffer[ offset + stride + 4 ] = morph.x;
  						buffer[ offset + stride + 5 ] = morph.y;
  						buffer[ offset + stride + 6 ] = morph.z;
  						buffer[ offset + stride + 7 ] = 0;

  					}

  					if ( hasMorphColors === true ) {

  						morph.fromBufferAttribute( morphColor, j );

  						buffer[ offset + stride + 8 ] = morph.x;
  						buffer[ offset + stride + 9 ] = morph.y;
  						buffer[ offset + stride + 10 ] = morph.z;
  						buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

  					}

  				}

  			}

  			entry = {
  				count: morphTargetsCount,
  				texture: texture,
  				size: new Vector2$1( width, height )
  			};

  			morphTextures.set( geometry, entry );

  			function disposeTexture() {

  				texture.dispose();

  				morphTextures.delete( geometry );

  				geometry.removeEventListener( 'dispose', disposeTexture );

  			}

  			geometry.addEventListener( 'dispose', disposeTexture );

  		}

  		//
  		if ( object.isInstancedMesh === true && object.morphTexture !== null ) {

  			program.getUniforms().setValue( gl, 'morphTexture', object.morphTexture, textures );

  		} else {

  			let morphInfluencesSum = 0;

  			for ( let i = 0; i < objectInfluences.length; i ++ ) {

  				morphInfluencesSum += objectInfluences[ i ];

  			}

  			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;


  			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
  			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

  		}

  		program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
  		program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );

  	}

  	return {

  		update: update

  	};

  }

  function WebGLObjects( gl, geometries, attributes, info ) {

  	let updateMap = new WeakMap();

  	function update( object ) {

  		const frame = info.render.frame;

  		const geometry = object.geometry;
  		const buffergeometry = geometries.get( object, geometry );

  		// Update once per frame

  		if ( updateMap.get( buffergeometry ) !== frame ) {

  			geometries.update( buffergeometry );

  			updateMap.set( buffergeometry, frame );

  		}

  		if ( object.isInstancedMesh ) {

  			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

  				object.addEventListener( 'dispose', onInstancedMeshDispose );

  			}

  			if ( updateMap.get( object ) !== frame ) {

  				attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

  				if ( object.instanceColor !== null ) {

  					attributes.update( object.instanceColor, gl.ARRAY_BUFFER );

  				}

  				updateMap.set( object, frame );

  			}

  		}

  		if ( object.isSkinnedMesh ) {

  			const skeleton = object.skeleton;

  			if ( updateMap.get( skeleton ) !== frame ) {

  				skeleton.update();

  				updateMap.set( skeleton, frame );

  			}

  		}

  		return buffergeometry;

  	}

  	function dispose() {

  		updateMap = new WeakMap();

  	}

  	function onInstancedMeshDispose( event ) {

  		const instancedMesh = event.target;

  		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

  		attributes.remove( instancedMesh.instanceMatrix );

  		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

  	}

  	return {

  		update: update,
  		dispose: dispose

  	};

  }

  let DepthTexture$1 = class DepthTexture extends Texture$1 {

  	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat$1 ) {

  		if ( format !== DepthFormat$1 && format !== DepthStencilFormat$1 ) {

  			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

  		}

  		if ( type === undefined && format === DepthFormat$1 ) type = UnsignedIntType$1;
  		if ( type === undefined && format === DepthStencilFormat$1 ) type = UnsignedInt248Type$1;

  		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  		this.isDepthTexture = true;

  		this.image = { width: width, height: height };

  		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter$1;
  		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter$1;

  		this.flipY = false;
  		this.generateMipmaps = false;

  		this.compareFunction = null;

  	}


  	copy( source ) {

  		super.copy( source );

  		this.compareFunction = source.compareFunction;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

  		return data;

  	}

  };

  /**
   * Uniforms of a program.
   * Those form a tree structure with a special top-level container for the root,
   * which you get by calling 'new WebGLUniforms( gl, program )'.
   *
   *
   * Properties of inner nodes including the top-level container:
   *
   * .seq - array of nested uniforms
   * .map - nested uniforms by name
   *
   *
   * Methods of all nodes except the top-level container:
   *
   * .setValue( gl, value, [textures] )
   *
   * 		uploads a uniform value(s)
   *  	the 'textures' parameter is needed for sampler uniforms
   *
   *
   * Static methods of the top-level container (textures factorizations):
   *
   * .upload( gl, seq, values, textures )
   *
   * 		sets uniforms in 'seq' to 'values[id].value'
   *
   * .seqWithValue( seq, values ) : filteredSeq
   *
   * 		filters 'seq' entries with corresponding entry in values
   *
   *
   * Methods of the top-level container (textures factorizations):
   *
   * .setValue( gl, name, value, textures )
   *
   * 		sets uniform with  name 'name' to 'value'
   *
   * .setOptional( gl, obj, prop )
   *
   * 		like .set for an optional property of the object
   *
   */


  const emptyTexture = /*@__PURE__*/ new Texture$1();

  const emptyShadowTexture = /*@__PURE__*/ new DepthTexture$1( 1, 1 );

  const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture$1();
  const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
  const emptyCubeTexture = /*@__PURE__*/ new CubeTexture$1();

  // --- Utilities ---

  // Array Caches (provide typed arrays for temporary by size)

  const arrayCacheF32 = [];
  const arrayCacheI32 = [];

  // Float32Array caches used for uploading Matrix uniforms

  const mat4array = new Float32Array( 16 );
  const mat3array = new Float32Array( 9 );
  const mat2array = new Float32Array( 4 );

  // Flattening for arrays of vectors and matrices

  function flatten( array, nBlocks, blockSize ) {

  	const firstElem = array[ 0 ];

  	if ( firstElem <= 0 || firstElem > 0 ) return array;
  	// unoptimized: ! isNaN( firstElem )
  	// see http://jacksondunstan.com/articles/983

  	const n = nBlocks * blockSize;
  	let r = arrayCacheF32[ n ];

  	if ( r === undefined ) {

  		r = new Float32Array( n );
  		arrayCacheF32[ n ] = r;

  	}

  	if ( nBlocks !== 0 ) {

  		firstElem.toArray( r, 0 );

  		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

  			offset += blockSize;
  			array[ i ].toArray( r, offset );

  		}

  	}

  	return r;

  }

  function arraysEqual$1( a, b ) {

  	if ( a.length !== b.length ) return false;

  	for ( let i = 0, l = a.length; i < l; i ++ ) {

  		if ( a[ i ] !== b[ i ] ) return false;

  	}

  	return true;

  }

  function copyArray( a, b ) {

  	for ( let i = 0, l = b.length; i < l; i ++ ) {

  		a[ i ] = b[ i ];

  	}

  }

  // Texture unit allocation

  function allocTexUnits( textures, n ) {

  	let r = arrayCacheI32[ n ];

  	if ( r === undefined ) {

  		r = new Int32Array( n );
  		arrayCacheI32[ n ] = r;

  	}

  	for ( let i = 0; i !== n; ++ i ) {

  		r[ i ] = textures.allocateTextureUnit();

  	}

  	return r;

  }

  // --- Setters ---

  // Note: Defining these methods externally, because they come in a bunch
  // and this way their names minify.

  // Single scalar

  function setValueV1f( gl, v ) {

  	const cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1f( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single float vector (from flat array or THREE.VectorN)

  function setValueV2f( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2f( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform2fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV3f( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3f( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else if ( v.r !== undefined ) {

  		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

  			gl.uniform3f( this.addr, v.r, v.g, v.b );

  			cache[ 0 ] = v.r;
  			cache[ 1 ] = v.g;
  			cache[ 2 ] = v.b;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform3fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV4f( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform4fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  // Single matrix (from flat array or THREE.MatrixN)

  function setValueM2( gl, v ) {

  	const cache = this.cache;
  	const elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix2fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat2array.set( elements );

  		gl.uniformMatrix2fv( this.addr, false, mat2array );

  		copyArray( cache, elements );

  	}

  }

  function setValueM3( gl, v ) {

  	const cache = this.cache;
  	const elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix3fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat3array.set( elements );

  		gl.uniformMatrix3fv( this.addr, false, mat3array );

  		copyArray( cache, elements );

  	}

  }

  function setValueM4( gl, v ) {

  	const cache = this.cache;
  	const elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix4fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat4array.set( elements );

  		gl.uniformMatrix4fv( this.addr, false, mat4array );

  		copyArray( cache, elements );

  	}

  }

  // Single integer / boolean

  function setValueV1i( gl, v ) {

  	const cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1i( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single integer / boolean vector (from flat array or THREE.VectorN)

  function setValueV2i( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2i( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform2iv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV3i( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3i( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform3iv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV4i( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4i( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform4iv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  // Single unsigned integer

  function setValueV1ui( gl, v ) {

  	const cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1ui( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single unsigned integer vector (from flat array or THREE.VectorN)

  function setValueV2ui( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2ui( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform2uiv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV3ui( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3ui( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform3uiv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV4ui( gl, v ) {

  	const cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform4uiv( this.addr, v );

  		copyArray( cache, v );

  	}

  }


  // Single texture (2D / Cube)

  function setValueT1( gl, v, textures ) {

  	const cache = this.cache;
  	const unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	let emptyTexture2D;

  	if ( this.type === gl.SAMPLER_2D_SHADOW ) {

  		emptyShadowTexture.compareFunction = LessEqualCompare$1; // #28670
  		emptyTexture2D = emptyShadowTexture;

  	} else {

  		emptyTexture2D = emptyTexture;

  	}

  	textures.setTexture2D( v || emptyTexture2D, unit );

  }

  function setValueT3D1( gl, v, textures ) {

  	const cache = this.cache;
  	const unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture3D( v || empty3dTexture, unit );

  }

  function setValueT6( gl, v, textures ) {

  	const cache = this.cache;
  	const unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTextureCube( v || emptyCubeTexture, unit );

  }

  function setValueT2DArray1( gl, v, textures ) {

  	const cache = this.cache;
  	const unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture2DArray( v || emptyArrayTexture, unit );

  }

  // Helper to pick the right setter for the singular case

  function getSingularSetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1f; // FLOAT
  		case 0x8b50: return setValueV2f; // _VEC2
  		case 0x8b51: return setValueV3f; // _VEC3
  		case 0x8b52: return setValueV4f; // _VEC4

  		case 0x8b5a: return setValueM2; // _MAT2
  		case 0x8b5b: return setValueM3; // _MAT3
  		case 0x8b5c: return setValueM4; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

  		case 0x1405: return setValueV1ui; // UINT
  		case 0x8dc6: return setValueV2ui; // _VEC2
  		case 0x8dc7: return setValueV3ui; // _VEC3
  		case 0x8dc8: return setValueV4ui; // _VEC4

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1;

  		case 0x8b5f: // SAMPLER_3D
  		case 0x8dcb: // INT_SAMPLER_3D
  		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
  			return setValueT3D1;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6;

  		case 0x8dc1: // SAMPLER_2D_ARRAY
  		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
  		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
  		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
  			return setValueT2DArray1;

  	}

  }


  // Array of scalars

  function setValueV1fArray( gl, v ) {

  	gl.uniform1fv( this.addr, v );

  }

  // Array of vectors (from flat array or array of THREE.VectorN)

  function setValueV2fArray( gl, v ) {

  	const data = flatten( v, this.size, 2 );

  	gl.uniform2fv( this.addr, data );

  }

  function setValueV3fArray( gl, v ) {

  	const data = flatten( v, this.size, 3 );

  	gl.uniform3fv( this.addr, data );

  }

  function setValueV4fArray( gl, v ) {

  	const data = flatten( v, this.size, 4 );

  	gl.uniform4fv( this.addr, data );

  }

  // Array of matrices (from flat array or array of THREE.MatrixN)

  function setValueM2Array( gl, v ) {

  	const data = flatten( v, this.size, 4 );

  	gl.uniformMatrix2fv( this.addr, false, data );

  }

  function setValueM3Array( gl, v ) {

  	const data = flatten( v, this.size, 9 );

  	gl.uniformMatrix3fv( this.addr, false, data );

  }

  function setValueM4Array( gl, v ) {

  	const data = flatten( v, this.size, 16 );

  	gl.uniformMatrix4fv( this.addr, false, data );

  }

  // Array of integer / boolean

  function setValueV1iArray( gl, v ) {

  	gl.uniform1iv( this.addr, v );

  }

  // Array of integer / boolean vectors (from flat array)

  function setValueV2iArray( gl, v ) {

  	gl.uniform2iv( this.addr, v );

  }

  function setValueV3iArray( gl, v ) {

  	gl.uniform3iv( this.addr, v );

  }

  function setValueV4iArray( gl, v ) {

  	gl.uniform4iv( this.addr, v );

  }

  // Array of unsigned integer

  function setValueV1uiArray( gl, v ) {

  	gl.uniform1uiv( this.addr, v );

  }

  // Array of unsigned integer vectors (from flat array)

  function setValueV2uiArray( gl, v ) {

  	gl.uniform2uiv( this.addr, v );

  }

  function setValueV3uiArray( gl, v ) {

  	gl.uniform3uiv( this.addr, v );

  }

  function setValueV4uiArray( gl, v ) {

  	gl.uniform4uiv( this.addr, v );

  }


  // Array of textures (2D / 3D / Cube / 2DArray)

  function setValueT1Array( gl, v, textures ) {

  	const cache = this.cache;

  	const n = v.length;

  	const units = allocTexUnits( textures, n );

  	if ( ! arraysEqual$1( cache, units ) ) {

  		gl.uniform1iv( this.addr, units );

  		copyArray( cache, units );

  	}

  	for ( let i = 0; i !== n; ++ i ) {

  		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

  	}

  }

  function setValueT3DArray( gl, v, textures ) {

  	const cache = this.cache;

  	const n = v.length;

  	const units = allocTexUnits( textures, n );

  	if ( ! arraysEqual$1( cache, units ) ) {

  		gl.uniform1iv( this.addr, units );

  		copyArray( cache, units );

  	}

  	for ( let i = 0; i !== n; ++ i ) {

  		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

  	}

  }

  function setValueT6Array( gl, v, textures ) {

  	const cache = this.cache;

  	const n = v.length;

  	const units = allocTexUnits( textures, n );

  	if ( ! arraysEqual$1( cache, units ) ) {

  		gl.uniform1iv( this.addr, units );

  		copyArray( cache, units );

  	}

  	for ( let i = 0; i !== n; ++ i ) {

  		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

  	}

  }

  function setValueT2DArrayArray( gl, v, textures ) {

  	const cache = this.cache;

  	const n = v.length;

  	const units = allocTexUnits( textures, n );

  	if ( ! arraysEqual$1( cache, units ) ) {

  		gl.uniform1iv( this.addr, units );

  		copyArray( cache, units );

  	}

  	for ( let i = 0; i !== n; ++ i ) {

  		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

  	}

  }


  // Helper to pick the right setter for a pure (bottom-level) array

  function getPureArraySetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1fArray; // FLOAT
  		case 0x8b50: return setValueV2fArray; // _VEC2
  		case 0x8b51: return setValueV3fArray; // _VEC3
  		case 0x8b52: return setValueV4fArray; // _VEC4

  		case 0x8b5a: return setValueM2Array; // _MAT2
  		case 0x8b5b: return setValueM3Array; // _MAT3
  		case 0x8b5c: return setValueM4Array; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

  		case 0x1405: return setValueV1uiArray; // UINT
  		case 0x8dc6: return setValueV2uiArray; // _VEC2
  		case 0x8dc7: return setValueV3uiArray; // _VEC3
  		case 0x8dc8: return setValueV4uiArray; // _VEC4

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1Array;

  		case 0x8b5f: // SAMPLER_3D
  		case 0x8dcb: // INT_SAMPLER_3D
  		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
  			return setValueT3DArray;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6Array;

  		case 0x8dc1: // SAMPLER_2D_ARRAY
  		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
  		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
  		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
  			return setValueT2DArrayArray;

  	}

  }

  // --- Uniform Classes ---

  class SingleUniform {

  	constructor( id, activeInfo, addr ) {

  		this.id = id;
  		this.addr = addr;
  		this.cache = [];
  		this.type = activeInfo.type;
  		this.setValue = getSingularSetter( activeInfo.type );

  		// this.path = activeInfo.name; // DEBUG

  	}

  }

  class PureArrayUniform {

  	constructor( id, activeInfo, addr ) {

  		this.id = id;
  		this.addr = addr;
  		this.cache = [];
  		this.type = activeInfo.type;
  		this.size = activeInfo.size;
  		this.setValue = getPureArraySetter( activeInfo.type );

  		// this.path = activeInfo.name; // DEBUG

  	}

  }

  class StructuredUniform {

  	constructor( id ) {

  		this.id = id;

  		this.seq = [];
  		this.map = {};

  	}

  	setValue( gl, value, textures ) {

  		const seq = this.seq;

  		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

  			const u = seq[ i ];
  			u.setValue( gl, value[ u.id ], textures );

  		}

  	}

  }

  // --- Top-level ---

  // Parser - builds up the property tree from the path strings

  const RePathPart = /(\w+)(\])?(\[|\.)?/g;

  // extracts
  // 	- the identifier (member name or array index)
  //  - followed by an optional right bracket (found when array index)
  //  - followed by an optional left bracket or dot (type of subscript)
  //
  // Note: These portions can be read in a non-overlapping fashion and
  // allow straightforward parsing of the hierarchy that WebGL encodes
  // in the uniform names.

  function addUniform( container, uniformObject ) {

  	container.seq.push( uniformObject );
  	container.map[ uniformObject.id ] = uniformObject;

  }

  function parseUniform( activeInfo, addr, container ) {

  	const path = activeInfo.name,
  		pathLength = path.length;

  	// reset RegExp object, because of the early exit of a previous run
  	RePathPart.lastIndex = 0;

  	while ( true ) {

  		const match = RePathPart.exec( path ),
  			matchEnd = RePathPart.lastIndex;

  		let id = match[ 1 ];
  		const idIsIndex = match[ 2 ] === ']',
  			subscript = match[ 3 ];

  		if ( idIsIndex ) id = id | 0; // convert to integer

  		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

  			// bare name or "pure" bottom-level array "[0]" suffix

  			addUniform( container, subscript === undefined ?
  				new SingleUniform( id, activeInfo, addr ) :
  				new PureArrayUniform( id, activeInfo, addr ) );

  			break;

  		} else {

  			// step into inner node / create it in case it doesn't exist

  			const map = container.map;
  			let next = map[ id ];

  			if ( next === undefined ) {

  				next = new StructuredUniform( id );
  				addUniform( container, next );

  			}

  			container = next;

  		}

  	}

  }

  // Root Container

  class WebGLUniforms {

  	constructor( gl, program ) {

  		this.seq = [];
  		this.map = {};

  		const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

  		for ( let i = 0; i < n; ++ i ) {

  			const info = gl.getActiveUniform( program, i ),
  				addr = gl.getUniformLocation( program, info.name );

  			parseUniform( info, addr, this );

  		}

  	}

  	setValue( gl, name, value, textures ) {

  		const u = this.map[ name ];

  		if ( u !== undefined ) u.setValue( gl, value, textures );

  	}

  	setOptional( gl, object, name ) {

  		const v = object[ name ];

  		if ( v !== undefined ) this.setValue( gl, name, v );

  	}

  	static upload( gl, seq, values, textures ) {

  		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

  			const u = seq[ i ],
  				v = values[ u.id ];

  			if ( v.needsUpdate !== false ) {

  				// note: always updating when .needsUpdate is undefined
  				u.setValue( gl, v.value, textures );

  			}

  		}

  	}

  	static seqWithValue( seq, values ) {

  		const r = [];

  		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

  			const u = seq[ i ];
  			if ( u.id in values ) r.push( u );

  		}

  		return r;

  	}

  }

  function WebGLShader( gl, type, string ) {

  	const shader = gl.createShader( type );

  	gl.shaderSource( shader, string );
  	gl.compileShader( shader );

  	return shader;

  }

  // From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/
  const COMPLETION_STATUS_KHR = 0x91B1;

  let programIdCount = 0;

  function handleSource( string, errorLine ) {

  	const lines = string.split( '\n' );
  	const lines2 = [];

  	const from = Math.max( errorLine - 6, 0 );
  	const to = Math.min( errorLine + 6, lines.length );

  	for ( let i = from; i < to; i ++ ) {

  		const line = i + 1;
  		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

  	}

  	return lines2.join( '\n' );

  }

  const _m0 = /*@__PURE__*/ new Matrix3$1();

  function getEncodingComponents( colorSpace ) {

  	ColorManagement$1._getMatrix( _m0, ColorManagement$1.workingColorSpace, colorSpace );

  	const encodingMatrix = `mat3( ${ _m0.elements.map( ( v ) => v.toFixed( 4 ) ) } )`;

  	switch ( ColorManagement$1.getTransfer( colorSpace ) ) {

  		case LinearTransfer$1:
  			return [ encodingMatrix, 'LinearTransferOETF' ];

  		case SRGBTransfer$1:
  			return [ encodingMatrix, 'sRGBTransferOETF' ];

  		default:
  			console.warn( 'THREE.WebGLProgram: Unsupported color space: ', colorSpace );
  			return [ encodingMatrix, 'LinearTransferOETF' ];

  	}

  }

  function getShaderErrors( gl, shader, type ) {

  	const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
  	const errors = gl.getShaderInfoLog( shader ).trim();

  	if ( status && errors === '' ) return '';

  	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
  	if ( errorMatches ) {

  		// --enable-privileged-webgl-extension
  		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

  		const errorLine = parseInt( errorMatches[ 1 ] );
  		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

  	} else {

  		return errors;

  	}

  }

  function getTexelEncodingFunction( functionName, colorSpace ) {

  	const components = getEncodingComponents( colorSpace );

  	return [

  		`vec4 ${functionName}( vec4 value ) {`,

  		`	return ${components[ 1 ]}( vec4( value.rgb * ${components[ 0 ]}, value.a ) );`,

  		'}',

  	].join( '\n' );

  }

  function getToneMappingFunction( functionName, toneMapping ) {

  	let toneMappingName;

  	switch ( toneMapping ) {

  		case LinearToneMapping$1:
  			toneMappingName = 'Linear';
  			break;

  		case ReinhardToneMapping$1:
  			toneMappingName = 'Reinhard';
  			break;

  		case CineonToneMapping$1:
  			toneMappingName = 'Cineon';
  			break;

  		case ACESFilmicToneMapping$1:
  			toneMappingName = 'ACESFilmic';
  			break;

  		case AgXToneMapping$1:
  			toneMappingName = 'AgX';
  			break;

  		case NeutralToneMapping$1:
  			toneMappingName = 'Neutral';
  			break;

  		case CustomToneMapping:
  			toneMappingName = 'Custom';
  			break;

  		default:
  			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
  			toneMappingName = 'Linear';

  	}

  	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

  }

  const _v0$1$1 = /*@__PURE__*/ new Vector3$1();

  function getLuminanceFunction() {

  	ColorManagement$1.getLuminanceCoefficients( _v0$1$1 );

  	const r = _v0$1$1.x.toFixed( 4 );
  	const g = _v0$1$1.y.toFixed( 4 );
  	const b = _v0$1$1.z.toFixed( 4 );

  	return [

  		'float luminance( const in vec3 rgb ) {',

  		`	const vec3 weights = vec3( ${ r }, ${ g }, ${ b } );`,

  		'	return dot( weights, rgb );',

  		'}'

  	].join( '\n' );

  }

  function generateVertexExtensions( parameters ) {

  	const chunks = [
  		parameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '',
  		parameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : '',
  	];

  	return chunks.filter( filterEmptyLine ).join( '\n' );

  }

  function generateDefines( defines ) {

  	const chunks = [];

  	for ( const name in defines ) {

  		const value = defines[ name ];

  		if ( value === false ) continue;

  		chunks.push( '#define ' + name + ' ' + value );

  	}

  	return chunks.join( '\n' );

  }

  function fetchAttributeLocations( gl, program ) {

  	const attributes = {};

  	const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

  	for ( let i = 0; i < n; i ++ ) {

  		const info = gl.getActiveAttrib( program, i );
  		const name = info.name;

  		let locationSize = 1;
  		if ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;
  		if ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;
  		if ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;

  		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

  		attributes[ name ] = {
  			type: info.type,
  			location: gl.getAttribLocation( program, name ),
  			locationSize: locationSize
  		};

  	}

  	return attributes;

  }

  function filterEmptyLine( string ) {

  	return string !== '';

  }

  function replaceLightNums( string, parameters ) {

  	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;

  	return string
  		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
  		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
  		.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
  		.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
  		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
  		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
  		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
  		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
  		.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
  		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
  		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

  }

  function replaceClippingPlaneNums( string, parameters ) {

  	return string
  		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
  		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

  }

  // Resolve Includes

  const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

  function resolveIncludes( string ) {

  	return string.replace( includePattern, includeReplacer );

  }

  const shaderChunkMap = new Map();

  function includeReplacer( match, include ) {

  	let string = ShaderChunk[ include ];

  	if ( string === undefined ) {

  		const newInclude = shaderChunkMap.get( include );

  		if ( newInclude !== undefined ) {

  			string = ShaderChunk[ newInclude ];
  			console.warn( 'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude );

  		} else {

  			throw new Error( 'Can not resolve #include <' + include + '>' );

  		}

  	}

  	return resolveIncludes( string );

  }

  // Unroll Loops

  const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

  function unrollLoops( string ) {

  	return string.replace( unrollLoopPattern, loopReplacer );

  }

  function loopReplacer( match, start, end, snippet ) {

  	let string = '';

  	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

  		string += snippet
  			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
  			.replace( /UNROLLED_LOOP_INDEX/g, i );

  	}

  	return string;

  }

  //

  function generatePrecision( parameters ) {

  	let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;

  	if ( parameters.precision === 'highp' ) {

  		precisionstring += '\n#define HIGH_PRECISION';

  	} else if ( parameters.precision === 'mediump' ) {

  		precisionstring += '\n#define MEDIUM_PRECISION';

  	} else if ( parameters.precision === 'lowp' ) {

  		precisionstring += '\n#define LOW_PRECISION';

  	}

  	return precisionstring;

  }

  function generateShadowMapTypeDefine( parameters ) {

  	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  	if ( parameters.shadowMapType === PCFShadowMap$2 ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

  	} else if ( parameters.shadowMapType === PCFSoftShadowMap$1 ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

  	} else if ( parameters.shadowMapType === VSMShadowMap$1 ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

  	}

  	return shadowMapTypeDefine;

  }

  function generateEnvMapTypeDefine( parameters ) {

  	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeReflectionMapping$1:
  			case CubeRefractionMapping$1:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  				break;

  			case CubeUVReflectionMapping$1:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
  				break;

  		}

  	}

  	return envMapTypeDefine;

  }

  function generateEnvMapModeDefine( parameters ) {

  	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeRefractionMapping$1:

  				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
  				break;

  		}

  	}

  	return envMapModeDefine;

  }

  function generateEnvMapBlendingDefine( parameters ) {

  	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

  	if ( parameters.envMap ) {

  		switch ( parameters.combine ) {

  			case MultiplyOperation$1:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
  				break;

  			case MixOperation$1:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
  				break;

  			case AddOperation$1:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
  				break;

  		}

  	}

  	return envMapBlendingDefine;

  }

  function generateCubeUVSize( parameters ) {

  	const imageHeight = parameters.envMapCubeUVHeight;

  	if ( imageHeight === null ) return null;

  	const maxMip = Math.log2( imageHeight ) - 2;

  	const texelHeight = 1.0 / imageHeight;

  	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

  	return { texelWidth, texelHeight, maxMip };

  }

  function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

  	// TODO Send this event to Three.js DevTools
  	// console.log( 'WebGLProgram', cacheKey );

  	const gl = renderer.getContext();

  	const defines = parameters.defines;

  	let vertexShader = parameters.vertexShader;
  	let fragmentShader = parameters.fragmentShader;

  	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
  	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
  	const envMapModeDefine = generateEnvMapModeDefine( parameters );
  	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
  	const envMapCubeUVSize = generateCubeUVSize( parameters );

  	const customVertexExtensions = generateVertexExtensions( parameters );

  	const customDefines = generateDefines( defines );

  	const program = gl.createProgram();

  	let prefixVertex, prefixFragment;
  	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

  	if ( parameters.isRawShaderMaterial ) {

  		prefixVertex = [

  			'#define SHADER_TYPE ' + parameters.shaderType,
  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixVertex.length > 0 ) {

  			prefixVertex += '\n';

  		}

  		prefixFragment = [

  			'#define SHADER_TYPE ' + parameters.shaderType,
  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixFragment.length > 0 ) {

  			prefixFragment += '\n';

  		}

  	} else {

  		prefixVertex = [

  			generatePrecision( parameters ),

  			'#define SHADER_TYPE ' + parameters.shaderType,
  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '',
  			parameters.batching ? '#define USE_BATCHING' : '',
  			parameters.batchingColor ? '#define USE_BATCHING_COLOR' : '',
  			parameters.instancing ? '#define USE_INSTANCING' : '',
  			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
  			parameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '',

  			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
  			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
  			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
  			parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

  			parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
  			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

  			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
  			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
  			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
  			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

  			parameters.transmission ? '#define USE_TRANSMISSION' : '',
  			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
  			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

  			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
  			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

  			//

  			parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',
  			parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',
  			parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',
  			parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',
  			parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',
  			parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',
  			parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',
  			parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',

  			parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',
  			parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',

  			parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',

  			parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',
  			parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',
  			parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',

  			parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',
  			parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',

  			parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',
  			parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',

  			parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',
  			parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',
  			parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',

  			parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',
  			parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',

  			//

  			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',
  			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
  			parameters.vertexUv1s ? '#define USE_UV1' : '',
  			parameters.vertexUv2s ? '#define USE_UV2' : '',
  			parameters.vertexUv3s ? '#define USE_UV3' : '',

  			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.skinning ? '#define USE_SKINNING' : '',

  			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
  			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
  			( parameters.morphColors ) ? '#define USE_MORPHCOLORS' : '',
  			( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
  			( parameters.morphTargetsCount > 0 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

  			parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',

  			'uniform mat4 modelMatrix;',
  			'uniform mat4 modelViewMatrix;',
  			'uniform mat4 projectionMatrix;',
  			'uniform mat4 viewMatrix;',
  			'uniform mat3 normalMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			'#ifdef USE_INSTANCING',

  			'	attribute mat4 instanceMatrix;',

  			'#endif',

  			'#ifdef USE_INSTANCING_COLOR',

  			'	attribute vec3 instanceColor;',

  			'#endif',

  			'#ifdef USE_INSTANCING_MORPH',

  			'	uniform sampler2D morphTexture;',

  			'#endif',

  			'attribute vec3 position;',
  			'attribute vec3 normal;',
  			'attribute vec2 uv;',

  			'#ifdef USE_UV1',

  			'	attribute vec2 uv1;',

  			'#endif',

  			'#ifdef USE_UV2',

  			'	attribute vec2 uv2;',

  			'#endif',

  			'#ifdef USE_UV3',

  			'	attribute vec2 uv3;',

  			'#endif',

  			'#ifdef USE_TANGENT',

  			'	attribute vec4 tangent;',

  			'#endif',

  			'#if defined( USE_COLOR_ALPHA )',

  			'	attribute vec4 color;',

  			'#elif defined( USE_COLOR )',

  			'	attribute vec3 color;',

  			'#endif',

  			'#ifdef USE_SKINNING',

  			'	attribute vec4 skinIndex;',
  			'	attribute vec4 skinWeight;',

  			'#endif',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  		prefixFragment = [

  			generatePrecision( parameters ),

  			'#define SHADER_TYPE ' + parameters.shaderType,
  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
  			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

  			parameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '',
  			parameters.map ? '#define USE_MAP' : '',
  			parameters.matcap ? '#define USE_MATCAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapTypeDefine : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
  			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
  			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
  			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
  			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

  			parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
  			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

  			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

  			parameters.dispersion ? '#define USE_DISPERSION' : '',

  			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
  			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
  			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
  			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
  			parameters.alphaTest ? '#define USE_ALPHATEST' : '',
  			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

  			parameters.sheen ? '#define USE_SHEEN' : '',
  			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
  			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

  			parameters.transmission ? '#define USE_TRANSMISSION' : '',
  			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
  			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

  			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
  			parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? '#define USE_COLOR' : '',
  			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
  			parameters.vertexUv1s ? '#define USE_UV1' : '',
  			parameters.vertexUv2s ? '#define USE_UV2' : '',
  			parameters.vertexUv3s ? '#define USE_UV3' : '',

  			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

  			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

  			parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

  			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
  			parameters.decodeVideoTextureEmissive ? '#define DECODE_VIDEO_TEXTURE_EMISSIVE' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '',

  			'uniform mat4 viewMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			( parameters.toneMapping !== NoToneMapping$1 ) ? '#define TONE_MAPPING' : '',
  			( parameters.toneMapping !== NoToneMapping$1 ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
  			( parameters.toneMapping !== NoToneMapping$1 ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

  			parameters.dithering ? '#define DITHERING' : '',
  			parameters.opaque ? '#define OPAQUE' : '',

  			ShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
  			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),
  			getLuminanceFunction(),

  			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  	}

  	vertexShader = resolveIncludes( vertexShader );
  	vertexShader = replaceLightNums( vertexShader, parameters );
  	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

  	fragmentShader = resolveIncludes( fragmentShader );
  	fragmentShader = replaceLightNums( fragmentShader, parameters );
  	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

  	vertexShader = unrollLoops( vertexShader );
  	fragmentShader = unrollLoops( fragmentShader );

  	if ( parameters.isRawShaderMaterial !== true ) {

  		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

  		versionString = '#version 300 es\n';

  		prefixVertex = [
  			customVertexExtensions,
  			'#define attribute in',
  			'#define varying out',
  			'#define texture2D texture'
  		].join( '\n' ) + '\n' + prefixVertex;

  		prefixFragment = [
  			'#define varying in',
  			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
  			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
  			'#define gl_FragDepthEXT gl_FragDepth',
  			'#define texture2D texture',
  			'#define textureCube texture',
  			'#define texture2DProj textureProj',
  			'#define texture2DLodEXT textureLod',
  			'#define texture2DProjLodEXT textureProjLod',
  			'#define textureCubeLodEXT textureLod',
  			'#define texture2DGradEXT textureGrad',
  			'#define texture2DProjGradEXT textureProjGrad',
  			'#define textureCubeGradEXT textureGrad'
  		].join( '\n' ) + '\n' + prefixFragment;

  	}

  	const vertexGlsl = versionString + prefixVertex + vertexShader;
  	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

  	// console.log( '*VERTEX*', vertexGlsl );
  	// console.log( '*FRAGMENT*', fragmentGlsl );

  	const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
  	const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

  	gl.attachShader( program, glVertexShader );
  	gl.attachShader( program, glFragmentShader );

  	// Force a particular attribute to index 0.

  	if ( parameters.index0AttributeName !== undefined ) {

  		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

  	} else if ( parameters.morphTargets === true ) {

  		// programs with morphTargets displace position out of attribute 0
  		gl.bindAttribLocation( program, 0, 'position' );

  	}

  	gl.linkProgram( program );

  	function onFirstUse( self ) {

  		// check for link errors
  		if ( renderer.debug.checkShaderErrors ) {

  			const programLog = gl.getProgramInfoLog( program ).trim();
  			const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
  			const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

  			let runnable = true;
  			let haveDiagnostics = true;

  			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

  				runnable = false;

  				if ( typeof renderer.debug.onShaderError === 'function' ) {

  					renderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );

  				} else {

  					// default error reporting

  					const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
  					const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

  					console.error(
  						'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
  						'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\n\n' +
  						'Material Name: ' + self.name + '\n' +
  						'Material Type: ' + self.type + '\n\n' +
  						'Program Info Log: ' + programLog + '\n' +
  						vertexErrors + '\n' +
  						fragmentErrors
  					);

  				}

  			} else if ( programLog !== '' ) {

  				console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

  			} else if ( vertexLog === '' || fragmentLog === '' ) {

  				haveDiagnostics = false;

  			}

  			if ( haveDiagnostics ) {

  				self.diagnostics = {

  					runnable: runnable,

  					programLog: programLog,

  					vertexShader: {

  						log: vertexLog,
  						prefix: prefixVertex

  					},

  					fragmentShader: {

  						log: fragmentLog,
  						prefix: prefixFragment

  					}

  				};

  			}

  		}

  		// Clean up

  		// Crashes in iOS9 and iOS10. #18402
  		// gl.detachShader( program, glVertexShader );
  		// gl.detachShader( program, glFragmentShader );

  		gl.deleteShader( glVertexShader );
  		gl.deleteShader( glFragmentShader );

  		cachedUniforms = new WebGLUniforms( gl, program );
  		cachedAttributes = fetchAttributeLocations( gl, program );

  	}

  	// set up caching for uniform locations

  	let cachedUniforms;

  	this.getUniforms = function () {

  		if ( cachedUniforms === undefined ) {

  			// Populates cachedUniforms and cachedAttributes
  			onFirstUse( this );

  		}

  		return cachedUniforms;

  	};

  	// set up caching for attribute locations

  	let cachedAttributes;

  	this.getAttributes = function () {

  		if ( cachedAttributes === undefined ) {

  			// Populates cachedAttributes and cachedUniforms
  			onFirstUse( this );

  		}

  		return cachedAttributes;

  	};

  	// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,
  	// flag the program as ready immediately. It may cause a stall when it's first used.

  	let programReady = ( parameters.rendererExtensionParallelShaderCompile === false );

  	this.isReady = function () {

  		if ( programReady === false ) {

  			programReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );

  		}

  		return programReady;

  	};

  	// free resource

  	this.destroy = function () {

  		bindingStates.releaseStatesOfProgram( this );

  		gl.deleteProgram( program );
  		this.program = undefined;

  	};

  	//

  	this.type = parameters.shaderType;
  	this.name = parameters.shaderName;
  	this.id = programIdCount ++;
  	this.cacheKey = cacheKey;
  	this.usedTimes = 1;
  	this.program = program;
  	this.vertexShader = glVertexShader;
  	this.fragmentShader = glFragmentShader;

  	return this;

  }

  let _id$1$1 = 0;

  class WebGLShaderCache {

  	constructor() {

  		this.shaderCache = new Map();
  		this.materialCache = new Map();

  	}

  	update( material ) {

  		const vertexShader = material.vertexShader;
  		const fragmentShader = material.fragmentShader;

  		const vertexShaderStage = this._getShaderStage( vertexShader );
  		const fragmentShaderStage = this._getShaderStage( fragmentShader );

  		const materialShaders = this._getShaderCacheForMaterial( material );

  		if ( materialShaders.has( vertexShaderStage ) === false ) {

  			materialShaders.add( vertexShaderStage );
  			vertexShaderStage.usedTimes ++;

  		}

  		if ( materialShaders.has( fragmentShaderStage ) === false ) {

  			materialShaders.add( fragmentShaderStage );
  			fragmentShaderStage.usedTimes ++;

  		}

  		return this;

  	}

  	remove( material ) {

  		const materialShaders = this.materialCache.get( material );

  		for ( const shaderStage of materialShaders ) {

  			shaderStage.usedTimes --;

  			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

  		}

  		this.materialCache.delete( material );

  		return this;

  	}

  	getVertexShaderID( material ) {

  		return this._getShaderStage( material.vertexShader ).id;

  	}

  	getFragmentShaderID( material ) {

  		return this._getShaderStage( material.fragmentShader ).id;

  	}

  	dispose() {

  		this.shaderCache.clear();
  		this.materialCache.clear();

  	}

  	_getShaderCacheForMaterial( material ) {

  		const cache = this.materialCache;
  		let set = cache.get( material );

  		if ( set === undefined ) {

  			set = new Set();
  			cache.set( material, set );

  		}

  		return set;

  	}

  	_getShaderStage( code ) {

  		const cache = this.shaderCache;
  		let stage = cache.get( code );

  		if ( stage === undefined ) {

  			stage = new WebGLShaderStage( code );
  			cache.set( code, stage );

  		}

  		return stage;

  	}

  }

  class WebGLShaderStage {

  	constructor( code ) {

  		this.id = _id$1$1 ++;

  		this.code = code;
  		this.usedTimes = 0;

  	}

  }

  function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

  	const _programLayers = new Layers$1();
  	const _customShaders = new WebGLShaderCache();
  	const _activeChannels = new Set();
  	const programs = [];

  	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  	const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;

  	let precision = capabilities.precision;

  	const shaderIDs = {
  		MeshDepthMaterial: 'depth',
  		MeshDistanceMaterial: 'distanceRGBA',
  		MeshNormalMaterial: 'normal',
  		MeshBasicMaterial: 'basic',
  		MeshLambertMaterial: 'lambert',
  		MeshPhongMaterial: 'phong',
  		MeshToonMaterial: 'toon',
  		MeshStandardMaterial: 'physical',
  		MeshPhysicalMaterial: 'physical',
  		MeshMatcapMaterial: 'matcap',
  		LineBasicMaterial: 'basic',
  		LineDashedMaterial: 'dashed',
  		PointsMaterial: 'points',
  		ShadowMaterial: 'shadow',
  		SpriteMaterial: 'sprite'
  	};

  	function getChannel( value ) {

  		_activeChannels.add( value );

  		if ( value === 0 ) return 'uv';

  		return `uv${ value }`;

  	}

  	function getParameters( material, lights, shadows, scene, object ) {

  		const fog = scene.fog;
  		const geometry = object.geometry;
  		const environment = material.isMeshStandardMaterial ? scene.environment : null;

  		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
  		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping$1 ) ? envMap.image.height : null;

  		const shaderID = shaderIDs[ material.type ];

  		// heuristics to create shader parameters according to lights in the scene
  		// (not to blow over maxLights budget)

  		if ( material.precision !== null ) {

  			precision = capabilities.getMaxPrecision( material.precision );

  			if ( precision !== material.precision ) {

  				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

  			}

  		}

  		//

  		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

  		let morphTextureStride = 0;

  		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
  		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
  		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

  		//

  		let vertexShader, fragmentShader;
  		let customVertexShaderID, customFragmentShaderID;

  		if ( shaderID ) {

  			const shader = ShaderLib[ shaderID ];

  			vertexShader = shader.vertexShader;
  			fragmentShader = shader.fragmentShader;

  		} else {

  			vertexShader = material.vertexShader;
  			fragmentShader = material.fragmentShader;

  			_customShaders.update( material );

  			customVertexShaderID = _customShaders.getVertexShaderID( material );
  			customFragmentShaderID = _customShaders.getFragmentShaderID( material );

  		}

  		const currentRenderTarget = renderer.getRenderTarget();
  		const reverseDepthBuffer = renderer.state.buffers.depth.getReversed();

  		const IS_INSTANCEDMESH = object.isInstancedMesh === true;
  		const IS_BATCHEDMESH = object.isBatchedMesh === true;

  		const HAS_MAP = !! material.map;
  		const HAS_MATCAP = !! material.matcap;
  		const HAS_ENVMAP = !! envMap;
  		const HAS_AOMAP = !! material.aoMap;
  		const HAS_LIGHTMAP = !! material.lightMap;
  		const HAS_BUMPMAP = !! material.bumpMap;
  		const HAS_NORMALMAP = !! material.normalMap;
  		const HAS_DISPLACEMENTMAP = !! material.displacementMap;
  		const HAS_EMISSIVEMAP = !! material.emissiveMap;

  		const HAS_METALNESSMAP = !! material.metalnessMap;
  		const HAS_ROUGHNESSMAP = !! material.roughnessMap;

  		const HAS_ANISOTROPY = material.anisotropy > 0;
  		const HAS_CLEARCOAT = material.clearcoat > 0;
  		const HAS_DISPERSION = material.dispersion > 0;
  		const HAS_IRIDESCENCE = material.iridescence > 0;
  		const HAS_SHEEN = material.sheen > 0;
  		const HAS_TRANSMISSION = material.transmission > 0;

  		const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;

  		const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;
  		const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;
  		const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;

  		const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;
  		const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;

  		const HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;
  		const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;

  		const HAS_SPECULARMAP = !! material.specularMap;
  		const HAS_SPECULAR_COLORMAP = !! material.specularColorMap;
  		const HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;

  		const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;
  		const HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;

  		const HAS_GRADIENTMAP = !! material.gradientMap;

  		const HAS_ALPHAMAP = !! material.alphaMap;

  		const HAS_ALPHATEST = material.alphaTest > 0;

  		const HAS_ALPHAHASH = !! material.alphaHash;

  		const HAS_EXTENSIONS = !! material.extensions;

  		let toneMapping = NoToneMapping$1;

  		if ( material.toneMapped ) {

  			if ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {

  				toneMapping = renderer.toneMapping;

  			}

  		}

  		const parameters = {

  			shaderID: shaderID,
  			shaderType: material.type,
  			shaderName: material.name,

  			vertexShader: vertexShader,
  			fragmentShader: fragmentShader,
  			defines: material.defines,

  			customVertexShaderID: customVertexShaderID,
  			customFragmentShaderID: customFragmentShaderID,

  			isRawShaderMaterial: material.isRawShaderMaterial === true,
  			glslVersion: material.glslVersion,

  			precision: precision,

  			batching: IS_BATCHEDMESH,
  			batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
  			instancing: IS_INSTANCEDMESH,
  			instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
  			instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,

  			supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
  			outputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace$1 ),
  			alphaToCoverage: !! material.alphaToCoverage,

  			map: HAS_MAP,
  			matcap: HAS_MATCAP,
  			envMap: HAS_ENVMAP,
  			envMapMode: HAS_ENVMAP && envMap.mapping,
  			envMapCubeUVHeight: envMapCubeUVHeight,
  			aoMap: HAS_AOMAP,
  			lightMap: HAS_LIGHTMAP,
  			bumpMap: HAS_BUMPMAP,
  			normalMap: HAS_NORMALMAP,
  			displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
  			emissiveMap: HAS_EMISSIVEMAP,

  			normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap$1,
  			normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap$1,

  			metalnessMap: HAS_METALNESSMAP,
  			roughnessMap: HAS_ROUGHNESSMAP,

  			anisotropy: HAS_ANISOTROPY,
  			anisotropyMap: HAS_ANISOTROPYMAP,

  			clearcoat: HAS_CLEARCOAT,
  			clearcoatMap: HAS_CLEARCOATMAP,
  			clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
  			clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,

  			dispersion: HAS_DISPERSION,

  			iridescence: HAS_IRIDESCENCE,
  			iridescenceMap: HAS_IRIDESCENCEMAP,
  			iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,

  			sheen: HAS_SHEEN,
  			sheenColorMap: HAS_SHEEN_COLORMAP,
  			sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,

  			specularMap: HAS_SPECULARMAP,
  			specularColorMap: HAS_SPECULAR_COLORMAP,
  			specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,

  			transmission: HAS_TRANSMISSION,
  			transmissionMap: HAS_TRANSMISSIONMAP,
  			thicknessMap: HAS_THICKNESSMAP,

  			gradientMap: HAS_GRADIENTMAP,

  			opaque: material.transparent === false && material.blending === NormalBlending$1 && material.alphaToCoverage === false,

  			alphaMap: HAS_ALPHAMAP,
  			alphaTest: HAS_ALPHATEST,
  			alphaHash: HAS_ALPHAHASH,

  			combine: material.combine,

  			//

  			mapUv: HAS_MAP && getChannel( material.map.channel ),
  			aoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),
  			lightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),
  			bumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),
  			normalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),
  			displacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),
  			emissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),

  			metalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),
  			roughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),

  			anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),

  			clearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),
  			clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),
  			clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),

  			iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),
  			iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),

  			sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),
  			sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),

  			specularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),
  			specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),
  			specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),

  			transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),
  			thicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),

  			alphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),

  			//

  			vertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),
  			vertexColors: material.vertexColors,
  			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,

  			pointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),

  			fog: !! fog,
  			useFog: material.fog === true,
  			fogExp2: ( !! fog && fog.isFogExp2 ),

  			flatShading: material.flatShading === true,

  			sizeAttenuation: material.sizeAttenuation === true,
  			logarithmicDepthBuffer: logarithmicDepthBuffer,
  			reverseDepthBuffer: reverseDepthBuffer,

  			skinning: object.isSkinnedMesh === true,

  			morphTargets: geometry.morphAttributes.position !== undefined,
  			morphNormals: geometry.morphAttributes.normal !== undefined,
  			morphColors: geometry.morphAttributes.color !== undefined,
  			morphTargetsCount: morphTargetsCount,
  			morphTextureStride: morphTextureStride,

  			numDirLights: lights.directional.length,
  			numPointLights: lights.point.length,
  			numSpotLights: lights.spot.length,
  			numSpotLightMaps: lights.spotLightMap.length,
  			numRectAreaLights: lights.rectArea.length,
  			numHemiLights: lights.hemi.length,

  			numDirLightShadows: lights.directionalShadowMap.length,
  			numPointLightShadows: lights.pointShadowMap.length,
  			numSpotLightShadows: lights.spotShadowMap.length,
  			numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,

  			numLightProbes: lights.numLightProbes,

  			numClippingPlanes: clipping.numPlanes,
  			numClipIntersection: clipping.numIntersection,

  			dithering: material.dithering,

  			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
  			shadowMapType: renderer.shadowMap.type,

  			toneMapping: toneMapping,

  			decodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement$1.getTransfer( material.map.colorSpace ) === SRGBTransfer$1 ),
  			decodeVideoTextureEmissive: HAS_EMISSIVEMAP && ( material.emissiveMap.isVideoTexture === true ) && ( ColorManagement$1.getTransfer( material.emissiveMap.colorSpace ) === SRGBTransfer$1 ),

  			premultipliedAlpha: material.premultipliedAlpha,

  			doubleSided: material.side === DoubleSide$1,
  			flipSided: material.side === BackSide$1,

  			useDepthPacking: material.depthPacking >= 0,
  			depthPacking: material.depthPacking || 0,

  			index0AttributeName: material.index0AttributeName,

  			extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has( 'WEBGL_clip_cull_distance' ),
  			extensionMultiDraw: ( HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH ) && extensions.has( 'WEBGL_multi_draw' ),

  			rendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),

  			customProgramCacheKey: material.customProgramCacheKey()

  		};

  		// the usage of getChannel() determines the active texture channels for this shader

  		parameters.vertexUv1s = _activeChannels.has( 1 );
  		parameters.vertexUv2s = _activeChannels.has( 2 );
  		parameters.vertexUv3s = _activeChannels.has( 3 );

  		_activeChannels.clear();

  		return parameters;

  	}

  	function getProgramCacheKey( parameters ) {

  		const array = [];

  		if ( parameters.shaderID ) {

  			array.push( parameters.shaderID );

  		} else {

  			array.push( parameters.customVertexShaderID );
  			array.push( parameters.customFragmentShaderID );

  		}

  		if ( parameters.defines !== undefined ) {

  			for ( const name in parameters.defines ) {

  				array.push( name );
  				array.push( parameters.defines[ name ] );

  			}

  		}

  		if ( parameters.isRawShaderMaterial === false ) {

  			getProgramCacheKeyParameters( array, parameters );
  			getProgramCacheKeyBooleans( array, parameters );
  			array.push( renderer.outputColorSpace );

  		}

  		array.push( parameters.customProgramCacheKey );

  		return array.join();

  	}

  	function getProgramCacheKeyParameters( array, parameters ) {

  		array.push( parameters.precision );
  		array.push( parameters.outputColorSpace );
  		array.push( parameters.envMapMode );
  		array.push( parameters.envMapCubeUVHeight );
  		array.push( parameters.mapUv );
  		array.push( parameters.alphaMapUv );
  		array.push( parameters.lightMapUv );
  		array.push( parameters.aoMapUv );
  		array.push( parameters.bumpMapUv );
  		array.push( parameters.normalMapUv );
  		array.push( parameters.displacementMapUv );
  		array.push( parameters.emissiveMapUv );
  		array.push( parameters.metalnessMapUv );
  		array.push( parameters.roughnessMapUv );
  		array.push( parameters.anisotropyMapUv );
  		array.push( parameters.clearcoatMapUv );
  		array.push( parameters.clearcoatNormalMapUv );
  		array.push( parameters.clearcoatRoughnessMapUv );
  		array.push( parameters.iridescenceMapUv );
  		array.push( parameters.iridescenceThicknessMapUv );
  		array.push( parameters.sheenColorMapUv );
  		array.push( parameters.sheenRoughnessMapUv );
  		array.push( parameters.specularMapUv );
  		array.push( parameters.specularColorMapUv );
  		array.push( parameters.specularIntensityMapUv );
  		array.push( parameters.transmissionMapUv );
  		array.push( parameters.thicknessMapUv );
  		array.push( parameters.combine );
  		array.push( parameters.fogExp2 );
  		array.push( parameters.sizeAttenuation );
  		array.push( parameters.morphTargetsCount );
  		array.push( parameters.morphAttributeCount );
  		array.push( parameters.numDirLights );
  		array.push( parameters.numPointLights );
  		array.push( parameters.numSpotLights );
  		array.push( parameters.numSpotLightMaps );
  		array.push( parameters.numHemiLights );
  		array.push( parameters.numRectAreaLights );
  		array.push( parameters.numDirLightShadows );
  		array.push( parameters.numPointLightShadows );
  		array.push( parameters.numSpotLightShadows );
  		array.push( parameters.numSpotLightShadowsWithMaps );
  		array.push( parameters.numLightProbes );
  		array.push( parameters.shadowMapType );
  		array.push( parameters.toneMapping );
  		array.push( parameters.numClippingPlanes );
  		array.push( parameters.numClipIntersection );
  		array.push( parameters.depthPacking );

  	}

  	function getProgramCacheKeyBooleans( array, parameters ) {

  		_programLayers.disableAll();

  		if ( parameters.supportsVertexTextures )
  			_programLayers.enable( 0 );
  		if ( parameters.instancing )
  			_programLayers.enable( 1 );
  		if ( parameters.instancingColor )
  			_programLayers.enable( 2 );
  		if ( parameters.instancingMorph )
  			_programLayers.enable( 3 );
  		if ( parameters.matcap )
  			_programLayers.enable( 4 );
  		if ( parameters.envMap )
  			_programLayers.enable( 5 );
  		if ( parameters.normalMapObjectSpace )
  			_programLayers.enable( 6 );
  		if ( parameters.normalMapTangentSpace )
  			_programLayers.enable( 7 );
  		if ( parameters.clearcoat )
  			_programLayers.enable( 8 );
  		if ( parameters.iridescence )
  			_programLayers.enable( 9 );
  		if ( parameters.alphaTest )
  			_programLayers.enable( 10 );
  		if ( parameters.vertexColors )
  			_programLayers.enable( 11 );
  		if ( parameters.vertexAlphas )
  			_programLayers.enable( 12 );
  		if ( parameters.vertexUv1s )
  			_programLayers.enable( 13 );
  		if ( parameters.vertexUv2s )
  			_programLayers.enable( 14 );
  		if ( parameters.vertexUv3s )
  			_programLayers.enable( 15 );
  		if ( parameters.vertexTangents )
  			_programLayers.enable( 16 );
  		if ( parameters.anisotropy )
  			_programLayers.enable( 17 );
  		if ( parameters.alphaHash )
  			_programLayers.enable( 18 );
  		if ( parameters.batching )
  			_programLayers.enable( 19 );
  		if ( parameters.dispersion )
  			_programLayers.enable( 20 );
  		if ( parameters.batchingColor )
  			_programLayers.enable( 21 );

  		array.push( _programLayers.mask );
  		_programLayers.disableAll();

  		if ( parameters.fog )
  			_programLayers.enable( 0 );
  		if ( parameters.useFog )
  			_programLayers.enable( 1 );
  		if ( parameters.flatShading )
  			_programLayers.enable( 2 );
  		if ( parameters.logarithmicDepthBuffer )
  			_programLayers.enable( 3 );
  		if ( parameters.reverseDepthBuffer )
  			_programLayers.enable( 4 );
  		if ( parameters.skinning )
  			_programLayers.enable( 5 );
  		if ( parameters.morphTargets )
  			_programLayers.enable( 6 );
  		if ( parameters.morphNormals )
  			_programLayers.enable( 7 );
  		if ( parameters.morphColors )
  			_programLayers.enable( 8 );
  		if ( parameters.premultipliedAlpha )
  			_programLayers.enable( 9 );
  		if ( parameters.shadowMapEnabled )
  			_programLayers.enable( 10 );
  		if ( parameters.doubleSided )
  			_programLayers.enable( 11 );
  		if ( parameters.flipSided )
  			_programLayers.enable( 12 );
  		if ( parameters.useDepthPacking )
  			_programLayers.enable( 13 );
  		if ( parameters.dithering )
  			_programLayers.enable( 14 );
  		if ( parameters.transmission )
  			_programLayers.enable( 15 );
  		if ( parameters.sheen )
  			_programLayers.enable( 16 );
  		if ( parameters.opaque )
  			_programLayers.enable( 17 );
  		if ( parameters.pointsUvs )
  			_programLayers.enable( 18 );
  		if ( parameters.decodeVideoTexture )
  			_programLayers.enable( 19 );
  		if ( parameters.decodeVideoTextureEmissive )
  			_programLayers.enable( 20 );
  		if ( parameters.alphaToCoverage )
  			_programLayers.enable( 21 );

  		array.push( _programLayers.mask );

  	}

  	function getUniforms( material ) {

  		const shaderID = shaderIDs[ material.type ];
  		let uniforms;

  		if ( shaderID ) {

  			const shader = ShaderLib[ shaderID ];
  			uniforms = UniformsUtils.clone( shader.uniforms );

  		} else {

  			uniforms = material.uniforms;

  		}

  		return uniforms;

  	}

  	function acquireProgram( parameters, cacheKey ) {

  		let program;

  		// Check if code has been already compiled
  		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

  			const preexistingProgram = programs[ p ];

  			if ( preexistingProgram.cacheKey === cacheKey ) {

  				program = preexistingProgram;
  				++ program.usedTimes;

  				break;

  			}

  		}

  		if ( program === undefined ) {

  			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
  			programs.push( program );

  		}

  		return program;

  	}

  	function releaseProgram( program ) {

  		if ( -- program.usedTimes === 0 ) {

  			// Remove from unordered set
  			const i = programs.indexOf( program );
  			programs[ i ] = programs[ programs.length - 1 ];
  			programs.pop();

  			// Free WebGL resources
  			program.destroy();

  		}

  	}

  	function releaseShaderCache( material ) {

  		_customShaders.remove( material );

  	}

  	function dispose() {

  		_customShaders.dispose();

  	}

  	return {
  		getParameters: getParameters,
  		getProgramCacheKey: getProgramCacheKey,
  		getUniforms: getUniforms,
  		acquireProgram: acquireProgram,
  		releaseProgram: releaseProgram,
  		releaseShaderCache: releaseShaderCache,
  		// Exposed for resource monitoring & error feedback via renderer.info:
  		programs: programs,
  		dispose: dispose
  	};

  }

  function WebGLProperties() {

  	let properties = new WeakMap();

  	function has( object ) {

  		return properties.has( object );

  	}

  	function get( object ) {

  		let map = properties.get( object );

  		if ( map === undefined ) {

  			map = {};
  			properties.set( object, map );

  		}

  		return map;

  	}

  	function remove( object ) {

  		properties.delete( object );

  	}

  	function update( object, key, value ) {

  		properties.get( object )[ key ] = value;

  	}

  	function dispose() {

  		properties = new WeakMap();

  	}

  	return {
  		has: has,
  		get: get,
  		remove: remove,
  		update: update,
  		dispose: dispose
  	};

  }

  function painterSortStable$1( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.material.id !== b.material.id ) {

  		return a.material.id - b.material.id;

  	} else if ( a.z !== b.z ) {

  		return a.z - b.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function reversePainterSortStable$1( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.z !== b.z ) {

  		return b.z - a.z;

  	} else {

  		return a.id - b.id;

  	}

  }


  function WebGLRenderList() {

  	const renderItems = [];
  	let renderItemsIndex = 0;

  	const opaque = [];
  	const transmissive = [];
  	const transparent = [];

  	function init() {

  		renderItemsIndex = 0;

  		opaque.length = 0;
  		transmissive.length = 0;
  		transparent.length = 0;

  	}

  	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

  		let renderItem = renderItems[ renderItemsIndex ];

  		if ( renderItem === undefined ) {

  			renderItem = {
  				id: object.id,
  				object: object,
  				geometry: geometry,
  				material: material,
  				groupOrder: groupOrder,
  				renderOrder: object.renderOrder,
  				z: z,
  				group: group
  			};

  			renderItems[ renderItemsIndex ] = renderItem;

  		} else {

  			renderItem.id = object.id;
  			renderItem.object = object;
  			renderItem.geometry = geometry;
  			renderItem.material = material;
  			renderItem.groupOrder = groupOrder;
  			renderItem.renderOrder = object.renderOrder;
  			renderItem.z = z;
  			renderItem.group = group;

  		}

  		renderItemsIndex ++;

  		return renderItem;

  	}

  	function push( object, geometry, material, groupOrder, z, group ) {

  		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		if ( material.transmission > 0.0 ) {

  			transmissive.push( renderItem );

  		} else if ( material.transparent === true ) {

  			transparent.push( renderItem );

  		} else {

  			opaque.push( renderItem );

  		}

  	}

  	function unshift( object, geometry, material, groupOrder, z, group ) {

  		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		if ( material.transmission > 0.0 ) {

  			transmissive.unshift( renderItem );

  		} else if ( material.transparent === true ) {

  			transparent.unshift( renderItem );

  		} else {

  			opaque.unshift( renderItem );

  		}

  	}

  	function sort( customOpaqueSort, customTransparentSort ) {

  		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable$1 );
  		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable$1 );
  		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable$1 );

  	}

  	function finish() {

  		// Clear references from inactive renderItems in the list

  		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

  			const renderItem = renderItems[ i ];

  			if ( renderItem.id === null ) break;

  			renderItem.id = null;
  			renderItem.object = null;
  			renderItem.geometry = null;
  			renderItem.material = null;
  			renderItem.group = null;

  		}

  	}

  	return {

  		opaque: opaque,
  		transmissive: transmissive,
  		transparent: transparent,

  		init: init,
  		push: push,
  		unshift: unshift,
  		finish: finish,

  		sort: sort
  	};

  }

  function WebGLRenderLists() {

  	let lists = new WeakMap();

  	function get( scene, renderCallDepth ) {

  		const listArray = lists.get( scene );
  		let list;

  		if ( listArray === undefined ) {

  			list = new WebGLRenderList();
  			lists.set( scene, [ list ] );

  		} else {

  			if ( renderCallDepth >= listArray.length ) {

  				list = new WebGLRenderList();
  				listArray.push( list );

  			} else {

  				list = listArray[ renderCallDepth ];

  			}

  		}

  		return list;

  	}

  	function dispose() {

  		lists = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  function UniformsCache() {

  	const lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			let uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						direction: new Vector3$1(),
  						color: new Color$1()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						position: new Vector3$1(),
  						direction: new Vector3$1(),
  						color: new Color$1(),
  						distance: 0,
  						coneCos: 0,
  						penumbraCos: 0,
  						decay: 0
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						position: new Vector3$1(),
  						color: new Color$1(),
  						distance: 0,
  						decay: 0
  					};
  					break;

  				case 'HemisphereLight':
  					uniforms = {
  						direction: new Vector3$1(),
  						skyColor: new Color$1(),
  						groundColor: new Color$1()
  					};
  					break;

  				case 'RectAreaLight':
  					uniforms = {
  						color: new Color$1(),
  						position: new Vector3$1(),
  						halfWidth: new Vector3$1(),
  						halfHeight: new Vector3$1()
  					};
  					break;

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }

  function ShadowUniformsCache() {

  	const lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			let uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						shadowIntensity: 1,
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2$1()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						shadowIntensity: 1,
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2$1()
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						shadowIntensity: 1,
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2$1(),
  						shadowCameraNear: 1,
  						shadowCameraFar: 1000
  					};
  					break;

  				// TODO (abelnation): set RectAreaLight shadow uniforms

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }



  let nextVersion = 0;

  function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {

  	return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );

  }

  function WebGLLights( extensions ) {

  	const cache = new UniformsCache();

  	const shadowCache = ShadowUniformsCache();

  	const state = {

  		version: 0,

  		hash: {
  			directionalLength: - 1,
  			pointLength: - 1,
  			spotLength: - 1,
  			rectAreaLength: - 1,
  			hemiLength: - 1,

  			numDirectionalShadows: - 1,
  			numPointShadows: - 1,
  			numSpotShadows: - 1,
  			numSpotMaps: - 1,

  			numLightProbes: - 1
  		},

  		ambient: [ 0, 0, 0 ],
  		probe: [],
  		directional: [],
  		directionalShadow: [],
  		directionalShadowMap: [],
  		directionalShadowMatrix: [],
  		spot: [],
  		spotLightMap: [],
  		spotShadow: [],
  		spotShadowMap: [],
  		spotLightMatrix: [],
  		rectArea: [],
  		rectAreaLTC1: null,
  		rectAreaLTC2: null,
  		point: [],
  		pointShadow: [],
  		pointShadowMap: [],
  		pointShadowMatrix: [],
  		hemi: [],
  		numSpotLightShadowsWithMaps: 0,
  		numLightProbes: 0

  	};

  	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3$1() );

  	const vector3 = new Vector3$1();
  	const matrix4 = new Matrix4$1();
  	const matrix42 = new Matrix4$1();

  	function setup( lights ) {

  		let r = 0, g = 0, b = 0;

  		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

  		let directionalLength = 0;
  		let pointLength = 0;
  		let spotLength = 0;
  		let rectAreaLength = 0;
  		let hemiLength = 0;

  		let numDirectionalShadows = 0;
  		let numPointShadows = 0;
  		let numSpotShadows = 0;
  		let numSpotMaps = 0;
  		let numSpotShadowsWithMaps = 0;

  		let numLightProbes = 0;

  		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
  		lights.sort( shadowCastingAndTexturingLightsFirst );

  		for ( let i = 0, l = lights.length; i < l; i ++ ) {

  			const light = lights[ i ];

  			const color = light.color;
  			const intensity = light.intensity;
  			const distance = light.distance;

  			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

  			if ( light.isAmbientLight ) {

  				r += color.r * intensity;
  				g += color.g * intensity;
  				b += color.b * intensity;

  			} else if ( light.isLightProbe ) {

  				for ( let j = 0; j < 9; j ++ ) {

  					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

  				}

  				numLightProbes ++;

  			} else if ( light.isDirectionalLight ) {

  				const uniforms = cache.get( light );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );

  				if ( light.castShadow ) {

  					const shadow = light.shadow;

  					const shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowIntensity = shadow.intensity;
  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowNormalBias = shadow.normalBias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;

  					state.directionalShadow[ directionalLength ] = shadowUniforms;
  					state.directionalShadowMap[ directionalLength ] = shadowMap;
  					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

  					numDirectionalShadows ++;

  				}

  				state.directional[ directionalLength ] = uniforms;

  				directionalLength ++;

  			} else if ( light.isSpotLight ) {

  				const uniforms = cache.get( light );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );

  				uniforms.color.copy( color ).multiplyScalar( intensity );
  				uniforms.distance = distance;

  				uniforms.coneCos = Math.cos( light.angle );
  				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
  				uniforms.decay = light.decay;

  				state.spot[ spotLength ] = uniforms;

  				const shadow = light.shadow;

  				if ( light.map ) {

  					state.spotLightMap[ numSpotMaps ] = light.map;
  					numSpotMaps ++;

  					// make sure the lightMatrix is up to date
  					// TODO : do it if required only
  					shadow.updateMatrices( light );

  					if ( light.castShadow ) numSpotShadowsWithMaps ++;

  				}

  				state.spotLightMatrix[ spotLength ] = shadow.matrix;

  				if ( light.castShadow ) {

  					const shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowIntensity = shadow.intensity;
  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowNormalBias = shadow.normalBias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;

  					state.spotShadow[ spotLength ] = shadowUniforms;
  					state.spotShadowMap[ spotLength ] = shadowMap;

  					numSpotShadows ++;

  				}

  				spotLength ++;

  			} else if ( light.isRectAreaLight ) {

  				const uniforms = cache.get( light );

  				uniforms.color.copy( color ).multiplyScalar( intensity );

  				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
  				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

  				state.rectArea[ rectAreaLength ] = uniforms;

  				rectAreaLength ++;

  			} else if ( light.isPointLight ) {

  				const uniforms = cache.get( light );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.distance = light.distance;
  				uniforms.decay = light.decay;

  				if ( light.castShadow ) {

  					const shadow = light.shadow;

  					const shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowIntensity = shadow.intensity;
  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowNormalBias = shadow.normalBias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;
  					shadowUniforms.shadowCameraNear = shadow.camera.near;
  					shadowUniforms.shadowCameraFar = shadow.camera.far;

  					state.pointShadow[ pointLength ] = shadowUniforms;
  					state.pointShadowMap[ pointLength ] = shadowMap;
  					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

  					numPointShadows ++;

  				}

  				state.point[ pointLength ] = uniforms;

  				pointLength ++;

  			} else if ( light.isHemisphereLight ) {

  				const uniforms = cache.get( light );

  				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
  				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

  				state.hemi[ hemiLength ] = uniforms;

  				hemiLength ++;

  			}

  		}

  		if ( rectAreaLength > 0 ) {

  			if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

  				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
  				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

  			} else {

  				state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
  				state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

  			}

  		}

  		state.ambient[ 0 ] = r;
  		state.ambient[ 1 ] = g;
  		state.ambient[ 2 ] = b;

  		const hash = state.hash;

  		if ( hash.directionalLength !== directionalLength ||
  			hash.pointLength !== pointLength ||
  			hash.spotLength !== spotLength ||
  			hash.rectAreaLength !== rectAreaLength ||
  			hash.hemiLength !== hemiLength ||
  			hash.numDirectionalShadows !== numDirectionalShadows ||
  			hash.numPointShadows !== numPointShadows ||
  			hash.numSpotShadows !== numSpotShadows ||
  			hash.numSpotMaps !== numSpotMaps ||
  			hash.numLightProbes !== numLightProbes ) {

  			state.directional.length = directionalLength;
  			state.spot.length = spotLength;
  			state.rectArea.length = rectAreaLength;
  			state.point.length = pointLength;
  			state.hemi.length = hemiLength;

  			state.directionalShadow.length = numDirectionalShadows;
  			state.directionalShadowMap.length = numDirectionalShadows;
  			state.pointShadow.length = numPointShadows;
  			state.pointShadowMap.length = numPointShadows;
  			state.spotShadow.length = numSpotShadows;
  			state.spotShadowMap.length = numSpotShadows;
  			state.directionalShadowMatrix.length = numDirectionalShadows;
  			state.pointShadowMatrix.length = numPointShadows;
  			state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
  			state.spotLightMap.length = numSpotMaps;
  			state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
  			state.numLightProbes = numLightProbes;

  			hash.directionalLength = directionalLength;
  			hash.pointLength = pointLength;
  			hash.spotLength = spotLength;
  			hash.rectAreaLength = rectAreaLength;
  			hash.hemiLength = hemiLength;

  			hash.numDirectionalShadows = numDirectionalShadows;
  			hash.numPointShadows = numPointShadows;
  			hash.numSpotShadows = numSpotShadows;
  			hash.numSpotMaps = numSpotMaps;

  			hash.numLightProbes = numLightProbes;

  			state.version = nextVersion ++;

  		}

  	}

  	function setupView( lights, camera ) {

  		let directionalLength = 0;
  		let pointLength = 0;
  		let spotLength = 0;
  		let rectAreaLength = 0;
  		let hemiLength = 0;

  		const viewMatrix = camera.matrixWorldInverse;

  		for ( let i = 0, l = lights.length; i < l; i ++ ) {

  			const light = lights[ i ];

  			if ( light.isDirectionalLight ) {

  				const uniforms = state.directional[ directionalLength ];

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				directionalLength ++;

  			} else if ( light.isSpotLight ) {

  				const uniforms = state.spot[ spotLength ];

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				spotLength ++;

  			} else if ( light.isRectAreaLight ) {

  				const uniforms = state.rectArea[ rectAreaLength ];

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				// extract local rotation of light to derive width/height half vectors
  				matrix42.identity();
  				matrix4.copy( light.matrixWorld );
  				matrix4.premultiply( viewMatrix );
  				matrix42.extractRotation( matrix4 );

  				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
  				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

  				uniforms.halfWidth.applyMatrix4( matrix42 );
  				uniforms.halfHeight.applyMatrix4( matrix42 );

  				rectAreaLength ++;

  			} else if ( light.isPointLight ) {

  				const uniforms = state.point[ pointLength ];

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				pointLength ++;

  			} else if ( light.isHemisphereLight ) {

  				const uniforms = state.hemi[ hemiLength ];

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				uniforms.direction.transformDirection( viewMatrix );

  				hemiLength ++;

  			}

  		}

  	}

  	return {
  		setup: setup,
  		setupView: setupView,
  		state: state
  	};

  }

  function WebGLRenderState( extensions ) {

  	const lights = new WebGLLights( extensions );

  	const lightsArray = [];
  	const shadowsArray = [];

  	function init( camera ) {

  		state.camera = camera;

  		lightsArray.length = 0;
  		shadowsArray.length = 0;

  	}

  	function pushLight( light ) {

  		lightsArray.push( light );

  	}

  	function pushShadow( shadowLight ) {

  		shadowsArray.push( shadowLight );

  	}

  	function setupLights() {

  		lights.setup( lightsArray );

  	}

  	function setupLightsView( camera ) {

  		lights.setupView( lightsArray, camera );

  	}

  	const state = {
  		lightsArray: lightsArray,
  		shadowsArray: shadowsArray,

  		camera: null,

  		lights: lights,

  		transmissionRenderTarget: {}
  	};

  	return {
  		init: init,
  		state: state,
  		setupLights: setupLights,
  		setupLightsView: setupLightsView,

  		pushLight: pushLight,
  		pushShadow: pushShadow
  	};

  }

  function WebGLRenderStates( extensions ) {

  	let renderStates = new WeakMap();

  	function get( scene, renderCallDepth = 0 ) {

  		const renderStateArray = renderStates.get( scene );
  		let renderState;

  		if ( renderStateArray === undefined ) {

  			renderState = new WebGLRenderState( extensions );
  			renderStates.set( scene, [ renderState ] );

  		} else {

  			if ( renderCallDepth >= renderStateArray.length ) {

  				renderState = new WebGLRenderState( extensions );
  				renderStateArray.push( renderState );

  			} else {

  				renderState = renderStateArray[ renderCallDepth ];

  			}

  		}

  		return renderState;

  	}

  	function dispose() {

  		renderStates = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  class MeshDepthMaterial extends Material$1 {

  	static get type() {

  		return 'MeshDepthMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshDepthMaterial = true;

  		this.depthPacking = BasicDepthPacking;

  		this.map = null;

  		this.alphaMap = null;

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.depthPacking = source.depthPacking;

  		this.map = source.map;

  		this.alphaMap = source.alphaMap;

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;

  		return this;

  	}

  }

  class MeshDistanceMaterial extends Material$1 {

  	static get type() {

  		return 'MeshDistanceMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshDistanceMaterial = true;

  		this.map = null;

  		this.alphaMap = null;

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.map = source.map;

  		this.alphaMap = source.alphaMap;

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		return this;

  	}

  }

  const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

  const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

  function WebGLShadowMap( renderer, objects, capabilities ) {

  	let _frustum = new Frustum$1();

  	const _shadowMapSize = new Vector2$1(),
  		_viewportSize = new Vector2$1(),

  		_viewport = new Vector4$1(),

  		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
  		_distanceMaterial = new MeshDistanceMaterial(),

  		_materialCache = {},

  		_maxTextureSize = capabilities.maxTextureSize;

  	const shadowSide = { [ FrontSide$1 ]: BackSide$1, [ BackSide$1 ]: FrontSide$1, [ DoubleSide$1 ]: DoubleSide$1 };

  	const shadowMaterialVertical = new ShaderMaterial$1( {
  		defines: {
  			VSM_SAMPLES: 8
  		},
  		uniforms: {
  			shadow_pass: { value: null },
  			resolution: { value: new Vector2$1() },
  			radius: { value: 4.0 }
  		},

  		vertexShader: vertex,
  		fragmentShader: fragment

  	} );

  	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
  	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

  	const fullScreenTri = new BufferGeometry$1();
  	fullScreenTri.setAttribute(
  		'position',
  		new BufferAttribute$1(
  			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
  			3
  		)
  	);

  	const fullScreenMesh = new Mesh$1( fullScreenTri, shadowMaterialVertical );

  	const scope = this;

  	this.enabled = false;

  	this.autoUpdate = true;
  	this.needsUpdate = false;

  	this.type = PCFShadowMap$2;
  	let _previousType = this.type;

  	this.render = function ( lights, scene, camera ) {

  		if ( scope.enabled === false ) return;
  		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

  		if ( lights.length === 0 ) return;

  		const currentRenderTarget = renderer.getRenderTarget();
  		const activeCubeFace = renderer.getActiveCubeFace();
  		const activeMipmapLevel = renderer.getActiveMipmapLevel();

  		const _state = renderer.state;

  		// Set GL state for depth map.
  		_state.setBlending( NoBlending$1 );
  		_state.buffers.color.setClear( 1, 1, 1, 1 );
  		_state.buffers.depth.setTest( true );
  		_state.setScissorTest( false );

  		// check for shadow map type changes

  		const toVSM = ( _previousType !== VSMShadowMap$1 && this.type === VSMShadowMap$1 );
  		const fromVSM = ( _previousType === VSMShadowMap$1 && this.type !== VSMShadowMap$1 );

  		// render depth map

  		for ( let i = 0, il = lights.length; i < il; i ++ ) {

  			const light = lights[ i ];
  			const shadow = light.shadow;

  			if ( shadow === undefined ) {

  				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
  				continue;

  			}

  			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

  			_shadowMapSize.copy( shadow.mapSize );

  			const shadowFrameExtents = shadow.getFrameExtents();

  			_shadowMapSize.multiply( shadowFrameExtents );

  			_viewportSize.copy( shadow.mapSize );

  			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

  				if ( _shadowMapSize.x > _maxTextureSize ) {

  					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
  					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
  					shadow.mapSize.x = _viewportSize.x;

  				}

  				if ( _shadowMapSize.y > _maxTextureSize ) {

  					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
  					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
  					shadow.mapSize.y = _viewportSize.y;

  				}

  			}

  			if ( shadow.map === null || toVSM === true || fromVSM === true ) {

  				const pars = ( this.type !== VSMShadowMap$1 ) ? { minFilter: NearestFilter$1, magFilter: NearestFilter$1 } : {};

  				if ( shadow.map !== null ) {

  					shadow.map.dispose();

  				}

  				shadow.map = new WebGLRenderTarget$1( _shadowMapSize.x, _shadowMapSize.y, pars );
  				shadow.map.texture.name = light.name + '.shadowMap';

  				shadow.camera.updateProjectionMatrix();

  			}

  			renderer.setRenderTarget( shadow.map );
  			renderer.clear();

  			const viewportCount = shadow.getViewportCount();

  			for ( let vp = 0; vp < viewportCount; vp ++ ) {

  				const viewport = shadow.getViewport( vp );

  				_viewport.set(
  					_viewportSize.x * viewport.x,
  					_viewportSize.y * viewport.y,
  					_viewportSize.x * viewport.z,
  					_viewportSize.y * viewport.w
  				);

  				_state.viewport( _viewport );

  				shadow.updateMatrices( light, vp );

  				_frustum = shadow.getFrustum();

  				renderObject( scene, camera, shadow.camera, light, this.type );

  			}

  			// do blur pass for VSM

  			if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap$1 ) {

  				VSMPass( shadow, camera );

  			}

  			shadow.needsUpdate = false;

  		}

  		_previousType = this.type;

  		scope.needsUpdate = false;

  		renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

  	};

  	function VSMPass( shadow, camera ) {

  		const geometry = objects.update( fullScreenMesh );

  		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

  			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
  			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

  			shadowMaterialVertical.needsUpdate = true;
  			shadowMaterialHorizontal.needsUpdate = true;

  		}

  		if ( shadow.mapPass === null ) {

  			shadow.mapPass = new WebGLRenderTarget$1( _shadowMapSize.x, _shadowMapSize.y );

  		}

  		// vertical pass

  		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
  		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
  		renderer.setRenderTarget( shadow.mapPass );
  		renderer.clear();
  		renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

  		// horizontal pass

  		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
  		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
  		renderer.setRenderTarget( shadow.map );
  		renderer.clear();
  		renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

  	}

  	function getDepthMaterial( object, material, light, type ) {

  		let result = null;

  		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

  		if ( customMaterial !== undefined ) {

  			result = customMaterial;

  		} else {

  			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

  			if ( ( renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
  				( material.displacementMap && material.displacementScale !== 0 ) ||
  				( material.alphaMap && material.alphaTest > 0 ) ||
  				( material.map && material.alphaTest > 0 ) ) {

  				// in this case we need a unique material instance reflecting the
  				// appropriate state

  				const keyA = result.uuid, keyB = material.uuid;

  				let materialsForVariant = _materialCache[ keyA ];

  				if ( materialsForVariant === undefined ) {

  					materialsForVariant = {};
  					_materialCache[ keyA ] = materialsForVariant;

  				}

  				let cachedMaterial = materialsForVariant[ keyB ];

  				if ( cachedMaterial === undefined ) {

  					cachedMaterial = result.clone();
  					materialsForVariant[ keyB ] = cachedMaterial;
  					material.addEventListener( 'dispose', onMaterialDispose );

  				}

  				result = cachedMaterial;

  			}

  		}

  		result.visible = material.visible;
  		result.wireframe = material.wireframe;

  		if ( type === VSMShadowMap$1 ) {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

  		} else {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

  		}

  		result.alphaMap = material.alphaMap;
  		result.alphaTest = material.alphaTest;
  		result.map = material.map;

  		result.clipShadows = material.clipShadows;
  		result.clippingPlanes = material.clippingPlanes;
  		result.clipIntersection = material.clipIntersection;

  		result.displacementMap = material.displacementMap;
  		result.displacementScale = material.displacementScale;
  		result.displacementBias = material.displacementBias;

  		result.wireframeLinewidth = material.wireframeLinewidth;
  		result.linewidth = material.linewidth;

  		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

  			const materialProperties = renderer.properties.get( result );
  			materialProperties.light = light;

  		}

  		return result;

  	}

  	function renderObject( object, camera, shadowCamera, light, type ) {

  		if ( object.visible === false ) return;

  		const visible = object.layers.test( camera.layers );

  		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

  			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap$1 ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

  				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

  				const geometry = objects.update( object );
  				const material = object.material;

  				if ( Array.isArray( material ) ) {

  					const groups = geometry.groups;

  					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

  						const group = groups[ k ];
  						const groupMaterial = material[ group.materialIndex ];

  						if ( groupMaterial && groupMaterial.visible ) {

  							const depthMaterial = getDepthMaterial( object, groupMaterial, light, type );

  							object.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

  							renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

  							object.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

  						}

  					}

  				} else if ( material.visible ) {

  					const depthMaterial = getDepthMaterial( object, material, light, type );

  					object.onBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

  					renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

  					object.onAfterShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

  				}

  			}

  		}

  		const children = object.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			renderObject( children[ i ], camera, shadowCamera, light, type );

  		}

  	}

  	function onMaterialDispose( event ) {

  		const material = event.target;

  		material.removeEventListener( 'dispose', onMaterialDispose );

  		// make sure to remove the unique distance/depth materials used for shadow map rendering

  		for ( const id in _materialCache ) {

  			const cache = _materialCache[ id ];

  			const uuid = event.target.uuid;

  			if ( uuid in cache ) {

  				const shadowMaterial = cache[ uuid ];
  				shadowMaterial.dispose();
  				delete cache[ uuid ];

  			}

  		}

  	}

  }

  const reversedFuncs = {
  	[ NeverDepth$1 ]: AlwaysDepth$1,
  	[ LessDepth$1 ]: GreaterDepth$1,
  	[ EqualDepth$1 ]: NotEqualDepth$1,
  	[ LessEqualDepth$1 ]: GreaterEqualDepth$1,

  	[ AlwaysDepth$1 ]: NeverDepth$1,
  	[ GreaterDepth$1 ]: LessDepth$1,
  	[ NotEqualDepth$1 ]: EqualDepth$1,
  	[ GreaterEqualDepth$1 ]: LessEqualDepth$1,
  };

  function WebGLState$1( gl, extensions ) {

  	function ColorBuffer() {

  		let locked = false;

  		const color = new Vector4$1();
  		let currentColorMask = null;
  		const currentColorClear = new Vector4$1( 0, 0, 0, 0 );

  		return {

  			setMask: function ( colorMask ) {

  				if ( currentColorMask !== colorMask && ! locked ) {

  					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
  					currentColorMask = colorMask;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( r, g, b, a, premultipliedAlpha ) {

  				if ( premultipliedAlpha === true ) {

  					r *= a; g *= a; b *= a;

  				}

  				color.set( r, g, b, a );

  				if ( currentColorClear.equals( color ) === false ) {

  					gl.clearColor( r, g, b, a );
  					currentColorClear.copy( color );

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentColorMask = null;
  				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

  			}

  		};

  	}

  	function DepthBuffer() {

  		let locked = false;
  		let reversed = false;

  		let currentDepthMask = null;
  		let currentDepthFunc = null;
  		let currentDepthClear = null;

  		return {

  			setReversed: function ( value ) {

  				if ( reversed !== value ) {

  					const ext = extensions.get( 'EXT_clip_control' );

  					if ( reversed ) {

  						ext.clipControlEXT( ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT );

  					} else {

  						ext.clipControlEXT( ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT );

  					}

  					const oldDepth = currentDepthClear;
  					currentDepthClear = null;
  					this.setClear( oldDepth );

  				}

  				reversed = value;

  			},

  			getReversed: function () {

  				return reversed;

  			},

  			setTest: function ( depthTest ) {

  				if ( depthTest ) {

  					enable( gl.DEPTH_TEST );

  				} else {

  					disable( gl.DEPTH_TEST );

  				}

  			},

  			setMask: function ( depthMask ) {

  				if ( currentDepthMask !== depthMask && ! locked ) {

  					gl.depthMask( depthMask );
  					currentDepthMask = depthMask;

  				}

  			},

  			setFunc: function ( depthFunc ) {

  				if ( reversed ) depthFunc = reversedFuncs[ depthFunc ];

  				if ( currentDepthFunc !== depthFunc ) {

  					switch ( depthFunc ) {

  						case NeverDepth$1:

  							gl.depthFunc( gl.NEVER );
  							break;

  						case AlwaysDepth$1:

  							gl.depthFunc( gl.ALWAYS );
  							break;

  						case LessDepth$1:

  							gl.depthFunc( gl.LESS );
  							break;

  						case LessEqualDepth$1:

  							gl.depthFunc( gl.LEQUAL );
  							break;

  						case EqualDepth$1:

  							gl.depthFunc( gl.EQUAL );
  							break;

  						case GreaterEqualDepth$1:

  							gl.depthFunc( gl.GEQUAL );
  							break;

  						case GreaterDepth$1:

  							gl.depthFunc( gl.GREATER );
  							break;

  						case NotEqualDepth$1:

  							gl.depthFunc( gl.NOTEQUAL );
  							break;

  						default:

  							gl.depthFunc( gl.LEQUAL );

  					}

  					currentDepthFunc = depthFunc;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( depth ) {

  				if ( currentDepthClear !== depth ) {

  					if ( reversed ) {

  						depth = 1 - depth;

  					}

  					gl.clearDepth( depth );
  					currentDepthClear = depth;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentDepthMask = null;
  				currentDepthFunc = null;
  				currentDepthClear = null;
  				reversed = false;

  			}

  		};

  	}

  	function StencilBuffer() {

  		let locked = false;

  		let currentStencilMask = null;
  		let currentStencilFunc = null;
  		let currentStencilRef = null;
  		let currentStencilFuncMask = null;
  		let currentStencilFail = null;
  		let currentStencilZFail = null;
  		let currentStencilZPass = null;
  		let currentStencilClear = null;

  		return {

  			setTest: function ( stencilTest ) {

  				if ( ! locked ) {

  					if ( stencilTest ) {

  						enable( gl.STENCIL_TEST );

  					} else {

  						disable( gl.STENCIL_TEST );

  					}

  				}

  			},

  			setMask: function ( stencilMask ) {

  				if ( currentStencilMask !== stencilMask && ! locked ) {

  					gl.stencilMask( stencilMask );
  					currentStencilMask = stencilMask;

  				}

  			},

  			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

  				if ( currentStencilFunc !== stencilFunc ||
  				     currentStencilRef !== stencilRef ||
  				     currentStencilFuncMask !== stencilMask ) {

  					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

  					currentStencilFunc = stencilFunc;
  					currentStencilRef = stencilRef;
  					currentStencilFuncMask = stencilMask;

  				}

  			},

  			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

  				if ( currentStencilFail !== stencilFail ||
  				     currentStencilZFail !== stencilZFail ||
  				     currentStencilZPass !== stencilZPass ) {

  					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

  					currentStencilFail = stencilFail;
  					currentStencilZFail = stencilZFail;
  					currentStencilZPass = stencilZPass;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( stencil ) {

  				if ( currentStencilClear !== stencil ) {

  					gl.clearStencil( stencil );
  					currentStencilClear = stencil;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentStencilMask = null;
  				currentStencilFunc = null;
  				currentStencilRef = null;
  				currentStencilFuncMask = null;
  				currentStencilFail = null;
  				currentStencilZFail = null;
  				currentStencilZPass = null;
  				currentStencilClear = null;

  			}

  		};

  	}

  	//

  	const colorBuffer = new ColorBuffer();
  	const depthBuffer = new DepthBuffer();
  	const stencilBuffer = new StencilBuffer();

  	const uboBindings = new WeakMap();
  	const uboProgramMap = new WeakMap();

  	let enabledCapabilities = {};

  	let currentBoundFramebuffers = {};
  	let currentDrawbuffers = new WeakMap();
  	let defaultDrawbuffers = [];

  	let currentProgram = null;

  	let currentBlendingEnabled = false;
  	let currentBlending = null;
  	let currentBlendEquation = null;
  	let currentBlendSrc = null;
  	let currentBlendDst = null;
  	let currentBlendEquationAlpha = null;
  	let currentBlendSrcAlpha = null;
  	let currentBlendDstAlpha = null;
  	let currentBlendColor = new Color$1( 0, 0, 0 );
  	let currentBlendAlpha = 0;
  	let currentPremultipledAlpha = false;

  	let currentFlipSided = null;
  	let currentCullFace = null;

  	let currentLineWidth = null;

  	let currentPolygonOffsetFactor = null;
  	let currentPolygonOffsetUnits = null;

  	const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

  	let lineWidthAvailable = false;
  	let version = 0;
  	const glVersion = gl.getParameter( gl.VERSION );

  	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

  		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 1.0 );

  	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

  		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 2.0 );

  	}

  	let currentTextureSlot = null;
  	let currentBoundTextures = {};

  	const scissorParam = gl.getParameter( gl.SCISSOR_BOX );
  	const viewportParam = gl.getParameter( gl.VIEWPORT );

  	const currentScissor = new Vector4$1().fromArray( scissorParam );
  	const currentViewport = new Vector4$1().fromArray( viewportParam );

  	function createTexture( type, target, count, dimensions ) {

  		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
  		const texture = gl.createTexture();

  		gl.bindTexture( type, texture );
  		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
  		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

  		for ( let i = 0; i < count; i ++ ) {

  			if ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) {

  				gl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

  			} else {

  				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

  			}

  		}

  		return texture;

  	}

  	const emptyTextures = {};
  	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
  	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );
  	emptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );
  	emptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );

  	// init

  	colorBuffer.setClear( 0, 0, 0, 1 );
  	depthBuffer.setClear( 1 );
  	stencilBuffer.setClear( 0 );

  	enable( gl.DEPTH_TEST );
  	depthBuffer.setFunc( LessEqualDepth$1 );

  	setFlipSided( false );
  	setCullFace( CullFaceBack$1 );
  	enable( gl.CULL_FACE );

  	setBlending( NoBlending$1 );

  	//

  	function enable( id ) {

  		if ( enabledCapabilities[ id ] !== true ) {

  			gl.enable( id );
  			enabledCapabilities[ id ] = true;

  		}

  	}

  	function disable( id ) {

  		if ( enabledCapabilities[ id ] !== false ) {

  			gl.disable( id );
  			enabledCapabilities[ id ] = false;

  		}

  	}

  	function bindFramebuffer( target, framebuffer ) {

  		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

  			gl.bindFramebuffer( target, framebuffer );

  			currentBoundFramebuffers[ target ] = framebuffer;

  			// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

  			if ( target === gl.DRAW_FRAMEBUFFER ) {

  				currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

  			}

  			if ( target === gl.FRAMEBUFFER ) {

  				currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

  			}

  			return true;

  		}

  		return false;

  	}

  	function drawBuffers( renderTarget, framebuffer ) {

  		let drawBuffers = defaultDrawbuffers;

  		let needsUpdate = false;

  		if ( renderTarget ) {

  			drawBuffers = currentDrawbuffers.get( framebuffer );

  			if ( drawBuffers === undefined ) {

  				drawBuffers = [];
  				currentDrawbuffers.set( framebuffer, drawBuffers );

  			}

  			const textures = renderTarget.textures;

  			if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

  				for ( let i = 0, il = textures.length; i < il; i ++ ) {

  					drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

  				}

  				drawBuffers.length = textures.length;

  				needsUpdate = true;

  			}

  		} else {

  			if ( drawBuffers[ 0 ] !== gl.BACK ) {

  				drawBuffers[ 0 ] = gl.BACK;

  				needsUpdate = true;

  			}

  		}

  		if ( needsUpdate ) {

  			gl.drawBuffers( drawBuffers );

  		}

  	}

  	function useProgram( program ) {

  		if ( currentProgram !== program ) {

  			gl.useProgram( program );

  			currentProgram = program;

  			return true;

  		}

  		return false;

  	}

  	const equationToGL = {
  		[ AddEquation$1 ]: gl.FUNC_ADD,
  		[ SubtractEquation$1 ]: gl.FUNC_SUBTRACT,
  		[ ReverseSubtractEquation$1 ]: gl.FUNC_REVERSE_SUBTRACT
  	};

  	equationToGL[ MinEquation$1 ] = gl.MIN;
  	equationToGL[ MaxEquation$1 ] = gl.MAX;

  	const factorToGL = {
  		[ ZeroFactor$1 ]: gl.ZERO,
  		[ OneFactor$1 ]: gl.ONE,
  		[ SrcColorFactor$1 ]: gl.SRC_COLOR,
  		[ SrcAlphaFactor$1 ]: gl.SRC_ALPHA,
  		[ SrcAlphaSaturateFactor$1 ]: gl.SRC_ALPHA_SATURATE,
  		[ DstColorFactor$1 ]: gl.DST_COLOR,
  		[ DstAlphaFactor$1 ]: gl.DST_ALPHA,
  		[ OneMinusSrcColorFactor$1 ]: gl.ONE_MINUS_SRC_COLOR,
  		[ OneMinusSrcAlphaFactor$1 ]: gl.ONE_MINUS_SRC_ALPHA,
  		[ OneMinusDstColorFactor$1 ]: gl.ONE_MINUS_DST_COLOR,
  		[ OneMinusDstAlphaFactor$1 ]: gl.ONE_MINUS_DST_ALPHA,
  		[ ConstantColorFactor ]: gl.CONSTANT_COLOR,
  		[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,
  		[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,
  		[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA
  	};

  	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {

  		if ( blending === NoBlending$1 ) {

  			if ( currentBlendingEnabled === true ) {

  				disable( gl.BLEND );
  				currentBlendingEnabled = false;

  			}

  			return;

  		}

  		if ( currentBlendingEnabled === false ) {

  			enable( gl.BLEND );
  			currentBlendingEnabled = true;

  		}

  		if ( blending !== CustomBlending$1 ) {

  			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

  				if ( currentBlendEquation !== AddEquation$1 || currentBlendEquationAlpha !== AddEquation$1 ) {

  					gl.blendEquation( gl.FUNC_ADD );

  					currentBlendEquation = AddEquation$1;
  					currentBlendEquationAlpha = AddEquation$1;

  				}

  				if ( premultipliedAlpha ) {

  					switch ( blending ) {

  						case NormalBlending$1:
  							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
  							break;

  						case AdditiveBlending$1:
  							gl.blendFunc( gl.ONE, gl.ONE );
  							break;

  						case SubtractiveBlending$1:
  							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
  							break;

  						case MultiplyBlending$1:
  							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				} else {

  					switch ( blending ) {

  						case NormalBlending$1:
  							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
  							break;

  						case AdditiveBlending$1:
  							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
  							break;

  						case SubtractiveBlending$1:
  							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
  							break;

  						case MultiplyBlending$1:
  							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				}

  				currentBlendSrc = null;
  				currentBlendDst = null;
  				currentBlendSrcAlpha = null;
  				currentBlendDstAlpha = null;
  				currentBlendColor.set( 0, 0, 0 );
  				currentBlendAlpha = 0;

  				currentBlending = blending;
  				currentPremultipledAlpha = premultipliedAlpha;

  			}

  			return;

  		}

  		// custom blending

  		blendEquationAlpha = blendEquationAlpha || blendEquation;
  		blendSrcAlpha = blendSrcAlpha || blendSrc;
  		blendDstAlpha = blendDstAlpha || blendDst;

  		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

  			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

  			currentBlendEquation = blendEquation;
  			currentBlendEquationAlpha = blendEquationAlpha;

  		}

  		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

  			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

  			currentBlendSrc = blendSrc;
  			currentBlendDst = blendDst;
  			currentBlendSrcAlpha = blendSrcAlpha;
  			currentBlendDstAlpha = blendDstAlpha;

  		}

  		if ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {

  			gl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );

  			currentBlendColor.copy( blendColor );
  			currentBlendAlpha = blendAlpha;

  		}

  		currentBlending = blending;
  		currentPremultipledAlpha = false;

  	}

  	function setMaterial( material, frontFaceCW ) {

  		material.side === DoubleSide$1
  			? disable( gl.CULL_FACE )
  			: enable( gl.CULL_FACE );

  		let flipSided = ( material.side === BackSide$1 );
  		if ( frontFaceCW ) flipSided = ! flipSided;

  		setFlipSided( flipSided );

  		( material.blending === NormalBlending$1 && material.transparent === false )
  			? setBlending( NoBlending$1 )
  			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );

  		depthBuffer.setFunc( material.depthFunc );
  		depthBuffer.setTest( material.depthTest );
  		depthBuffer.setMask( material.depthWrite );
  		colorBuffer.setMask( material.colorWrite );

  		const stencilWrite = material.stencilWrite;
  		stencilBuffer.setTest( stencilWrite );
  		if ( stencilWrite ) {

  			stencilBuffer.setMask( material.stencilWriteMask );
  			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
  			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

  		}

  		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

  		material.alphaToCoverage === true
  			? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
  			: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

  	}

  	//

  	function setFlipSided( flipSided ) {

  		if ( currentFlipSided !== flipSided ) {

  			if ( flipSided ) {

  				gl.frontFace( gl.CW );

  			} else {

  				gl.frontFace( gl.CCW );

  			}

  			currentFlipSided = flipSided;

  		}

  	}

  	function setCullFace( cullFace ) {

  		if ( cullFace !== CullFaceNone$1 ) {

  			enable( gl.CULL_FACE );

  			if ( cullFace !== currentCullFace ) {

  				if ( cullFace === CullFaceBack$1 ) {

  					gl.cullFace( gl.BACK );

  				} else if ( cullFace === CullFaceFront$1 ) {

  					gl.cullFace( gl.FRONT );

  				} else {

  					gl.cullFace( gl.FRONT_AND_BACK );

  				}

  			}

  		} else {

  			disable( gl.CULL_FACE );

  		}

  		currentCullFace = cullFace;

  	}

  	function setLineWidth( width ) {

  		if ( width !== currentLineWidth ) {

  			if ( lineWidthAvailable ) gl.lineWidth( width );

  			currentLineWidth = width;

  		}

  	}

  	function setPolygonOffset( polygonOffset, factor, units ) {

  		if ( polygonOffset ) {

  			enable( gl.POLYGON_OFFSET_FILL );

  			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

  				gl.polygonOffset( factor, units );

  				currentPolygonOffsetFactor = factor;
  				currentPolygonOffsetUnits = units;

  			}

  		} else {

  			disable( gl.POLYGON_OFFSET_FILL );

  		}

  	}

  	function setScissorTest( scissorTest ) {

  		if ( scissorTest ) {

  			enable( gl.SCISSOR_TEST );

  		} else {

  			disable( gl.SCISSOR_TEST );

  		}

  	}

  	// texture

  	function activeTexture( webglSlot ) {

  		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

  		if ( currentTextureSlot !== webglSlot ) {

  			gl.activeTexture( webglSlot );
  			currentTextureSlot = webglSlot;

  		}

  	}

  	function bindTexture( webglType, webglTexture, webglSlot ) {

  		if ( webglSlot === undefined ) {

  			if ( currentTextureSlot === null ) {

  				webglSlot = gl.TEXTURE0 + maxTextures - 1;

  			} else {

  				webglSlot = currentTextureSlot;

  			}

  		}

  		let boundTexture = currentBoundTextures[ webglSlot ];

  		if ( boundTexture === undefined ) {

  			boundTexture = { type: undefined, texture: undefined };
  			currentBoundTextures[ webglSlot ] = boundTexture;

  		}

  		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

  			if ( currentTextureSlot !== webglSlot ) {

  				gl.activeTexture( webglSlot );
  				currentTextureSlot = webglSlot;

  			}

  			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

  			boundTexture.type = webglType;
  			boundTexture.texture = webglTexture;

  		}

  	}

  	function unbindTexture() {

  		const boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

  			gl.bindTexture( boundTexture.type, null );

  			boundTexture.type = undefined;
  			boundTexture.texture = undefined;

  		}

  	}

  	function compressedTexImage2D() {

  		try {

  			gl.compressedTexImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function compressedTexImage3D() {

  		try {

  			gl.compressedTexImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texSubImage2D() {

  		try {

  			gl.texSubImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texSubImage3D() {

  		try {

  			gl.texSubImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function compressedTexSubImage2D() {

  		try {

  			gl.compressedTexSubImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function compressedTexSubImage3D() {

  		try {

  			gl.compressedTexSubImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texStorage2D() {

  		try {

  			gl.texStorage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texStorage3D() {

  		try {

  			gl.texStorage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage2D() {

  		try {

  			gl.texImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage3D() {

  		try {

  			gl.texImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	//

  	function scissor( scissor ) {

  		if ( currentScissor.equals( scissor ) === false ) {

  			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
  			currentScissor.copy( scissor );

  		}

  	}

  	function viewport( viewport ) {

  		if ( currentViewport.equals( viewport ) === false ) {

  			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
  			currentViewport.copy( viewport );

  		}

  	}

  	function updateUBOMapping( uniformsGroup, program ) {

  		let mapping = uboProgramMap.get( program );

  		if ( mapping === undefined ) {

  			mapping = new WeakMap();

  			uboProgramMap.set( program, mapping );

  		}

  		let blockIndex = mapping.get( uniformsGroup );

  		if ( blockIndex === undefined ) {

  			blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );

  			mapping.set( uniformsGroup, blockIndex );

  		}

  	}

  	function uniformBlockBinding( uniformsGroup, program ) {

  		const mapping = uboProgramMap.get( program );
  		const blockIndex = mapping.get( uniformsGroup );

  		if ( uboBindings.get( program ) !== blockIndex ) {

  			// bind shader specific block index to global block point
  			gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );

  			uboBindings.set( program, blockIndex );

  		}

  	}

  	//

  	function reset() {

  		// reset state

  		gl.disable( gl.BLEND );
  		gl.disable( gl.CULL_FACE );
  		gl.disable( gl.DEPTH_TEST );
  		gl.disable( gl.POLYGON_OFFSET_FILL );
  		gl.disable( gl.SCISSOR_TEST );
  		gl.disable( gl.STENCIL_TEST );
  		gl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

  		gl.blendEquation( gl.FUNC_ADD );
  		gl.blendFunc( gl.ONE, gl.ZERO );
  		gl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );
  		gl.blendColor( 0, 0, 0, 0 );

  		gl.colorMask( true, true, true, true );
  		gl.clearColor( 0, 0, 0, 0 );

  		gl.depthMask( true );
  		gl.depthFunc( gl.LESS );

  		depthBuffer.setReversed( false );

  		gl.clearDepth( 1 );

  		gl.stencilMask( 0xffffffff );
  		gl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );
  		gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );
  		gl.clearStencil( 0 );

  		gl.cullFace( gl.BACK );
  		gl.frontFace( gl.CCW );

  		gl.polygonOffset( 0, 0 );

  		gl.activeTexture( gl.TEXTURE0 );

  		gl.bindFramebuffer( gl.FRAMEBUFFER, null );
  		gl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );
  		gl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );

  		gl.useProgram( null );

  		gl.lineWidth( 1 );

  		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
  		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

  		// reset internals

  		enabledCapabilities = {};

  		currentTextureSlot = null;
  		currentBoundTextures = {};

  		currentBoundFramebuffers = {};
  		currentDrawbuffers = new WeakMap();
  		defaultDrawbuffers = [];

  		currentProgram = null;

  		currentBlendingEnabled = false;
  		currentBlending = null;
  		currentBlendEquation = null;
  		currentBlendSrc = null;
  		currentBlendDst = null;
  		currentBlendEquationAlpha = null;
  		currentBlendSrcAlpha = null;
  		currentBlendDstAlpha = null;
  		currentBlendColor = new Color$1( 0, 0, 0 );
  		currentBlendAlpha = 0;
  		currentPremultipledAlpha = false;

  		currentFlipSided = null;
  		currentCullFace = null;

  		currentLineWidth = null;

  		currentPolygonOffsetFactor = null;
  		currentPolygonOffsetUnits = null;

  		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
  		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

  		colorBuffer.reset();
  		depthBuffer.reset();
  		stencilBuffer.reset();

  	}

  	return {

  		buffers: {
  			color: colorBuffer,
  			depth: depthBuffer,
  			stencil: stencilBuffer
  		},

  		enable: enable,
  		disable: disable,

  		bindFramebuffer: bindFramebuffer,
  		drawBuffers: drawBuffers,

  		useProgram: useProgram,

  		setBlending: setBlending,
  		setMaterial: setMaterial,

  		setFlipSided: setFlipSided,
  		setCullFace: setCullFace,

  		setLineWidth: setLineWidth,
  		setPolygonOffset: setPolygonOffset,

  		setScissorTest: setScissorTest,

  		activeTexture: activeTexture,
  		bindTexture: bindTexture,
  		unbindTexture: unbindTexture,
  		compressedTexImage2D: compressedTexImage2D,
  		compressedTexImage3D: compressedTexImage3D,
  		texImage2D: texImage2D,
  		texImage3D: texImage3D,

  		updateUBOMapping: updateUBOMapping,
  		uniformBlockBinding: uniformBlockBinding,

  		texStorage2D: texStorage2D,
  		texStorage3D: texStorage3D,
  		texSubImage2D: texSubImage2D,
  		texSubImage3D: texSubImage3D,
  		compressedTexSubImage2D: compressedTexSubImage2D,
  		compressedTexSubImage3D: compressedTexSubImage3D,

  		scissor: scissor,
  		viewport: viewport,

  		reset: reset

  	};

  }



  /**
   * Given the width, height, format, and type of a texture. Determines how many
   * bytes must be used to represent the texture.
   */
  function getByteLength( width, height, format, type ) {

  	const typeByteLength = getTextureTypeByteLength( type );

  	switch ( format ) {

  		// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
  		case AlphaFormat$1:
  			return width * height;
  		case LuminanceFormat$1:
  			return width * height;
  		case LuminanceAlphaFormat$1:
  			return width * height * 2;
  		case RedFormat$1:
  			return ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RedIntegerFormat$1:
  			return ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RGFormat$1:
  			return ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RGIntegerFormat$1:
  			return ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RGBFormat$1:
  			return ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RGBAFormat$1:
  			return ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;
  		case RGBAIntegerFormat$1:
  			return ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;

  		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
  		case RGB_S3TC_DXT1_Format$1:
  		case RGBA_S3TC_DXT1_Format$1:
  			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;
  		case RGBA_S3TC_DXT3_Format$1:
  		case RGBA_S3TC_DXT5_Format$1:
  			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;

  		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
  		case RGB_PVRTC_2BPPV1_Format$1:
  		case RGBA_PVRTC_2BPPV1_Format$1:
  			return ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;
  		case RGB_PVRTC_4BPPV1_Format$1:
  		case RGBA_PVRTC_4BPPV1_Format$1:
  			return ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;

  		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
  		case RGB_ETC1_Format$1:
  		case RGB_ETC2_Format$1:
  			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;
  		case RGBA_ETC2_EAC_Format$1:
  			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;

  		// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
  		case RGBA_ASTC_4x4_Format$1:
  			return Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;
  		case RGBA_ASTC_5x4_Format$1:
  			return Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;
  		case RGBA_ASTC_5x5_Format$1:
  			return Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
  		case RGBA_ASTC_6x5_Format$1:
  			return Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
  		case RGBA_ASTC_6x6_Format$1:
  			return Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
  		case RGBA_ASTC_8x5_Format$1:
  			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
  		case RGBA_ASTC_8x6_Format$1:
  			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
  		case RGBA_ASTC_8x8_Format$1:
  			return Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;
  		case RGBA_ASTC_10x5_Format$1:
  			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;
  		case RGBA_ASTC_10x6_Format$1:
  			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;
  		case RGBA_ASTC_10x8_Format$1:
  			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;
  		case RGBA_ASTC_10x10_Format$1:
  			return Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;
  		case RGBA_ASTC_12x10_Format$1:
  			return Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;
  		case RGBA_ASTC_12x12_Format$1:
  			return Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;

  		// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
  		case RGBA_BPTC_Format$1:
  		case RGB_BPTC_SIGNED_Format:
  		case RGB_BPTC_UNSIGNED_Format:
  			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;

  		// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
  		case RED_RGTC1_Format$1:
  		case SIGNED_RED_RGTC1_Format$1:
  			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;
  		case RED_GREEN_RGTC2_Format$1:
  		case SIGNED_RED_GREEN_RGTC2_Format$1:
  			return Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;

  	}

  	throw new Error(
  		`Unable to determine texture byte length for ${format} format.`,
  	);

  }

  function getTextureTypeByteLength( type ) {

  	switch ( type ) {

  		case UnsignedByteType$1:
  		case ByteType$1:
  			return { byteLength: 1, components: 1 };
  		case UnsignedShortType$1:
  		case ShortType$1:
  		case HalfFloatType$1:
  			return { byteLength: 2, components: 1 };
  		case UnsignedShort4444Type$1:
  		case UnsignedShort5551Type$1:
  			return { byteLength: 2, components: 4 };
  		case UnsignedIntType$1:
  		case IntType$1:
  		case FloatType$1:
  			return { byteLength: 4, components: 1 };
  		case UnsignedInt5999Type$1:
  			return { byteLength: 4, components: 3 };

  	}

  	throw new Error( `Unknown texture type ${type}.` );

  }

  function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

  	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
  	const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );

  	const _imageDimensions = new Vector2$1();
  	const _videoTextures = new WeakMap();
  	let _canvas;

  	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

  	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
  	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
  	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

  	let useOffscreenCanvas = false;

  	try {

  		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
  			// eslint-disable-next-line compat/compat
  			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

  	} catch ( err ) {

  		// Ignore any errors

  	}

  	function createCanvas( width, height ) {

  		// Use OffscreenCanvas when available. Specially needed in web workers

  		return useOffscreenCanvas ?
  			// eslint-disable-next-line compat/compat
  			new OffscreenCanvas( width, height ) : createElementNS$1( 'canvas' );

  	}

  	function resizeImage( image, needsNewCanvas, maxSize ) {

  		let scale = 1;

  		const dimensions = getDimensions( image );

  		// handle case if texture exceeds max size

  		if ( dimensions.width > maxSize || dimensions.height > maxSize ) {

  			scale = maxSize / Math.max( dimensions.width, dimensions.height );

  		}

  		// only perform resize if necessary

  		if ( scale < 1 ) {

  			// only perform resize for certain image types

  			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||
  				( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {

  				const width = Math.floor( scale * dimensions.width );
  				const height = Math.floor( scale * dimensions.height );

  				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

  				// cube textures can't reuse the same canvas

  				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

  				canvas.width = width;
  				canvas.height = height;

  				const context = canvas.getContext( '2d' );
  				context.drawImage( image, 0, 0, width, height );

  				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );

  				return canvas;

  			} else {

  				if ( 'data' in image ) {

  					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );

  				}

  				return image;

  			}

  		}

  		return image;

  	}

  	function textureNeedsGenerateMipmaps( texture ) {

  		return texture.generateMipmaps;

  	}

  	function generateMipmap( target ) {

  		_gl.generateMipmap( target );

  	}

  	function getTargetType( texture ) {

  		if ( texture.isWebGLCubeRenderTarget ) return _gl.TEXTURE_CUBE_MAP;
  		if ( texture.isWebGL3DRenderTarget ) return _gl.TEXTURE_3D;
  		if ( texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture ) return _gl.TEXTURE_2D_ARRAY;
  		return _gl.TEXTURE_2D;

  	}

  	function getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

  		if ( internalFormatName !== null ) {

  			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

  			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

  		}

  		let internalFormat = glFormat;

  		if ( glFormat === _gl.RED ) {

  			if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
  			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

  		}

  		if ( glFormat === _gl.RED_INTEGER ) {

  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;
  			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;
  			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;
  			if ( glType === _gl.BYTE ) internalFormat = _gl.R8I;
  			if ( glType === _gl.SHORT ) internalFormat = _gl.R16I;
  			if ( glType === _gl.INT ) internalFormat = _gl.R32I;

  		}

  		if ( glFormat === _gl.RG ) {

  			if ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;
  			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;
  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;

  		}

  		if ( glFormat === _gl.RG_INTEGER ) {

  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;
  			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;
  			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;
  			if ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;
  			if ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;
  			if ( glType === _gl.INT ) internalFormat = _gl.RG32I;

  		}

  		if ( glFormat === _gl.RGB_INTEGER ) {

  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8UI;
  			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGB16UI;
  			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGB32UI;
  			if ( glType === _gl.BYTE ) internalFormat = _gl.RGB8I;
  			if ( glType === _gl.SHORT ) internalFormat = _gl.RGB16I;
  			if ( glType === _gl.INT ) internalFormat = _gl.RGB32I;

  		}

  		if ( glFormat === _gl.RGBA_INTEGER ) {

  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8UI;
  			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGBA16UI;
  			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGBA32UI;
  			if ( glType === _gl.BYTE ) internalFormat = _gl.RGBA8I;
  			if ( glType === _gl.SHORT ) internalFormat = _gl.RGBA16I;
  			if ( glType === _gl.INT ) internalFormat = _gl.RGBA32I;

  		}

  		if ( glFormat === _gl.RGB ) {

  			if ( glType === _gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = _gl.RGB9_E5;

  		}

  		if ( glFormat === _gl.RGBA ) {

  			const transfer = forceLinearTransfer ? LinearTransfer$1 : ColorManagement$1.getTransfer( colorSpace );

  			if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
  			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
  			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer$1 ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
  			if ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;
  			if ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;

  		}

  		if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
  			internalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||
  			internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

  			extensions.get( 'EXT_color_buffer_float' );

  		}

  		return internalFormat;

  	}

  	function getInternalDepthFormat( useStencil, depthType ) {

  		let glInternalFormat;
  		if ( useStencil ) {

  			if ( depthType === null || depthType === UnsignedIntType$1 || depthType === UnsignedInt248Type$1 ) {

  				glInternalFormat = _gl.DEPTH24_STENCIL8;

  			} else if ( depthType === FloatType$1 ) {

  				glInternalFormat = _gl.DEPTH32F_STENCIL8;

  			} else if ( depthType === UnsignedShortType$1 ) {

  				glInternalFormat = _gl.DEPTH24_STENCIL8;
  				console.warn( 'DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.' );

  			}

  		} else {

  			if ( depthType === null || depthType === UnsignedIntType$1 || depthType === UnsignedInt248Type$1 ) {

  				glInternalFormat = _gl.DEPTH_COMPONENT24;

  			} else if ( depthType === FloatType$1 ) {

  				glInternalFormat = _gl.DEPTH_COMPONENT32F;

  			} else if ( depthType === UnsignedShortType$1 ) {

  				glInternalFormat = _gl.DEPTH_COMPONENT16;

  			}

  		}

  		return glInternalFormat;

  	}

  	function getMipLevels( texture, image ) {

  		if ( textureNeedsGenerateMipmaps( texture ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter$1 && texture.minFilter !== LinearFilter$1 ) ) {

  			return Math.log2( Math.max( image.width, image.height ) ) + 1;

  		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

  			// user-defined mipmaps

  			return texture.mipmaps.length;

  		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

  			return image.mipmaps.length;

  		} else {

  			// texture without mipmaps (only base level)

  			return 1;

  		}

  	}

  	//

  	function onTextureDispose( event ) {

  		const texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		deallocateTexture( texture );

  		if ( texture.isVideoTexture ) {

  			_videoTextures.delete( texture );

  		}

  	}

  	function onRenderTargetDispose( event ) {

  		const renderTarget = event.target;

  		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

  		deallocateRenderTarget( renderTarget );

  	}

  	//

  	function deallocateTexture( texture ) {

  		const textureProperties = properties.get( texture );

  		if ( textureProperties.__webglInit === undefined ) return;

  		// check if it's necessary to remove the WebGLTexture object

  		const source = texture.source;
  		const webglTextures = _sources.get( source );

  		if ( webglTextures ) {

  			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
  			webglTexture.usedTimes --;

  			// the WebGLTexture object is not used anymore, remove it

  			if ( webglTexture.usedTimes === 0 ) {

  				deleteTexture( texture );

  			}

  			// remove the weak map entry if no WebGLTexture uses the source anymore

  			if ( Object.keys( webglTextures ).length === 0 ) {

  				_sources.delete( source );

  			}

  		}

  		properties.remove( texture );

  	}

  	function deleteTexture( texture ) {

  		const textureProperties = properties.get( texture );
  		_gl.deleteTexture( textureProperties.__webglTexture );

  		const source = texture.source;
  		const webglTextures = _sources.get( source );
  		delete webglTextures[ textureProperties.__cacheKey ];

  		info.memory.textures --;

  	}

  	function deallocateRenderTarget( renderTarget ) {

  		const renderTargetProperties = properties.get( renderTarget );

  		if ( renderTarget.depthTexture ) {

  			renderTarget.depthTexture.dispose();

  			properties.remove( renderTarget.depthTexture );

  		}

  		if ( renderTarget.isWebGLCubeRenderTarget ) {

  			for ( let i = 0; i < 6; i ++ ) {

  				if ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {

  					for ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );

  				} else {

  					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );

  				}

  				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

  			}

  		} else {

  			if ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {

  				for ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );

  			} else {

  				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );

  			}

  			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
  			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

  			if ( renderTargetProperties.__webglColorRenderbuffer ) {

  				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

  					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

  				}

  			}

  			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

  		}

  		const textures = renderTarget.textures;

  		for ( let i = 0, il = textures.length; i < il; i ++ ) {

  			const attachmentProperties = properties.get( textures[ i ] );

  			if ( attachmentProperties.__webglTexture ) {

  				_gl.deleteTexture( attachmentProperties.__webglTexture );

  				info.memory.textures --;

  			}

  			properties.remove( textures[ i ] );

  		}

  		properties.remove( renderTarget );

  	}

  	//

  	let textureUnits = 0;

  	function resetTextureUnits() {

  		textureUnits = 0;

  	}

  	function allocateTextureUnit() {

  		const textureUnit = textureUnits;

  		if ( textureUnit >= capabilities.maxTextures ) {

  			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

  		}

  		textureUnits += 1;

  		return textureUnit;

  	}

  	function getTextureCacheKey( texture ) {

  		const array = [];

  		array.push( texture.wrapS );
  		array.push( texture.wrapT );
  		array.push( texture.wrapR || 0 );
  		array.push( texture.magFilter );
  		array.push( texture.minFilter );
  		array.push( texture.anisotropy );
  		array.push( texture.internalFormat );
  		array.push( texture.format );
  		array.push( texture.type );
  		array.push( texture.generateMipmaps );
  		array.push( texture.premultiplyAlpha );
  		array.push( texture.flipY );
  		array.push( texture.unpackAlignment );
  		array.push( texture.colorSpace );

  		return array.join();

  	}

  	//

  	function setTexture2D( texture, slot ) {

  		const textureProperties = properties.get( texture );

  		if ( texture.isVideoTexture ) updateVideoTexture( texture );

  		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

  			const image = texture.image;

  			if ( image === null ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

  			} else if ( image.complete === false ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

  			} else {

  				uploadTexture( textureProperties, texture, slot );
  				return;

  			}

  		}

  		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  	}

  	function setTexture2DArray( texture, slot ) {

  		const textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  	}

  	function setTexture3D( texture, slot ) {

  		const textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  	}

  	function setTextureCube( texture, slot ) {

  		const textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadCubeTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  	}

  	const wrappingToGL = {
  		[ RepeatWrapping$1 ]: _gl.REPEAT,
  		[ ClampToEdgeWrapping$1 ]: _gl.CLAMP_TO_EDGE,
  		[ MirroredRepeatWrapping$1 ]: _gl.MIRRORED_REPEAT
  	};

  	const filterToGL = {
  		[ NearestFilter$1 ]: _gl.NEAREST,
  		[ NearestMipmapNearestFilter$1 ]: _gl.NEAREST_MIPMAP_NEAREST,
  		[ NearestMipmapLinearFilter$1 ]: _gl.NEAREST_MIPMAP_LINEAR,

  		[ LinearFilter$1 ]: _gl.LINEAR,
  		[ LinearMipmapNearestFilter$1 ]: _gl.LINEAR_MIPMAP_NEAREST,
  		[ LinearMipmapLinearFilter$1 ]: _gl.LINEAR_MIPMAP_LINEAR
  	};

  	const compareToGL = {
  		[ NeverCompare$1 ]: _gl.NEVER,
  		[ AlwaysCompare$1 ]: _gl.ALWAYS,
  		[ LessCompare$1 ]: _gl.LESS,
  		[ LessEqualCompare$1 ]: _gl.LEQUAL,
  		[ EqualCompare$1 ]: _gl.EQUAL,
  		[ GreaterEqualCompare$1 ]: _gl.GEQUAL,
  		[ GreaterCompare$1 ]: _gl.GREATER,
  		[ NotEqualCompare$1 ]: _gl.NOTEQUAL
  	};

  	function setTextureParameters( textureType, texture ) {

  		if ( texture.type === FloatType$1 && extensions.has( 'OES_texture_float_linear' ) === false &&
  			( texture.magFilter === LinearFilter$1 || texture.magFilter === LinearMipmapNearestFilter$1 || texture.magFilter === NearestMipmapLinearFilter$1 || texture.magFilter === LinearMipmapLinearFilter$1 ||
  			texture.minFilter === LinearFilter$1 || texture.minFilter === LinearMipmapNearestFilter$1 || texture.minFilter === NearestMipmapLinearFilter$1 || texture.minFilter === LinearMipmapLinearFilter$1 ) ) {

  			console.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );

  		}

  		_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
  		_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

  		if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

  			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

  		}

  		_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
  		_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

  		if ( texture.compareFunction ) {

  			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );
  			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

  		}

  		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

  			if ( texture.magFilter === NearestFilter$1 ) return;
  			if ( texture.minFilter !== NearestMipmapLinearFilter$1 && texture.minFilter !== LinearMipmapLinearFilter$1 ) return;
  			if ( texture.type === FloatType$1 && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension

  			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

  				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
  				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
  				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

  			}

  		}

  	}

  	function initTexture( textureProperties, texture ) {

  		let forceUpload = false;

  		if ( textureProperties.__webglInit === undefined ) {

  			textureProperties.__webglInit = true;

  			texture.addEventListener( 'dispose', onTextureDispose );

  		}

  		// create Source <-> WebGLTextures mapping if necessary

  		const source = texture.source;
  		let webglTextures = _sources.get( source );

  		if ( webglTextures === undefined ) {

  			webglTextures = {};
  			_sources.set( source, webglTextures );

  		}

  		// check if there is already a WebGLTexture object for the given texture parameters

  		const textureCacheKey = getTextureCacheKey( texture );

  		if ( textureCacheKey !== textureProperties.__cacheKey ) {

  			// if not, create a new instance of WebGLTexture

  			if ( webglTextures[ textureCacheKey ] === undefined ) {

  				// create new entry

  				webglTextures[ textureCacheKey ] = {
  					texture: _gl.createTexture(),
  					usedTimes: 0
  				};

  				info.memory.textures ++;

  				// when a new instance of WebGLTexture was created, a texture upload is required
  				// even if the image contents are identical

  				forceUpload = true;

  			}

  			webglTextures[ textureCacheKey ].usedTimes ++;

  			// every time the texture cache key changes, it's necessary to check if an instance of
  			// WebGLTexture can be deleted in order to avoid a memory leak.

  			const webglTexture = webglTextures[ textureProperties.__cacheKey ];

  			if ( webglTexture !== undefined ) {

  				webglTextures[ textureProperties.__cacheKey ].usedTimes --;

  				if ( webglTexture.usedTimes === 0 ) {

  					deleteTexture( texture );

  				}

  			}

  			// store references to cache key and WebGLTexture object

  			textureProperties.__cacheKey = textureCacheKey;
  			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

  		}

  		return forceUpload;

  	}

  	function uploadTexture( textureProperties, texture, slot ) {

  		let textureType = _gl.TEXTURE_2D;

  		if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;
  		if ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;

  		const forceUpload = initTexture( textureProperties, texture );
  		const source = texture.source;

  		state.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  		const sourceProperties = properties.get( source );

  		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

  			state.activeTexture( _gl.TEXTURE0 + slot );

  			const workingPrimaries = ColorManagement$1.getPrimaries( ColorManagement$1.workingColorSpace );
  			const texturePrimaries = texture.colorSpace === NoColorSpace$1 ? null : ColorManagement$1.getPrimaries( texture.colorSpace );
  			const unpackConversion = texture.colorSpace === NoColorSpace$1 || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

  			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
  			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
  			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
  			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

  			let image = resizeImage( texture.image, false, capabilities.maxTextureSize );
  			image = verifyColorSpace( texture, image );

  			const glFormat = utils.convert( texture.format, texture.colorSpace );

  			const glType = utils.convert( texture.type );
  			let glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

  			setTextureParameters( textureType, texture );

  			let mipmap;
  			const mipmaps = texture.mipmaps;

  			const useTexStorage = ( texture.isVideoTexture !== true );
  			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
  			const dataReady = source.dataReady;
  			const levels = getMipLevels( texture, image );

  			if ( texture.isDepthTexture ) {

  				glInternalFormat = getInternalDepthFormat( texture.format === DepthStencilFormat$1, texture.type );

  				//

  				if ( allocateMemory ) {

  					if ( useTexStorage ) {

  						state.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );

  					} else {

  						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

  					}

  				}

  			} else if ( texture.isDataTexture ) {

  				// use manually created mipmaps if available
  				// if there are no manual mipmaps
  				// set 0 level mipmap and then use GL to generate other mipmap levels

  				if ( mipmaps.length > 0 ) {

  					if ( useTexStorage && allocateMemory ) {

  						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

  					}

  					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

  						mipmap = mipmaps[ i ];

  						if ( useTexStorage ) {

  							if ( dataReady ) {

  								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

  							}

  						} else {

  							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  						}

  					}

  					texture.generateMipmaps = false;

  				} else {

  					if ( useTexStorage ) {

  						if ( allocateMemory ) {

  							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

  						}

  						if ( dataReady ) {

  							state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

  						}

  					} else {

  						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

  					}

  				}

  			} else if ( texture.isCompressedTexture ) {

  				if ( texture.isCompressedArrayTexture ) {

  					if ( useTexStorage && allocateMemory ) {

  						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );

  					}

  					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

  						mipmap = mipmaps[ i ];

  						if ( texture.format !== RGBAFormat$1 ) {

  							if ( glFormat !== null ) {

  								if ( useTexStorage ) {

  									if ( dataReady ) {

  										if ( texture.layerUpdates.size > 0 ) {

  											const layerByteLength = getByteLength( mipmap.width, mipmap.height, texture.format, texture.type );

  											for ( const layerIndex of texture.layerUpdates ) {

  												const layerData = mipmap.data.subarray(
  													layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
  													( layerIndex + 1 ) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
  												);
  												state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData );

  											}

  											texture.clearLayerUpdates();

  										} else {

  											state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );

  										}

  									}

  								} else {

  									state.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );

  								}

  							} else {

  								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  							}

  						} else {

  							if ( useTexStorage ) {

  								if ( dataReady ) {

  									state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

  								}

  							} else {

  								state.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );

  							}

  						}

  					}

  				} else {

  					if ( useTexStorage && allocateMemory ) {

  						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

  					}

  					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

  						mipmap = mipmaps[ i ];

  						if ( texture.format !== RGBAFormat$1 ) {

  							if ( glFormat !== null ) {

  								if ( useTexStorage ) {

  									if ( dataReady ) {

  										state.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

  									}

  								} else {

  									state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  								}

  							} else {

  								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  							}

  						} else {

  							if ( useTexStorage ) {

  								if ( dataReady ) {

  									state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

  								}

  							} else {

  								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  							}

  						}

  					}

  				}

  			} else if ( texture.isDataArrayTexture ) {

  				if ( useTexStorage ) {

  					if ( allocateMemory ) {

  						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );

  					}

  					if ( dataReady ) {

  						if ( texture.layerUpdates.size > 0 ) {

  							const layerByteLength = getByteLength( image.width, image.height, texture.format, texture.type );

  							for ( const layerIndex of texture.layerUpdates ) {

  								const layerData = image.data.subarray(
  									layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
  									( layerIndex + 1 ) * layerByteLength / image.data.BYTES_PER_ELEMENT
  								);
  								state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData );

  							}

  							texture.clearLayerUpdates();

  						} else {

  							state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

  						}

  					}

  				} else {

  					state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

  				}

  			} else if ( texture.isData3DTexture ) {

  				if ( useTexStorage ) {

  					if ( allocateMemory ) {

  						state.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );

  					}

  					if ( dataReady ) {

  						state.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

  					}

  				} else {

  					state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

  				}

  			} else if ( texture.isFramebufferTexture ) {

  				if ( allocateMemory ) {

  					if ( useTexStorage ) {

  						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

  					} else {

  						let width = image.width, height = image.height;

  						for ( let i = 0; i < levels; i ++ ) {

  							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );

  							width >>= 1;
  							height >>= 1;

  						}

  					}

  				}

  			} else {

  				// regular Texture (image, video, canvas)

  				// use manually created mipmaps if available
  				// if there are no manual mipmaps
  				// set 0 level mipmap and then use GL to generate other mipmap levels

  				if ( mipmaps.length > 0 ) {

  					if ( useTexStorage && allocateMemory ) {

  						const dimensions = getDimensions( mipmaps[ 0 ] );

  						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

  					}

  					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

  						mipmap = mipmaps[ i ];

  						if ( useTexStorage ) {

  							if ( dataReady ) {

  								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );

  							}

  						} else {

  							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

  						}

  					}

  					texture.generateMipmaps = false;

  				} else {

  					if ( useTexStorage ) {

  						if ( allocateMemory ) {

  							const dimensions = getDimensions( image );

  							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

  						}

  						if ( dataReady ) {

  							state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );

  						}

  					} else {

  						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );

  					}

  				}

  			}

  			if ( textureNeedsGenerateMipmaps( texture ) ) {

  				generateMipmap( textureType );

  			}

  			sourceProperties.__version = source.version;

  			if ( texture.onUpdate ) texture.onUpdate( texture );

  		}

  		textureProperties.__version = texture.version;

  	}

  	function uploadCubeTexture( textureProperties, texture, slot ) {

  		if ( texture.image.length !== 6 ) return;

  		const forceUpload = initTexture( textureProperties, texture );
  		const source = texture.source;

  		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

  		const sourceProperties = properties.get( source );

  		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

  			state.activeTexture( _gl.TEXTURE0 + slot );

  			const workingPrimaries = ColorManagement$1.getPrimaries( ColorManagement$1.workingColorSpace );
  			const texturePrimaries = texture.colorSpace === NoColorSpace$1 ? null : ColorManagement$1.getPrimaries( texture.colorSpace );
  			const unpackConversion = texture.colorSpace === NoColorSpace$1 || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

  			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
  			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
  			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
  			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

  			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
  			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

  			const cubeImage = [];

  			for ( let i = 0; i < 6; i ++ ) {

  				if ( ! isCompressed && ! isDataTexture ) {

  					cubeImage[ i ] = resizeImage( texture.image[ i ], true, capabilities.maxCubemapSize );

  				} else {

  					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

  				}

  				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

  			}

  			const image = cubeImage[ 0 ],
  				glFormat = utils.convert( texture.format, texture.colorSpace ),
  				glType = utils.convert( texture.type ),
  				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );

  			const useTexStorage = ( texture.isVideoTexture !== true );
  			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
  			const dataReady = source.dataReady;
  			let levels = getMipLevels( texture, image );

  			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );

  			let mipmaps;

  			if ( isCompressed ) {

  				if ( useTexStorage && allocateMemory ) {

  					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );

  				}

  				for ( let i = 0; i < 6; i ++ ) {

  					mipmaps = cubeImage[ i ].mipmaps;

  					for ( let j = 0; j < mipmaps.length; j ++ ) {

  						const mipmap = mipmaps[ j ];

  						if ( texture.format !== RGBAFormat$1 ) {

  							if ( glFormat !== null ) {

  								if ( useTexStorage ) {

  									if ( dataReady ) {

  										state.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

  									}

  								} else {

  									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  								}

  							} else {

  								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

  							}

  						} else {

  							if ( useTexStorage ) {

  								if ( dataReady ) {

  									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

  								}

  							} else {

  								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  							}

  						}

  					}

  				}

  			} else {

  				mipmaps = texture.mipmaps;

  				if ( useTexStorage && allocateMemory ) {

  					// TODO: Uniformly handle mipmap definitions
  					// Normal textures and compressed cube textures define base level + mips with their mipmap array
  					// Uncompressed cube textures use their mipmap array only for mips (no base level)

  					if ( mipmaps.length > 0 ) levels ++;

  					const dimensions = getDimensions( cubeImage[ 0 ] );

  					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );

  				}

  				for ( let i = 0; i < 6; i ++ ) {

  					if ( isDataTexture ) {

  						if ( useTexStorage ) {

  							if ( dataReady ) {

  								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

  							}

  						} else {

  							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

  						}

  						for ( let j = 0; j < mipmaps.length; j ++ ) {

  							const mipmap = mipmaps[ j ];
  							const mipmapImage = mipmap.image[ i ].image;

  							if ( useTexStorage ) {

  								if ( dataReady ) {

  									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

  								}

  							} else {

  								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

  							}

  						}

  					} else {

  						if ( useTexStorage ) {

  							if ( dataReady ) {

  								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

  							}

  						} else {

  							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

  						}

  						for ( let j = 0; j < mipmaps.length; j ++ ) {

  							const mipmap = mipmaps[ j ];

  							if ( useTexStorage ) {

  								if ( dataReady ) {

  									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

  								}

  							} else {

  								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

  							}

  						}

  					}

  				}

  			}

  			if ( textureNeedsGenerateMipmaps( texture ) ) {

  				// We assume images for cube map have the same size.
  				generateMipmap( _gl.TEXTURE_CUBE_MAP );

  			}

  			sourceProperties.__version = source.version;

  			if ( texture.onUpdate ) texture.onUpdate( texture );

  		}

  		textureProperties.__version = texture.version;

  	}

  	// Render targets

  	// Setup storage for target texture and bind it to correct framebuffer
  	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {

  		const glFormat = utils.convert( texture.format, texture.colorSpace );
  		const glType = utils.convert( texture.type );
  		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
  		const renderTargetProperties = properties.get( renderTarget );
  		const textureProperties = properties.get( texture );

  		textureProperties.__renderTarget = renderTarget;

  		if ( ! renderTargetProperties.__hasExternalTextures ) {

  			const width = Math.max( 1, renderTarget.width >> level );
  			const height = Math.max( 1, renderTarget.height >> level );

  			if ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {

  				state.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );

  			} else {

  				state.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );

  			}

  		}

  		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  		if ( useMultisampledRTT( renderTarget ) ) {

  			multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

  		} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753

  			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level );

  		}

  		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

  	}

  	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

  		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

  		if ( renderTarget.depthBuffer ) {

  			// retrieve the depth attachment types
  			const depthTexture = renderTarget.depthTexture;
  			const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
  			const glInternalFormat = getInternalDepthFormat( renderTarget.stencilBuffer, depthType );
  			const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;

  			// set up the attachment
  			const samples = getRenderTargetSamples( renderTarget );
  			const isUseMultisampledRTT = useMultisampledRTT( renderTarget );
  			if ( isUseMultisampledRTT ) {

  				multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else if ( isMultisample ) {

  				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

  			}

  			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

  		} else {

  			const textures = renderTarget.textures;

  			for ( let i = 0; i < textures.length; i ++ ) {

  				const texture = textures[ i ];

  				const glFormat = utils.convert( texture.format, texture.colorSpace );
  				const glType = utils.convert( texture.type );
  				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
  				const samples = getRenderTargetSamples( renderTarget );

  				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

  					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  				} else if ( useMultisampledRTT( renderTarget ) ) {

  					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  				} else {

  					_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

  				}

  			}

  		}

  		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

  	}

  	// Setup resources for a Depth Texture for a FBO (needs an extension)
  	function setupDepthTexture( framebuffer, renderTarget ) {

  		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
  		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

  		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

  			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

  		}

  		const textureProperties = properties.get( renderTarget.depthTexture );
  		textureProperties.__renderTarget = renderTarget;

  		// upload an empty depth texture with framebuffer size
  		if ( ! textureProperties.__webglTexture ||
  				renderTarget.depthTexture.image.width !== renderTarget.width ||
  				renderTarget.depthTexture.image.height !== renderTarget.height ) {

  			renderTarget.depthTexture.image.width = renderTarget.width;
  			renderTarget.depthTexture.image.height = renderTarget.height;
  			renderTarget.depthTexture.needsUpdate = true;

  		}

  		setTexture2D( renderTarget.depthTexture, 0 );

  		const webglDepthTexture = textureProperties.__webglTexture;
  		const samples = getRenderTargetSamples( renderTarget );

  		if ( renderTarget.depthTexture.format === DepthFormat$1 ) {

  			if ( useMultisampledRTT( renderTarget ) ) {

  				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

  			} else {

  				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

  			}

  		} else if ( renderTarget.depthTexture.format === DepthStencilFormat$1 ) {

  			if ( useMultisampledRTT( renderTarget ) ) {

  				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

  			} else {

  				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

  			}

  		} else {

  			throw new Error( 'Unknown depthTexture format' );

  		}

  	}

  	// Setup GL resources for a non-texture depth buffer
  	function setupDepthRenderbuffer( renderTarget ) {

  		const renderTargetProperties = properties.get( renderTarget );
  		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

  		// if the bound depth texture has changed
  		if ( renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture ) {

  			// fire the dispose event to get rid of stored state associated with the previously bound depth buffer
  			const depthTexture = renderTarget.depthTexture;
  			if ( renderTargetProperties.__depthDisposeCallback ) {

  				renderTargetProperties.__depthDisposeCallback();

  			}

  			// set up dispose listeners to track when the currently attached buffer is implicitly unbound
  			if ( depthTexture ) {

  				const disposeEvent = () => {

  					delete renderTargetProperties.__boundDepthTexture;
  					delete renderTargetProperties.__depthDisposeCallback;
  					depthTexture.removeEventListener( 'dispose', disposeEvent );

  				};

  				depthTexture.addEventListener( 'dispose', disposeEvent );
  				renderTargetProperties.__depthDisposeCallback = disposeEvent;

  			}

  			renderTargetProperties.__boundDepthTexture = depthTexture;

  		}

  		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

  			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

  			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

  		} else {

  			if ( isCube ) {

  				renderTargetProperties.__webglDepthbuffer = [];

  				for ( let i = 0; i < 6; i ++ ) {

  					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );

  					if ( renderTargetProperties.__webglDepthbuffer[ i ] === undefined ) {

  						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
  						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

  					} else {

  						// attach buffer if it's been created already
  						const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
  						const renderbuffer = renderTargetProperties.__webglDepthbuffer[ i ];
  						_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
  						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

  					}

  				}

  			} else {

  				state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

  				if ( renderTargetProperties.__webglDepthbuffer === undefined ) {

  					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
  					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

  				} else {

  					// attach buffer if it's been created already
  					const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
  					const renderbuffer = renderTargetProperties.__webglDepthbuffer;
  					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
  					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );

  				}

  			}

  		}

  		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

  	}

  	// rebind framebuffer with external textures
  	function rebindTextures( renderTarget, colorTexture, depthTexture ) {

  		const renderTargetProperties = properties.get( renderTarget );

  		if ( colorTexture !== undefined ) {

  			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );

  		}

  		if ( depthTexture !== undefined ) {

  			setupDepthRenderbuffer( renderTarget );

  		}

  	}

  	// Set up GL resources for the render target
  	function setupRenderTarget( renderTarget ) {

  		const texture = renderTarget.texture;

  		const renderTargetProperties = properties.get( renderTarget );
  		const textureProperties = properties.get( texture );

  		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

  		const textures = renderTarget.textures;

  		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
  		const isMultipleRenderTargets = ( textures.length > 1 );

  		if ( ! isMultipleRenderTargets ) {

  			if ( textureProperties.__webglTexture === undefined ) {

  				textureProperties.__webglTexture = _gl.createTexture();

  			}

  			textureProperties.__version = texture.version;
  			info.memory.textures ++;

  		}

  		// Setup framebuffer

  		if ( isCube ) {

  			renderTargetProperties.__webglFramebuffer = [];

  			for ( let i = 0; i < 6; i ++ ) {

  				if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

  					renderTargetProperties.__webglFramebuffer[ i ] = [];

  					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

  						renderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();

  					}

  				} else {

  					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

  				}

  			}

  		} else {

  			if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

  				renderTargetProperties.__webglFramebuffer = [];

  				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

  					renderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();

  				}

  			} else {

  				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

  			}

  			if ( isMultipleRenderTargets ) {

  				for ( let i = 0, il = textures.length; i < il; i ++ ) {

  					const attachmentProperties = properties.get( textures[ i ] );

  					if ( attachmentProperties.__webglTexture === undefined ) {

  						attachmentProperties.__webglTexture = _gl.createTexture();

  						info.memory.textures ++;

  					}

  				}

  			}

  			if ( ( renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

  				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
  				renderTargetProperties.__webglColorRenderbuffer = [];

  				state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

  				for ( let i = 0; i < textures.length; i ++ ) {

  					const texture = textures[ i ];
  					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

  					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

  					const glFormat = utils.convert( texture.format, texture.colorSpace );
  					const glType = utils.convert( texture.type );
  					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );
  					const samples = getRenderTargetSamples( renderTarget );
  					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

  				}

  				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

  				if ( renderTarget.depthBuffer ) {

  					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
  					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

  				}

  				state.bindFramebuffer( _gl.FRAMEBUFFER, null );

  			}

  		}

  		// Setup color buffer

  		if ( isCube ) {

  			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
  			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );

  			for ( let i = 0; i < 6; i ++ ) {

  				if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

  					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

  						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );

  					}

  				} else {

  					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );

  				}

  			}

  			if ( textureNeedsGenerateMipmaps( texture ) ) {

  				generateMipmap( _gl.TEXTURE_CUBE_MAP );

  			}

  			state.unbindTexture();

  		} else if ( isMultipleRenderTargets ) {

  			for ( let i = 0, il = textures.length; i < il; i ++ ) {

  				const attachment = textures[ i ];
  				const attachmentProperties = properties.get( attachment );

  				state.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );
  				setTextureParameters( _gl.TEXTURE_2D, attachment );
  				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );

  				if ( textureNeedsGenerateMipmaps( attachment ) ) {

  					generateMipmap( _gl.TEXTURE_2D );

  				}

  			}

  			state.unbindTexture();

  		} else {

  			let glTextureType = _gl.TEXTURE_2D;

  			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

  				glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;

  			}

  			state.bindTexture( glTextureType, textureProperties.__webglTexture );
  			setTextureParameters( glTextureType, texture );

  			if ( texture.mipmaps && texture.mipmaps.length > 0 ) {

  				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

  					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );

  				}

  			} else {

  				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );

  			}

  			if ( textureNeedsGenerateMipmaps( texture ) ) {

  				generateMipmap( glTextureType );

  			}

  			state.unbindTexture();

  		}

  		// Setup depth and stencil buffers

  		if ( renderTarget.depthBuffer ) {

  			setupDepthRenderbuffer( renderTarget );

  		}

  	}

  	function updateRenderTargetMipmap( renderTarget ) {

  		const textures = renderTarget.textures;

  		for ( let i = 0, il = textures.length; i < il; i ++ ) {

  			const texture = textures[ i ];

  			if ( textureNeedsGenerateMipmaps( texture ) ) {

  				const targetType = getTargetType( renderTarget );
  				const webglTexture = properties.get( texture ).__webglTexture;

  				state.bindTexture( targetType, webglTexture );
  				generateMipmap( targetType );
  				state.unbindTexture();

  			}

  		}

  	}

  	const invalidationArrayRead = [];
  	const invalidationArrayDraw = [];

  	function updateMultisampleRenderTarget( renderTarget ) {

  		if ( renderTarget.samples > 0 ) {

  			if ( useMultisampledRTT( renderTarget ) === false ) {

  				const textures = renderTarget.textures;
  				const width = renderTarget.width;
  				const height = renderTarget.height;
  				let mask = _gl.COLOR_BUFFER_BIT;
  				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
  				const renderTargetProperties = properties.get( renderTarget );
  				const isMultipleRenderTargets = ( textures.length > 1 );

  				// If MRT we need to remove FBO attachments
  				if ( isMultipleRenderTargets ) {

  					for ( let i = 0; i < textures.length; i ++ ) {

  						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
  						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );

  						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
  						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );

  					}

  				}

  				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
  				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

  				for ( let i = 0; i < textures.length; i ++ ) {

  					if ( renderTarget.resolveDepthBuffer ) {

  						if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;

  						// resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)

  						if ( renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

  					}

  					if ( isMultipleRenderTargets ) {

  						_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

  						const webglTexture = properties.get( textures[ i ] ).__webglTexture;
  						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );

  					}

  					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

  					if ( supportsInvalidateFramebuffer === true ) {

  						invalidationArrayRead.length = 0;
  						invalidationArrayDraw.length = 0;

  						invalidationArrayRead.push( _gl.COLOR_ATTACHMENT0 + i );

  						if ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false ) {

  							invalidationArrayRead.push( depthStyle );
  							invalidationArrayDraw.push( depthStyle );

  							_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, invalidationArrayDraw );

  						}

  						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArrayRead );

  					}

  				}

  				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
  				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

  				// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
  				if ( isMultipleRenderTargets ) {

  					for ( let i = 0; i < textures.length; i ++ ) {

  						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
  						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

  						const webglTexture = properties.get( textures[ i ] ).__webglTexture;

  						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
  						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );

  					}

  				}

  				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

  			} else {

  				if ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer ) {

  					const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;

  					_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );

  				}

  			}

  		}

  	}

  	function getRenderTargetSamples( renderTarget ) {

  		return Math.min( capabilities.maxSamples, renderTarget.samples );

  	}

  	function useMultisampledRTT( renderTarget ) {

  		const renderTargetProperties = properties.get( renderTarget );

  		return renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

  	}

  	function updateVideoTexture( texture ) {

  		const frame = info.render.frame;

  		// Check the last frame we updated the VideoTexture

  		if ( _videoTextures.get( texture ) !== frame ) {

  			_videoTextures.set( texture, frame );
  			texture.update();

  		}

  	}

  	function verifyColorSpace( texture, image ) {

  		const colorSpace = texture.colorSpace;
  		const format = texture.format;
  		const type = texture.type;

  		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true ) return image;

  		if ( colorSpace !== LinearSRGBColorSpace$1 && colorSpace !== NoColorSpace$1 ) {

  			// sRGB

  			if ( ColorManagement$1.getTransfer( colorSpace ) === SRGBTransfer$1 ) {

  				// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

  				if ( format !== RGBAFormat$1 || type !== UnsignedByteType$1 ) {

  					console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

  				}

  			} else {

  				console.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );

  			}

  		}

  		return image;

  	}

  	function getDimensions( image ) {

  		if ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {

  			// if intrinsic data are not available, fallback to width/height

  			_imageDimensions.width = image.naturalWidth || image.width;
  			_imageDimensions.height = image.naturalHeight || image.height;

  		} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {

  			_imageDimensions.width = image.displayWidth;
  			_imageDimensions.height = image.displayHeight;

  		} else {

  			_imageDimensions.width = image.width;
  			_imageDimensions.height = image.height;

  		}

  		return _imageDimensions;

  	}

  	//

  	this.allocateTextureUnit = allocateTextureUnit;
  	this.resetTextureUnits = resetTextureUnits;

  	this.setTexture2D = setTexture2D;
  	this.setTexture2DArray = setTexture2DArray;
  	this.setTexture3D = setTexture3D;
  	this.setTextureCube = setTextureCube;
  	this.rebindTextures = rebindTextures;
  	this.setupRenderTarget = setupRenderTarget;
  	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
  	this.setupFrameBufferTexture = setupFrameBufferTexture;
  	this.useMultisampledRTT = useMultisampledRTT;

  }

  function WebGLUtils$1( gl, extensions ) {

  	function convert( p, colorSpace = NoColorSpace$1 ) {

  		let extension;

  		const transfer = ColorManagement$1.getTransfer( colorSpace );

  		if ( p === UnsignedByteType$1 ) return gl.UNSIGNED_BYTE;
  		if ( p === UnsignedShort4444Type$1 ) return gl.UNSIGNED_SHORT_4_4_4_4;
  		if ( p === UnsignedShort5551Type$1 ) return gl.UNSIGNED_SHORT_5_5_5_1;
  		if ( p === UnsignedInt5999Type$1 ) return gl.UNSIGNED_INT_5_9_9_9_REV;

  		if ( p === ByteType$1 ) return gl.BYTE;
  		if ( p === ShortType$1 ) return gl.SHORT;
  		if ( p === UnsignedShortType$1 ) return gl.UNSIGNED_SHORT;
  		if ( p === IntType$1 ) return gl.INT;
  		if ( p === UnsignedIntType$1 ) return gl.UNSIGNED_INT;
  		if ( p === FloatType$1 ) return gl.FLOAT;
  		if ( p === HalfFloatType$1 ) return gl.HALF_FLOAT;

  		if ( p === AlphaFormat$1 ) return gl.ALPHA;
  		if ( p === RGBFormat$1 ) return gl.RGB;
  		if ( p === RGBAFormat$1 ) return gl.RGBA;
  		if ( p === LuminanceFormat$1 ) return gl.LUMINANCE;
  		if ( p === LuminanceAlphaFormat$1 ) return gl.LUMINANCE_ALPHA;
  		if ( p === DepthFormat$1 ) return gl.DEPTH_COMPONENT;
  		if ( p === DepthStencilFormat$1 ) return gl.DEPTH_STENCIL;

  		// WebGL2 formats.

  		if ( p === RedFormat$1 ) return gl.RED;
  		if ( p === RedIntegerFormat$1 ) return gl.RED_INTEGER;
  		if ( p === RGFormat$1 ) return gl.RG;
  		if ( p === RGIntegerFormat$1 ) return gl.RG_INTEGER;
  		if ( p === RGBAIntegerFormat$1 ) return gl.RGBA_INTEGER;

  		// S3TC

  		if ( p === RGB_S3TC_DXT1_Format$1 || p === RGBA_S3TC_DXT1_Format$1 || p === RGBA_S3TC_DXT3_Format$1 || p === RGBA_S3TC_DXT5_Format$1 ) {

  			if ( transfer === SRGBTransfer$1 ) {

  				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

  				if ( extension !== null ) {

  					if ( p === RGB_S3TC_DXT1_Format$1 ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT1_Format$1 ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT3_Format$1 ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
  					if ( p === RGBA_S3TC_DXT5_Format$1 ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

  				} else {

  					return null;

  				}

  			} else {

  				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

  				if ( extension !== null ) {

  					if ( p === RGB_S3TC_DXT1_Format$1 ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT1_Format$1 ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT3_Format$1 ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
  					if ( p === RGBA_S3TC_DXT5_Format$1 ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

  				} else {

  					return null;

  				}

  			}

  		}

  		// PVRTC

  		if ( p === RGB_PVRTC_4BPPV1_Format$1 || p === RGB_PVRTC_2BPPV1_Format$1 || p === RGBA_PVRTC_4BPPV1_Format$1 || p === RGBA_PVRTC_2BPPV1_Format$1 ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  			if ( extension !== null ) {

  				if ( p === RGB_PVRTC_4BPPV1_Format$1 ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  				if ( p === RGB_PVRTC_2BPPV1_Format$1 ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  				if ( p === RGBA_PVRTC_4BPPV1_Format$1 ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  				if ( p === RGBA_PVRTC_2BPPV1_Format$1 ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

  			} else {

  				return null;

  			}

  		}

  		// ETC

  		if ( p === RGB_ETC1_Format$1 || p === RGB_ETC2_Format$1 || p === RGBA_ETC2_EAC_Format$1 ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

  			if ( extension !== null ) {

  				if ( p === RGB_ETC1_Format$1 || p === RGB_ETC2_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
  				if ( p === RGBA_ETC2_EAC_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

  			} else {

  				return null;

  			}

  		}

  		// ASTC

  		if ( p === RGBA_ASTC_4x4_Format$1 || p === RGBA_ASTC_5x4_Format$1 || p === RGBA_ASTC_5x5_Format$1 ||
  			p === RGBA_ASTC_6x5_Format$1 || p === RGBA_ASTC_6x6_Format$1 || p === RGBA_ASTC_8x5_Format$1 ||
  			p === RGBA_ASTC_8x6_Format$1 || p === RGBA_ASTC_8x8_Format$1 || p === RGBA_ASTC_10x5_Format$1 ||
  			p === RGBA_ASTC_10x6_Format$1 || p === RGBA_ASTC_10x8_Format$1 || p === RGBA_ASTC_10x10_Format$1 ||
  			p === RGBA_ASTC_12x10_Format$1 || p === RGBA_ASTC_12x12_Format$1 ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_ASTC_4x4_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
  				if ( p === RGBA_ASTC_5x4_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
  				if ( p === RGBA_ASTC_5x5_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
  				if ( p === RGBA_ASTC_6x5_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
  				if ( p === RGBA_ASTC_6x6_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
  				if ( p === RGBA_ASTC_8x5_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
  				if ( p === RGBA_ASTC_8x6_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
  				if ( p === RGBA_ASTC_8x8_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
  				if ( p === RGBA_ASTC_10x5_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
  				if ( p === RGBA_ASTC_10x6_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
  				if ( p === RGBA_ASTC_10x8_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
  				if ( p === RGBA_ASTC_10x10_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
  				if ( p === RGBA_ASTC_12x10_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
  				if ( p === RGBA_ASTC_12x12_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

  			} else {

  				return null;

  			}

  		}

  		// BPTC

  		if ( p === RGBA_BPTC_Format$1 || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {

  			extension = extensions.get( 'EXT_texture_compression_bptc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_BPTC_Format$1 ) return ( transfer === SRGBTransfer$1 ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
  				if ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
  				if ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;

  			} else {

  				return null;

  			}

  		}

  		// RGTC

  		if ( p === RED_RGTC1_Format$1 || p === SIGNED_RED_RGTC1_Format$1 || p === RED_GREEN_RGTC2_Format$1 || p === SIGNED_RED_GREEN_RGTC2_Format$1 ) {

  			extension = extensions.get( 'EXT_texture_compression_rgtc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_BPTC_Format$1 ) return extension.COMPRESSED_RED_RGTC1_EXT;
  				if ( p === SIGNED_RED_RGTC1_Format$1 ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
  				if ( p === RED_GREEN_RGTC2_Format$1 ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
  				if ( p === SIGNED_RED_GREEN_RGTC2_Format$1 ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

  			} else {

  				return null;

  			}

  		}

  		//

  		if ( p === UnsignedInt248Type$1 ) return gl.UNSIGNED_INT_24_8;

  		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

  		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

  	}

  	return { convert: convert };

  }

  class ArrayCamera extends PerspectiveCamera$1 {

  	constructor( array = [] ) {

  		super();

  		this.isArrayCamera = true;

  		this.cameras = array;

  	}

  }

  let Group$1 = class Group extends Object3D$1 {

  	constructor() {

  		super();

  		this.isGroup = true;

  		this.type = 'Group';

  	}

  };

  const _moveEvent = { type: 'move' };

  class WebXRController {

  	constructor() {

  		this._targetRay = null;
  		this._grip = null;
  		this._hand = null;

  	}

  	getHandSpace() {

  		if ( this._hand === null ) {

  			this._hand = new Group$1();
  			this._hand.matrixAutoUpdate = false;
  			this._hand.visible = false;

  			this._hand.joints = {};
  			this._hand.inputState = { pinching: false };

  		}

  		return this._hand;

  	}

  	getTargetRaySpace() {

  		if ( this._targetRay === null ) {

  			this._targetRay = new Group$1();
  			this._targetRay.matrixAutoUpdate = false;
  			this._targetRay.visible = false;
  			this._targetRay.hasLinearVelocity = false;
  			this._targetRay.linearVelocity = new Vector3$1();
  			this._targetRay.hasAngularVelocity = false;
  			this._targetRay.angularVelocity = new Vector3$1();

  		}

  		return this._targetRay;

  	}

  	getGripSpace() {

  		if ( this._grip === null ) {

  			this._grip = new Group$1();
  			this._grip.matrixAutoUpdate = false;
  			this._grip.visible = false;
  			this._grip.hasLinearVelocity = false;
  			this._grip.linearVelocity = new Vector3$1();
  			this._grip.hasAngularVelocity = false;
  			this._grip.angularVelocity = new Vector3$1();

  		}

  		return this._grip;

  	}

  	dispatchEvent( event ) {

  		if ( this._targetRay !== null ) {

  			this._targetRay.dispatchEvent( event );

  		}

  		if ( this._grip !== null ) {

  			this._grip.dispatchEvent( event );

  		}

  		if ( this._hand !== null ) {

  			this._hand.dispatchEvent( event );

  		}

  		return this;

  	}

  	connect( inputSource ) {

  		if ( inputSource && inputSource.hand ) {

  			const hand = this._hand;

  			if ( hand ) {

  				for ( const inputjoint of inputSource.hand.values() ) {

  					// Initialize hand with joints when connected
  					this._getHandJoint( hand, inputjoint );

  				}

  			}

  		}

  		this.dispatchEvent( { type: 'connected', data: inputSource } );

  		return this;

  	}

  	disconnect( inputSource ) {

  		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

  		if ( this._targetRay !== null ) {

  			this._targetRay.visible = false;

  		}

  		if ( this._grip !== null ) {

  			this._grip.visible = false;

  		}

  		if ( this._hand !== null ) {

  			this._hand.visible = false;

  		}

  		return this;

  	}

  	update( inputSource, frame, referenceSpace ) {

  		let inputPose = null;
  		let gripPose = null;
  		let handPose = null;

  		const targetRay = this._targetRay;
  		const grip = this._grip;
  		const hand = this._hand;

  		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

  			if ( hand && inputSource.hand ) {

  				handPose = true;

  				for ( const inputjoint of inputSource.hand.values() ) {

  					// Update the joints groups with the XRJoint poses
  					const jointPose = frame.getJointPose( inputjoint, referenceSpace );

  					// The transform of this joint will be updated with the joint pose on each frame
  					const joint = this._getHandJoint( hand, inputjoint );

  					if ( jointPose !== null ) {

  						joint.matrix.fromArray( jointPose.transform.matrix );
  						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
  						joint.matrixWorldNeedsUpdate = true;
  						joint.jointRadius = jointPose.radius;

  					}

  					joint.visible = jointPose !== null;

  				}

  				// Custom events

  				// Check pinchz
  				const indexTip = hand.joints[ 'index-finger-tip' ];
  				const thumbTip = hand.joints[ 'thumb-tip' ];
  				const distance = indexTip.position.distanceTo( thumbTip.position );

  				const distanceToPinch = 0.02;
  				const threshold = 0.005;

  				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

  					hand.inputState.pinching = false;
  					this.dispatchEvent( {
  						type: 'pinchend',
  						handedness: inputSource.handedness,
  						target: this
  					} );

  				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

  					hand.inputState.pinching = true;
  					this.dispatchEvent( {
  						type: 'pinchstart',
  						handedness: inputSource.handedness,
  						target: this
  					} );

  				}

  			} else {

  				if ( grip !== null && inputSource.gripSpace ) {

  					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

  					if ( gripPose !== null ) {

  						grip.matrix.fromArray( gripPose.transform.matrix );
  						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
  						grip.matrixWorldNeedsUpdate = true;

  						if ( gripPose.linearVelocity ) {

  							grip.hasLinearVelocity = true;
  							grip.linearVelocity.copy( gripPose.linearVelocity );

  						} else {

  							grip.hasLinearVelocity = false;

  						}

  						if ( gripPose.angularVelocity ) {

  							grip.hasAngularVelocity = true;
  							grip.angularVelocity.copy( gripPose.angularVelocity );

  						} else {

  							grip.hasAngularVelocity = false;

  						}

  					}

  				}

  			}

  			if ( targetRay !== null ) {

  				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

  				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
  				if ( inputPose === null && gripPose !== null ) {

  					inputPose = gripPose;

  				}

  				if ( inputPose !== null ) {

  					targetRay.matrix.fromArray( inputPose.transform.matrix );
  					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
  					targetRay.matrixWorldNeedsUpdate = true;

  					if ( inputPose.linearVelocity ) {

  						targetRay.hasLinearVelocity = true;
  						targetRay.linearVelocity.copy( inputPose.linearVelocity );

  					} else {

  						targetRay.hasLinearVelocity = false;

  					}

  					if ( inputPose.angularVelocity ) {

  						targetRay.hasAngularVelocity = true;
  						targetRay.angularVelocity.copy( inputPose.angularVelocity );

  					} else {

  						targetRay.hasAngularVelocity = false;

  					}

  					this.dispatchEvent( _moveEvent );

  				}

  			}


  		}

  		if ( targetRay !== null ) {

  			targetRay.visible = ( inputPose !== null );

  		}

  		if ( grip !== null ) {

  			grip.visible = ( gripPose !== null );

  		}

  		if ( hand !== null ) {

  			hand.visible = ( handPose !== null );

  		}

  		return this;

  	}

  	// private method

  	_getHandJoint( hand, inputjoint ) {

  		if ( hand.joints[ inputjoint.jointName ] === undefined ) {

  			const joint = new Group$1();
  			joint.matrixAutoUpdate = false;
  			joint.visible = false;
  			hand.joints[ inputjoint.jointName ] = joint;

  			hand.add( joint );

  		}

  		return hand.joints[ inputjoint.jointName ];

  	}

  }

  const _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;

  const _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;

  class WebXRDepthSensing {

  	constructor() {

  		this.texture = null;
  		this.mesh = null;

  		this.depthNear = 0;
  		this.depthFar = 0;

  	}

  	init( renderer, depthData, renderState ) {

  		if ( this.texture === null ) {

  			const texture = new Texture$1();

  			const texProps = renderer.properties.get( texture );
  			texProps.__webglTexture = depthData.texture;

  			if ( ( depthData.depthNear != renderState.depthNear ) || ( depthData.depthFar != renderState.depthFar ) ) {

  				this.depthNear = depthData.depthNear;
  				this.depthFar = depthData.depthFar;

  			}

  			this.texture = texture;

  		}

  	}

  	getMesh( cameraXR ) {

  		if ( this.texture !== null ) {

  			if ( this.mesh === null ) {

  				const viewport = cameraXR.cameras[ 0 ].viewport;
  				const material = new ShaderMaterial$1( {
  					vertexShader: _occlusion_vertex,
  					fragmentShader: _occlusion_fragment,
  					uniforms: {
  						depthColor: { value: this.texture },
  						depthWidth: { value: viewport.z },
  						depthHeight: { value: viewport.w }
  					}
  				} );

  				this.mesh = new Mesh$1( new PlaneGeometry( 20, 20 ), material );

  			}

  		}

  		return this.mesh;

  	}

  	reset() {

  		this.texture = null;
  		this.mesh = null;

  	}

  	getDepthTexture() {

  		return this.texture;

  	}

  }

  class WebXRManager extends EventDispatcher$1 {

  	constructor( renderer, gl ) {

  		super();

  		const scope = this;

  		let session = null;

  		let framebufferScaleFactor = 1.0;

  		let referenceSpace = null;
  		let referenceSpaceType = 'local-floor';
  		// Set default foveation to maximum.
  		let foveation = 1.0;
  		let customReferenceSpace = null;

  		let pose = null;
  		let glBinding = null;
  		let glProjLayer = null;
  		let glBaseLayer = null;
  		let xrFrame = null;

  		const depthSensing = new WebXRDepthSensing();
  		const attributes = gl.getContextAttributes();

  		let initialRenderTarget = null;
  		let newRenderTarget = null;

  		const controllers = [];
  		const controllerInputSources = [];

  		const currentSize = new Vector2$1();
  		let currentPixelRatio = null;

  		//

  		const cameraL = new PerspectiveCamera$1();
  		cameraL.viewport = new Vector4$1();

  		const cameraR = new PerspectiveCamera$1();
  		cameraR.viewport = new Vector4$1();

  		const cameras = [ cameraL, cameraR ];

  		const cameraXR = new ArrayCamera();

  		let _currentDepthNear = null;
  		let _currentDepthFar = null;

  		//

  		this.cameraAutoUpdate = true;
  		this.enabled = false;

  		this.isPresenting = false;

  		this.getController = function ( index ) {

  			let controller = controllers[ index ];

  			if ( controller === undefined ) {

  				controller = new WebXRController();
  				controllers[ index ] = controller;

  			}

  			return controller.getTargetRaySpace();

  		};

  		this.getControllerGrip = function ( index ) {

  			let controller = controllers[ index ];

  			if ( controller === undefined ) {

  				controller = new WebXRController();
  				controllers[ index ] = controller;

  			}

  			return controller.getGripSpace();

  		};

  		this.getHand = function ( index ) {

  			let controller = controllers[ index ];

  			if ( controller === undefined ) {

  				controller = new WebXRController();
  				controllers[ index ] = controller;

  			}

  			return controller.getHandSpace();

  		};

  		//

  		function onSessionEvent( event ) {

  			const controllerIndex = controllerInputSources.indexOf( event.inputSource );

  			if ( controllerIndex === - 1 ) {

  				return;

  			}

  			const controller = controllers[ controllerIndex ];

  			if ( controller !== undefined ) {

  				controller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );
  				controller.dispatchEvent( { type: event.type, data: event.inputSource } );

  			}

  		}

  		function onSessionEnd() {

  			session.removeEventListener( 'select', onSessionEvent );
  			session.removeEventListener( 'selectstart', onSessionEvent );
  			session.removeEventListener( 'selectend', onSessionEvent );
  			session.removeEventListener( 'squeeze', onSessionEvent );
  			session.removeEventListener( 'squeezestart', onSessionEvent );
  			session.removeEventListener( 'squeezeend', onSessionEvent );
  			session.removeEventListener( 'end', onSessionEnd );
  			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

  			for ( let i = 0; i < controllers.length; i ++ ) {

  				const inputSource = controllerInputSources[ i ];

  				if ( inputSource === null ) continue;

  				controllerInputSources[ i ] = null;

  				controllers[ i ].disconnect( inputSource );

  			}

  			_currentDepthNear = null;
  			_currentDepthFar = null;

  			depthSensing.reset();

  			// restore framebuffer/rendering state

  			renderer.setRenderTarget( initialRenderTarget );

  			glBaseLayer = null;
  			glProjLayer = null;
  			glBinding = null;
  			session = null;
  			newRenderTarget = null;

  			//

  			animation.stop();

  			scope.isPresenting = false;

  			renderer.setPixelRatio( currentPixelRatio );
  			renderer.setSize( currentSize.width, currentSize.height, false );

  			scope.dispatchEvent( { type: 'sessionend' } );

  		}

  		this.setFramebufferScaleFactor = function ( value ) {

  			framebufferScaleFactor = value;

  			if ( scope.isPresenting === true ) {

  				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

  			}

  		};

  		this.setReferenceSpaceType = function ( value ) {

  			referenceSpaceType = value;

  			if ( scope.isPresenting === true ) {

  				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

  			}

  		};

  		this.getReferenceSpace = function () {

  			return customReferenceSpace || referenceSpace;

  		};

  		this.setReferenceSpace = function ( space ) {

  			customReferenceSpace = space;

  		};

  		this.getBaseLayer = function () {

  			return glProjLayer !== null ? glProjLayer : glBaseLayer;

  		};

  		this.getBinding = function () {

  			return glBinding;

  		};

  		this.getFrame = function () {

  			return xrFrame;

  		};

  		this.getSession = function () {

  			return session;

  		};

  		this.setSession = async function ( value ) {

  			session = value;

  			if ( session !== null ) {

  				initialRenderTarget = renderer.getRenderTarget();

  				session.addEventListener( 'select', onSessionEvent );
  				session.addEventListener( 'selectstart', onSessionEvent );
  				session.addEventListener( 'selectend', onSessionEvent );
  				session.addEventListener( 'squeeze', onSessionEvent );
  				session.addEventListener( 'squeezestart', onSessionEvent );
  				session.addEventListener( 'squeezeend', onSessionEvent );
  				session.addEventListener( 'end', onSessionEnd );
  				session.addEventListener( 'inputsourceschange', onInputSourcesChange );

  				if ( attributes.xrCompatible !== true ) {

  					await gl.makeXRCompatible();

  				}

  				currentPixelRatio = renderer.getPixelRatio();
  				renderer.getSize( currentSize );

  				if ( session.renderState.layers === undefined ) {

  					const layerInit = {
  						antialias: attributes.antialias,
  						alpha: true,
  						depth: attributes.depth,
  						stencil: attributes.stencil,
  						framebufferScaleFactor: framebufferScaleFactor
  					};

  					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

  					session.updateRenderState( { baseLayer: glBaseLayer } );

  					renderer.setPixelRatio( 1 );
  					renderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );

  					newRenderTarget = new WebGLRenderTarget$1(
  						glBaseLayer.framebufferWidth,
  						glBaseLayer.framebufferHeight,
  						{
  							format: RGBAFormat$1,
  							type: UnsignedByteType$1,
  							colorSpace: renderer.outputColorSpace,
  							stencilBuffer: attributes.stencil
  						}
  					);

  				} else {

  					let depthFormat = null;
  					let depthType = null;
  					let glDepthFormat = null;

  					if ( attributes.depth ) {

  						glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
  						depthFormat = attributes.stencil ? DepthStencilFormat$1 : DepthFormat$1;
  						depthType = attributes.stencil ? UnsignedInt248Type$1 : UnsignedIntType$1;

  					}

  					const projectionlayerInit = {
  						colorFormat: gl.RGBA8,
  						depthFormat: glDepthFormat,
  						scaleFactor: framebufferScaleFactor
  					};

  					glBinding = new XRWebGLBinding( session, gl );

  					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

  					session.updateRenderState( { layers: [ glProjLayer ] } );

  					renderer.setPixelRatio( 1 );
  					renderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );

  					newRenderTarget = new WebGLRenderTarget$1(
  						glProjLayer.textureWidth,
  						glProjLayer.textureHeight,
  						{
  							format: RGBAFormat$1,
  							type: UnsignedByteType$1,
  							depthTexture: new DepthTexture$1( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
  							stencilBuffer: attributes.stencil,
  							colorSpace: renderer.outputColorSpace,
  							samples: attributes.antialias ? 4 : 0,
  							resolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false )
  						} );

  				}

  				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

  				this.setFoveation( foveation );

  				customReferenceSpace = null;
  				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

  				animation.setContext( session );
  				animation.start();

  				scope.isPresenting = true;

  				scope.dispatchEvent( { type: 'sessionstart' } );

  			}

  		};

  		this.getEnvironmentBlendMode = function () {

  			if ( session !== null ) {

  				return session.environmentBlendMode;

  			}

  		};

  		this.getDepthTexture = function () {

  			return depthSensing.getDepthTexture();

  		};

  		function onInputSourcesChange( event ) {

  			// Notify disconnected

  			for ( let i = 0; i < event.removed.length; i ++ ) {

  				const inputSource = event.removed[ i ];
  				const index = controllerInputSources.indexOf( inputSource );

  				if ( index >= 0 ) {

  					controllerInputSources[ index ] = null;
  					controllers[ index ].disconnect( inputSource );

  				}

  			}

  			// Notify connected

  			for ( let i = 0; i < event.added.length; i ++ ) {

  				const inputSource = event.added[ i ];

  				let controllerIndex = controllerInputSources.indexOf( inputSource );

  				if ( controllerIndex === - 1 ) {

  					// Assign input source a controller that currently has no input source

  					for ( let i = 0; i < controllers.length; i ++ ) {

  						if ( i >= controllerInputSources.length ) {

  							controllerInputSources.push( inputSource );
  							controllerIndex = i;
  							break;

  						} else if ( controllerInputSources[ i ] === null ) {

  							controllerInputSources[ i ] = inputSource;
  							controllerIndex = i;
  							break;

  						}

  					}

  					// If all controllers do currently receive input we ignore new ones

  					if ( controllerIndex === - 1 ) break;

  				}

  				const controller = controllers[ controllerIndex ];

  				if ( controller ) {

  					controller.connect( inputSource );

  				}

  			}

  		}

  		//

  		const cameraLPos = new Vector3$1();
  		const cameraRPos = new Vector3$1();

  		/**
  		 * Assumes 2 cameras that are parallel and share an X-axis, and that
  		 * the cameras' projection and world matrices have already been set.
  		 * And that near and far planes are identical for both cameras.
  		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
  		 */
  		function setProjectionFromUnion( camera, cameraL, cameraR ) {

  			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
  			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

  			const ipd = cameraLPos.distanceTo( cameraRPos );

  			const projL = cameraL.projectionMatrix.elements;
  			const projR = cameraR.projectionMatrix.elements;

  			// VR systems will have identical far and near planes, and
  			// most likely identical top and bottom frustum extents.
  			// Use the left camera for these values.
  			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
  			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
  			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
  			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

  			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
  			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
  			const left = near * leftFov;
  			const right = near * rightFov;

  			// Calculate the new camera's position offset from the
  			// left camera. xOffset should be roughly half `ipd`.
  			const zOffset = ipd / ( - leftFov + rightFov );
  			const xOffset = zOffset * - leftFov;

  			// TODO: Better way to apply this offset?
  			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
  			camera.translateX( xOffset );
  			camera.translateZ( zOffset );
  			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
  			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

  			// Check if the projection uses an infinite far plane.
  			if ( projL[ 10 ] === - 1.0 ) {

  				// Use the projection matrix from the left eye.
  				// The camera offset is sufficient to include the view volumes
  				// of both eyes (assuming symmetric projections).
  				camera.projectionMatrix.copy( cameraL.projectionMatrix );
  				camera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );

  			} else {

  				// Find the union of the frustum values of the cameras and scale
  				// the values so that the near plane's position does not change in world space,
  				// although must now be relative to the new union camera.
  				const near2 = near + zOffset;
  				const far2 = far + zOffset;
  				const left2 = left - xOffset;
  				const right2 = right + ( ipd - xOffset );
  				const top2 = topFov * far / far2 * near2;
  				const bottom2 = bottomFov * far / far2 * near2;

  				camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
  				camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();

  			}

  		}

  		function updateCamera( camera, parent ) {

  			if ( parent === null ) {

  				camera.matrixWorld.copy( camera.matrix );

  			} else {

  				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

  			}

  			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

  		}

  		this.updateCamera = function ( camera ) {

  			if ( session === null ) return;

  			let depthNear = camera.near;
  			let depthFar = camera.far;

  			if ( depthSensing.texture !== null ) {

  				if ( depthSensing.depthNear > 0 ) depthNear = depthSensing.depthNear;
  				if ( depthSensing.depthFar > 0 ) depthFar = depthSensing.depthFar;

  			}

  			cameraXR.near = cameraR.near = cameraL.near = depthNear;
  			cameraXR.far = cameraR.far = cameraL.far = depthFar;

  			if ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {

  				// Note that the new renderState won't apply until the next frame. See #18320

  				session.updateRenderState( {
  					depthNear: cameraXR.near,
  					depthFar: cameraXR.far
  				} );

  				_currentDepthNear = cameraXR.near;
  				_currentDepthFar = cameraXR.far;

  			}

  			cameraL.layers.mask = camera.layers.mask | 0b010;
  			cameraR.layers.mask = camera.layers.mask | 0b100;
  			cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;

  			const parent = camera.parent;
  			const cameras = cameraXR.cameras;

  			updateCamera( cameraXR, parent );

  			for ( let i = 0; i < cameras.length; i ++ ) {

  				updateCamera( cameras[ i ], parent );

  			}

  			// update projection matrix for proper view frustum culling

  			if ( cameras.length === 2 ) {

  				setProjectionFromUnion( cameraXR, cameraL, cameraR );

  			} else {

  				// assume single camera setup (AR)

  				cameraXR.projectionMatrix.copy( cameraL.projectionMatrix );

  			}

  			// update user camera and its children

  			updateUserCamera( camera, cameraXR, parent );

  		};

  		function updateUserCamera( camera, cameraXR, parent ) {

  			if ( parent === null ) {

  				camera.matrix.copy( cameraXR.matrixWorld );

  			} else {

  				camera.matrix.copy( parent.matrixWorld );
  				camera.matrix.invert();
  				camera.matrix.multiply( cameraXR.matrixWorld );

  			}

  			camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
  			camera.updateMatrixWorld( true );

  			camera.projectionMatrix.copy( cameraXR.projectionMatrix );
  			camera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );

  			if ( camera.isPerspectiveCamera ) {

  				camera.fov = RAD2DEG$1 * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );
  				camera.zoom = 1;

  			}

  		}

  		this.getCamera = function () {

  			return cameraXR;

  		};

  		this.getFoveation = function () {

  			if ( glProjLayer === null && glBaseLayer === null ) {

  				return undefined;

  			}

  			return foveation;

  		};

  		this.setFoveation = function ( value ) {

  			// 0 = no foveation = full resolution
  			// 1 = maximum foveation = the edges render at lower resolution

  			foveation = value;

  			if ( glProjLayer !== null ) {

  				glProjLayer.fixedFoveation = value;

  			}

  			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

  				glBaseLayer.fixedFoveation = value;

  			}

  		};

  		this.hasDepthSensing = function () {

  			return depthSensing.texture !== null;

  		};

  		this.getDepthSensingMesh = function () {

  			return depthSensing.getMesh( cameraXR );

  		};

  		// Animation Loop

  		let onAnimationFrameCallback = null;

  		function onAnimationFrame( time, frame ) {

  			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
  			xrFrame = frame;

  			if ( pose !== null ) {

  				const views = pose.views;

  				if ( glBaseLayer !== null ) {

  					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
  					renderer.setRenderTarget( newRenderTarget );

  				}

  				let cameraXRNeedsUpdate = false;

  				// check if it's necessary to rebuild cameraXR's camera list

  				if ( views.length !== cameraXR.cameras.length ) {

  					cameraXR.cameras.length = 0;
  					cameraXRNeedsUpdate = true;

  				}

  				for ( let i = 0; i < views.length; i ++ ) {

  					const view = views[ i ];

  					let viewport = null;

  					if ( glBaseLayer !== null ) {

  						viewport = glBaseLayer.getViewport( view );

  					} else {

  						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
  						viewport = glSubImage.viewport;

  						// For side-by-side projection, we only produce a single texture for both eyes.
  						if ( i === 0 ) {

  							renderer.setRenderTargetTextures(
  								newRenderTarget,
  								glSubImage.colorTexture,
  								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );

  							renderer.setRenderTarget( newRenderTarget );

  						}

  					}

  					let camera = cameras[ i ];

  					if ( camera === undefined ) {

  						camera = new PerspectiveCamera$1();
  						camera.layers.enable( i );
  						camera.viewport = new Vector4$1();
  						cameras[ i ] = camera;

  					}

  					camera.matrix.fromArray( view.transform.matrix );
  					camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
  					camera.projectionMatrix.fromArray( view.projectionMatrix );
  					camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();
  					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

  					if ( i === 0 ) {

  						cameraXR.matrix.copy( camera.matrix );
  						cameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );

  					}

  					if ( cameraXRNeedsUpdate === true ) {

  						cameraXR.cameras.push( camera );

  					}

  				}

  				//

  				const enabledFeatures = session.enabledFeatures;

  				if ( enabledFeatures && enabledFeatures.includes( 'depth-sensing' ) ) {

  					const depthData = glBinding.getDepthInformation( views[ 0 ] );

  					if ( depthData && depthData.isValid && depthData.texture ) {

  						depthSensing.init( renderer, depthData, session.renderState );

  					}

  				}

  			}

  			//

  			for ( let i = 0; i < controllers.length; i ++ ) {

  				const inputSource = controllerInputSources[ i ];
  				const controller = controllers[ i ];

  				if ( inputSource !== null && controller !== undefined ) {

  					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

  				}

  			}

  			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

  			if ( frame.detectedPlanes ) {

  				scope.dispatchEvent( { type: 'planesdetected', data: frame } );

  			}

  			xrFrame = null;

  		}

  		const animation = new WebGLAnimation();

  		animation.setAnimationLoop( onAnimationFrame );

  		this.setAnimationLoop = function ( callback ) {

  			onAnimationFrameCallback = callback;

  		};

  		this.dispose = function () {};

  	}

  }

  const _e1$2 = /*@__PURE__*/ new Euler$1();
  const _m1$5 = /*@__PURE__*/ new Matrix4$1();

  function WebGLMaterials( renderer, properties ) {

  	function refreshTransformUniform( map, uniform ) {

  		if ( map.matrixAutoUpdate === true ) {

  			map.updateMatrix();

  		}

  		uniform.value.copy( map.matrix );

  	}

  	function refreshFogUniforms( uniforms, fog ) {

  		fog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );

  		if ( fog.isFog ) {

  			uniforms.fogNear.value = fog.near;
  			uniforms.fogFar.value = fog.far;

  		} else if ( fog.isFogExp2 ) {

  			uniforms.fogDensity.value = fog.density;

  		}

  	}

  	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

  		if ( material.isMeshBasicMaterial ) {

  			refreshUniformsCommon( uniforms, material );

  		} else if ( material.isMeshLambertMaterial ) {

  			refreshUniformsCommon( uniforms, material );

  		} else if ( material.isMeshToonMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsToon( uniforms, material );

  		} else if ( material.isMeshPhongMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsPhong( uniforms, material );

  		} else if ( material.isMeshStandardMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsStandard( uniforms, material );

  			if ( material.isMeshPhysicalMaterial ) {

  				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

  			}

  		} else if ( material.isMeshMatcapMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsMatcap( uniforms, material );

  		} else if ( material.isMeshDepthMaterial ) {

  			refreshUniformsCommon( uniforms, material );

  		} else if ( material.isMeshDistanceMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsDistance( uniforms, material );

  		} else if ( material.isMeshNormalMaterial ) {

  			refreshUniformsCommon( uniforms, material );

  		} else if ( material.isLineBasicMaterial ) {

  			refreshUniformsLine( uniforms, material );

  			if ( material.isLineDashedMaterial ) {

  				refreshUniformsDash( uniforms, material );

  			}

  		} else if ( material.isPointsMaterial ) {

  			refreshUniformsPoints( uniforms, material, pixelRatio, height );

  		} else if ( material.isSpriteMaterial ) {

  			refreshUniformsSprites( uniforms, material );

  		} else if ( material.isShadowMaterial ) {

  			uniforms.color.value.copy( material.color );
  			uniforms.opacity.value = material.opacity;

  		} else if ( material.isShaderMaterial ) {

  			material.uniformsNeedUpdate = false; // #15581

  		}

  	}

  	function refreshUniformsCommon( uniforms, material ) {

  		uniforms.opacity.value = material.opacity;

  		if ( material.color ) {

  			uniforms.diffuse.value.copy( material.color );

  		}

  		if ( material.emissive ) {

  			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

  		}

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  			refreshTransformUniform( material.map, uniforms.mapTransform );

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;

  			refreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );

  			uniforms.bumpScale.value = material.bumpScale;

  			if ( material.side === BackSide$1 ) {

  				uniforms.bumpScale.value *= - 1;

  			}

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;

  			refreshTransformUniform( material.normalMap, uniforms.normalMapTransform );

  			uniforms.normalScale.value.copy( material.normalScale );

  			if ( material.side === BackSide$1 ) {

  				uniforms.normalScale.value.negate();

  			}

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;

  			refreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );

  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  			refreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );

  		}

  		if ( material.specularMap ) {

  			uniforms.specularMap.value = material.specularMap;

  			refreshTransformUniform( material.specularMap, uniforms.specularMapTransform );

  		}

  		if ( material.alphaTest > 0 ) {

  			uniforms.alphaTest.value = material.alphaTest;

  		}

  		const materialProperties = properties.get( material );

  		const envMap = materialProperties.envMap;
  		const envMapRotation = materialProperties.envMapRotation;

  		if ( envMap ) {

  			uniforms.envMap.value = envMap;

  			_e1$2.copy( envMapRotation );

  			// accommodate left-handed frame
  			_e1$2.x *= - 1; _e1$2.y *= - 1; _e1$2.z *= - 1;

  			if ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {

  				// environment maps which are not cube render targets or PMREMs follow a different convention
  				_e1$2.y *= - 1;
  				_e1$2.z *= - 1;

  			}

  			uniforms.envMapRotation.value.setFromMatrix4( _m1$5.makeRotationFromEuler( _e1$2 ) );

  			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

  			uniforms.reflectivity.value = material.reflectivity;
  			uniforms.ior.value = material.ior;
  			uniforms.refractionRatio.value = material.refractionRatio;

  		}

  		if ( material.lightMap ) {

  			uniforms.lightMap.value = material.lightMap;
  			uniforms.lightMapIntensity.value = material.lightMapIntensity;

  			refreshTransformUniform( material.lightMap, uniforms.lightMapTransform );

  		}

  		if ( material.aoMap ) {

  			uniforms.aoMap.value = material.aoMap;
  			uniforms.aoMapIntensity.value = material.aoMapIntensity;

  			refreshTransformUniform( material.aoMap, uniforms.aoMapTransform );

  		}

  	}

  	function refreshUniformsLine( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  			refreshTransformUniform( material.map, uniforms.mapTransform );

  		}

  	}

  	function refreshUniformsDash( uniforms, material ) {

  		uniforms.dashSize.value = material.dashSize;
  		uniforms.totalSize.value = material.dashSize + material.gapSize;
  		uniforms.scale.value = material.scale;

  	}

  	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.size.value = material.size * pixelRatio;
  		uniforms.scale.value = height * 0.5;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  			refreshTransformUniform( material.map, uniforms.uvTransform );

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

  		}

  		if ( material.alphaTest > 0 ) {

  			uniforms.alphaTest.value = material.alphaTest;

  		}

  	}

  	function refreshUniformsSprites( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.rotation.value = material.rotation;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  			refreshTransformUniform( material.map, uniforms.mapTransform );

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

  		}

  		if ( material.alphaTest > 0 ) {

  			uniforms.alphaTest.value = material.alphaTest;

  		}

  	}

  	function refreshUniformsPhong( uniforms, material ) {

  		uniforms.specular.value.copy( material.specular );
  		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

  	}

  	function refreshUniformsToon( uniforms, material ) {

  		if ( material.gradientMap ) {

  			uniforms.gradientMap.value = material.gradientMap;

  		}

  	}

  	function refreshUniformsStandard( uniforms, material ) {

  		uniforms.metalness.value = material.metalness;

  		if ( material.metalnessMap ) {

  			uniforms.metalnessMap.value = material.metalnessMap;

  			refreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );

  		}

  		uniforms.roughness.value = material.roughness;

  		if ( material.roughnessMap ) {

  			uniforms.roughnessMap.value = material.roughnessMap;

  			refreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );

  		}

  		if ( material.envMap ) {

  			//uniforms.envMap.value = material.envMap; // part of uniforms common

  			uniforms.envMapIntensity.value = material.envMapIntensity;

  		}

  	}

  	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

  		uniforms.ior.value = material.ior; // also part of uniforms common

  		if ( material.sheen > 0 ) {

  			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

  			uniforms.sheenRoughness.value = material.sheenRoughness;

  			if ( material.sheenColorMap ) {

  				uniforms.sheenColorMap.value = material.sheenColorMap;

  				refreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );

  			}

  			if ( material.sheenRoughnessMap ) {

  				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

  				refreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );

  			}

  		}

  		if ( material.clearcoat > 0 ) {

  			uniforms.clearcoat.value = material.clearcoat;
  			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

  			if ( material.clearcoatMap ) {

  				uniforms.clearcoatMap.value = material.clearcoatMap;

  				refreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );

  			}

  			if ( material.clearcoatRoughnessMap ) {

  				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

  				refreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );

  			}

  			if ( material.clearcoatNormalMap ) {

  				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

  				refreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );

  				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );

  				if ( material.side === BackSide$1 ) {

  					uniforms.clearcoatNormalScale.value.negate();

  				}

  			}

  		}

  		if ( material.dispersion > 0 ) {

  			uniforms.dispersion.value = material.dispersion;

  		}

  		if ( material.iridescence > 0 ) {

  			uniforms.iridescence.value = material.iridescence;
  			uniforms.iridescenceIOR.value = material.iridescenceIOR;
  			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
  			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

  			if ( material.iridescenceMap ) {

  				uniforms.iridescenceMap.value = material.iridescenceMap;

  				refreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );

  			}

  			if ( material.iridescenceThicknessMap ) {

  				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

  				refreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );

  			}

  		}

  		if ( material.transmission > 0 ) {

  			uniforms.transmission.value = material.transmission;
  			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
  			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

  			if ( material.transmissionMap ) {

  				uniforms.transmissionMap.value = material.transmissionMap;

  				refreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );

  			}

  			uniforms.thickness.value = material.thickness;

  			if ( material.thicknessMap ) {

  				uniforms.thicknessMap.value = material.thicknessMap;

  				refreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );

  			}

  			uniforms.attenuationDistance.value = material.attenuationDistance;
  			uniforms.attenuationColor.value.copy( material.attenuationColor );

  		}

  		if ( material.anisotropy > 0 ) {

  			uniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

  			if ( material.anisotropyMap ) {

  				uniforms.anisotropyMap.value = material.anisotropyMap;

  				refreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );

  			}

  		}

  		uniforms.specularIntensity.value = material.specularIntensity;
  		uniforms.specularColor.value.copy( material.specularColor );

  		if ( material.specularColorMap ) {

  			uniforms.specularColorMap.value = material.specularColorMap;

  			refreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );

  		}

  		if ( material.specularIntensityMap ) {

  			uniforms.specularIntensityMap.value = material.specularIntensityMap;

  			refreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );

  		}

  	}

  	function refreshUniformsMatcap( uniforms, material ) {

  		if ( material.matcap ) {

  			uniforms.matcap.value = material.matcap;

  		}

  	}

  	function refreshUniformsDistance( uniforms, material ) {

  		const light = properties.get( material ).light;

  		uniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );
  		uniforms.nearDistance.value = light.shadow.camera.near;
  		uniforms.farDistance.value = light.shadow.camera.far;

  	}

  	return {
  		refreshFogUniforms: refreshFogUniforms,
  		refreshMaterialUniforms: refreshMaterialUniforms
  	};

  }

  function WebGLUniformsGroups( gl, info, capabilities, state ) {

  	let buffers = {};
  	let updateList = {};
  	let allocatedBindingPoints = [];

  	const maxBindingPoints = gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ); // binding points are global whereas block indices are per shader program

  	function bind( uniformsGroup, program ) {

  		const webglProgram = program.program;
  		state.uniformBlockBinding( uniformsGroup, webglProgram );

  	}

  	function update( uniformsGroup, program ) {

  		let buffer = buffers[ uniformsGroup.id ];

  		if ( buffer === undefined ) {

  			prepareUniformsGroup( uniformsGroup );

  			buffer = createBuffer( uniformsGroup );
  			buffers[ uniformsGroup.id ] = buffer;

  			uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );

  		}

  		// ensure to update the binding points/block indices mapping for this program

  		const webglProgram = program.program;
  		state.updateUBOMapping( uniformsGroup, webglProgram );

  		// update UBO once per frame

  		const frame = info.render.frame;

  		if ( updateList[ uniformsGroup.id ] !== frame ) {

  			updateBufferData( uniformsGroup );

  			updateList[ uniformsGroup.id ] = frame;

  		}

  	}

  	function createBuffer( uniformsGroup ) {

  		// the setup of an UBO is independent of a particular shader program but global

  		const bindingPointIndex = allocateBindingPointIndex();
  		uniformsGroup.__bindingPointIndex = bindingPointIndex;

  		const buffer = gl.createBuffer();
  		const size = uniformsGroup.__size;
  		const usage = uniformsGroup.usage;

  		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );
  		gl.bufferData( gl.UNIFORM_BUFFER, size, usage );
  		gl.bindBuffer( gl.UNIFORM_BUFFER, null );
  		gl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );

  		return buffer;

  	}

  	function allocateBindingPointIndex() {

  		for ( let i = 0; i < maxBindingPoints; i ++ ) {

  			if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {

  				allocatedBindingPoints.push( i );
  				return i;

  			}

  		}

  		console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );

  		return 0;

  	}

  	function updateBufferData( uniformsGroup ) {

  		const buffer = buffers[ uniformsGroup.id ];
  		const uniforms = uniformsGroup.uniforms;
  		const cache = uniformsGroup.__cache;

  		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );

  		for ( let i = 0, il = uniforms.length; i < il; i ++ ) {

  			const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

  			for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

  				const uniform = uniformArray[ j ];

  				if ( hasUniformChanged( uniform, i, j, cache ) === true ) {

  					const offset = uniform.__offset;

  					const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

  					let arrayOffset = 0;

  					for ( let k = 0; k < values.length; k ++ ) {

  						const value = values[ k ];

  						const info = getUniformSize( value );

  						// TODO add integer and struct support
  						if ( typeof value === 'number' || typeof value === 'boolean' ) {

  							uniform.__data[ 0 ] = value;
  							gl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );

  						} else if ( value.isMatrix3 ) {

  							// manually converting 3x3 to 3x4

  							uniform.__data[ 0 ] = value.elements[ 0 ];
  							uniform.__data[ 1 ] = value.elements[ 1 ];
  							uniform.__data[ 2 ] = value.elements[ 2 ];
  							uniform.__data[ 3 ] = 0;
  							uniform.__data[ 4 ] = value.elements[ 3 ];
  							uniform.__data[ 5 ] = value.elements[ 4 ];
  							uniform.__data[ 6 ] = value.elements[ 5 ];
  							uniform.__data[ 7 ] = 0;
  							uniform.__data[ 8 ] = value.elements[ 6 ];
  							uniform.__data[ 9 ] = value.elements[ 7 ];
  							uniform.__data[ 10 ] = value.elements[ 8 ];
  							uniform.__data[ 11 ] = 0;

  						} else {

  							value.toArray( uniform.__data, arrayOffset );

  							arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;

  						}

  					}

  					gl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );

  				}

  			}

  		}

  		gl.bindBuffer( gl.UNIFORM_BUFFER, null );

  	}

  	function hasUniformChanged( uniform, index, indexArray, cache ) {

  		const value = uniform.value;
  		const indexString = index + '_' + indexArray;

  		if ( cache[ indexString ] === undefined ) {

  			// cache entry does not exist so far

  			if ( typeof value === 'number' || typeof value === 'boolean' ) {

  				cache[ indexString ] = value;

  			} else {

  				cache[ indexString ] = value.clone();

  			}

  			return true;

  		} else {

  			const cachedObject = cache[ indexString ];

  			// compare current value with cached entry

  			if ( typeof value === 'number' || typeof value === 'boolean' ) {

  				if ( cachedObject !== value ) {

  					cache[ indexString ] = value;
  					return true;

  				}

  			} else {

  				if ( cachedObject.equals( value ) === false ) {

  					cachedObject.copy( value );
  					return true;

  				}

  			}

  		}

  		return false;

  	}

  	function prepareUniformsGroup( uniformsGroup ) {

  		// determine total buffer size according to the STD140 layout
  		// Hint: STD140 is the only supported layout in WebGL 2

  		const uniforms = uniformsGroup.uniforms;

  		let offset = 0; // global buffer offset in bytes
  		const chunkSize = 16; // size of a chunk in bytes

  		for ( let i = 0, l = uniforms.length; i < l; i ++ ) {

  			const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

  			for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

  				const uniform = uniformArray[ j ];

  				const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

  				for ( let k = 0, kl = values.length; k < kl; k ++ ) {

  					const value = values[ k ];

  					const info = getUniformSize( value );

  					const chunkOffset = offset % chunkSize; // offset in the current chunk
  					const chunkPadding = chunkOffset % info.boundary; // required padding to match boundary
  					const chunkStart = chunkOffset + chunkPadding; // the start position in the current chunk for the data

  					offset += chunkPadding;

  					// Check for chunk overflow
  					if ( chunkStart !== 0 && ( chunkSize - chunkStart ) < info.storage ) {

  						// Add padding and adjust offset
  						offset += ( chunkSize - chunkStart );

  					}

  					// the following two properties will be used for partial buffer updates
  					uniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );
  					uniform.__offset = offset;

  					// Update the global offset
  					offset += info.storage;

  				}

  			}

  		}

  		// ensure correct final padding

  		const chunkOffset = offset % chunkSize;

  		if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );

  		//

  		uniformsGroup.__size = offset;
  		uniformsGroup.__cache = {};

  		return this;

  	}

  	function getUniformSize( value ) {

  		const info = {
  			boundary: 0, // bytes
  			storage: 0 // bytes
  		};

  		// determine sizes according to STD140

  		if ( typeof value === 'number' || typeof value === 'boolean' ) {

  			// float/int/bool

  			info.boundary = 4;
  			info.storage = 4;

  		} else if ( value.isVector2 ) {

  			// vec2

  			info.boundary = 8;
  			info.storage = 8;

  		} else if ( value.isVector3 || value.isColor ) {

  			// vec3

  			info.boundary = 16;
  			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes

  		} else if ( value.isVector4 ) {

  			// vec4

  			info.boundary = 16;
  			info.storage = 16;

  		} else if ( value.isMatrix3 ) {

  			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)

  			info.boundary = 48;
  			info.storage = 48;

  		} else if ( value.isMatrix4 ) {

  			// mat4

  			info.boundary = 64;
  			info.storage = 64;

  		} else if ( value.isTexture ) {

  			console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );

  		} else {

  			console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );

  		}

  		return info;

  	}

  	function onUniformsGroupsDispose( event ) {

  		const uniformsGroup = event.target;

  		uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );

  		const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
  		allocatedBindingPoints.splice( index, 1 );

  		gl.deleteBuffer( buffers[ uniformsGroup.id ] );

  		delete buffers[ uniformsGroup.id ];
  		delete updateList[ uniformsGroup.id ];

  	}

  	function dispose() {

  		for ( const id in buffers ) {

  			gl.deleteBuffer( buffers[ id ] );

  		}

  		allocatedBindingPoints = [];
  		buffers = {};
  		updateList = {};

  	}

  	return {

  		bind: bind,
  		update: update,

  		dispose: dispose

  	};

  }

  class WebGLRenderer {

  	constructor( parameters = {} ) {

  		const {
  			canvas = createCanvasElement$1(),
  			context = null,
  			depth = true,
  			stencil = false,
  			alpha = false,
  			antialias = false,
  			premultipliedAlpha = true,
  			preserveDrawingBuffer = false,
  			powerPreference = 'default',
  			failIfMajorPerformanceCaveat = false,
  			reverseDepthBuffer = false,
  		} = parameters;

  		this.isWebGLRenderer = true;

  		let _alpha;

  		if ( context !== null ) {

  			if ( typeof WebGLRenderingContext !== 'undefined' && context instanceof WebGLRenderingContext ) {

  				throw new Error( 'THREE.WebGLRenderer: WebGL 1 is not supported since r163.' );

  			}

  			_alpha = context.getContextAttributes().alpha;

  		} else {

  			_alpha = alpha;

  		}

  		const uintClearColor = new Uint32Array( 4 );
  		const intClearColor = new Int32Array( 4 );

  		let currentRenderList = null;
  		let currentRenderState = null;

  		// render() can be called from within a callback triggered by another render.
  		// We track this so that the nested render call gets its list and state isolated from the parent render call.

  		const renderListStack = [];
  		const renderStateStack = [];

  		// public properties

  		this.domElement = canvas;

  		// Debug configuration container
  		this.debug = {

  			/**
  			 * Enables error checking and reporting when shader programs are being compiled
  			 * @type {boolean}
  			 */
  			checkShaderErrors: true,
  			/**
  			 * Callback for custom error reporting.
  			 * @type {?Function}
  			 */
  			onShaderError: null
  		};

  		// clearing

  		this.autoClear = true;
  		this.autoClearColor = true;
  		this.autoClearDepth = true;
  		this.autoClearStencil = true;

  		// scene graph

  		this.sortObjects = true;

  		// user-defined clipping

  		this.clippingPlanes = [];
  		this.localClippingEnabled = false;

  		// physically based shading

  		this._outputColorSpace = SRGBColorSpace$1;

  		// tone mapping

  		this.toneMapping = NoToneMapping$1;
  		this.toneMappingExposure = 1.0;

  		// internal properties

  		const _this = this;

  		let _isContextLost = false;

  		// internal state cache

  		let _currentActiveCubeFace = 0;
  		let _currentActiveMipmapLevel = 0;
  		let _currentRenderTarget = null;
  		let _currentMaterialId = - 1;

  		let _currentCamera = null;

  		const _currentViewport = new Vector4$1();
  		const _currentScissor = new Vector4$1();
  		let _currentScissorTest = null;

  		const _currentClearColor = new Color$1( 0x000000 );
  		let _currentClearAlpha = 0;

  		//

  		let _width = canvas.width;
  		let _height = canvas.height;

  		let _pixelRatio = 1;
  		let _opaqueSort = null;
  		let _transparentSort = null;

  		const _viewport = new Vector4$1( 0, 0, _width, _height );
  		const _scissor = new Vector4$1( 0, 0, _width, _height );
  		let _scissorTest = false;

  		// frustum

  		const _frustum = new Frustum$1();

  		// clipping

  		let _clippingEnabled = false;
  		let _localClippingEnabled = false;

  		// camera matrices cache

  		const _currentProjectionMatrix = new Matrix4$1();
  		const _projScreenMatrix = new Matrix4$1();

  		const _vector3 = new Vector3$1();

  		const _vector4 = new Vector4$1();

  		const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

  		let _renderBackground = false;

  		function getTargetPixelRatio() {

  			return _currentRenderTarget === null ? _pixelRatio : 1;

  		}

  		// initialize

  		let _gl = context;

  		function getContext( contextName, contextAttributes ) {

  			return canvas.getContext( contextName, contextAttributes );

  		}

  		try {

  			const contextAttributes = {
  				alpha: true,
  				depth,
  				stencil,
  				antialias,
  				premultipliedAlpha,
  				preserveDrawingBuffer,
  				powerPreference,
  				failIfMajorPerformanceCaveat,
  			};

  			// OffscreenCanvas does not have setAttribute, see #22811
  			if ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION$1}` );

  			// event listeners must be registered before WebGL context is created, see #12753
  			canvas.addEventListener( 'webglcontextlost', onContextLost, false );
  			canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
  			canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

  			if ( _gl === null ) {

  				const contextName = 'webgl2';

  				_gl = getContext( contextName, contextAttributes );

  				if ( _gl === null ) {

  					if ( getContext( contextName ) ) {

  						throw new Error( 'Error creating WebGL context with your selected attributes.' );

  					} else {

  						throw new Error( 'Error creating WebGL context.' );

  					}

  				}

  			}

  		} catch ( error ) {

  			console.error( 'THREE.WebGLRenderer: ' + error.message );
  			throw error;

  		}

  		let extensions, capabilities, state, info;
  		let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
  		let programCache, materials, renderLists, renderStates, clipping, shadowMap;

  		let background, morphtargets, bufferRenderer, indexedBufferRenderer;

  		let utils, bindingStates, uniformsGroups;

  		function initGLContext() {

  			extensions = new WebGLExtensions$1( _gl );
  			extensions.init();

  			utils = new WebGLUtils$1( _gl, extensions );

  			capabilities = new WebGLCapabilities$1( _gl, extensions, parameters, utils );

  			state = new WebGLState$1( _gl, extensions );

  			if ( capabilities.reverseDepthBuffer && reverseDepthBuffer ) {

  				state.buffers.depth.setReversed( true );

  			}

  			info = new WebGLInfo( _gl );
  			properties = new WebGLProperties();
  			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
  			cubemaps = new WebGLCubeMaps( _this );
  			cubeuvmaps = new WebGLCubeUVMaps( _this );
  			attributes = new WebGLAttributes( _gl );
  			bindingStates = new WebGLBindingStates( _gl, attributes );
  			geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
  			objects = new WebGLObjects( _gl, geometries, attributes, info );
  			morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
  			clipping = new WebGLClipping( properties );
  			programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
  			materials = new WebGLMaterials( _this, properties );
  			renderLists = new WebGLRenderLists();
  			renderStates = new WebGLRenderStates( extensions );
  			background = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );
  			shadowMap = new WebGLShadowMap( _this, objects, capabilities );
  			uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );

  			bufferRenderer = new WebGLBufferRenderer$1( _gl, extensions, info );
  			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );

  			info.programs = programCache.programs;

  			_this.capabilities = capabilities;
  			_this.extensions = extensions;
  			_this.properties = properties;
  			_this.renderLists = renderLists;
  			_this.shadowMap = shadowMap;
  			_this.state = state;
  			_this.info = info;

  		}

  		initGLContext();

  		// xr

  		const xr = new WebXRManager( _this, _gl );

  		this.xr = xr;

  		// API

  		this.getContext = function () {

  			return _gl;

  		};

  		this.getContextAttributes = function () {

  			return _gl.getContextAttributes();

  		};

  		this.forceContextLoss = function () {

  			const extension = extensions.get( 'WEBGL_lose_context' );
  			if ( extension ) extension.loseContext();

  		};

  		this.forceContextRestore = function () {

  			const extension = extensions.get( 'WEBGL_lose_context' );
  			if ( extension ) extension.restoreContext();

  		};

  		this.getPixelRatio = function () {

  			return _pixelRatio;

  		};

  		this.setPixelRatio = function ( value ) {

  			if ( value === undefined ) return;

  			_pixelRatio = value;

  			this.setSize( _width, _height, false );

  		};

  		this.getSize = function ( target ) {

  			return target.set( _width, _height );

  		};

  		this.setSize = function ( width, height, updateStyle = true ) {

  			if ( xr.isPresenting ) {

  				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
  				return;

  			}

  			_width = width;
  			_height = height;

  			canvas.width = Math.floor( width * _pixelRatio );
  			canvas.height = Math.floor( height * _pixelRatio );

  			if ( updateStyle === true ) {

  				canvas.style.width = width + 'px';
  				canvas.style.height = height + 'px';

  			}

  			this.setViewport( 0, 0, width, height );

  		};

  		this.getDrawingBufferSize = function ( target ) {

  			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

  		};

  		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

  			_width = width;
  			_height = height;

  			_pixelRatio = pixelRatio;

  			canvas.width = Math.floor( width * pixelRatio );
  			canvas.height = Math.floor( height * pixelRatio );

  			this.setViewport( 0, 0, width, height );

  		};

  		this.getCurrentViewport = function ( target ) {

  			return target.copy( _currentViewport );

  		};

  		this.getViewport = function ( target ) {

  			return target.copy( _viewport );

  		};

  		this.setViewport = function ( x, y, width, height ) {

  			if ( x.isVector4 ) {

  				_viewport.set( x.x, x.y, x.z, x.w );

  			} else {

  				_viewport.set( x, y, width, height );

  			}

  			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).round() );

  		};

  		this.getScissor = function ( target ) {

  			return target.copy( _scissor );

  		};

  		this.setScissor = function ( x, y, width, height ) {

  			if ( x.isVector4 ) {

  				_scissor.set( x.x, x.y, x.z, x.w );

  			} else {

  				_scissor.set( x, y, width, height );

  			}

  			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).round() );

  		};

  		this.getScissorTest = function () {

  			return _scissorTest;

  		};

  		this.setScissorTest = function ( boolean ) {

  			state.setScissorTest( _scissorTest = boolean );

  		};

  		this.setOpaqueSort = function ( method ) {

  			_opaqueSort = method;

  		};

  		this.setTransparentSort = function ( method ) {

  			_transparentSort = method;

  		};

  		// Clearing

  		this.getClearColor = function ( target ) {

  			return target.copy( background.getClearColor() );

  		};

  		this.setClearColor = function () {

  			background.setClearColor.apply( background, arguments );

  		};

  		this.getClearAlpha = function () {

  			return background.getClearAlpha();

  		};

  		this.setClearAlpha = function () {

  			background.setClearAlpha.apply( background, arguments );

  		};

  		this.clear = function ( color = true, depth = true, stencil = true ) {

  			let bits = 0;

  			if ( color ) {

  				// check if we're trying to clear an integer target
  				let isIntegerFormat = false;
  				if ( _currentRenderTarget !== null ) {

  					const targetFormat = _currentRenderTarget.texture.format;
  					isIntegerFormat = targetFormat === RGBAIntegerFormat$1 ||
  						targetFormat === RGIntegerFormat$1 ||
  						targetFormat === RedIntegerFormat$1;

  				}

  				// use the appropriate clear functions to clear the target if it's a signed
  				// or unsigned integer target
  				if ( isIntegerFormat ) {

  					const targetType = _currentRenderTarget.texture.type;
  					const isUnsignedType = targetType === UnsignedByteType$1 ||
  						targetType === UnsignedIntType$1 ||
  						targetType === UnsignedShortType$1 ||
  						targetType === UnsignedInt248Type$1 ||
  						targetType === UnsignedShort4444Type$1 ||
  						targetType === UnsignedShort5551Type$1;

  					const clearColor = background.getClearColor();
  					const a = background.getClearAlpha();
  					const r = clearColor.r;
  					const g = clearColor.g;
  					const b = clearColor.b;

  					if ( isUnsignedType ) {

  						uintClearColor[ 0 ] = r;
  						uintClearColor[ 1 ] = g;
  						uintClearColor[ 2 ] = b;
  						uintClearColor[ 3 ] = a;
  						_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );

  					} else {

  						intClearColor[ 0 ] = r;
  						intClearColor[ 1 ] = g;
  						intClearColor[ 2 ] = b;
  						intClearColor[ 3 ] = a;
  						_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );

  					}

  				} else {

  					bits |= _gl.COLOR_BUFFER_BIT;

  				}

  			}

  			if ( depth ) {

  				bits |= _gl.DEPTH_BUFFER_BIT;

  			}

  			if ( stencil ) {

  				bits |= _gl.STENCIL_BUFFER_BIT;
  				this.state.buffers.stencil.setMask( 0xffffffff );

  			}

  			_gl.clear( bits );

  		};

  		this.clearColor = function () {

  			this.clear( true, false, false );

  		};

  		this.clearDepth = function () {

  			this.clear( false, true, false );

  		};

  		this.clearStencil = function () {

  			this.clear( false, false, true );

  		};

  		//

  		this.dispose = function () {

  			canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
  			canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
  			canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

  			renderLists.dispose();
  			renderStates.dispose();
  			properties.dispose();
  			cubemaps.dispose();
  			cubeuvmaps.dispose();
  			objects.dispose();
  			bindingStates.dispose();
  			uniformsGroups.dispose();
  			programCache.dispose();

  			xr.dispose();

  			xr.removeEventListener( 'sessionstart', onXRSessionStart );
  			xr.removeEventListener( 'sessionend', onXRSessionEnd );

  			animation.stop();

  		};

  		// Events

  		function onContextLost( event ) {

  			event.preventDefault();

  			console.log( 'THREE.WebGLRenderer: Context Lost.' );

  			_isContextLost = true;

  		}

  		function onContextRestore( /* event */ ) {

  			console.log( 'THREE.WebGLRenderer: Context Restored.' );

  			_isContextLost = false;

  			const infoAutoReset = info.autoReset;
  			const shadowMapEnabled = shadowMap.enabled;
  			const shadowMapAutoUpdate = shadowMap.autoUpdate;
  			const shadowMapNeedsUpdate = shadowMap.needsUpdate;
  			const shadowMapType = shadowMap.type;

  			initGLContext();

  			info.autoReset = infoAutoReset;
  			shadowMap.enabled = shadowMapEnabled;
  			shadowMap.autoUpdate = shadowMapAutoUpdate;
  			shadowMap.needsUpdate = shadowMapNeedsUpdate;
  			shadowMap.type = shadowMapType;

  		}

  		function onContextCreationError( event ) {

  			console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

  		}

  		function onMaterialDispose( event ) {

  			const material = event.target;

  			material.removeEventListener( 'dispose', onMaterialDispose );

  			deallocateMaterial( material );

  		}

  		// Buffer deallocation

  		function deallocateMaterial( material ) {

  			releaseMaterialProgramReferences( material );

  			properties.remove( material );

  		}


  		function releaseMaterialProgramReferences( material ) {

  			const programs = properties.get( material ).programs;

  			if ( programs !== undefined ) {

  				programs.forEach( function ( program ) {

  					programCache.releaseProgram( program );

  				} );

  				if ( material.isShaderMaterial ) {

  					programCache.releaseShaderCache( material );

  				}

  			}

  		}

  		// Buffer rendering

  		this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

  			if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

  			const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

  			const program = setProgram( camera, scene, geometry, material, object );

  			state.setMaterial( material, frontFaceCW );

  			//

  			let index = geometry.index;
  			let rangeFactor = 1;

  			if ( material.wireframe === true ) {

  				index = geometries.getWireframeAttribute( geometry );

  				if ( index === undefined ) return;

  				rangeFactor = 2;

  			}

  			//

  			const drawRange = geometry.drawRange;
  			const position = geometry.attributes.position;

  			let drawStart = drawRange.start * rangeFactor;
  			let drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;

  			if ( group !== null ) {

  				drawStart = Math.max( drawStart, group.start * rangeFactor );
  				drawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );

  			}

  			if ( index !== null ) {

  				drawStart = Math.max( drawStart, 0 );
  				drawEnd = Math.min( drawEnd, index.count );

  			} else if ( position !== undefined && position !== null ) {

  				drawStart = Math.max( drawStart, 0 );
  				drawEnd = Math.min( drawEnd, position.count );

  			}

  			const drawCount = drawEnd - drawStart;

  			if ( drawCount < 0 || drawCount === Infinity ) return;

  			//

  			bindingStates.setup( object, material, program, geometry, index );

  			let attribute;
  			let renderer = bufferRenderer;

  			if ( index !== null ) {

  				attribute = attributes.get( index );

  				renderer = indexedBufferRenderer;
  				renderer.setIndex( attribute );

  			}

  			//

  			if ( object.isMesh ) {

  				if ( material.wireframe === true ) {

  					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
  					renderer.setMode( _gl.LINES );

  				} else {

  					renderer.setMode( _gl.TRIANGLES );

  				}

  			} else if ( object.isLine ) {

  				let lineWidth = material.linewidth;

  				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

  				state.setLineWidth( lineWidth * getTargetPixelRatio() );

  				if ( object.isLineSegments ) {

  					renderer.setMode( _gl.LINES );

  				} else if ( object.isLineLoop ) {

  					renderer.setMode( _gl.LINE_LOOP );

  				} else {

  					renderer.setMode( _gl.LINE_STRIP );

  				}

  			} else if ( object.isPoints ) {

  				renderer.setMode( _gl.POINTS );

  			} else if ( object.isSprite ) {

  				renderer.setMode( _gl.TRIANGLES );

  			}

  			if ( object.isBatchedMesh ) {

  				if ( object._multiDrawInstances !== null ) {

  					renderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );

  				} else {

  					if ( ! extensions.get( 'WEBGL_multi_draw' ) ) {

  						const starts = object._multiDrawStarts;
  						const counts = object._multiDrawCounts;
  						const drawCount = object._multiDrawCount;
  						const bytesPerElement = index ? attributes.get( index ).bytesPerElement : 1;
  						const uniforms = properties.get( material ).currentProgram.getUniforms();
  						for ( let i = 0; i < drawCount; i ++ ) {

  							uniforms.setValue( _gl, '_gl_DrawID', i );
  							renderer.render( starts[ i ] / bytesPerElement, counts[ i ] );

  						}

  					} else {

  						renderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );

  					}

  				}

  			} else if ( object.isInstancedMesh ) {

  				renderer.renderInstances( drawStart, drawCount, object.count );

  			} else if ( geometry.isInstancedBufferGeometry ) {

  				const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
  				const instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );

  				renderer.renderInstances( drawStart, drawCount, instanceCount );

  			} else {

  				renderer.render( drawStart, drawCount );

  			}

  		};

  		// Compile

  		function prepareMaterial( material, scene, object ) {

  			if ( material.transparent === true && material.side === DoubleSide$1 && material.forceSinglePass === false ) {

  				material.side = BackSide$1;
  				material.needsUpdate = true;
  				getProgram( material, scene, object );

  				material.side = FrontSide$1;
  				material.needsUpdate = true;
  				getProgram( material, scene, object );

  				material.side = DoubleSide$1;

  			} else {

  				getProgram( material, scene, object );

  			}

  		}

  		this.compile = function ( scene, camera, targetScene = null ) {

  			if ( targetScene === null ) targetScene = scene;

  			currentRenderState = renderStates.get( targetScene );
  			currentRenderState.init( camera );

  			renderStateStack.push( currentRenderState );

  			// gather lights from both the target scene and the new object that will be added to the scene.

  			targetScene.traverseVisible( function ( object ) {

  				if ( object.isLight && object.layers.test( camera.layers ) ) {

  					currentRenderState.pushLight( object );

  					if ( object.castShadow ) {

  						currentRenderState.pushShadow( object );

  					}

  				}

  			} );

  			if ( scene !== targetScene ) {

  				scene.traverseVisible( function ( object ) {

  					if ( object.isLight && object.layers.test( camera.layers ) ) {

  						currentRenderState.pushLight( object );

  						if ( object.castShadow ) {

  							currentRenderState.pushShadow( object );

  						}

  					}

  				} );

  			}

  			currentRenderState.setupLights();

  			// Only initialize materials in the new scene, not the targetScene.

  			const materials = new Set();

  			scene.traverse( function ( object ) {

  				if ( ! ( object.isMesh || object.isPoints || object.isLine || object.isSprite ) ) {

  					return;

  				}

  				const material = object.material;

  				if ( material ) {

  					if ( Array.isArray( material ) ) {

  						for ( let i = 0; i < material.length; i ++ ) {

  							const material2 = material[ i ];

  							prepareMaterial( material2, targetScene, object );
  							materials.add( material2 );

  						}

  					} else {

  						prepareMaterial( material, targetScene, object );
  						materials.add( material );

  					}

  				}

  			} );

  			renderStateStack.pop();
  			currentRenderState = null;

  			return materials;

  		};

  		// compileAsync

  		this.compileAsync = function ( scene, camera, targetScene = null ) {

  			const materials = this.compile( scene, camera, targetScene );

  			// Wait for all the materials in the new object to indicate that they're
  			// ready to be used before resolving the promise.

  			return new Promise( ( resolve ) => {

  				function checkMaterialsReady() {

  					materials.forEach( function ( material ) {

  						const materialProperties = properties.get( material );
  						const program = materialProperties.currentProgram;

  						if ( program.isReady() ) {

  							// remove any programs that report they're ready to use from the list
  							materials.delete( material );

  						}

  					} );

  					// once the list of compiling materials is empty, call the callback

  					if ( materials.size === 0 ) {

  						resolve( scene );
  						return;

  					}

  					// if some materials are still not ready, wait a bit and check again

  					setTimeout( checkMaterialsReady, 10 );

  				}

  				if ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {

  					// If we can check the compilation status of the materials without
  					// blocking then do so right away.

  					checkMaterialsReady();

  				} else {

  					// Otherwise start by waiting a bit to give the materials we just
  					// initialized a chance to finish.

  					setTimeout( checkMaterialsReady, 10 );

  				}

  			} );

  		};

  		// Animation Loop

  		let onAnimationFrameCallback = null;

  		function onAnimationFrame( time ) {

  			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

  		}

  		function onXRSessionStart() {

  			animation.stop();

  		}

  		function onXRSessionEnd() {

  			animation.start();

  		}

  		const animation = new WebGLAnimation();
  		animation.setAnimationLoop( onAnimationFrame );

  		if ( typeof self !== 'undefined' ) animation.setContext( self );

  		this.setAnimationLoop = function ( callback ) {

  			onAnimationFrameCallback = callback;
  			xr.setAnimationLoop( callback );

  			( callback === null ) ? animation.stop() : animation.start();

  		};

  		xr.addEventListener( 'sessionstart', onXRSessionStart );
  		xr.addEventListener( 'sessionend', onXRSessionEnd );

  		// Rendering

  		this.render = function ( scene, camera ) {

  			if ( camera !== undefined && camera.isCamera !== true ) {

  				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
  				return;

  			}

  			if ( _isContextLost === true ) return;

  			// update scene graph

  			if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

  			// update camera matrices and frustum

  			if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

  			if ( xr.enabled === true && xr.isPresenting === true ) {

  				if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

  				camera = xr.getCamera(); // use XR camera for rendering

  			}

  			//
  			if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

  			currentRenderState = renderStates.get( scene, renderStateStack.length );
  			currentRenderState.init( camera );

  			renderStateStack.push( currentRenderState );

  			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  			_frustum.setFromProjectionMatrix( _projScreenMatrix );

  			_localClippingEnabled = this.localClippingEnabled;
  			_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );

  			currentRenderList = renderLists.get( scene, renderListStack.length );
  			currentRenderList.init();

  			renderListStack.push( currentRenderList );

  			if ( xr.enabled === true && xr.isPresenting === true ) {

  				const depthSensingMesh = _this.xr.getDepthSensingMesh();

  				if ( depthSensingMesh !== null ) {

  					projectObject( depthSensingMesh, camera, - Infinity, _this.sortObjects );

  				}

  			}

  			projectObject( scene, camera, 0, _this.sortObjects );

  			currentRenderList.finish();

  			if ( _this.sortObjects === true ) {

  				currentRenderList.sort( _opaqueSort, _transparentSort );

  			}

  			_renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
  			if ( _renderBackground ) {

  				background.addToRenderList( currentRenderList, scene );

  			}

  			//

  			this.info.render.frame ++;

  			if ( _clippingEnabled === true ) clipping.beginShadows();

  			const shadowsArray = currentRenderState.state.shadowsArray;

  			shadowMap.render( shadowsArray, scene, camera );

  			if ( _clippingEnabled === true ) clipping.endShadows();

  			//

  			if ( this.info.autoReset === true ) this.info.reset();

  			// render scene

  			const opaqueObjects = currentRenderList.opaque;
  			const transmissiveObjects = currentRenderList.transmissive;

  			currentRenderState.setupLights();

  			if ( camera.isArrayCamera ) {

  				const cameras = camera.cameras;

  				if ( transmissiveObjects.length > 0 ) {

  					for ( let i = 0, l = cameras.length; i < l; i ++ ) {

  						const camera2 = cameras[ i ];

  						renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera2 );

  					}

  				}

  				if ( _renderBackground ) background.render( scene );

  				for ( let i = 0, l = cameras.length; i < l; i ++ ) {

  					const camera2 = cameras[ i ];

  					renderScene( currentRenderList, scene, camera2, camera2.viewport );

  				}

  			} else {

  				if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );

  				if ( _renderBackground ) background.render( scene );

  				renderScene( currentRenderList, scene, camera );

  			}

  			//

  			if ( _currentRenderTarget !== null ) {

  				// resolve multisample renderbuffers to a single-sample texture if necessary

  				textures.updateMultisampleRenderTarget( _currentRenderTarget );

  				// Generate mipmap if we're using any kind of mipmap filtering

  				textures.updateRenderTargetMipmap( _currentRenderTarget );

  			}

  			//

  			if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

  			// _gl.finish();

  			bindingStates.resetDefaultState();
  			_currentMaterialId = - 1;
  			_currentCamera = null;

  			renderStateStack.pop();

  			if ( renderStateStack.length > 0 ) {

  				currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

  				if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, currentRenderState.state.camera );

  			} else {

  				currentRenderState = null;

  			}

  			renderListStack.pop();

  			if ( renderListStack.length > 0 ) {

  				currentRenderList = renderListStack[ renderListStack.length - 1 ];

  			} else {

  				currentRenderList = null;

  			}

  		};

  		function projectObject( object, camera, groupOrder, sortObjects ) {

  			if ( object.visible === false ) return;

  			const visible = object.layers.test( camera.layers );

  			if ( visible ) {

  				if ( object.isGroup ) {

  					groupOrder = object.renderOrder;

  				} else if ( object.isLOD ) {

  					if ( object.autoUpdate === true ) object.update( camera );

  				} else if ( object.isLight ) {

  					currentRenderState.pushLight( object );

  					if ( object.castShadow ) {

  						currentRenderState.pushShadow( object );

  					}

  				} else if ( object.isSprite ) {

  					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

  						if ( sortObjects ) {

  							_vector4.setFromMatrixPosition( object.matrixWorld )
  								.applyMatrix4( _projScreenMatrix );

  						}

  						const geometry = objects.update( object );
  						const material = object.material;

  						if ( material.visible ) {

  							currentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );

  						}

  					}

  				} else if ( object.isMesh || object.isLine || object.isPoints ) {

  					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

  						const geometry = objects.update( object );
  						const material = object.material;

  						if ( sortObjects ) {

  							if ( object.boundingSphere !== undefined ) {

  								if ( object.boundingSphere === null ) object.computeBoundingSphere();
  								_vector4.copy( object.boundingSphere.center );

  							} else {

  								if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
  								_vector4.copy( geometry.boundingSphere.center );

  							}

  							_vector4
  								.applyMatrix4( object.matrixWorld )
  								.applyMatrix4( _projScreenMatrix );

  						}

  						if ( Array.isArray( material ) ) {

  							const groups = geometry.groups;

  							for ( let i = 0, l = groups.length; i < l; i ++ ) {

  								const group = groups[ i ];
  								const groupMaterial = material[ group.materialIndex ];

  								if ( groupMaterial && groupMaterial.visible ) {

  									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );

  								}

  							}

  						} else if ( material.visible ) {

  							currentRenderList.push( object, geometry, material, groupOrder, _vector4.z, null );

  						}

  					}

  				}

  			}

  			const children = object.children;

  			for ( let i = 0, l = children.length; i < l; i ++ ) {

  				projectObject( children[ i ], camera, groupOrder, sortObjects );

  			}

  		}

  		function renderScene( currentRenderList, scene, camera, viewport ) {

  			const opaqueObjects = currentRenderList.opaque;
  			const transmissiveObjects = currentRenderList.transmissive;
  			const transparentObjects = currentRenderList.transparent;

  			currentRenderState.setupLightsView( camera );

  			if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

  			if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

  			if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
  			if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
  			if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

  			// Ensure depth buffer writing is enabled so it can be cleared on next render

  			state.buffers.depth.setTest( true );
  			state.buffers.depth.setMask( true );
  			state.buffers.color.setMask( true );

  			state.setPolygonOffset( false );

  		}

  		function renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {

  			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

  			if ( overrideMaterial !== null ) {

  				return;

  			}

  			if ( currentRenderState.state.transmissionRenderTarget[ camera.id ] === undefined ) {

  				currentRenderState.state.transmissionRenderTarget[ camera.id ] = new WebGLRenderTarget$1( 1, 1, {
  					generateMipmaps: true,
  					type: ( extensions.has( 'EXT_color_buffer_half_float' ) || extensions.has( 'EXT_color_buffer_float' ) ) ? HalfFloatType$1 : UnsignedByteType$1,
  					minFilter: LinearMipmapLinearFilter$1,
  					samples: 4,
  					stencilBuffer: stencil,
  					resolveDepthBuffer: false,
  					resolveStencilBuffer: false,
  					colorSpace: ColorManagement$1.workingColorSpace,
  				} );

  				// debug

  				/*
  				const geometry = new PlaneGeometry();
  				const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );

  				const mesh = new Mesh( geometry, material );
  				scene.add( mesh );
  				*/

  			}

  			const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[ camera.id ];

  			const activeViewport = camera.viewport || _currentViewport;
  			transmissionRenderTarget.setSize( activeViewport.z, activeViewport.w );

  			//

  			const currentRenderTarget = _this.getRenderTarget();
  			_this.setRenderTarget( transmissionRenderTarget );

  			_this.getClearColor( _currentClearColor );
  			_currentClearAlpha = _this.getClearAlpha();
  			if ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );

  			_this.clear();

  			if ( _renderBackground ) background.render( scene );

  			// Turn off the features which can affect the frag color for opaque objects pass.
  			// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
  			const currentToneMapping = _this.toneMapping;
  			_this.toneMapping = NoToneMapping$1;

  			// Remove viewport from camera to avoid nested render calls resetting viewport to it (e.g Reflector).
  			// Transmission render pass requires viewport to match the transmissionRenderTarget.
  			const currentCameraViewport = camera.viewport;
  			if ( camera.viewport !== undefined ) camera.viewport = undefined;

  			currentRenderState.setupLightsView( camera );

  			if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

  			renderObjects( opaqueObjects, scene, camera );

  			textures.updateMultisampleRenderTarget( transmissionRenderTarget );
  			textures.updateRenderTargetMipmap( transmissionRenderTarget );

  			if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === false ) { // see #28131

  				let renderTargetNeedsUpdate = false;

  				for ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {

  					const renderItem = transmissiveObjects[ i ];

  					const object = renderItem.object;
  					const geometry = renderItem.geometry;
  					const material = renderItem.material;
  					const group = renderItem.group;

  					if ( material.side === DoubleSide$1 && object.layers.test( camera.layers ) ) {

  						const currentSide = material.side;

  						material.side = BackSide$1;
  						material.needsUpdate = true;

  						renderObject( object, scene, camera, geometry, material, group );

  						material.side = currentSide;
  						material.needsUpdate = true;

  						renderTargetNeedsUpdate = true;

  					}

  				}

  				if ( renderTargetNeedsUpdate === true ) {

  					textures.updateMultisampleRenderTarget( transmissionRenderTarget );
  					textures.updateRenderTargetMipmap( transmissionRenderTarget );

  				}

  			}

  			_this.setRenderTarget( currentRenderTarget );

  			_this.setClearColor( _currentClearColor, _currentClearAlpha );

  			if ( currentCameraViewport !== undefined ) camera.viewport = currentCameraViewport;

  			_this.toneMapping = currentToneMapping;

  		}

  		function renderObjects( renderList, scene, camera ) {

  			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

  			for ( let i = 0, l = renderList.length; i < l; i ++ ) {

  				const renderItem = renderList[ i ];

  				const object = renderItem.object;
  				const geometry = renderItem.geometry;
  				const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
  				const group = renderItem.group;

  				if ( object.layers.test( camera.layers ) ) {

  					renderObject( object, scene, camera, geometry, material, group );

  				}

  			}

  		}

  		function renderObject( object, scene, camera, geometry, material, group ) {

  			object.onBeforeRender( _this, scene, camera, geometry, material, group );

  			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
  			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

  			material.onBeforeRender( _this, scene, camera, geometry, object, group );

  			if ( material.transparent === true && material.side === DoubleSide$1 && material.forceSinglePass === false ) {

  				material.side = BackSide$1;
  				material.needsUpdate = true;
  				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

  				material.side = FrontSide$1;
  				material.needsUpdate = true;
  				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

  				material.side = DoubleSide$1;

  			} else {

  				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

  			}

  			object.onAfterRender( _this, scene, camera, geometry, material, group );

  		}

  		function getProgram( material, scene, object ) {

  			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

  			const materialProperties = properties.get( material );

  			const lights = currentRenderState.state.lights;
  			const shadowsArray = currentRenderState.state.shadowsArray;

  			const lightsStateVersion = lights.state.version;

  			const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
  			const programCacheKey = programCache.getProgramCacheKey( parameters );

  			let programs = materialProperties.programs;

  			// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

  			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
  			materialProperties.fog = scene.fog;
  			materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );
  			materialProperties.envMapRotation = ( materialProperties.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;

  			if ( programs === undefined ) {

  				// new material

  				material.addEventListener( 'dispose', onMaterialDispose );

  				programs = new Map();
  				materialProperties.programs = programs;

  			}

  			let program = programs.get( programCacheKey );

  			if ( program !== undefined ) {

  				// early out if program and light state is identical

  				if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

  					updateCommonMaterialProperties( material, parameters );

  					return program;

  				}

  			} else {

  				parameters.uniforms = programCache.getUniforms( material );

  				material.onBeforeCompile( parameters, _this );

  				program = programCache.acquireProgram( parameters, programCacheKey );
  				programs.set( programCacheKey, program );

  				materialProperties.uniforms = parameters.uniforms;

  			}

  			const uniforms = materialProperties.uniforms;

  			if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

  				uniforms.clippingPlanes = clipping.uniform;

  			}

  			updateCommonMaterialProperties( material, parameters );

  			// store the light setup it was created for

  			materialProperties.needsLights = materialNeedsLights( material );
  			materialProperties.lightsStateVersion = lightsStateVersion;

  			if ( materialProperties.needsLights ) {

  				// wire up the material to this renderer's lighting state

  				uniforms.ambientLightColor.value = lights.state.ambient;
  				uniforms.lightProbe.value = lights.state.probe;
  				uniforms.directionalLights.value = lights.state.directional;
  				uniforms.directionalLightShadows.value = lights.state.directionalShadow;
  				uniforms.spotLights.value = lights.state.spot;
  				uniforms.spotLightShadows.value = lights.state.spotShadow;
  				uniforms.rectAreaLights.value = lights.state.rectArea;
  				uniforms.ltc_1.value = lights.state.rectAreaLTC1;
  				uniforms.ltc_2.value = lights.state.rectAreaLTC2;
  				uniforms.pointLights.value = lights.state.point;
  				uniforms.pointLightShadows.value = lights.state.pointShadow;
  				uniforms.hemisphereLights.value = lights.state.hemi;

  				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
  				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
  				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
  				uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
  				uniforms.spotLightMap.value = lights.state.spotLightMap;
  				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
  				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
  				// TODO (abelnation): add area lights shadow info to uniforms

  			}

  			materialProperties.currentProgram = program;
  			materialProperties.uniformsList = null;

  			return program;

  		}

  		function getUniformList( materialProperties ) {

  			if ( materialProperties.uniformsList === null ) {

  				const progUniforms = materialProperties.currentProgram.getUniforms();
  				materialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );

  			}

  			return materialProperties.uniformsList;

  		}

  		function updateCommonMaterialProperties( material, parameters ) {

  			const materialProperties = properties.get( material );

  			materialProperties.outputColorSpace = parameters.outputColorSpace;
  			materialProperties.batching = parameters.batching;
  			materialProperties.batchingColor = parameters.batchingColor;
  			materialProperties.instancing = parameters.instancing;
  			materialProperties.instancingColor = parameters.instancingColor;
  			materialProperties.instancingMorph = parameters.instancingMorph;
  			materialProperties.skinning = parameters.skinning;
  			materialProperties.morphTargets = parameters.morphTargets;
  			materialProperties.morphNormals = parameters.morphNormals;
  			materialProperties.morphColors = parameters.morphColors;
  			materialProperties.morphTargetsCount = parameters.morphTargetsCount;
  			materialProperties.numClippingPlanes = parameters.numClippingPlanes;
  			materialProperties.numIntersection = parameters.numClipIntersection;
  			materialProperties.vertexAlphas = parameters.vertexAlphas;
  			materialProperties.vertexTangents = parameters.vertexTangents;
  			materialProperties.toneMapping = parameters.toneMapping;

  		}

  		function setProgram( camera, scene, geometry, material, object ) {

  			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

  			textures.resetTextureUnits();

  			const fog = scene.fog;
  			const environment = material.isMeshStandardMaterial ? scene.environment : null;
  			const colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace$1 );
  			const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
  			const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
  			const vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );
  			const morphTargets = !! geometry.morphAttributes.position;
  			const morphNormals = !! geometry.morphAttributes.normal;
  			const morphColors = !! geometry.morphAttributes.color;

  			let toneMapping = NoToneMapping$1;

  			if ( material.toneMapped ) {

  				if ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {

  					toneMapping = _this.toneMapping;

  				}

  			}

  			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

  			const materialProperties = properties.get( material );
  			const lights = currentRenderState.state.lights;

  			if ( _clippingEnabled === true ) {

  				if ( _localClippingEnabled === true || camera !== _currentCamera ) {

  					const useCache =
  						camera === _currentCamera &&
  						material.id === _currentMaterialId;

  					// we might want to call this function with some ClippingGroup
  					// object instead of the material, once it becomes feasible
  					// (#8465, #8379)
  					clipping.setState( material, camera, useCache );

  				}

  			}

  			//

  			let needsProgramChange = false;

  			if ( material.version === materialProperties.__version ) {

  				if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.outputColorSpace !== colorSpace ) {

  					needsProgramChange = true;

  				} else if ( object.isBatchedMesh && materialProperties.batching === false ) {

  					needsProgramChange = true;

  				} else if ( ! object.isBatchedMesh && materialProperties.batching === true ) {

  					needsProgramChange = true;

  				} else if ( object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null ) {

  					needsProgramChange = true;

  				} else if ( object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null ) {

  					needsProgramChange = true;

  				} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

  					needsProgramChange = true;

  				} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

  					needsProgramChange = true;

  				} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

  					needsProgramChange = true;

  				} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

  					needsProgramChange = true;

  				} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {

  					needsProgramChange = true;

  				} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {

  					needsProgramChange = true;

  				} else if ( object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null ) {

  					needsProgramChange = true;

  				} else if ( object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.envMap !== envMap ) {

  					needsProgramChange = true;

  				} else if ( material.fog === true && materialProperties.fog !== fog ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.numClippingPlanes !== undefined &&
  					( materialProperties.numClippingPlanes !== clipping.numPlanes ||
  					materialProperties.numIntersection !== clipping.numIntersection ) ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.vertexTangents !== vertexTangents ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.morphTargets !== morphTargets ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.morphNormals !== morphNormals ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.morphColors !== morphColors ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.toneMapping !== toneMapping ) {

  					needsProgramChange = true;

  				} else if ( materialProperties.morphTargetsCount !== morphTargetsCount ) {

  					needsProgramChange = true;

  				}

  			} else {

  				needsProgramChange = true;
  				materialProperties.__version = material.version;

  			}

  			//

  			let program = materialProperties.currentProgram;

  			if ( needsProgramChange === true ) {

  				program = getProgram( material, scene, object );

  			}

  			let refreshProgram = false;
  			let refreshMaterial = false;
  			let refreshLights = false;

  			const p_uniforms = program.getUniforms(),
  				m_uniforms = materialProperties.uniforms;

  			if ( state.useProgram( program.program ) ) {

  				refreshProgram = true;
  				refreshMaterial = true;
  				refreshLights = true;

  			}

  			if ( material.id !== _currentMaterialId ) {

  				_currentMaterialId = material.id;

  				refreshMaterial = true;

  			}

  			if ( refreshProgram || _currentCamera !== camera ) {

  				// common camera uniforms

  				const reverseDepthBuffer = state.buffers.depth.getReversed();

  				if ( reverseDepthBuffer ) {

  					_currentProjectionMatrix.copy( camera.projectionMatrix );

  					toNormalizedProjectionMatrix( _currentProjectionMatrix );
  					toReversedProjectionMatrix( _currentProjectionMatrix );

  					p_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );

  				} else {

  					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

  				}

  				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

  				const uCamPos = p_uniforms.map.cameraPosition;

  				if ( uCamPos !== undefined ) {

  					uCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );

  				}

  				if ( capabilities.logarithmicDepthBuffer ) {

  					p_uniforms.setValue( _gl, 'logDepthBufFC',
  						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

  				}

  				// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067

  				if ( material.isMeshPhongMaterial ||
  					material.isMeshToonMaterial ||
  					material.isMeshLambertMaterial ||
  					material.isMeshBasicMaterial ||
  					material.isMeshStandardMaterial ||
  					material.isShaderMaterial ) {

  					p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

  				}

  				if ( _currentCamera !== camera ) {

  					_currentCamera = camera;

  					// lighting uniforms depend on the camera so enforce an update
  					// now, in case this material supports lights - or later, when
  					// the next material that does gets activated:

  					refreshMaterial = true;		// set to true on material change
  					refreshLights = true;		// remains set until update done

  				}

  			}

  			// skinning and morph target uniforms must be set even if material didn't change
  			// auto-setting of texture unit for bone and morph texture must go before other textures
  			// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

  			if ( object.isSkinnedMesh ) {

  				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
  				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

  				const skeleton = object.skeleton;

  				if ( skeleton ) {

  					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

  					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );

  				}

  			}

  			if ( object.isBatchedMesh ) {

  				p_uniforms.setOptional( _gl, object, 'batchingTexture' );
  				p_uniforms.setValue( _gl, 'batchingTexture', object._matricesTexture, textures );

  				p_uniforms.setOptional( _gl, object, 'batchingIdTexture' );
  				p_uniforms.setValue( _gl, 'batchingIdTexture', object._indirectTexture, textures );

  				p_uniforms.setOptional( _gl, object, 'batchingColorTexture' );
  				if ( object._colorsTexture !== null ) {

  					p_uniforms.setValue( _gl, 'batchingColorTexture', object._colorsTexture, textures );

  				}

  			}

  			const morphAttributes = geometry.morphAttributes;

  			if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined ) ) {

  				morphtargets.update( object, geometry, program );

  			}

  			if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

  				materialProperties.receiveShadow = object.receiveShadow;
  				p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

  			}

  			// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512

  			if ( material.isMeshGouraudMaterial && material.envMap !== null ) {

  				m_uniforms.envMap.value = envMap;

  				m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

  			}

  			if ( material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null ) {

  				m_uniforms.envMapIntensity.value = scene.environmentIntensity;

  			}

  			if ( refreshMaterial ) {

  				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

  				if ( materialProperties.needsLights ) {

  					// the current material requires lighting info

  					// note: all lighting uniforms are always set correctly
  					// they simply reference the renderer's state for their
  					// values
  					//
  					// use the current material's .needsUpdate flags to set
  					// the GL state when required

  					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

  				}

  				// refresh uniforms common to several materials

  				if ( fog && material.fog === true ) {

  					materials.refreshFogUniforms( m_uniforms, fog );

  				}

  				materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[ camera.id ] );

  				WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );

  			}

  			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

  				WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );
  				material.uniformsNeedUpdate = false;

  			}

  			if ( material.isSpriteMaterial ) {

  				p_uniforms.setValue( _gl, 'center', object.center );

  			}

  			// common matrices

  			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
  			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
  			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

  			// UBOs

  			if ( material.isShaderMaterial || material.isRawShaderMaterial ) {

  				const groups = material.uniformsGroups;

  				for ( let i = 0, l = groups.length; i < l; i ++ ) {

  					const group = groups[ i ];

  					uniformsGroups.update( group, program );
  					uniformsGroups.bind( group, program );

  				}

  			}

  			return program;

  		}

  		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

  		function markUniformsLightsNeedsUpdate( uniforms, value ) {

  			uniforms.ambientLightColor.needsUpdate = value;
  			uniforms.lightProbe.needsUpdate = value;

  			uniforms.directionalLights.needsUpdate = value;
  			uniforms.directionalLightShadows.needsUpdate = value;
  			uniforms.pointLights.needsUpdate = value;
  			uniforms.pointLightShadows.needsUpdate = value;
  			uniforms.spotLights.needsUpdate = value;
  			uniforms.spotLightShadows.needsUpdate = value;
  			uniforms.rectAreaLights.needsUpdate = value;
  			uniforms.hemisphereLights.needsUpdate = value;

  		}

  		function materialNeedsLights( material ) {

  			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
  				material.isMeshStandardMaterial || material.isShadowMaterial ||
  				( material.isShaderMaterial && material.lights === true );

  		}

  		this.getActiveCubeFace = function () {

  			return _currentActiveCubeFace;

  		};

  		this.getActiveMipmapLevel = function () {

  			return _currentActiveMipmapLevel;

  		};

  		this.getRenderTarget = function () {

  			return _currentRenderTarget;

  		};

  		this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

  			properties.get( renderTarget.texture ).__webglTexture = colorTexture;
  			properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;

  			const renderTargetProperties = properties.get( renderTarget );
  			renderTargetProperties.__hasExternalTextures = true;

  			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

  			if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {

  				// The multisample_render_to_texture extension doesn't work properly if there
  				// are midframe flushes and an external depth buffer. Disable use of the extension.
  				if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {

  					console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
  					renderTargetProperties.__useRenderToTexture = false;

  				}

  			}

  		};

  		this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

  			const renderTargetProperties = properties.get( renderTarget );
  			renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
  			renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

  		};

  		this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

  			_currentRenderTarget = renderTarget;
  			_currentActiveCubeFace = activeCubeFace;
  			_currentActiveMipmapLevel = activeMipmapLevel;

  			let useDefaultFramebuffer = true;
  			let framebuffer = null;
  			let isCube = false;
  			let isRenderTarget3D = false;

  			if ( renderTarget ) {

  				const renderTargetProperties = properties.get( renderTarget );

  				if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

  					// We need to make sure to rebind the framebuffer.
  					state.bindFramebuffer( _gl.FRAMEBUFFER, null );
  					useDefaultFramebuffer = false;

  				} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

  					textures.setupRenderTarget( renderTarget );

  				} else if ( renderTargetProperties.__hasExternalTextures ) {

  					// Color and depth texture must be rebound in order for the swapchain to update.
  					textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

  				} else if ( renderTarget.depthBuffer ) {

  					// check if the depth texture is already bound to the frame buffer and that it's been initialized
  					const depthTexture = renderTarget.depthTexture;
  					if ( renderTargetProperties.__boundDepthTexture !== depthTexture ) {

  						// check if the depth texture is compatible
  						if (
  							depthTexture !== null &&
  							properties.has( depthTexture ) &&
  							( renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height )
  						) {

  							throw new Error( 'WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.' );

  						}

  						// Swap the depth buffer to the currently attached one
  						textures.setupDepthRenderbuffer( renderTarget );

  					}

  				}

  				const texture = renderTarget.texture;

  				if ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

  					isRenderTarget3D = true;

  				}

  				const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

  				if ( renderTarget.isWebGLCubeRenderTarget ) {

  					if ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {

  						framebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];

  					} else {

  						framebuffer = __webglFramebuffer[ activeCubeFace ];

  					}

  					isCube = true;

  				} else if ( ( renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

  					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

  				} else {

  					if ( Array.isArray( __webglFramebuffer ) ) {

  						framebuffer = __webglFramebuffer[ activeMipmapLevel ];

  					} else {

  						framebuffer = __webglFramebuffer;

  					}

  				}

  				_currentViewport.copy( renderTarget.viewport );
  				_currentScissor.copy( renderTarget.scissor );
  				_currentScissorTest = renderTarget.scissorTest;

  			} else {

  				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
  				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
  				_currentScissorTest = _scissorTest;

  			}

  			const framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  			if ( framebufferBound && useDefaultFramebuffer ) {

  				state.drawBuffers( renderTarget, framebuffer );

  			}

  			state.viewport( _currentViewport );
  			state.scissor( _currentScissor );
  			state.setScissorTest( _currentScissorTest );

  			if ( isCube ) {

  				const textureProperties = properties.get( renderTarget.texture );
  				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

  			} else if ( isRenderTarget3D ) {

  				const textureProperties = properties.get( renderTarget.texture );
  				const layer = activeCubeFace || 0;
  				_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

  			}

  			_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

  		};

  		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

  			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

  				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
  				return;

  			}

  			let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

  			if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

  				framebuffer = framebuffer[ activeCubeFaceIndex ];

  			}

  			if ( framebuffer ) {

  				state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  				try {

  					const texture = renderTarget.texture;
  					const textureFormat = texture.format;
  					const textureType = texture.type;

  					if ( ! capabilities.textureFormatReadable( textureFormat ) ) {

  						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
  						return;

  					}

  					if ( ! capabilities.textureTypeReadable( textureType ) ) {

  						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
  						return;

  					}

  					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

  					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

  						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

  					}

  				} finally {

  					// restore framebuffer of current render target if necessary

  					const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
  					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  				}

  			}

  		};

  		this.readRenderTargetPixelsAsync = async function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

  			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

  				throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );

  			}

  			let framebuffer = properties.get( renderTarget ).__webglFramebuffer;
  			if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

  				framebuffer = framebuffer[ activeCubeFaceIndex ];

  			}

  			if ( framebuffer ) {

  				const texture = renderTarget.texture;
  				const textureFormat = texture.format;
  				const textureType = texture.type;

  				if ( ! capabilities.textureFormatReadable( textureFormat ) ) {

  					throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.' );

  				}

  				if ( ! capabilities.textureTypeReadable( textureType ) ) {

  					throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.' );

  				}

  				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
  				if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

  					// set the active frame buffer to the one we want to read
  					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

  					const glBuffer = _gl.createBuffer();
  					_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );
  					_gl.bufferData( _gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ );
  					_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), 0 );

  					// reset the frame buffer to the currently set buffer before waiting
  					const currFramebuffer = _currentRenderTarget !== null ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
  					state.bindFramebuffer( _gl.FRAMEBUFFER, currFramebuffer );

  					// check if the commands have finished every 8 ms
  					const sync = _gl.fenceSync( _gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );

  					_gl.flush();

  					await probeAsync( _gl, sync, 4 );

  					// read the data and delete the buffer
  					_gl.bindBuffer( _gl.PIXEL_PACK_BUFFER, glBuffer );
  					_gl.getBufferSubData( _gl.PIXEL_PACK_BUFFER, 0, buffer );
  					_gl.deleteBuffer( glBuffer );
  					_gl.deleteSync( sync );

  					return buffer;

  				} else {

  					throw new Error( 'THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.' );

  				}

  			}

  		};

  		this.copyFramebufferToTexture = function ( texture, position = null, level = 0 ) {

  			// support previous signature with position first
  			if ( texture.isTexture !== true ) {

  				// @deprecated, r165
  				warnOnce$1( 'WebGLRenderer: copyFramebufferToTexture function signature has changed.' );

  				position = arguments[ 0 ] || null;
  				texture = arguments[ 1 ];

  			}

  			const levelScale = Math.pow( 2, - level );
  			const width = Math.floor( texture.image.width * levelScale );
  			const height = Math.floor( texture.image.height * levelScale );

  			const x = position !== null ? position.x : 0;
  			const y = position !== null ? position.y : 0;

  			textures.setTexture2D( texture, 0 );

  			_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, x, y, width, height );

  			state.unbindTexture();

  		};

  		this.copyTextureToTexture = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

  			// support previous signature with dstPosition first
  			if ( srcTexture.isTexture !== true ) {

  				// @deprecated, r165
  				warnOnce$1( 'WebGLRenderer: copyTextureToTexture function signature has changed.' );

  				dstPosition = arguments[ 0 ] || null;
  				srcTexture = arguments[ 1 ];
  				dstTexture = arguments[ 2 ];
  				level = arguments[ 3 ] || 0;
  				srcRegion = null;

  			}

  			// gather the necessary dimensions to copy
  			let width, height, depth, minX, minY, minZ;
  			let dstX, dstY, dstZ;
  			const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;
  			if ( srcRegion !== null ) {

  				width = srcRegion.max.x - srcRegion.min.x;
  				height = srcRegion.max.y - srcRegion.min.y;
  				depth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
  				minX = srcRegion.min.x;
  				minY = srcRegion.min.y;
  				minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;

  			} else {

  				width = image.width;
  				height = image.height;
  				depth = image.depth || 1;
  				minX = 0;
  				minY = 0;
  				minZ = 0;

  			}

  			if ( dstPosition !== null ) {

  				dstX = dstPosition.x;
  				dstY = dstPosition.y;
  				dstZ = dstPosition.z;

  			} else {

  				dstX = 0;
  				dstY = 0;
  				dstZ = 0;

  			}

  			// Set up the destination target
  			const glFormat = utils.convert( dstTexture.format );
  			const glType = utils.convert( dstTexture.type );
  			let glTarget;

  			if ( dstTexture.isData3DTexture ) {

  				textures.setTexture3D( dstTexture, 0 );
  				glTarget = _gl.TEXTURE_3D;

  			} else if ( dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture ) {

  				textures.setTexture2DArray( dstTexture, 0 );
  				glTarget = _gl.TEXTURE_2D_ARRAY;

  			} else {

  				textures.setTexture2D( dstTexture, 0 );
  				glTarget = _gl.TEXTURE_2D;

  			}

  			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
  			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
  			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

  			// used for copying data from cpu
  			const currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
  			const currentUnpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );
  			const currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
  			const currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );
  			const currentUnpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );

  			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );
  			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, minX );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, minY );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, minZ );

  			// set up the src texture
  			const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;
  			const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;
  			if ( srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture ) {

  				const srcTextureProperties = properties.get( srcTexture );
  				const dstTextureProperties = properties.get( dstTexture );
  				const srcRenderTargetProperties = properties.get( srcTextureProperties.__renderTarget );
  				const dstRenderTargetProperties = properties.get( dstTextureProperties.__renderTarget );

  				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer );
  				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer );

  				for ( let i = 0; i < depth; i ++ ) {

  					// if the source or destination are a 3d target then a layer needs to be bound
  					if ( isSrc3D ) {

  						_gl.framebufferTextureLayer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( srcTexture ).__webglTexture, level, minZ + i );

  					}

  					if ( srcTexture.isDepthTexture ) {

  						if ( isDst3D ) {

  							_gl.framebufferTextureLayer( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get( dstTexture ).__webglTexture, level, dstZ + i );

  						}

  						_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST );

  					} else if ( isDst3D ) {

  						_gl.copyTexSubImage3D( glTarget, level, dstX, dstY, dstZ + i, minX, minY, width, height );

  					} else {

  						_gl.copyTexSubImage2D( glTarget, level, dstX, dstY, dstZ + i, minX, minY, width, height );

  					}

  				}

  				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
  				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

  			} else {

  				if ( isDst3D ) {

  					// copy data into the 3d texture
  					if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

  						_gl.texSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );

  					} else if ( dstTexture.isCompressedArrayTexture ) {

  						_gl.compressedTexSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );

  					} else {

  						_gl.texSubImage3D( glTarget, level, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );

  					}

  				} else {

  					// copy data into the 2d texture
  					if ( srcTexture.isDataTexture ) {

  						_gl.texSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data );

  					} else if ( srcTexture.isCompressedTexture ) {

  						_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data );

  					} else {

  						_gl.texSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image );

  					}

  				}

  			}

  			// reset values
  			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );
  			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );
  			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );

  			// Generate mipmaps only when copying level 0
  			if ( level === 0 && dstTexture.generateMipmaps ) {

  				_gl.generateMipmap( glTarget );

  			}

  			state.unbindTexture();

  		};

  		this.copyTextureToTexture3D = function ( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

  			// support previous signature with source box first
  			if ( srcTexture.isTexture !== true ) {

  				// @deprecated, r165
  				warnOnce$1( 'WebGLRenderer: copyTextureToTexture3D function signature has changed.' );

  				srcRegion = arguments[ 0 ] || null;
  				dstPosition = arguments[ 1 ] || null;
  				srcTexture = arguments[ 2 ];
  				dstTexture = arguments[ 3 ];
  				level = arguments[ 4 ] || 0;

  			}

  			// @deprecated, r170
  			warnOnce$1( 'WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.' );

  			return this.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );

  		};

  		this.initRenderTarget = function ( target ) {

  			if ( properties.get( target ).__webglFramebuffer === undefined ) {

  				textures.setupRenderTarget( target );

  			}

  		};

  		this.initTexture = function ( texture ) {

  			if ( texture.isCubeTexture ) {

  				textures.setTextureCube( texture, 0 );

  			} else if ( texture.isData3DTexture ) {

  				textures.setTexture3D( texture, 0 );

  			} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

  				textures.setTexture2DArray( texture, 0 );

  			} else {

  				textures.setTexture2D( texture, 0 );

  			}

  			state.unbindTexture();

  		};

  		this.resetState = function () {

  			_currentActiveCubeFace = 0;
  			_currentActiveMipmapLevel = 0;
  			_currentRenderTarget = null;

  			state.reset();
  			bindingStates.reset();

  		};

  		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

  		}

  	}

  	get coordinateSystem() {

  		return WebGLCoordinateSystem$1;

  	}

  	get outputColorSpace() {

  		return this._outputColorSpace;

  	}

  	set outputColorSpace( colorSpace ) {

  		this._outputColorSpace = colorSpace;

  		const gl = this.getContext();
  		gl.drawingBufferColorspace = ColorManagement$1._getDrawingBufferColorSpace( colorSpace );
  		gl.unpackColorSpace = ColorManagement$1._getUnpackColorSpace();

  	}

  }

  let Scene$1 = class Scene extends Object3D$1 {

  	constructor() {

  		super();

  		this.isScene = true;

  		this.type = 'Scene';

  		this.background = null;
  		this.environment = null;
  		this.fog = null;

  		this.backgroundBlurriness = 0;
  		this.backgroundIntensity = 1;
  		this.backgroundRotation = new Euler$1();

  		this.environmentIntensity = 1;
  		this.environmentRotation = new Euler$1();

  		this.overrideMaterial = null;

  		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

  		}

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		if ( source.background !== null ) this.background = source.background.clone();
  		if ( source.environment !== null ) this.environment = source.environment.clone();
  		if ( source.fog !== null ) this.fog = source.fog.clone();

  		this.backgroundBlurriness = source.backgroundBlurriness;
  		this.backgroundIntensity = source.backgroundIntensity;
  		this.backgroundRotation.copy( source.backgroundRotation );

  		this.environmentIntensity = source.environmentIntensity;
  		this.environmentRotation.copy( source.environmentRotation );

  		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

  		if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
  		if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;
  		data.object.backgroundRotation = this.backgroundRotation.toArray();

  		if ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;
  		data.object.environmentRotation = this.environmentRotation.toArray();

  		return data;

  	}

  };

  let LineBasicMaterial$1 = class LineBasicMaterial extends Material$1 {

  	static get type() {

  		return 'LineBasicMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isLineBasicMaterial = true;

  		this.color = new Color$1( 0xffffff );

  		this.map = null;

  		this.linewidth = 1;
  		this.linecap = 'round';
  		this.linejoin = 'round';

  		this.fog = true;

  		this.setValues( parameters );

  	}


  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.linewidth = source.linewidth;
  		this.linecap = source.linecap;
  		this.linejoin = source.linejoin;

  		this.fog = source.fog;

  		return this;

  	}

  };

  const _vStart = /*@__PURE__*/ new Vector3$1();
  const _vEnd = /*@__PURE__*/ new Vector3$1();

  const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4$1();
  const _ray$1 = /*@__PURE__*/ new Ray$1();
  const _sphere$1 = /*@__PURE__*/ new Sphere$1();

  const _intersectPointOnRay = /*@__PURE__*/ new Vector3$1();
  const _intersectPointOnSegment = /*@__PURE__*/ new Vector3$1();

  class Line extends Object3D$1 {

  	constructor( geometry = new BufferGeometry$1(), material = new LineBasicMaterial$1() ) {

  		super();

  		this.isLine = true;

  		this.type = 'Line';

  		this.geometry = geometry;
  		this.material = material;

  		this.updateMorphTargets();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
  		this.geometry = source.geometry;

  		return this;

  	}

  	computeLineDistances() {

  		const geometry = this.geometry;

  		// we assume non-indexed geometry

  		if ( geometry.index === null ) {

  			const positionAttribute = geometry.attributes.position;
  			const lineDistances = [ 0 ];

  			for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {

  				_vStart.fromBufferAttribute( positionAttribute, i - 1 );
  				_vEnd.fromBufferAttribute( positionAttribute, i );

  				lineDistances[ i ] = lineDistances[ i - 1 ];
  				lineDistances[ i ] += _vStart.distanceTo( _vEnd );

  			}

  			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute$1( lineDistances, 1 ) );

  		} else {

  			console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  		}

  		return this;

  	}

  	raycast( raycaster, intersects ) {

  		const geometry = this.geometry;
  		const matrixWorld = this.matrixWorld;
  		const threshold = raycaster.params.Line.threshold;
  		const drawRange = geometry.drawRange;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$1.copy( geometry.boundingSphere );
  		_sphere$1.applyMatrix4( matrixWorld );
  		_sphere$1.radius += threshold;

  		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;

  		//

  		_inverseMatrix$1.copy( matrixWorld ).invert();
  		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

  		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  		const localThresholdSq = localThreshold * localThreshold;

  		const step = this.isLineSegments ? 2 : 1;

  		const index = geometry.index;
  		const attributes = geometry.attributes;
  		const positionAttribute = attributes.position;

  		if ( index !== null ) {

  			const start = Math.max( 0, drawRange.start );
  			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  			for ( let i = start, l = end - 1; i < l; i += step ) {

  				const a = index.getX( i );
  				const b = index.getX( i + 1 );

  				const intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b );

  				if ( intersect ) {

  					intersects.push( intersect );

  				}

  			}

  			if ( this.isLineLoop ) {

  				const a = index.getX( end - 1 );
  				const b = index.getX( start );

  				const intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b );

  				if ( intersect ) {

  					intersects.push( intersect );

  				}

  			}

  		} else {

  			const start = Math.max( 0, drawRange.start );
  			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

  			for ( let i = start, l = end - 1; i < l; i += step ) {

  				const intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, i, i + 1 );

  				if ( intersect ) {

  					intersects.push( intersect );

  				}

  			}

  			if ( this.isLineLoop ) {

  				const intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, end - 1, start );

  				if ( intersect ) {

  					intersects.push( intersect );

  				}

  			}

  		}

  	}

  	updateMorphTargets() {

  		const geometry = this.geometry;

  		const morphAttributes = geometry.morphAttributes;
  		const keys = Object.keys( morphAttributes );

  		if ( keys.length > 0 ) {

  			const morphAttribute = morphAttributes[ keys[ 0 ] ];

  			if ( morphAttribute !== undefined ) {

  				this.morphTargetInfluences = [];
  				this.morphTargetDictionary = {};

  				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  					const name = morphAttribute[ m ].name || String( m );

  					this.morphTargetInfluences.push( 0 );
  					this.morphTargetDictionary[ name ] = m;

  				}

  			}

  		}

  	}

  }

  function checkIntersection( object, raycaster, ray, thresholdSq, a, b ) {

  	const positionAttribute = object.geometry.attributes.position;

  	_vStart.fromBufferAttribute( positionAttribute, a );
  	_vEnd.fromBufferAttribute( positionAttribute, b );

  	const distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );

  	if ( distSq > thresholdSq ) return;

  	_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation

  	const distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );

  	if ( distance < raycaster.near || distance > raycaster.far ) return;

  	return {

  		distance: distance,
  		// What do we want? intersection point on the ray or on the segment??
  		// point: raycaster.ray.at( distance ),
  		point: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),
  		index: a,
  		face: null,
  		faceIndex: null,
  		barycoord: null,
  		object: object

  	};

  }

  /**
   * Extensible curve object.
   *
   * Some common of curve methods:
   * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
   * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
   * .getPoints(), .getSpacedPoints()
   * .getLength()
   * .updateArcLengths()
   *
   * This following curves inherit from THREE.Curve:
   *
   * -- 2D curves --
   * THREE.ArcCurve
   * THREE.CubicBezierCurve
   * THREE.EllipseCurve
   * THREE.LineCurve
   * THREE.QuadraticBezierCurve
   * THREE.SplineCurve
   *
   * -- 3D curves --
   * THREE.CatmullRomCurve3
   * THREE.CubicBezierCurve3
   * THREE.LineCurve3
   * THREE.QuadraticBezierCurve3
   *
   * A series of curves can be represented as a THREE.CurvePath.
   *
   **/

  class Curve {

  	constructor() {

  		this.type = 'Curve';

  		this.arcLengthDivisions = 200;

  	}

  	// Virtual base class method to overwrite and implement in subclasses
  	//	- t [0 .. 1]

  	getPoint( /* t, optionalTarget */ ) {

  		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
  		return null;

  	}

  	// Get point at relative position in curve according to arc length
  	// - u [0 .. 1]

  	getPointAt( u, optionalTarget ) {

  		const t = this.getUtoTmapping( u );
  		return this.getPoint( t, optionalTarget );

  	}

  	// Get sequence of points using getPoint( t )

  	getPoints( divisions = 5 ) {

  		const points = [];

  		for ( let d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPoint( d / divisions ) );

  		}

  		return points;

  	}

  	// Get sequence of points using getPointAt( u )

  	getSpacedPoints( divisions = 5 ) {

  		const points = [];

  		for ( let d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPointAt( d / divisions ) );

  		}

  		return points;

  	}

  	// Get total curve arc length

  	getLength() {

  		const lengths = this.getLengths();
  		return lengths[ lengths.length - 1 ];

  	}

  	// Get list of cumulative segment lengths

  	getLengths( divisions = this.arcLengthDivisions ) {

  		if ( this.cacheArcLengths &&
  			( this.cacheArcLengths.length === divisions + 1 ) &&
  			! this.needsUpdate ) {

  			return this.cacheArcLengths;

  		}

  		this.needsUpdate = false;

  		const cache = [];
  		let current, last = this.getPoint( 0 );
  		let sum = 0;

  		cache.push( 0 );

  		for ( let p = 1; p <= divisions; p ++ ) {

  			current = this.getPoint( p / divisions );
  			sum += current.distanceTo( last );
  			cache.push( sum );
  			last = current;

  		}

  		this.cacheArcLengths = cache;

  		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

  	}

  	updateArcLengths() {

  		this.needsUpdate = true;
  		this.getLengths();

  	}

  	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

  	getUtoTmapping( u, distance ) {

  		const arcLengths = this.getLengths();

  		let i = 0;
  		const il = arcLengths.length;

  		let targetArcLength; // The targeted u distance value to get

  		if ( distance ) {

  			targetArcLength = distance;

  		} else {

  			targetArcLength = u * arcLengths[ il - 1 ];

  		}

  		// binary search for the index with largest value smaller than target u distance

  		let low = 0, high = il - 1, comparison;

  		while ( low <= high ) {

  			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

  			comparison = arcLengths[ i ] - targetArcLength;

  			if ( comparison < 0 ) {

  				low = i + 1;

  			} else if ( comparison > 0 ) {

  				high = i - 1;

  			} else {

  				high = i;
  				break;

  				// DONE

  			}

  		}

  		i = high;

  		if ( arcLengths[ i ] === targetArcLength ) {

  			return i / ( il - 1 );

  		}

  		// we could get finer grain at lengths, or use simple interpolation between two points

  		const lengthBefore = arcLengths[ i ];
  		const lengthAfter = arcLengths[ i + 1 ];

  		const segmentLength = lengthAfter - lengthBefore;

  		// determine where we are between the 'before' and 'after' points

  		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

  		// add that fractional amount to t

  		const t = ( i + segmentFraction ) / ( il - 1 );

  		return t;

  	}

  	// Returns a unit vector tangent at t
  	// In case any sub curve does not implement its tangent derivation,
  	// 2 points a small delta apart will be used to find its gradient
  	// which seems to give a reasonable approximation

  	getTangent( t, optionalTarget ) {

  		const delta = 0.0001;
  		let t1 = t - delta;
  		let t2 = t + delta;

  		// Capping in case of danger

  		if ( t1 < 0 ) t1 = 0;
  		if ( t2 > 1 ) t2 = 1;

  		const pt1 = this.getPoint( t1 );
  		const pt2 = this.getPoint( t2 );

  		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2$1() : new Vector3$1() );

  		tangent.copy( pt2 ).sub( pt1 ).normalize();

  		return tangent;

  	}

  	getTangentAt( u, optionalTarget ) {

  		const t = this.getUtoTmapping( u );
  		return this.getTangent( t, optionalTarget );

  	}

  	computeFrenetFrames( segments, closed ) {

  		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

  		const normal = new Vector3$1();

  		const tangents = [];
  		const normals = [];
  		const binormals = [];

  		const vec = new Vector3$1();
  		const mat = new Matrix4$1();

  		// compute the tangent vectors for each segment on the curve

  		for ( let i = 0; i <= segments; i ++ ) {

  			const u = i / segments;

  			tangents[ i ] = this.getTangentAt( u, new Vector3$1() );

  		}

  		// select an initial normal vector perpendicular to the first tangent vector,
  		// and in the direction of the minimum tangent xyz component

  		normals[ 0 ] = new Vector3$1();
  		binormals[ 0 ] = new Vector3$1();
  		let min = Number.MAX_VALUE;
  		const tx = Math.abs( tangents[ 0 ].x );
  		const ty = Math.abs( tangents[ 0 ].y );
  		const tz = Math.abs( tangents[ 0 ].z );

  		if ( tx <= min ) {

  			min = tx;
  			normal.set( 1, 0, 0 );

  		}

  		if ( ty <= min ) {

  			min = ty;
  			normal.set( 0, 1, 0 );

  		}

  		if ( tz <= min ) {

  			normal.set( 0, 0, 1 );

  		}

  		vec.crossVectors( tangents[ 0 ], normal ).normalize();

  		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
  		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


  		// compute the slowly-varying normal and binormal vectors for each segment on the curve

  		for ( let i = 1; i <= segments; i ++ ) {

  			normals[ i ] = normals[ i - 1 ].clone();

  			binormals[ i ] = binormals[ i - 1 ].clone();

  			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

  			if ( vec.length() > Number.EPSILON ) {

  				vec.normalize();

  				const theta = Math.acos( clamp$2( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

  				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

  			}

  			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  		}

  		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

  		if ( closed === true ) {

  			let theta = Math.acos( clamp$2( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
  			theta /= segments;

  			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

  				theta = - theta;

  			}

  			for ( let i = 1; i <= segments; i ++ ) {

  				// twist a little...
  				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
  				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  			}

  		}

  		return {
  			tangents: tangents,
  			normals: normals,
  			binormals: binormals
  		};

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.arcLengthDivisions = source.arcLengthDivisions;

  		return this;

  	}

  	toJSON() {

  		const data = {
  			metadata: {
  				version: 4.6,
  				type: 'Curve',
  				generator: 'Curve.toJSON'
  			}
  		};

  		data.arcLengthDivisions = this.arcLengthDivisions;
  		data.type = this.type;

  		return data;

  	}

  	fromJSON( json ) {

  		this.arcLengthDivisions = json.arcLengthDivisions;

  		return this;

  	}

  }

  class EllipseCurve extends Curve {

  	constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {

  		super();

  		this.isEllipseCurve = true;

  		this.type = 'EllipseCurve';

  		this.aX = aX;
  		this.aY = aY;

  		this.xRadius = xRadius;
  		this.yRadius = yRadius;

  		this.aStartAngle = aStartAngle;
  		this.aEndAngle = aEndAngle;

  		this.aClockwise = aClockwise;

  		this.aRotation = aRotation;

  	}

  	getPoint( t, optionalTarget = new Vector2$1() ) {

  		const point = optionalTarget;

  		const twoPi = Math.PI * 2;
  		let deltaAngle = this.aEndAngle - this.aStartAngle;
  		const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

  		// ensures that deltaAngle is 0 .. 2 PI
  		while ( deltaAngle < 0 ) deltaAngle += twoPi;
  		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

  		if ( deltaAngle < Number.EPSILON ) {

  			if ( samePoints ) {

  				deltaAngle = 0;

  			} else {

  				deltaAngle = twoPi;

  			}

  		}

  		if ( this.aClockwise === true && ! samePoints ) {

  			if ( deltaAngle === twoPi ) {

  				deltaAngle = - twoPi;

  			} else {

  				deltaAngle = deltaAngle - twoPi;

  			}

  		}

  		const angle = this.aStartAngle + t * deltaAngle;
  		let x = this.aX + this.xRadius * Math.cos( angle );
  		let y = this.aY + this.yRadius * Math.sin( angle );

  		if ( this.aRotation !== 0 ) {

  			const cos = Math.cos( this.aRotation );
  			const sin = Math.sin( this.aRotation );

  			const tx = x - this.aX;
  			const ty = y - this.aY;

  			// Rotate the point about the center of the ellipse.
  			x = tx * cos - ty * sin + this.aX;
  			y = tx * sin + ty * cos + this.aY;

  		}

  		return point.set( x, y );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.aX = source.aX;
  		this.aY = source.aY;

  		this.xRadius = source.xRadius;
  		this.yRadius = source.yRadius;

  		this.aStartAngle = source.aStartAngle;
  		this.aEndAngle = source.aEndAngle;

  		this.aClockwise = source.aClockwise;

  		this.aRotation = source.aRotation;

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.aX = this.aX;
  		data.aY = this.aY;

  		data.xRadius = this.xRadius;
  		data.yRadius = this.yRadius;

  		data.aStartAngle = this.aStartAngle;
  		data.aEndAngle = this.aEndAngle;

  		data.aClockwise = this.aClockwise;

  		data.aRotation = this.aRotation;

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.aX = json.aX;
  		this.aY = json.aY;

  		this.xRadius = json.xRadius;
  		this.yRadius = json.yRadius;

  		this.aStartAngle = json.aStartAngle;
  		this.aEndAngle = json.aEndAngle;

  		this.aClockwise = json.aClockwise;

  		this.aRotation = json.aRotation;

  		return this;

  	}

  }

  class ArcCurve extends EllipseCurve {

  	constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  		this.isArcCurve = true;

  		this.type = 'ArcCurve';

  	}

  }

  /**
   * Centripetal CatmullRom Curve - which is useful for avoiding
   * cusps and self-intersections in non-uniform catmull rom curves.
   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
   *
   * curve.type accepts centripetal(default), chordal and catmullrom
   * curve.tension is used for catmullrom which defaults to 0.5
   */


  /*
  Based on an optimized c++ solution in
   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
   - http://ideone.com/NoEbVM

  This CubicPoly class could be used for reusing some variables and calculations,
  but for three.js curve use, it could be possible inlined and flatten into a single function call
  which can be placed in CurveUtils.
  */

  function CubicPoly() {

  	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

  	/*
  	 * Compute coefficients for a cubic polynomial
  	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
  	 * such that
  	 *   p(0) = x0, p(1) = x1
  	 *  and
  	 *   p'(0) = t0, p'(1) = t1.
  	 */
  	function init( x0, x1, t0, t1 ) {

  		c0 = x0;
  		c1 = t0;
  		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
  		c3 = 2 * x0 - 2 * x1 + t0 + t1;

  	}

  	return {

  		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

  			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

  		},

  		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

  			// compute tangents when parameterized in [t1,t2]
  			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
  			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

  			// rescale tangents for parametrization in [0,1]
  			t1 *= dt1;
  			t2 *= dt1;

  			init( x1, x2, t1, t2 );

  		},

  		calc: function ( t ) {

  			const t2 = t * t;
  			const t3 = t2 * t;
  			return c0 + c1 * t + c2 * t2 + c3 * t3;

  		}

  	};

  }

  //

  const tmp = /*@__PURE__*/ new Vector3$1();
  const px = /*@__PURE__*/ new CubicPoly();
  const py = /*@__PURE__*/ new CubicPoly();
  const pz = /*@__PURE__*/ new CubicPoly();

  class CatmullRomCurve3 extends Curve {

  	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

  		super();

  		this.isCatmullRomCurve3 = true;

  		this.type = 'CatmullRomCurve3';

  		this.points = points;
  		this.closed = closed;
  		this.curveType = curveType;
  		this.tension = tension;

  	}

  	getPoint( t, optionalTarget = new Vector3$1() ) {

  		const point = optionalTarget;

  		const points = this.points;
  		const l = points.length;

  		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
  		let intPoint = Math.floor( p );
  		let weight = p - intPoint;

  		if ( this.closed ) {

  			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

  		} else if ( weight === 0 && intPoint === l - 1 ) {

  			intPoint = l - 2;
  			weight = 1;

  		}

  		let p0, p3; // 4 points (p1 & p2 defined below)

  		if ( this.closed || intPoint > 0 ) {

  			p0 = points[ ( intPoint - 1 ) % l ];

  		} else {

  			// extrapolate first point
  			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
  			p0 = tmp;

  		}

  		const p1 = points[ intPoint % l ];
  		const p2 = points[ ( intPoint + 1 ) % l ];

  		if ( this.closed || intPoint + 2 < l ) {

  			p3 = points[ ( intPoint + 2 ) % l ];

  		} else {

  			// extrapolate last point
  			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
  			p3 = tmp;

  		}

  		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

  			// init Centripetal / Chordal Catmull-Rom
  			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
  			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
  			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
  			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

  			// safety check for repeated points
  			if ( dt1 < 1e-4 ) dt1 = 1.0;
  			if ( dt0 < 1e-4 ) dt0 = dt1;
  			if ( dt2 < 1e-4 ) dt2 = dt1;

  			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
  			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
  			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

  		} else if ( this.curveType === 'catmullrom' ) {

  			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
  			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
  			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

  		}

  		point.set(
  			px.calc( weight ),
  			py.calc( weight ),
  			pz.calc( weight )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.points = [];

  		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

  			const point = source.points[ i ];

  			this.points.push( point.clone() );

  		}

  		this.closed = source.closed;
  		this.curveType = source.curveType;
  		this.tension = source.tension;

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.points = [];

  		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

  			const point = this.points[ i ];
  			data.points.push( point.toArray() );

  		}

  		data.closed = this.closed;
  		data.curveType = this.curveType;
  		data.tension = this.tension;

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.points = [];

  		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

  			const point = json.points[ i ];
  			this.points.push( new Vector3$1().fromArray( point ) );

  		}

  		this.closed = json.closed;
  		this.curveType = json.curveType;
  		this.tension = json.tension;

  		return this;

  	}

  }

  /**
   * Bezier Curves formulas obtained from
   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
   */

  function CatmullRom( t, p0, p1, p2, p3 ) {

  	const v0 = ( p2 - p0 ) * 0.5;
  	const v1 = ( p3 - p1 ) * 0.5;
  	const t2 = t * t;
  	const t3 = t * t2;
  	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  }

  //

  function QuadraticBezierP0( t, p ) {

  	const k = 1 - t;
  	return k * k * p;

  }

  function QuadraticBezierP1( t, p ) {

  	return 2 * ( 1 - t ) * t * p;

  }

  function QuadraticBezierP2( t, p ) {

  	return t * t * p;

  }

  function QuadraticBezier( t, p0, p1, p2 ) {

  	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
  		QuadraticBezierP2( t, p2 );

  }

  //

  function CubicBezierP0( t, p ) {

  	const k = 1 - t;
  	return k * k * k * p;

  }

  function CubicBezierP1( t, p ) {

  	const k = 1 - t;
  	return 3 * k * k * t * p;

  }

  function CubicBezierP2( t, p ) {

  	return 3 * ( 1 - t ) * t * t * p;

  }

  function CubicBezierP3( t, p ) {

  	return t * t * t * p;

  }

  function CubicBezier( t, p0, p1, p2, p3 ) {

  	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
  		CubicBezierP3( t, p3 );

  }

  class CubicBezierCurve extends Curve {

  	constructor( v0 = new Vector2$1(), v1 = new Vector2$1(), v2 = new Vector2$1(), v3 = new Vector2$1() ) {

  		super();

  		this.isCubicBezierCurve = true;

  		this.type = 'CubicBezierCurve';

  		this.v0 = v0;
  		this.v1 = v1;
  		this.v2 = v2;
  		this.v3 = v3;

  	}

  	getPoint( t, optionalTarget = new Vector2$1() ) {

  		const point = optionalTarget;

  		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  		point.set(
  			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v0.copy( source.v0 );
  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );
  		this.v3.copy( source.v3 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v0 = this.v0.toArray();
  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();
  		data.v3 = this.v3.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v0.fromArray( json.v0 );
  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );
  		this.v3.fromArray( json.v3 );

  		return this;

  	}

  }

  class CubicBezierCurve3 extends Curve {

  	constructor( v0 = new Vector3$1(), v1 = new Vector3$1(), v2 = new Vector3$1(), v3 = new Vector3$1() ) {

  		super();

  		this.isCubicBezierCurve3 = true;

  		this.type = 'CubicBezierCurve3';

  		this.v0 = v0;
  		this.v1 = v1;
  		this.v2 = v2;
  		this.v3 = v3;

  	}

  	getPoint( t, optionalTarget = new Vector3$1() ) {

  		const point = optionalTarget;

  		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  		point.set(
  			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
  			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v0.copy( source.v0 );
  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );
  		this.v3.copy( source.v3 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v0 = this.v0.toArray();
  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();
  		data.v3 = this.v3.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v0.fromArray( json.v0 );
  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );
  		this.v3.fromArray( json.v3 );

  		return this;

  	}

  }

  class LineCurve extends Curve {

  	constructor( v1 = new Vector2$1(), v2 = new Vector2$1() ) {

  		super();

  		this.isLineCurve = true;

  		this.type = 'LineCurve';

  		this.v1 = v1;
  		this.v2 = v2;

  	}

  	getPoint( t, optionalTarget = new Vector2$1() ) {

  		const point = optionalTarget;

  		if ( t === 1 ) {

  			point.copy( this.v2 );

  		} else {

  			point.copy( this.v2 ).sub( this.v1 );
  			point.multiplyScalar( t ).add( this.v1 );

  		}

  		return point;

  	}

  	// Line curve is linear, so we can overwrite default getPointAt
  	getPointAt( u, optionalTarget ) {

  		return this.getPoint( u, optionalTarget );

  	}

  	getTangent( t, optionalTarget = new Vector2$1() ) {

  		return optionalTarget.subVectors( this.v2, this.v1 ).normalize();

  	}

  	getTangentAt( u, optionalTarget ) {

  		return this.getTangent( u, optionalTarget );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );

  		return this;

  	}

  }

  class LineCurve3 extends Curve {

  	constructor( v1 = new Vector3$1(), v2 = new Vector3$1() ) {

  		super();

  		this.isLineCurve3 = true;

  		this.type = 'LineCurve3';

  		this.v1 = v1;
  		this.v2 = v2;

  	}

  	getPoint( t, optionalTarget = new Vector3$1() ) {

  		const point = optionalTarget;

  		if ( t === 1 ) {

  			point.copy( this.v2 );

  		} else {

  			point.copy( this.v2 ).sub( this.v1 );
  			point.multiplyScalar( t ).add( this.v1 );

  		}

  		return point;

  	}

  	// Line curve is linear, so we can overwrite default getPointAt
  	getPointAt( u, optionalTarget ) {

  		return this.getPoint( u, optionalTarget );

  	}

  	getTangent( t, optionalTarget = new Vector3$1() ) {

  		return optionalTarget.subVectors( this.v2, this.v1 ).normalize();

  	}

  	getTangentAt( u, optionalTarget ) {

  		return this.getTangent( u, optionalTarget );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );

  		return this;

  	}

  }

  class QuadraticBezierCurve extends Curve {

  	constructor( v0 = new Vector2$1(), v1 = new Vector2$1(), v2 = new Vector2$1() ) {

  		super();

  		this.isQuadraticBezierCurve = true;

  		this.type = 'QuadraticBezierCurve';

  		this.v0 = v0;
  		this.v1 = v1;
  		this.v2 = v2;

  	}

  	getPoint( t, optionalTarget = new Vector2$1() ) {

  		const point = optionalTarget;

  		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

  		point.set(
  			QuadraticBezier( t, v0.x, v1.x, v2.x ),
  			QuadraticBezier( t, v0.y, v1.y, v2.y )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v0.copy( source.v0 );
  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v0 = this.v0.toArray();
  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v0.fromArray( json.v0 );
  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );

  		return this;

  	}

  }

  class QuadraticBezierCurve3 extends Curve {

  	constructor( v0 = new Vector3$1(), v1 = new Vector3$1(), v2 = new Vector3$1() ) {

  		super();

  		this.isQuadraticBezierCurve3 = true;

  		this.type = 'QuadraticBezierCurve3';

  		this.v0 = v0;
  		this.v1 = v1;
  		this.v2 = v2;

  	}

  	getPoint( t, optionalTarget = new Vector3$1() ) {

  		const point = optionalTarget;

  		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

  		point.set(
  			QuadraticBezier( t, v0.x, v1.x, v2.x ),
  			QuadraticBezier( t, v0.y, v1.y, v2.y ),
  			QuadraticBezier( t, v0.z, v1.z, v2.z )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.v0.copy( source.v0 );
  		this.v1.copy( source.v1 );
  		this.v2.copy( source.v2 );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.v0 = this.v0.toArray();
  		data.v1 = this.v1.toArray();
  		data.v2 = this.v2.toArray();

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.v0.fromArray( json.v0 );
  		this.v1.fromArray( json.v1 );
  		this.v2.fromArray( json.v2 );

  		return this;

  	}

  }

  class SplineCurve extends Curve {

  	constructor( points = [] ) {

  		super();

  		this.isSplineCurve = true;

  		this.type = 'SplineCurve';

  		this.points = points;

  	}

  	getPoint( t, optionalTarget = new Vector2$1() ) {

  		const point = optionalTarget;

  		const points = this.points;
  		const p = ( points.length - 1 ) * t;

  		const intPoint = Math.floor( p );
  		const weight = p - intPoint;

  		const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
  		const p1 = points[ intPoint ];
  		const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
  		const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

  		point.set(
  			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
  			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
  		);

  		return point;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.points = [];

  		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

  			const point = source.points[ i ];

  			this.points.push( point.clone() );

  		}

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.points = [];

  		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

  			const point = this.points[ i ];
  			data.points.push( point.toArray() );

  		}

  		return data;

  	}

  	fromJSON( json ) {

  		super.fromJSON( json );

  		this.points = [];

  		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

  			const point = json.points[ i ];
  			this.points.push( new Vector2$1().fromArray( point ) );

  		}

  		return this;

  	}

  }

  var Curves = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	ArcCurve: ArcCurve,
  	CatmullRomCurve3: CatmullRomCurve3,
  	CubicBezierCurve: CubicBezierCurve,
  	CubicBezierCurve3: CubicBezierCurve3,
  	EllipseCurve: EllipseCurve,
  	LineCurve: LineCurve,
  	LineCurve3: LineCurve3,
  	QuadraticBezierCurve: QuadraticBezierCurve,
  	QuadraticBezierCurve3: QuadraticBezierCurve3,
  	SplineCurve: SplineCurve
  });

  class CylinderGeometry extends BufferGeometry$1 {

  	constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

  		super();

  		this.type = 'CylinderGeometry';

  		this.parameters = {
  			radiusTop: radiusTop,
  			radiusBottom: radiusBottom,
  			height: height,
  			radialSegments: radialSegments,
  			heightSegments: heightSegments,
  			openEnded: openEnded,
  			thetaStart: thetaStart,
  			thetaLength: thetaLength
  		};

  		const scope = this;

  		radialSegments = Math.floor( radialSegments );
  		heightSegments = Math.floor( heightSegments );

  		// buffers

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		// helper variables

  		let index = 0;
  		const indexArray = [];
  		const halfHeight = height / 2;
  		let groupStart = 0;

  		// generate geometry

  		generateTorso();

  		if ( openEnded === false ) {

  			if ( radiusTop > 0 ) generateCap( true );
  			if ( radiusBottom > 0 ) generateCap( false );

  		}

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute$1( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute$1( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( uvs, 2 ) );

  		function generateTorso() {

  			const normal = new Vector3$1();
  			const vertex = new Vector3$1();

  			let groupCount = 0;

  			// this will be used to calculate the normal
  			const slope = ( radiusBottom - radiusTop ) / height;

  			// generate vertices, normals and uvs

  			for ( let y = 0; y <= heightSegments; y ++ ) {

  				const indexRow = [];

  				const v = y / heightSegments;

  				// calculate the radius of the current row

  				const radius = v * ( radiusBottom - radiusTop ) + radiusTop;

  				for ( let x = 0; x <= radialSegments; x ++ ) {

  					const u = x / radialSegments;

  					const theta = u * thetaLength + thetaStart;

  					const sinTheta = Math.sin( theta );
  					const cosTheta = Math.cos( theta );

  					// vertex

  					vertex.x = radius * sinTheta;
  					vertex.y = - v * height + halfHeight;
  					vertex.z = radius * cosTheta;
  					vertices.push( vertex.x, vertex.y, vertex.z );

  					// normal

  					normal.set( sinTheta, slope, cosTheta ).normalize();
  					normals.push( normal.x, normal.y, normal.z );

  					// uv

  					uvs.push( u, 1 - v );

  					// save index of vertex in respective row

  					indexRow.push( index ++ );

  				}

  				// now save vertices of the row in our index array

  				indexArray.push( indexRow );

  			}

  			// generate indices

  			for ( let x = 0; x < radialSegments; x ++ ) {

  				for ( let y = 0; y < heightSegments; y ++ ) {

  					// we use the index array to access the correct indices

  					const a = indexArray[ y ][ x ];
  					const b = indexArray[ y + 1 ][ x ];
  					const c = indexArray[ y + 1 ][ x + 1 ];
  					const d = indexArray[ y ][ x + 1 ];

  					// faces

  					if ( radiusTop > 0 || y !== 0 ) {

  						indices.push( a, b, d );
  						groupCount += 3;

  					}

  					if ( radiusBottom > 0 || y !== heightSegments - 1 ) {

  						indices.push( b, c, d );
  						groupCount += 3;

  					}

  				}

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, 0 );

  			// calculate new start value for groups

  			groupStart += groupCount;

  		}

  		function generateCap( top ) {

  			// save the index of the first center vertex
  			const centerIndexStart = index;

  			const uv = new Vector2$1();
  			const vertex = new Vector3$1();

  			let groupCount = 0;

  			const radius = ( top === true ) ? radiusTop : radiusBottom;
  			const sign = ( top === true ) ? 1 : - 1;

  			// first we generate the center vertex data of the cap.
  			// because the geometry needs one set of uvs per face,
  			// we must generate a center vertex per face/segment

  			for ( let x = 1; x <= radialSegments; x ++ ) {

  				// vertex

  				vertices.push( 0, halfHeight * sign, 0 );

  				// normal

  				normals.push( 0, sign, 0 );

  				// uv

  				uvs.push( 0.5, 0.5 );

  				// increase index

  				index ++;

  			}

  			// save the index of the last center vertex
  			const centerIndexEnd = index;

  			// now we generate the surrounding vertices, normals and uvs

  			for ( let x = 0; x <= radialSegments; x ++ ) {

  				const u = x / radialSegments;
  				const theta = u * thetaLength + thetaStart;

  				const cosTheta = Math.cos( theta );
  				const sinTheta = Math.sin( theta );

  				// vertex

  				vertex.x = radius * sinTheta;
  				vertex.y = halfHeight * sign;
  				vertex.z = radius * cosTheta;
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normals.push( 0, sign, 0 );

  				// uv

  				uv.x = ( cosTheta * 0.5 ) + 0.5;
  				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
  				uvs.push( uv.x, uv.y );

  				// increase index

  				index ++;

  			}

  			// generate indices

  			for ( let x = 0; x < radialSegments; x ++ ) {

  				const c = centerIndexStart + x;
  				const i = centerIndexEnd + x;

  				if ( top === true ) {

  					// face top

  					indices.push( i, i + 1, c );

  				} else {

  					// face bottom

  					indices.push( i + 1, i, c );

  				}

  				groupCount += 3;

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

  			// calculate new start value for groups

  			groupStart += groupCount;

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

  	}

  }

  class ConeGeometry extends CylinderGeometry {

  	constructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

  		super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  		this.type = 'ConeGeometry';

  		this.parameters = {
  			radius: radius,
  			height: height,
  			radialSegments: radialSegments,
  			heightSegments: heightSegments,
  			openEnded: openEnded,
  			thetaStart: thetaStart,
  			thetaLength: thetaLength
  		};

  	}

  	static fromJSON( data ) {

  		return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

  	}

  }

  let SphereGeometry$1 = class SphereGeometry extends BufferGeometry$1 {

  	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {

  		super();

  		this.type = 'SphereGeometry';

  		this.parameters = {
  			radius: radius,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			phiStart: phiStart,
  			phiLength: phiLength,
  			thetaStart: thetaStart,
  			thetaLength: thetaLength
  		};

  		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
  		heightSegments = Math.max( 2, Math.floor( heightSegments ) );

  		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

  		let index = 0;
  		const grid = [];

  		const vertex = new Vector3$1();
  		const normal = new Vector3$1();

  		// buffers

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		// generate vertices, normals and uvs

  		for ( let iy = 0; iy <= heightSegments; iy ++ ) {

  			const verticesRow = [];

  			const v = iy / heightSegments;

  			// special case for the poles

  			let uOffset = 0;

  			if ( iy === 0 && thetaStart === 0 ) {

  				uOffset = 0.5 / widthSegments;

  			} else if ( iy === heightSegments && thetaEnd === Math.PI ) {

  				uOffset = - 0.5 / widthSegments;

  			}

  			for ( let ix = 0; ix <= widthSegments; ix ++ ) {

  				const u = ix / widthSegments;

  				// vertex

  				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
  				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
  				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normal.copy( vertex ).normalize();
  				normals.push( normal.x, normal.y, normal.z );

  				// uv

  				uvs.push( u + uOffset, 1 - v );

  				verticesRow.push( index ++ );

  			}

  			grid.push( verticesRow );

  		}

  		// indices

  		for ( let iy = 0; iy < heightSegments; iy ++ ) {

  			for ( let ix = 0; ix < widthSegments; ix ++ ) {

  				const a = grid[ iy ][ ix + 1 ];
  				const b = grid[ iy ][ ix ];
  				const c = grid[ iy + 1 ][ ix ];
  				const d = grid[ iy + 1 ][ ix + 1 ];

  				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
  				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

  			}

  		}

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute$1( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute$1( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( uvs, 2 ) );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );

  	}

  };

  class TubeGeometry extends BufferGeometry$1 {

  	constructor( path = new QuadraticBezierCurve3( new Vector3$1( - 1, - 1, 0 ), new Vector3$1( - 1, 1, 0 ), new Vector3$1( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {

  		super();

  		this.type = 'TubeGeometry';

  		this.parameters = {
  			path: path,
  			tubularSegments: tubularSegments,
  			radius: radius,
  			radialSegments: radialSegments,
  			closed: closed
  		};

  		const frames = path.computeFrenetFrames( tubularSegments, closed );

  		// expose internals

  		this.tangents = frames.tangents;
  		this.normals = frames.normals;
  		this.binormals = frames.binormals;

  		// helper variables

  		const vertex = new Vector3$1();
  		const normal = new Vector3$1();
  		const uv = new Vector2$1();
  		let P = new Vector3$1();

  		// buffer

  		const vertices = [];
  		const normals = [];
  		const uvs = [];
  		const indices = [];

  		// create buffer data

  		generateBufferData();

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute$1( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute$1( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( uvs, 2 ) );

  		// functions

  		function generateBufferData() {

  			for ( let i = 0; i < tubularSegments; i ++ ) {

  				generateSegment( i );

  			}

  			// if the geometry is not closed, generate the last row of vertices and normals
  			// at the regular position on the given path
  			//
  			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

  			generateSegment( ( closed === false ) ? tubularSegments : 0 );

  			// uvs are generated in a separate function.
  			// this makes it easy compute correct values for closed geometries

  			generateUVs();

  			// finally create faces

  			generateIndices();

  		}

  		function generateSegment( i ) {

  			// we use getPointAt to sample evenly distributed points from the given path

  			P = path.getPointAt( i / tubularSegments, P );

  			// retrieve corresponding normal and binormal

  			const N = frames.normals[ i ];
  			const B = frames.binormals[ i ];

  			// generate normals and vertices for the current segment

  			for ( let j = 0; j <= radialSegments; j ++ ) {

  				const v = j / radialSegments * Math.PI * 2;

  				const sin = Math.sin( v );
  				const cos = - Math.cos( v );

  				// normal

  				normal.x = ( cos * N.x + sin * B.x );
  				normal.y = ( cos * N.y + sin * B.y );
  				normal.z = ( cos * N.z + sin * B.z );
  				normal.normalize();

  				normals.push( normal.x, normal.y, normal.z );

  				// vertex

  				vertex.x = P.x + radius * normal.x;
  				vertex.y = P.y + radius * normal.y;
  				vertex.z = P.z + radius * normal.z;

  				vertices.push( vertex.x, vertex.y, vertex.z );

  			}

  		}

  		function generateIndices() {

  			for ( let j = 1; j <= tubularSegments; j ++ ) {

  				for ( let i = 1; i <= radialSegments; i ++ ) {

  					const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  					const b = ( radialSegments + 1 ) * j + ( i - 1 );
  					const c = ( radialSegments + 1 ) * j + i;
  					const d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  					// faces

  					indices.push( a, b, d );
  					indices.push( b, c, d );

  				}

  			}

  		}

  		function generateUVs() {

  			for ( let i = 0; i <= tubularSegments; i ++ ) {

  				for ( let j = 0; j <= radialSegments; j ++ ) {

  					uv.x = i / tubularSegments;
  					uv.y = j / radialSegments;

  					uvs.push( uv.x, uv.y );

  				}

  			}

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.path = this.parameters.path.toJSON();

  		return data;

  	}

  	static fromJSON( data ) {

  		// This only works for built-in curves (e.g. CatmullRomCurve3).
  		// User defined curves or instances of CurvePath will not be deserialized.
  		return new TubeGeometry(
  			new Curves[ data.path.type ]().fromJSON( data.path ),
  			data.tubularSegments,
  			data.radius,
  			data.radialSegments,
  			data.closed
  		);

  	}

  }

  let MeshLambertMaterial$1 = class MeshLambertMaterial extends Material$1 {

  	static get type() {

  		return 'MeshLambertMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshLambertMaterial = true;

  		this.color = new Color$1( 0xffffff ); // diffuse

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.emissive = new Color$1( 0x000000 );
  		this.emissiveIntensity = 1.0;
  		this.emissiveMap = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap$1;
  		this.normalScale = new Vector2$1( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.specularMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler$1();
  		this.combine = MultiplyOperation$1;
  		this.reflectivity = 1;
  		this.refractionRatio = 0.98;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.flatShading = false;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.emissive.copy( source.emissive );
  		this.emissiveMap = source.emissiveMap;
  		this.emissiveIntensity = source.emissiveIntensity;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.specularMap = source.specularMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.combine = source.combine;
  		this.reflectivity = source.reflectivity;
  		this.refractionRatio = source.refractionRatio;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.flatShading = source.flatShading;

  		this.fog = source.fog;

  		return this;

  	}

  };

  const Cache = {

  	enabled: false,

  	files: {},

  	add: function ( key, file ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Adding key:', key );

  		this.files[ key ] = file;

  	},

  	get: function ( key ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Checking key:', key );

  		return this.files[ key ];

  	},

  	remove: function ( key ) {

  		delete this.files[ key ];

  	},

  	clear: function () {

  		this.files = {};

  	}

  };

  class LoadingManager {

  	constructor( onLoad, onProgress, onError ) {

  		const scope = this;

  		let isLoading = false;
  		let itemsLoaded = 0;
  		let itemsTotal = 0;
  		let urlModifier = undefined;
  		const handlers = [];

  		// Refer to #5689 for the reason why we don't set .onStart
  		// in the constructor

  		this.onStart = undefined;
  		this.onLoad = onLoad;
  		this.onProgress = onProgress;
  		this.onError = onError;

  		this.itemStart = function ( url ) {

  			itemsTotal ++;

  			if ( isLoading === false ) {

  				if ( scope.onStart !== undefined ) {

  					scope.onStart( url, itemsLoaded, itemsTotal );

  				}

  			}

  			isLoading = true;

  		};

  		this.itemEnd = function ( url ) {

  			itemsLoaded ++;

  			if ( scope.onProgress !== undefined ) {

  				scope.onProgress( url, itemsLoaded, itemsTotal );

  			}

  			if ( itemsLoaded === itemsTotal ) {

  				isLoading = false;

  				if ( scope.onLoad !== undefined ) {

  					scope.onLoad();

  				}

  			}

  		};

  		this.itemError = function ( url ) {

  			if ( scope.onError !== undefined ) {

  				scope.onError( url );

  			}

  		};

  		this.resolveURL = function ( url ) {

  			if ( urlModifier ) {

  				return urlModifier( url );

  			}

  			return url;

  		};

  		this.setURLModifier = function ( transform ) {

  			urlModifier = transform;

  			return this;

  		};

  		this.addHandler = function ( regex, loader ) {

  			handlers.push( regex, loader );

  			return this;

  		};

  		this.removeHandler = function ( regex ) {

  			const index = handlers.indexOf( regex );

  			if ( index !== - 1 ) {

  				handlers.splice( index, 2 );

  			}

  			return this;

  		};

  		this.getHandler = function ( file ) {

  			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {

  				const regex = handlers[ i ];
  				const loader = handlers[ i + 1 ];

  				if ( regex.global ) regex.lastIndex = 0; // see #17920

  				if ( regex.test( file ) ) {

  					return loader;

  				}

  			}

  			return null;

  		};

  	}

  }

  const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();

  class Loader {

  	constructor( manager ) {

  		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  		this.crossOrigin = 'anonymous';
  		this.withCredentials = false;
  		this.path = '';
  		this.resourcePath = '';
  		this.requestHeader = {};

  	}

  	load( /* url, onLoad, onProgress, onError */ ) {}

  	loadAsync( url, onProgress ) {

  		const scope = this;

  		return new Promise( function ( resolve, reject ) {

  			scope.load( url, resolve, onProgress, reject );

  		} );

  	}

  	parse( /* data */ ) {}

  	setCrossOrigin( crossOrigin ) {

  		this.crossOrigin = crossOrigin;
  		return this;

  	}

  	setWithCredentials( value ) {

  		this.withCredentials = value;
  		return this;

  	}

  	setPath( path ) {

  		this.path = path;
  		return this;

  	}

  	setResourcePath( resourcePath ) {

  		this.resourcePath = resourcePath;
  		return this;

  	}

  	setRequestHeader( requestHeader ) {

  		this.requestHeader = requestHeader;
  		return this;

  	}

  }

  Loader.DEFAULT_MATERIAL_NAME = '__DEFAULT';

  class ImageLoader extends Loader {

  	constructor( manager ) {

  		super( manager );

  	}

  	load( url, onLoad, onProgress, onError ) {

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		const scope = this;

  		const cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		const image = createElementNS$1( 'img' );

  		function onImageLoad() {

  			removeEventListeners();

  			Cache.add( url, this );

  			if ( onLoad ) onLoad( this );

  			scope.manager.itemEnd( url );

  		}

  		function onImageError( event ) {

  			removeEventListeners();

  			if ( onError ) onError( event );

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		}

  		function removeEventListeners() {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  		}

  		image.addEventListener( 'load', onImageLoad, false );
  		image.addEventListener( 'error', onImageError, false );

  		if ( url.slice( 0, 5 ) !== 'data:' ) {

  			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

  		}

  		scope.manager.itemStart( url );

  		image.src = url;

  		return image;

  	}

  }

  class TextureLoader extends Loader {

  	constructor( manager ) {

  		super( manager );

  	}

  	load( url, onLoad, onProgress, onError ) {

  		const texture = new Texture$1();

  		const loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		loader.load( url, function ( image ) {

  			texture.image = image;
  			texture.needsUpdate = true;

  			if ( onLoad !== undefined ) {

  				onLoad( texture );

  			}

  		}, onProgress, onError );

  		return texture;

  	}

  }

  let Light$1 = class Light extends Object3D$1 {

  	constructor( color, intensity = 1 ) {

  		super();

  		this.isLight = true;

  		this.type = 'Light';

  		this.color = new Color$1( color );
  		this.intensity = intensity;

  	}

  	dispose() {

  		// Empty here in base class; some subclasses override.

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.color.copy( source.color );
  		this.intensity = source.intensity;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.color = this.color.getHex();
  		data.object.intensity = this.intensity;

  		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

  		if ( this.distance !== undefined ) data.object.distance = this.distance;
  		if ( this.angle !== undefined ) data.object.angle = this.angle;
  		if ( this.decay !== undefined ) data.object.decay = this.decay;
  		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

  		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
  		if ( this.target !== undefined ) data.object.target = this.target.uuid;

  		return data;

  	}

  };

  const _projScreenMatrix$1$1 = /*@__PURE__*/ new Matrix4$1();
  const _lightPositionWorld$1$1 = /*@__PURE__*/ new Vector3$1();
  const _lookTarget$1$1 = /*@__PURE__*/ new Vector3$1();

  let LightShadow$1 = class LightShadow {

  	constructor( camera ) {

  		this.camera = camera;

  		this.intensity = 1;

  		this.bias = 0;
  		this.normalBias = 0;
  		this.radius = 1;
  		this.blurSamples = 8;

  		this.mapSize = new Vector2$1( 512, 512 );

  		this.map = null;
  		this.mapPass = null;
  		this.matrix = new Matrix4$1();

  		this.autoUpdate = true;
  		this.needsUpdate = false;

  		this._frustum = new Frustum$1();
  		this._frameExtents = new Vector2$1( 1, 1 );

  		this._viewportCount = 1;

  		this._viewports = [

  			new Vector4$1( 0, 0, 1, 1 )

  		];

  	}

  	getViewportCount() {

  		return this._viewportCount;

  	}

  	getFrustum() {

  		return this._frustum;

  	}

  	updateMatrices( light ) {

  		const shadowCamera = this.camera;
  		const shadowMatrix = this.matrix;

  		_lightPositionWorld$1$1.setFromMatrixPosition( light.matrixWorld );
  		shadowCamera.position.copy( _lightPositionWorld$1$1 );

  		_lookTarget$1$1.setFromMatrixPosition( light.target.matrixWorld );
  		shadowCamera.lookAt( _lookTarget$1$1 );
  		shadowCamera.updateMatrixWorld();

  		_projScreenMatrix$1$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1$1 );

  		shadowMatrix.set(
  			0.5, 0.0, 0.0, 0.5,
  			0.0, 0.5, 0.0, 0.5,
  			0.0, 0.0, 0.5, 0.5,
  			0.0, 0.0, 0.0, 1.0
  		);

  		shadowMatrix.multiply( _projScreenMatrix$1$1 );

  	}

  	getViewport( viewportIndex ) {

  		return this._viewports[ viewportIndex ];

  	}

  	getFrameExtents() {

  		return this._frameExtents;

  	}

  	dispose() {

  		if ( this.map ) {

  			this.map.dispose();

  		}

  		if ( this.mapPass ) {

  			this.mapPass.dispose();

  		}

  	}

  	copy( source ) {

  		this.camera = source.camera.clone();

  		this.intensity = source.intensity;

  		this.bias = source.bias;
  		this.radius = source.radius;

  		this.mapSize.copy( source.mapSize );

  		return this;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	toJSON() {

  		const object = {};

  		if ( this.intensity !== 1 ) object.intensity = this.intensity;
  		if ( this.bias !== 0 ) object.bias = this.bias;
  		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
  		if ( this.radius !== 1 ) object.radius = this.radius;
  		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

  		object.camera = this.camera.toJSON( false ).object;
  		delete object.camera.matrix;

  		return object;

  	}

  };

  let DirectionalLightShadow$1 = class DirectionalLightShadow extends LightShadow$1 {

  	constructor() {

  		super( new OrthographicCamera$1( - 5, 5, 5, - 5, 0.5, 500 ) );

  		this.isDirectionalLightShadow = true;

  	}

  };

  let DirectionalLight$1 = class DirectionalLight extends Light$1 {

  	constructor( color, intensity ) {

  		super( color, intensity );

  		this.isDirectionalLight = true;

  		this.type = 'DirectionalLight';

  		this.position.copy( Object3D$1.DEFAULT_UP );
  		this.updateMatrix();

  		this.target = new Object3D$1();

  		this.shadow = new DirectionalLightShadow$1();

  	}

  	dispose() {

  		this.shadow.dispose();

  	}

  	copy( source ) {

  		super.copy( source );

  		this.target = source.target.clone();
  		this.shadow = source.shadow.clone();

  		return this;

  	}

  };

  let AmbientLight$1 = class AmbientLight extends Light$1 {

  	constructor( color, intensity ) {

  		super( color, intensity );

  		this.isAmbientLight = true;

  		this.type = 'AmbientLight';

  	}

  };

  class Clock {

  	constructor( autoStart = true ) {

  		this.autoStart = autoStart;

  		this.startTime = 0;
  		this.oldTime = 0;
  		this.elapsedTime = 0;

  		this.running = false;

  	}

  	start() {

  		this.startTime = now$3();

  		this.oldTime = this.startTime;
  		this.elapsedTime = 0;
  		this.running = true;

  	}

  	stop() {

  		this.getElapsedTime();
  		this.running = false;
  		this.autoStart = false;

  	}

  	getElapsedTime() {

  		this.getDelta();
  		return this.elapsedTime;

  	}

  	getDelta() {

  		let diff = 0;

  		if ( this.autoStart && ! this.running ) {

  			this.start();
  			return 0;

  		}

  		if ( this.running ) {

  			const newTime = now$3();

  			diff = ( newTime - this.oldTime ) / 1000;
  			this.oldTime = newTime;

  			this.elapsedTime += diff;

  		}

  		return diff;

  	}

  }

  function now$3() {

  	return performance.now();

  }

  const _matrix = /*@__PURE__*/ new Matrix4$1();

  class Raycaster {

  	constructor( origin, direction, near = 0, far = Infinity ) {

  		this.ray = new Ray$1( origin, direction );
  		// direction is assumed to be normalized (for accurate distance calculations)

  		this.near = near;
  		this.far = far;
  		this.camera = null;
  		this.layers = new Layers$1();

  		this.params = {
  			Mesh: {},
  			Line: { threshold: 1 },
  			LOD: {},
  			Points: { threshold: 1 },
  			Sprite: {}
  		};

  	}

  	set( origin, direction ) {

  		// direction is assumed to be normalized (for accurate distance calculations)

  		this.ray.set( origin, direction );

  	}

  	setFromCamera( coords, camera ) {

  		if ( camera.isPerspectiveCamera ) {

  			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
  			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
  			this.camera = camera;

  		} else if ( camera.isOrthographicCamera ) {

  			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
  			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
  			this.camera = camera;

  		} else {

  			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );

  		}

  	}

  	setFromXRController( controller ) {

  		_matrix.identity().extractRotation( controller.matrixWorld );

  		this.ray.origin.setFromMatrixPosition( controller.matrixWorld );
  		this.ray.direction.set( 0, 0, - 1 ).applyMatrix4( _matrix );

  		return this;

  	}

  	intersectObject( object, recursive = true, intersects = [] ) {

  		intersect( object, this, intersects, recursive );

  		intersects.sort( ascSort );

  		return intersects;

  	}

  	intersectObjects( objects, recursive = true, intersects = [] ) {

  		for ( let i = 0, l = objects.length; i < l; i ++ ) {

  			intersect( objects[ i ], this, intersects, recursive );

  		}

  		intersects.sort( ascSort );

  		return intersects;

  	}

  }

  function ascSort( a, b ) {

  	return a.distance - b.distance;

  }

  function intersect( object, raycaster, intersects, recursive ) {

  	let propagate = true;

  	if ( object.layers.test( raycaster.layers ) ) {

  		const result = object.raycast( raycaster, intersects );

  		if ( result === false ) propagate = false;

  	}

  	if ( propagate === true && recursive === true ) {

  		const children = object.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			intersect( children[ i ], raycaster, intersects, true );

  		}

  	}

  }

  /**
   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
   *
   * phi (the polar angle) is measured from the positive y-axis. The positive y-axis is up.
   * theta (the azimuthal angle) is measured from the positive z-axis.
   */
  class Spherical {

  	constructor( radius = 1, phi = 0, theta = 0 ) {

  		this.radius = radius;
  		this.phi = phi; // polar angle
  		this.theta = theta; // azimuthal angle

  		return this;

  	}

  	set( radius, phi, theta ) {

  		this.radius = radius;
  		this.phi = phi;
  		this.theta = theta;

  		return this;

  	}

  	copy( other ) {

  		this.radius = other.radius;
  		this.phi = other.phi;
  		this.theta = other.theta;

  		return this;

  	}

  	// restrict phi to be between EPS and PI-EPS
  	makeSafe() {

  		const EPS = 0.000001;
  		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

  		return this;

  	}

  	setFromVector3( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	}

  	setFromCartesianCoords( x, y, z ) {

  		this.radius = Math.sqrt( x * x + y * y + z * z );

  		if ( this.radius === 0 ) {

  			this.theta = 0;
  			this.phi = 0;

  		} else {

  			this.theta = Math.atan2( x, z );
  			this.phi = Math.acos( clamp$2( y / this.radius, - 1, 1 ) );

  		}

  		return this;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  class Controls extends EventDispatcher$1 {

  	constructor( object, domElement = null ) {

  		super();

  		this.object = object;
  		this.domElement = domElement;

  		this.enabled = true;

  		this.state = - 1;

  		this.keys = {};
  		this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };
  		this.touches = { ONE: null, TWO: null };

  	}

  	connect() {}

  	disconnect() {}

  	dispose() {}

  	update( /* delta */ ) {}

  }

  if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
  		revision: REVISION$1,
  	} } ) );

  }

  if ( typeof window !== 'undefined' ) {

  	if ( window.__THREE__ ) {

  		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

  	} else {

  		window.__THREE__ = REVISION$1;

  	}

  }

  const _plane$2 = new Plane$1();

  const _pointer = new Vector2$1();
  const _offset$1 = new Vector3$1();
  const _diff$1 = new Vector2$1();
  const _previousPointer = new Vector2$1();
  const _intersection = new Vector3$1();
  const _worldPosition = new Vector3$1();
  const _inverseMatrix = new Matrix4$1();

  const _up = new Vector3$1();
  const _right = new Vector3$1();

  let _selected = null, _hovered = null;
  const _intersections = [];

  const STATE = {
  	NONE: - 1,
  	PAN: 0,
  	ROTATE: 1
  };

  class DragControls extends Controls {

  	constructor( objects, camera, domElement = null ) {

  		super( camera, domElement );

  		this.objects = objects;

  		this.recursive = true;
  		this.transformGroup = false;
  		this.rotateSpeed = 1;

  		this.raycaster = new Raycaster();

  		// interaction

  		this.mouseButtons = { LEFT: MOUSE.PAN, MIDDLE: MOUSE.PAN, RIGHT: MOUSE.ROTATE };
  		this.touches = { ONE: TOUCH.PAN };

  		// event listeners

  		this._onPointerMove = onPointerMove$3.bind( this );
  		this._onPointerDown = onPointerDown$3.bind( this );
  		this._onPointerCancel = onPointerCancel$2.bind( this );
  		this._onContextMenu = onContextMenu$3.bind( this );

  		//

  		if ( domElement !== null ) {

  			this.connect();

  		}

  	}

  	connect() {

  		this.domElement.addEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.addEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.addEventListener( 'pointerup', this._onPointerCancel );
  		this.domElement.addEventListener( 'pointerleave', this._onPointerCancel );
  		this.domElement.addEventListener( 'contextmenu', this._onContextMenu );

  		this.domElement.style.touchAction = 'none'; // disable touch scroll

  	}

  	disconnect() {

  		this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.removeEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.removeEventListener( 'pointerup', this._onPointerCancel );
  		this.domElement.removeEventListener( 'pointerleave', this._onPointerCancel );
  		this.domElement.removeEventListener( 'contextmenu', this._onContextMenu );

  		this.domElement.style.touchAction = 'auto';
  		this.domElement.style.cursor = '';

  	}

  	dispose() {

  		this.disconnect();

  	}

  	_updatePointer( event ) {

  		const rect = this.domElement.getBoundingClientRect();

  		_pointer.x = ( event.clientX - rect.left ) / rect.width * 2 - 1;
  		_pointer.y = - ( event.clientY - rect.top ) / rect.height * 2 + 1;

  	}

  	_updateState( event ) {

  		// determine action

  		let action;

  		if ( event.pointerType === 'touch' ) {

  			action = this.touches.ONE;

  		} else {

  			switch ( event.button ) {

  				case 0:

  					action = this.mouseButtons.LEFT;
  					break;

  				case 1:

  					action = this.mouseButtons.MIDDLE;
  					break;

  				case 2:

  					action = this.mouseButtons.RIGHT;
  					break;

  				default:

  					action = null;

  			}

  		}

  		// determine state

  		switch ( action ) {

  			case MOUSE.PAN:
  			case TOUCH.PAN:

  				this.state = STATE.PAN;

  				break;

  			case MOUSE.ROTATE:
  			case TOUCH.ROTATE:

  				this.state = STATE.ROTATE;

  				break;

  			default:

  				this.state = STATE.NONE;

  		}

  	}

  	getRaycaster() {

  		console.warn( 'THREE.DragControls: getRaycaster() has been deprecated. Use controls.raycaster instead.' ); // @deprecated r169

  		return this.raycaster;

  	}

  	setObjects( objects ) {

  		console.warn( 'THREE.DragControls: setObjects() has been deprecated. Use controls.objects instead.' ); // @deprecated r169

  		this.objects = objects;

  	}

  	getObjects() {

  		console.warn( 'THREE.DragControls: getObjects() has been deprecated. Use controls.objects instead.' ); // @deprecated r169

  		return this.objects;

  	}

  	activate() {

  		console.warn( 'THREE.DragControls: activate() has been renamed to connect().' ); // @deprecated r169
  		this.connect();

  	}

  	deactivate() {

  		console.warn( 'THREE.DragControls: deactivate() has been renamed to disconnect().' ); // @deprecated r169
  		this.disconnect();

  	}

  	set mode( value ) {

  		console.warn( 'THREE.DragControls: The .mode property has been removed. Define the type of transformation via the .mouseButtons or .touches properties.' ); // @deprecated r169

  	}

  	get mode() {

  		console.warn( 'THREE.DragControls: The .mode property has been removed. Define the type of transformation via the .mouseButtons or .touches properties.' ); // @deprecated r169

  	}

  }

  function onPointerMove$3( event ) {

  	const camera = this.object;
  	const domElement = this.domElement;
  	const raycaster = this.raycaster;

  	if ( this.enabled === false ) return;

  	this._updatePointer( event );

  	raycaster.setFromCamera( _pointer, camera );

  	if ( _selected ) {

  		if ( this.state === STATE.PAN ) {

  			if ( raycaster.ray.intersectPlane( _plane$2, _intersection ) ) {

  				_selected.position.copy( _intersection.sub( _offset$1 ).applyMatrix4( _inverseMatrix ) );

  			}

  		} else if ( this.state === STATE.ROTATE ) {

  			_diff$1.subVectors( _pointer, _previousPointer ).multiplyScalar( this.rotateSpeed );
  			_selected.rotateOnWorldAxis( _up, _diff$1.x );
  			_selected.rotateOnWorldAxis( _right.normalize(), - _diff$1.y );

  		}

  		this.dispatchEvent( { type: 'drag', object: _selected } );

  		_previousPointer.copy( _pointer );

  	} else {

  		// hover support

  		if ( event.pointerType === 'mouse' || event.pointerType === 'pen' ) {

  			_intersections.length = 0;

  			raycaster.setFromCamera( _pointer, camera );
  			raycaster.intersectObjects( this.objects, this.recursive, _intersections );

  			if ( _intersections.length > 0 ) {

  				const object = _intersections[ 0 ].object;

  				_plane$2.setFromNormalAndCoplanarPoint( camera.getWorldDirection( _plane$2.normal ), _worldPosition.setFromMatrixPosition( object.matrixWorld ) );

  				if ( _hovered !== object && _hovered !== null ) {

  					this.dispatchEvent( { type: 'hoveroff', object: _hovered } );

  					domElement.style.cursor = 'auto';
  					_hovered = null;

  				}

  				if ( _hovered !== object ) {

  					this.dispatchEvent( { type: 'hoveron', object: object } );

  					domElement.style.cursor = 'pointer';
  					_hovered = object;

  				}

  			} else {

  				if ( _hovered !== null ) {

  					this.dispatchEvent( { type: 'hoveroff', object: _hovered } );

  					domElement.style.cursor = 'auto';
  					_hovered = null;

  				}

  			}

  		}

  	}

  	_previousPointer.copy( _pointer );

  }

  function onPointerDown$3( event ) {

  	const camera = this.object;
  	const domElement = this.domElement;
  	const raycaster = this.raycaster;

  	if ( this.enabled === false ) return;

  	this._updatePointer( event );
  	this._updateState( event );

  	_intersections.length = 0;

  	raycaster.setFromCamera( _pointer, camera );
  	raycaster.intersectObjects( this.objects, this.recursive, _intersections );

  	if ( _intersections.length > 0 ) {

  		if ( this.transformGroup === true ) {

  			// look for the outermost group in the object's upper hierarchy

  			_selected = findGroup( _intersections[ 0 ].object );

  		} else {

  			_selected = _intersections[ 0 ].object;

  		}

  		_plane$2.setFromNormalAndCoplanarPoint( camera.getWorldDirection( _plane$2.normal ), _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );

  		if ( raycaster.ray.intersectPlane( _plane$2, _intersection ) ) {

  			if ( this.state === STATE.PAN ) {

  				_inverseMatrix.copy( _selected.parent.matrixWorld ).invert();
  				_offset$1.copy( _intersection ).sub( _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );

  			} else if ( this.state === STATE.ROTATE ) {

  				// the controls only support Y+ up
  				_up.set( 0, 1, 0 ).applyQuaternion( camera.quaternion ).normalize();
  				_right.set( 1, 0, 0 ).applyQuaternion( camera.quaternion ).normalize();

  			}

  		}

  		domElement.style.cursor = 'move';

  		this.dispatchEvent( { type: 'dragstart', object: _selected } );

  	}

  	_previousPointer.copy( _pointer );

  }

  function onPointerCancel$2() {

  	if ( this.enabled === false ) return;

  	if ( _selected ) {

  		this.dispatchEvent( { type: 'dragend', object: _selected } );

  		_selected = null;

  	}

  	this.domElement.style.cursor = _hovered ? 'pointer' : 'auto';

  	this.state = STATE.NONE;

  }

  function onContextMenu$3( event ) {

  	if ( this.enabled === false ) return;

  	event.preventDefault();

  }

  function findGroup( obj, group = null ) {

  	if ( obj.isGroup ) group = obj;

  	if ( obj.parent === null ) return group;

  	return findGroup( obj.parent, group );

  }

  function forceCenter(x, y, z) {
    var nodes, strength = 1;

    if (x == null) x = 0;
    if (y == null) y = 0;
    if (z == null) z = 0;

    function force() {
      var i,
          n = nodes.length,
          node,
          sx = 0,
          sy = 0,
          sz = 0;

      for (i = 0; i < n; ++i) {
        node = nodes[i], sx += node.x || 0, sy += node.y || 0, sz += node.z || 0;
      }

      for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, sz = (sz / n - z) * strength, i = 0; i < n; ++i) {
        node = nodes[i];
        if (sx) { node.x -= sx; }
        if (sy) { node.y -= sy; }
        if (sz) { node.z -= sz; }
      }
    }

    force.initialize = function(_) {
      nodes = _;
    };

    force.x = function(_) {
      return arguments.length ? (x = +_, force) : x;
    };

    force.y = function(_) {
      return arguments.length ? (y = +_, force) : y;
    };

    force.z = function(_) {
      return arguments.length ? (z = +_, force) : z;
    };

    force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    };

    return force;
  }

  function tree_add$2(d) {
    const x = +this._x.call(null, d);
    return add$3(this.cover(x), x, d);
  }

  function add$3(tree, x, d) {
    if (isNaN(x)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {data: d},
        x0 = tree._x0,
        x1 = tree._x1,
        xm,
        xp,
        right,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (parent = node, !(node = node[i = +right])) return parent[i] = leaf, tree;
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    if (x === xp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    } while ((i = +right) === (j = +(xp >= xm)));
    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll$2(data) {
    if (!Array.isArray(data)) data = Array.from(data);
    const n = data.length;
    const xz = new Float64Array(n);
    let x0 = Infinity,
        x1 = -Infinity;

    // Compute the points and their extent.
    for (let i = 0, x; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, data[i]))) continue;
      xz[i] = x;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
    }

    // If there were no (valid) points, abort.
    if (x0 > x1) return this;

    // Expand the tree to cover the new points.
    this.cover(x0).cover(x1);

    // Add the new points.
    for (let i = 0; i < n; ++i) {
      add$3(this, xz[i], data[i]);
    }

    return this;
  }

  function tree_cover$2(x) {
    if (isNaN(x = +x)) return this; // ignore invalid points

    var x0 = this._x0,
        x1 = this._x1;

    // If the binarytree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing half boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
    }

    // Otherwise, double repeatedly to cover.
    else {
      var z = x1 - x0 || 1,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1) {
        i = +(x < x0);
        parent = new Array(2), parent[i] = node, node = parent, z *= 2;
        switch (i) {
          case 0: x1 = x0 + z; break;
          case 1: x0 = x1 - z; break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

    this._x0 = x0;
    this._x1 = x1;
    return this;
  }

  function tree_data$2() {
    var data = [];
    this.visit(function(node) {
      if (!node.length) do data.push(node.data); while (node = node.next)
    });
    return data;
  }

  function tree_extent$2(_) {
    return arguments.length
        ? this.cover(+_[0][0]).cover(+_[1][0])
        : isNaN(this._x0) ? undefined : [[this._x0], [this._x1]];
  }

  function Half(node, x0, x1) {
    this.node = node;
    this.x0 = x0;
    this.x1 = x1;
  }

  function tree_find$2(x, radius) {
    var data,
        x0 = this._x0,
        x1,
        x2,
        x3 = this._x1,
        halves = [],
        node = this._root,
        q,
        i;

    if (node) halves.push(new Half(node, x0, x3));
    if (radius == null) radius = Infinity;
    else {
      x0 = x - radius;
      x3 = x + radius;
    }

    while (q = halves.pop()) {

      // Stop searching if this half can’t contain a closer node.
      if (!(node = q.node)
          || (x1 = q.x0) > x3
          || (x2 = q.x1) < x0) continue;

      // Bisect the current half.
      if (node.length) {
        var xm = (x1 + x2) / 2;

        halves.push(
          new Half(node[1], xm, x2),
          new Half(node[0], x1, xm)
        );

        // Visit the closest half first.
        if (i = +(x >= xm)) {
          q = halves[halves.length - 1];
          halves[halves.length - 1] = halves[halves.length - 1 - i];
          halves[halves.length - 1 - i] = q;
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        var d = Math.abs(x - +this._x.call(null, node.data));
        if (d < radius) {
          radius = d;
          x0 = x - d;
          x3 = x + d;
          data = node.data;
        }
      }
    }

    return data;
  }

  function tree_remove$2(d) {
    if (isNaN(x = +this._x.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        x1 = this._x1,
        x,
        xm,
        right,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (!(parent = node, node = node[i = +right])) return this;
      if (!node.length) break;
      if (parent[(i + 1) & 1]) retainer = parent, j = i;
    }

    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;

    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next), this;

    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;

    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1])
        && node === (parent[1] || parent[0])
        && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }

    return this;
  }

  function removeAll$2(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }

  function tree_root$2() {
    return this._root;
  }

  function tree_size$2() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do ++size; while (node = node.next)
    });
    return size;
  }

  function tree_visit$2(callback) {
    var halves = [], q, node = this._root, child, x0, x1;
    if (node) halves.push(new Half(node, this._x0, this._x1));
    while (q = halves.pop()) {
      if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {
        var xm = (x0 + x1) / 2;
        if (child = node[1]) halves.push(new Half(child, xm, x1));
        if (child = node[0]) halves.push(new Half(child, x0, xm));
      }
    }
    return this;
  }

  function tree_visitAfter$2(callback) {
    var halves = [], next = [], q;
    if (this._root) halves.push(new Half(this._root, this._x0, this._x1));
    while (q = halves.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;
        if (child = node[0]) halves.push(new Half(child, x0, xm));
        if (child = node[1]) halves.push(new Half(child, xm, x1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.x1);
    }
    return this;
  }

  function defaultX$2(d) {
    return d[0];
  }

  function tree_x$2(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function binarytree(nodes, x) {
    var tree = new Binarytree(x == null ? defaultX$2 : x, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Binarytree(x, x0, x1) {
    this._x = x;
    this._x0 = x0;
    this._x1 = x1;
    this._root = undefined;
  }

  function leaf_copy$2(leaf) {
    var copy = {data: leaf.data}, next = copy;
    while (leaf = leaf.next) next = next.next = {data: leaf.data};
    return copy;
  }

  var treeProto$2 = binarytree.prototype = Binarytree.prototype;

  treeProto$2.copy = function() {
    var copy = new Binarytree(this._x, this._x0, this._x1),
        node = this._root,
        nodes,
        child;

    if (!node) return copy;

    if (!node.length) return copy._root = leaf_copy$2(node), copy;

    nodes = [{source: node, target: copy._root = new Array(2)}];
    while (node = nodes.pop()) {
      for (var i = 0; i < 2; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(2)});
          else node.target[i] = leaf_copy$2(child);
        }
      }
    }

    return copy;
  };

  treeProto$2.add = tree_add$2;
  treeProto$2.addAll = addAll$2;
  treeProto$2.cover = tree_cover$2;
  treeProto$2.data = tree_data$2;
  treeProto$2.extent = tree_extent$2;
  treeProto$2.find = tree_find$2;
  treeProto$2.remove = tree_remove$2;
  treeProto$2.removeAll = removeAll$2;
  treeProto$2.root = tree_root$2;
  treeProto$2.size = tree_size$2;
  treeProto$2.visit = tree_visit$2;
  treeProto$2.visitAfter = tree_visitAfter$2;
  treeProto$2.x = tree_x$2;

  function tree_add$1(d) {
    const x = +this._x.call(null, d),
        y = +this._y.call(null, d);
    return add$2(this.cover(x, y), x, y, d);
  }

  function add$2(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {data: d},
        x0 = tree._x0,
        y0 = tree._y0,
        x1 = tree._x1,
        y1 = tree._y1,
        xm,
        ym,
        xp,
        yp,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll$1(data) {
    var d, i, n = data.length,
        x,
        y,
        xz = new Array(n),
        yz = new Array(n),
        x0 = Infinity,
        y0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity;

    // Compute the points and their extent.
    for (i = 0; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    }

    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;

    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);

    // Add the new points.
    for (i = 0; i < n; ++i) {
      add$2(this, xz[i], yz[i], data[i]);
    }

    return this;
  }

  function tree_cover$1(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

    var x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1;

    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
    }

    // Otherwise, double repeatedly to cover.
    else {
      var z = x1 - x0 || 1,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | (x < x0);
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;
        switch (i) {
          case 0: x1 = x0 + z, y1 = y0 + z; break;
          case 1: x0 = x1 - z, y1 = y0 + z; break;
          case 2: x1 = x0 + z, y0 = y1 - z; break;
          case 3: x0 = x1 - z, y0 = y1 - z; break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }

  function tree_data$1() {
    var data = [];
    this.visit(function(node) {
      if (!node.length) do data.push(node.data); while (node = node.next)
    });
    return data;
  }

  function tree_extent$1(_) {
    return arguments.length
        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
  }

  function Quad(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }

  function tree_find$1(x, y, radius) {
    var data,
        x0 = this._x0,
        y0 = this._y0,
        x1,
        y1,
        x2,
        y2,
        x3 = this._x1,
        y3 = this._y1,
        quads = [],
        node = this._root,
        q,
        i;

    if (node) quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
      x0 = x - radius, y0 = y - radius;
      x3 = x + radius, y3 = y + radius;
      radius *= radius;
    }

    while (q = quads.pop()) {

      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node)
          || (x1 = q.x0) > x3
          || (y1 = q.y0) > y3
          || (x2 = q.x1) < x0
          || (y2 = q.y1) < y0) continue;

      // Bisect the current quadrant.
      if (node.length) {
        var xm = (x1 + x2) / 2,
            ym = (y1 + y2) / 2;

        quads.push(
          new Quad(node[3], xm, ym, x2, y2),
          new Quad(node[2], x1, ym, xm, y2),
          new Quad(node[1], xm, y1, x2, ym),
          new Quad(node[0], x1, y1, xm, ym)
        );

        // Visit the closest quadrant first.
        if (i = (y >= ym) << 1 | (x >= xm)) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
    }

    return data;
  }

  function tree_remove$1(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1,
        x,
        y,
        xm,
        ym,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
    }

    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;

    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next), this;

    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;

    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3])
        && node === (parent[3] || parent[2] || parent[1] || parent[0])
        && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }

    return this;
  }

  function removeAll$1(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }

  function tree_root$1() {
    return this._root;
  }

  function tree_size$1() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do ++size; while (node = node.next)
    });
    return size;
  }

  function tree_visit$1(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      }
    }
    return this;
  }

  function tree_visitAfter$1(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }

  function defaultX$1(d) {
    return d[0];
  }

  function tree_x$1(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function defaultY$1(d) {
    return d[1];
  }

  function tree_y$1(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }

  function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
  }

  function leaf_copy$1(leaf) {
    var copy = {data: leaf.data}, next = copy;
    while (leaf = leaf.next) next = next.next = {data: leaf.data};
    return copy;
  }

  var treeProto$1 = quadtree.prototype = Quadtree.prototype;

  treeProto$1.copy = function() {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
        node = this._root,
        nodes,
        child;

    if (!node) return copy;

    if (!node.length) return copy._root = leaf_copy$1(node), copy;

    nodes = [{source: node, target: copy._root = new Array(4)}];
    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
          else node.target[i] = leaf_copy$1(child);
        }
      }
    }

    return copy;
  };

  treeProto$1.add = tree_add$1;
  treeProto$1.addAll = addAll$1;
  treeProto$1.cover = tree_cover$1;
  treeProto$1.data = tree_data$1;
  treeProto$1.extent = tree_extent$1;
  treeProto$1.find = tree_find$1;
  treeProto$1.remove = tree_remove$1;
  treeProto$1.removeAll = removeAll$1;
  treeProto$1.root = tree_root$1;
  treeProto$1.size = tree_size$1;
  treeProto$1.visit = tree_visit$1;
  treeProto$1.visitAfter = tree_visitAfter$1;
  treeProto$1.x = tree_x$1;
  treeProto$1.y = tree_y$1;

  function tree_add(d) {
    const x = +this._x.call(null, d),
        y = +this._y.call(null, d),
        z = +this._z.call(null, d);
    return add$1(this.cover(x, y, z), x, y, z, d);
  }

  function add$1(tree, x, y, z, d) {
    if (isNaN(x) || isNaN(y) || isNaN(z)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {data: d},
        x0 = tree._x0,
        y0 = tree._y0,
        z0 = tree._z0,
        x1 = tree._x1,
        y1 = tree._y1,
        z1 = tree._z1,
        xm,
        ym,
        zm,
        xp,
        yp,
        zp,
        right,
        bottom,
        deep,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;
      if (parent = node, !(node = node[i = deep << 2 | bottom << 1 | right])) return parent[i] = leaf, tree;
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    zp = +tree._z.call(null, node.data);
    if (x === xp && y === yp && z === zp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;
    } while ((i = deep << 2 | bottom << 1 | right) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | (xp >= xm)));
    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll(data) {
    if (!Array.isArray(data)) data = Array.from(data);
    const n = data.length;
    const xz = new Float64Array(n);
    const yz = new Float64Array(n);
    const zz = new Float64Array(n);
    let x0 = Infinity,
        y0 = Infinity,
        z0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity,
        z1 = -Infinity;

    // Compute the points and their extent.
    for (let i = 0, d, x, y, z; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      zz[i] = z;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
      if (z < z0) z0 = z;
      if (z > z1) z1 = z;
    }

    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1 || z0 > z1) return this;

    // Expand the tree to cover the new points.
    this.cover(x0, y0, z0).cover(x1, y1, z1);

    // Add the new points.
    for (let i = 0; i < n; ++i) {
      add$1(this, xz[i], yz[i], zz[i], data[i]);
    }

    return this;
  }

  function tree_cover(x, y, z) {
    if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points

    var x0 = this._x0,
        y0 = this._y0,
        z0 = this._z0,
        x1 = this._x1,
        y1 = this._y1,
        z1 = this._z1;

    // If the octree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing octant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
      z1 = (z0 = Math.floor(z)) + 1;
    }

    // Otherwise, double repeatedly to cover.
    else {
      var t = x1 - x0 || 1,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {
        i = (z < z0) << 2 | (y < y0) << 1 | (x < x0);
        parent = new Array(8), parent[i] = node, node = parent, t *= 2;
        switch (i) {
          case 0: x1 = x0 + t, y1 = y0 + t, z1 = z0 + t; break;
          case 1: x0 = x1 - t, y1 = y0 + t, z1 = z0 + t; break;
          case 2: x1 = x0 + t, y0 = y1 - t, z1 = z0 + t; break;
          case 3: x0 = x1 - t, y0 = y1 - t, z1 = z0 + t; break;
          case 4: x1 = x0 + t, y1 = y0 + t, z0 = z1 - t; break;
          case 5: x0 = x1 - t, y1 = y0 + t, z0 = z1 - t; break;
          case 6: x1 = x0 + t, y0 = y1 - t, z0 = z1 - t; break;
          case 7: x0 = x1 - t, y0 = y1 - t, z0 = z1 - t; break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

    this._x0 = x0;
    this._y0 = y0;
    this._z0 = z0;
    this._x1 = x1;
    this._y1 = y1;
    this._z1 = z1;
    return this;
  }

  function tree_data() {
    var data = [];
    this.visit(function(node) {
      if (!node.length) do data.push(node.data); while (node = node.next)
    });
    return data;
  }

  function tree_extent(_) {
    return arguments.length
        ? this.cover(+_[0][0], +_[0][1], +_[0][2]).cover(+_[1][0], +_[1][1], +_[1][2])
        : isNaN(this._x0) ? undefined : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];
  }

  function Octant(node, x0, y0, z0, x1, y1, z1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.z0 = z0;
    this.x1 = x1;
    this.y1 = y1;
    this.z1 = z1;
  }

  function tree_find(x, y, z, radius) {
    var data,
        x0 = this._x0,
        y0 = this._y0,
        z0 = this._z0,
        x1,
        y1,
        z1,
        x2,
        y2,
        z2,
        x3 = this._x1,
        y3 = this._y1,
        z3 = this._z1,
        octs = [],
        node = this._root,
        q,
        i;

    if (node) octs.push(new Octant(node, x0, y0, z0, x3, y3, z3));
    if (radius == null) radius = Infinity;
    else {
      x0 = x - radius, y0 = y - radius, z0 = z - radius;
      x3 = x + radius, y3 = y + radius, z3 = z + radius;
      radius *= radius;
    }

    while (q = octs.pop()) {

      // Stop searching if this octant can’t contain a closer node.
      if (!(node = q.node)
          || (x1 = q.x0) > x3
          || (y1 = q.y0) > y3
          || (z1 = q.z0) > z3
          || (x2 = q.x1) < x0
          || (y2 = q.y1) < y0
          || (z2 = q.z1) < z0) continue;

      // Bisect the current octant.
      if (node.length) {
        var xm = (x1 + x2) / 2,
            ym = (y1 + y2) / 2,
            zm = (z1 + z2) / 2;

        octs.push(
          new Octant(node[7], xm, ym, zm, x2, y2, z2),
          new Octant(node[6], x1, ym, zm, xm, y2, z2),
          new Octant(node[5], xm, y1, zm, x2, ym, z2),
          new Octant(node[4], x1, y1, zm, xm, ym, z2),
          new Octant(node[3], xm, ym, z1, x2, y2, zm),
          new Octant(node[2], x1, ym, z1, xm, y2, zm),
          new Octant(node[1], xm, y1, z1, x2, ym, zm),
          new Octant(node[0], x1, y1, z1, xm, ym, zm)
        );

        // Visit the closest octant first.
        if (i = (z >= zm) << 2 | (y >= ym) << 1 | (x >= xm)) {
          q = octs[octs.length - 1];
          octs[octs.length - 1] = octs[octs.length - 1 - i];
          octs[octs.length - 1 - i] = q;
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            dz = z - +this._z.call(null, node.data),
            d2 = dx * dx + dy * dy + dz * dz;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d, z0 = z - d;
          x3 = x + d, y3 = y + d, z3 = z + d;
          data = node.data;
        }
      }
    }

    return data;
  }

  function tree_remove(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        y0 = this._y0,
        z0 = this._z0,
        x1 = this._x1,
        y1 = this._y1,
        z1 = this._z1,
        x,
        y,
        z,
        xm,
        ym,
        zm,
        right,
        bottom,
        deep,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;
      if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[(i + 1) & 7] || parent[(i + 2) & 7] || parent[(i + 3) & 7] || parent[(i + 4) & 7] || parent[(i + 5) & 7] || parent[(i + 6) & 7] || parent[(i + 7) & 7]) retainer = parent, j = i;
    }

    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;

    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next), this;

    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;

    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7])
        && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0])
        && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }

    return this;
  }

  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }

  function tree_root() {
    return this._root;
  }

  function tree_size() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do ++size; while (node = node.next)
    });
    return size;
  }

  function tree_visit(callback) {
    var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;
    if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
    while (q = octs.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
        if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));
        if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));
        if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));
        if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));
        if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));
        if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));
        if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));
        if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));
      }
    }
    return this;
  }

  function tree_visitAfter(callback) {
    var octs = [], next = [], q;
    if (this._root) octs.push(new Octant(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
    while (q = octs.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
        if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));
        if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));
        if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));
        if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));
        if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));
        if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));
        if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));
        if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);
    }
    return this;
  }

  function defaultX(d) {
    return d[0];
  }

  function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function defaultY(d) {
    return d[1];
  }

  function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }

  function defaultZ(d) {
    return d[2];
  }

  function tree_z(_) {
    return arguments.length ? (this._z = _, this) : this._z;
  }

  function octree(nodes, x, y, z) {
    var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Octree(x, y, z, x0, y0, z0, x1, y1, z1) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._x0 = x0;
    this._y0 = y0;
    this._z0 = z0;
    this._x1 = x1;
    this._y1 = y1;
    this._z1 = z1;
    this._root = undefined;
  }

  function leaf_copy(leaf) {
    var copy = {data: leaf.data}, next = copy;
    while (leaf = leaf.next) next = next.next = {data: leaf.data};
    return copy;
  }

  var treeProto = octree.prototype = Octree.prototype;

  treeProto.copy = function() {
    var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),
        node = this._root,
        nodes,
        child;

    if (!node) return copy;

    if (!node.length) return copy._root = leaf_copy(node), copy;

    nodes = [{source: node, target: copy._root = new Array(8)}];
    while (node = nodes.pop()) {
      for (var i = 0; i < 8; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(8)});
          else node.target[i] = leaf_copy(child);
        }
      }
    }

    return copy;
  };

  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;
  treeProto.z = tree_z;

  function constant(x) {
    return function() {
      return x;
    };
  }

  function jiggle(random) {
    return (random() - 0.5) * 1e-6;
  }

  function index$3(d) {
    return d.index;
  }

  function find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
  }

  function forceLink(links) {
    var id = index$3,
        strength = defaultStrength,
        strengths,
        distance = constant(30),
        distances,
        nodes,
        nDim,
        count,
        bias,
        random,
        iterations = 1;

    if (links == null) links = [];

    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }

    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {
          link = links[i], source = link.source, target = link.target;
          x = target.x + target.vx - source.x - source.vx || jiggle(random);
          if (nDim > 1) { y = target.y + target.vy - source.y - source.vy || jiggle(random); }
          if (nDim > 2) { z = target.z + target.vz - source.z - source.vz || jiggle(random); }
          l = Math.sqrt(x * x + y * y + z * z);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x *= l, y *= l, z *= l;

          target.vx -= x * (b = bias[i]);
          if (nDim > 1) { target.vy -= y * b; }
          if (nDim > 2) { target.vz -= z * b; }

          source.vx += x * (b = 1 - b);
          if (nDim > 1) { source.vy += y * b; }
          if (nDim > 2) { source.vz += z * b; }
        }
      }
    }

    function initialize() {
      if (!nodes) return;

      var i,
          n = nodes.length,
          m = links.length,
          nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
          link;

      for (i = 0, count = new Array(n); i < m; ++i) {
        link = links[i], link.index = i;
        if (typeof link.source !== "object") link.source = find(nodeById, link.source);
        if (typeof link.target !== "object") link.target = find(nodeById, link.target);
        count[link.source.index] = (count[link.source.index] || 0) + 1;
        count[link.target.index] = (count[link.target.index] || 0) + 1;
      }

      for (i = 0, bias = new Array(m); i < m; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
      }

      strengths = new Array(m), initializeStrength();
      distances = new Array(m), initializeDistance();
    }

    function initializeStrength() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }

    function initializeDistance() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }

    force.initialize = function(_nodes, ...args) {
      nodes = _nodes;
      random = args.find(arg => typeof arg === 'function') || Math.random;
      nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;
      initialize();
    };

    force.links = function(_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };

    force.id = function(_) {
      return arguments.length ? (id = _, force) : id;
    };

    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
    };

    force.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
    };

    return force;
  }

  var noop = {value: () => {}};

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }

  function Dispatch(_) {
    this._ = _;
  }

  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {type: t, name: name};
    });
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._,
          T = parseTypenames(typename + "", _),
          t,
          i = -1,
          n = T.length;

      // If no callback was specified, return the callback of the given type and name.
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
        return;
      }

      // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.
      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
      }

      return this;
    },
    copy: function() {
      var copy = {}, _ = this._;
      for (var t in _) copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function(type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    }
  };

  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }

  function set(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null) type.push({name: name, value: callback});
    return type;
  }

  var frame = 0, // is an animation frame pending?
      timeout = 0, // is a timeout pending?
      interval = 0, // are any timers active?
      pokeDelay = 1000, // how frequently we check for clock skew
      taskHead,
      taskTail,
      clockLast = 0,
      clockNow = 0,
      clockSkew = 0,
      clock = typeof performance === "object" && performance.now ? performance : Date,
      setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

  function now$2() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }

  function clearNow() {
    clockNow = 0;
  }

  function Timer() {
    this._call =
    this._time =
    this._next = null;
  }

  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now$2() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;
        else taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };

  function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
  }

  function timerFlush() {
    now$2(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
      t = t._next;
    }
    --frame;
  }

  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }

  function poke() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
  }

  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }

  function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval) interval = clearInterval(interval);
    } else {
      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
  const a = 1664525;
  const c = 1013904223;
  const m = 4294967296; // 2^32

  function lcg() {
    let s = 1;
    return () => (s = (a * s + c) % m) / m;
  }

  var MAX_DIMENSIONS = 3;

  function x(d) {
    return d.x;
  }

  function y(d) {
    return d.y;
  }

  function z(d) {
    return d.z;
  }

  var initialRadius = 10,
      initialAngleRoll = Math.PI * (3 - Math.sqrt(5)), // Golden ratio angle
      initialAngleYaw = Math.PI * 20 / (9 + Math.sqrt(221)); // Markov irrational number

  function forceSimulation(nodes, numDimensions) {
    numDimensions = numDimensions || 2;

    var nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(numDimensions))),
        simulation,
        alpha = 1,
        alphaMin = 0.001,
        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
        alphaTarget = 0,
        velocityDecay = 0.6,
        forces = new Map(),
        stepper = timer(step),
        event = dispatch("tick", "end"),
        random = lcg();

    if (nodes == null) nodes = [];

    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }

    function tick(iterations) {
      var i, n = nodes.length, node;

      if (iterations === undefined) iterations = 1;

      for (var k = 0; k < iterations; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay;

        forces.forEach(function (force) {
          force(alpha);
        });

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (node.fx == null) node.x += node.vx *= velocityDecay;
          else node.x = node.fx, node.vx = 0;
          if (nDim > 1) {
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
          if (nDim > 2) {
            if (node.fz == null) node.z += node.vz *= velocityDecay;
            else node.z = node.fz, node.vz = 0;
          }
        }
      }

      return simulation;
    }

    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (node.fx != null) node.x = node.fx;
        if (node.fy != null) node.y = node.fy;
        if (node.fz != null) node.z = node.fz;
        if (isNaN(node.x) || (nDim > 1 && isNaN(node.y)) || (nDim > 2 && isNaN(node.z))) {
          var radius = initialRadius * (nDim > 2 ? Math.cbrt(0.5 + i) : (nDim > 1 ? Math.sqrt(0.5 + i) : i)),
            rollAngle = i * initialAngleRoll,
            yawAngle = i * initialAngleYaw;

          if (nDim === 1) {
            node.x = radius;
          } else if (nDim === 2) {
            node.x = radius * Math.cos(rollAngle);
            node.y = radius * Math.sin(rollAngle);
          } else { // 3 dimensions: use spherical distribution along 2 irrational number angles
            node.x = radius * Math.sin(rollAngle) * Math.cos(yawAngle);
            node.y = radius * Math.cos(rollAngle);
            node.z = radius * Math.sin(rollAngle) * Math.sin(yawAngle);
          }
        }
        if (isNaN(node.vx) || (nDim > 1 && isNaN(node.vy)) || (nDim > 2 && isNaN(node.vz))) {
          node.vx = 0;
          if (nDim > 1) { node.vy = 0; }
          if (nDim > 2) { node.vz = 0; }
        }
      }
    }

    function initializeForce(force) {
      if (force.initialize) force.initialize(nodes, random, nDim);
      return force;
    }

    initializeNodes();

    return simulation = {
      tick: tick,

      restart: function() {
        return stepper.restart(step), simulation;
      },

      stop: function() {
        return stepper.stop(), simulation;
      },

      numDimensions: function(_) {
        return arguments.length
            ? (nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(_))), forces.forEach(initializeForce), simulation)
            : nDim;
      },

      nodes: function(_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
      },

      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },

      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },

      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },

      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },

      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },

      randomSource: function(_) {
        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
      },

      force: function(name, _) {
        return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
      },

      find: function() {
        var args = Array.prototype.slice.call(arguments);
        var x = args.shift() || 0,
            y = (nDim > 1 ? args.shift() : null) || 0,
            z = (nDim > 2 ? args.shift() : null) || 0,
            radius = args.shift() || Infinity;

        var i = 0,
            n = nodes.length,
            dx,
            dy,
            dz,
            d2,
            node,
            closest;

        radius *= radius;

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x - node.x;
          dy = y - (node.y || 0);
          dz = z - (node.z ||0);
          d2 = dx * dx + dy * dy + dz * dz;
          if (d2 < radius) closest = node, radius = d2;
        }

        return closest;
      },

      on: function(name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }

  function forceManyBody() {
    var nodes,
        nDim,
        node,
        random,
        alpha,
        strength = constant(-30),
        strengths,
        distanceMin2 = 1,
        distanceMax2 = Infinity,
        theta2 = 0.81;

    function force(_) {
      var i,
          n = nodes.length,
          tree =
              (nDim === 1 ? binarytree(nodes, x)
              :(nDim === 2 ? quadtree(nodes, x, y)
              :(nDim === 3 ? octree(nodes, x, y, z)
              :null
          ))).visitAfter(accumulate);

      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length, node;
      strengths = new Array(n);
      for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
    }

    function accumulate(treeNode) {
      var strength = 0, q, c, weight = 0, x, y, z, i;
      var numChildren = treeNode.length;

      // For internal nodes, accumulate forces from children.
      if (numChildren) {
        for (x = y = z = i = 0; i < numChildren; ++i) {
          if ((q = treeNode[i]) && (c = Math.abs(q.value))) {
            strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);
          }
        }
        strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions

        treeNode.x = x / weight;
        if (nDim > 1) { treeNode.y = y / weight; }
        if (nDim > 2) { treeNode.z = z / weight; }
      }

      // For leaf nodes, accumulate forces from coincident nodes.
      else {
        q = treeNode;
        q.x = q.data.x;
        if (nDim > 1) { q.y = q.data.y; }
        if (nDim > 2) { q.z = q.data.z; }
        do strength += strengths[q.data.index];
        while (q = q.next);
      }

      treeNode.value = strength;
    }

    function apply(treeNode, x1, arg1, arg2, arg3) {
      if (!treeNode.value) return true;
      var x2 = [arg1, arg2, arg3][nDim-1];

      var x = treeNode.x - node.x,
          y = (nDim > 1 ? treeNode.y - node.y : 0),
          z = (nDim > 2 ? treeNode.z - node.z : 0),
          w = x2 - x1,
          l = x * x + y * y + z * z;

      // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x === 0) x = jiggle(random), l += x * x;
          if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;
          if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x * treeNode.value * alpha / l;
          if (nDim > 1) { node.vy += y * treeNode.value * alpha / l; }
          if (nDim > 2) { node.vz += z * treeNode.value * alpha / l; }
        }
        return true;
      }

      // Otherwise, process points directly.
      else if (treeNode.length || l >= distanceMax2) return;

      // Limit forces for very close nodes; randomize direction if coincident.
      if (treeNode.data !== node || treeNode.next) {
        if (x === 0) x = jiggle(random), l += x * x;
        if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;
        if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }

      do if (treeNode.data !== node) {
        w = strengths[treeNode.data.index] * alpha / l;
        node.vx += x * w;
        if (nDim > 1) { node.vy += y * w; }
        if (nDim > 2) { node.vz += z * w; }
      } while (treeNode = treeNode.next);
    }

    force.initialize = function(_nodes, ...args) {
      nodes = _nodes;
      random = args.find(arg => typeof arg === 'function') || Math.random;
      nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };

    force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };

    force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };

    force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };

    return force;
  }

  function forceRadial(radius, x, y, z) {
    var nodes,
        nDim,
        strength = constant(0.1),
        strengths,
        radiuses;

    if (typeof radius !== "function") radius = constant(+radius);
    if (x == null) x = 0;
    if (y == null) y = 0;
    if (z == null) z = 0;

    function force(alpha) {
      for (var i = 0, n = nodes.length; i < n; ++i) {
        var node = nodes[i],
            dx = node.x - x || 1e-6,
            dy = (node.y || 0) - y || 1e-6,
            dz = (node.z || 0) - z || 1e-6,
            r = Math.sqrt(dx * dx + dy * dy + dz * dz),
            k = (radiuses[i] - r) * strengths[i] * alpha / r;
        node.vx += dx * k;
        if (nDim>1) { node.vy += dy * k; }
        if (nDim>2) { node.vz += dz * k; }
      }
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      radiuses = new Array(n);
      for (i = 0; i < n; ++i) {
        radiuses[i] = +radius(nodes[i], i, nodes);
        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function(initNodes, ...args) {
      nodes = initNodes;
      nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };

    force.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
    };

    force.x = function(_) {
      return arguments.length ? (x = +_, force) : x;
    };

    force.y = function(_) {
      return arguments.length ? (y = +_, force) : y;
    };

    force.z = function(_) {
      return arguments.length ? (z = +_, force) : z;
    };

    return force;
  }

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var ngraph_events;
  var hasRequiredNgraph_events;

  function requireNgraph_events () {
  	if (hasRequiredNgraph_events) return ngraph_events;
  	hasRequiredNgraph_events = 1;
  	ngraph_events = function eventify(subject) {
  	  validateSubject(subject);

  	  var eventsStorage = createEventsStorage(subject);
  	  subject.on = eventsStorage.on;
  	  subject.off = eventsStorage.off;
  	  subject.fire = eventsStorage.fire;
  	  return subject;
  	};

  	function createEventsStorage(subject) {
  	  // Store all event listeners to this hash. Key is event name, value is array
  	  // of callback records.
  	  //
  	  // A callback record consists of callback function and its optional context:
  	  // { 'eventName' => [{callback: function, ctx: object}] }
  	  var registeredEvents = Object.create(null);

  	  return {
  	    on: function (eventName, callback, ctx) {
  	      if (typeof callback !== 'function') {
  	        throw new Error('callback is expected to be a function');
  	      }
  	      var handlers = registeredEvents[eventName];
  	      if (!handlers) {
  	        handlers = registeredEvents[eventName] = [];
  	      }
  	      handlers.push({callback: callback, ctx: ctx});

  	      return subject;
  	    },

  	    off: function (eventName, callback) {
  	      var wantToRemoveAll = (typeof eventName === 'undefined');
  	      if (wantToRemoveAll) {
  	        // Killing old events storage should be enough in this case:
  	        registeredEvents = Object.create(null);
  	        return subject;
  	      }

  	      if (registeredEvents[eventName]) {
  	        var deleteAllCallbacksForEvent = (typeof callback !== 'function');
  	        if (deleteAllCallbacksForEvent) {
  	          delete registeredEvents[eventName];
  	        } else {
  	          var callbacks = registeredEvents[eventName];
  	          for (var i = 0; i < callbacks.length; ++i) {
  	            if (callbacks[i].callback === callback) {
  	              callbacks.splice(i, 1);
  	            }
  	          }
  	        }
  	      }

  	      return subject;
  	    },

  	    fire: function (eventName) {
  	      var callbacks = registeredEvents[eventName];
  	      if (!callbacks) {
  	        return subject;
  	      }

  	      var fireArguments;
  	      if (arguments.length > 1) {
  	        fireArguments = Array.prototype.splice.call(arguments, 1);
  	      }
  	      for(var i = 0; i < callbacks.length; ++i) {
  	        var callbackInfo = callbacks[i];
  	        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);
  	      }

  	      return subject;
  	    }
  	  };
  	}

  	function validateSubject(subject) {
  	  if (!subject) {
  	    throw new Error('Eventify cannot use falsy object as events subject');
  	  }
  	  var reservedWords = ['on', 'fire', 'off'];
  	  for (var i = 0; i < reservedWords.length; ++i) {
  	    if (subject.hasOwnProperty(reservedWords[i])) {
  	      throw new Error("Subject cannot be eventified, since it already has property '" + reservedWords[i] + "'");
  	    }
  	  }
  	}
  	return ngraph_events;
  }

  /**
   * @fileOverview Contains definition of the core graph object.
   */

  var ngraph_graph;
  var hasRequiredNgraph_graph;

  function requireNgraph_graph () {
  	if (hasRequiredNgraph_graph) return ngraph_graph;
  	hasRequiredNgraph_graph = 1;
  	// TODO: need to change storage layer:
  	// 1. Be able to get all nodes O(1)
  	// 2. Be able to get number of links O(1)

  	/**
  	 * @example
  	 *  var graph = require('ngraph.graph')();
  	 *  graph.addNode(1);     // graph has one node.
  	 *  graph.addLink(2, 3);  // now graph contains three nodes and one link.
  	 *
  	 */
  	ngraph_graph = createGraph;

  	var eventify = requireNgraph_events();

  	/**
  	 * Creates a new graph
  	 */
  	function createGraph(options) {
  	  // Graph structure is maintained as dictionary of nodes
  	  // and array of links. Each node has 'links' property which
  	  // hold all links related to that node. And general links
  	  // array is used to speed up all links enumeration. This is inefficient
  	  // in terms of memory, but simplifies coding.
  	  options = options || {};
  	  if ('uniqueLinkId' in options) {
  	    console.warn(
  	      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\n' +
  	      'Use `multigraph` option instead\n',
  	      '\n',
  	      'Note: there is also change in default behavior: From now on each graph\n'+
  	      'is considered to be not a multigraph by default (each edge is unique).'
  	    );

  	    options.multigraph = options.uniqueLinkId;
  	  }

  	  // Dear reader, the non-multigraphs do not guarantee that there is only
  	  // one link for a given pair of node. When this option is set to false
  	  // we can save some memory and CPU (18% faster for non-multigraph);
  	  if (options.multigraph === undefined) options.multigraph = false;

  	  if (typeof Map !== 'function') {
  	    // TODO: Should we polyfill it ourselves? We don't use much operations there..
  	    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');
  	  } 

  	  var nodes = new Map(); // nodeId => Node
  	  var links = new Map(); // linkId => Link
  	    // Hash of multi-edges. Used to track ids of edges between same nodes
  	  var multiEdges = {};
  	  var suspendEvents = 0;

  	  var createLink = options.multigraph ? createUniqueLink : createSingleLink,

  	    // Our graph API provides means to listen to graph changes. Users can subscribe
  	    // to be notified about changes in the graph by using `on` method. However
  	    // in some cases they don't use it. To avoid unnecessary memory consumption
  	    // we will not record graph changes until we have at least one subscriber.
  	    // Code below supports this optimization.
  	    //
  	    // Accumulates all changes made during graph updates.
  	    // Each change element contains:
  	    //  changeType - one of the strings: 'add', 'remove' or 'update';
  	    //  node - if change is related to node this property is set to changed graph's node;
  	    //  link - if change is related to link this property is set to changed graph's link;
  	    changes = [],
  	    recordLinkChange = noop,
  	    recordNodeChange = noop,
  	    enterModification = noop,
  	    exitModification = noop;

  	  // this is our public API:
  	  var graphPart = {
  	    /**
  	     * Sometimes duck typing could be slow. Giving clients a hint about data structure
  	     * via explicit version number here:
  	     */
  	    version: 20.0,

  	    /**
  	     * Adds node to the graph. If node with given id already exists in the graph
  	     * its data is extended with whatever comes in 'data' argument.
  	     *
  	     * @param nodeId the node's identifier. A string or number is preferred.
  	     * @param [data] additional data for the node being added. If node already
  	     *   exists its data object is augmented with the new one.
  	     *
  	     * @return {node} The newly added node or node with given id if it already exists.
  	     */
  	    addNode: addNode,

  	    /**
  	     * Adds a link to the graph. The function always create a new
  	     * link between two nodes. If one of the nodes does not exists
  	     * a new node is created.
  	     *
  	     * @param fromId link start node id;
  	     * @param toId link end node id;
  	     * @param [data] additional data to be set on the new link;
  	     *
  	     * @return {link} The newly created link
  	     */
  	    addLink: addLink,

  	    /**
  	     * Removes link from the graph. If link does not exist does nothing.
  	     *
  	     * @param link - object returned by addLink() or getLinks() methods.
  	     *
  	     * @returns true if link was removed; false otherwise.
  	     */
  	    removeLink: removeLink,

  	    /**
  	     * Removes node with given id from the graph. If node does not exist in the graph
  	     * does nothing.
  	     *
  	     * @param nodeId node's identifier passed to addNode() function.
  	     *
  	     * @returns true if node was removed; false otherwise.
  	     */
  	    removeNode: removeNode,

  	    /**
  	     * Gets node with given identifier. If node does not exist undefined value is returned.
  	     *
  	     * @param nodeId requested node identifier;
  	     *
  	     * @return {node} in with requested identifier or undefined if no such node exists.
  	     */
  	    getNode: getNode,

  	    /**
  	     * Gets number of nodes in this graph.
  	     *
  	     * @return number of nodes in the graph.
  	     */
  	    getNodeCount: getNodeCount,

  	    /**
  	     * Gets total number of links in the graph.
  	     */
  	    getLinkCount: getLinkCount,

  	    /**
  	     * Gets total number of links in the graph.
  	     */
  	    getEdgeCount: getLinkCount,

  	    /**
  	     * Synonym for `getLinkCount()`
  	     */
  	    getLinksCount: getLinkCount,
  	    
  	    /**
  	     * Synonym for `getNodeCount()`
  	     */
  	    getNodesCount: getNodeCount,

  	    /**
  	     * Gets all links (inbound and outbound) from the node with given id.
  	     * If node with given id is not found null is returned.
  	     *
  	     * @param nodeId requested node identifier.
  	     *
  	     * @return Set of links from and to requested node if such node exists;
  	     *   otherwise null is returned.
  	     */
  	    getLinks: getLinks,

  	    /**
  	     * Invokes callback on each node of the graph.
  	     *
  	     * @param {Function(node)} callback Function to be invoked. The function
  	     *   is passed one argument: visited node.
  	     */
  	    forEachNode: forEachNode,

  	    /**
  	     * Invokes callback on every linked (adjacent) node to the given one.
  	     *
  	     * @param nodeId Identifier of the requested node.
  	     * @param {Function(node, link)} callback Function to be called on all linked nodes.
  	     *   The function is passed two parameters: adjacent node and link object itself.
  	     * @param oriented if true graph treated as oriented.
  	     */
  	    forEachLinkedNode: forEachLinkedNode,

  	    /**
  	     * Enumerates all links in the graph
  	     *
  	     * @param {Function(link)} callback Function to be called on all links in the graph.
  	     *   The function is passed one parameter: graph's link object.
  	     *
  	     * Link object contains at least the following fields:
  	     *  fromId - node id where link starts;
  	     *  toId - node id where link ends,
  	     *  data - additional data passed to graph.addLink() method.
  	     */
  	    forEachLink: forEachLink,

  	    /**
  	     * Suspend all notifications about graph changes until
  	     * endUpdate is called.
  	     */
  	    beginUpdate: enterModification,

  	    /**
  	     * Resumes all notifications about graph changes and fires
  	     * graph 'changed' event in case there are any pending changes.
  	     */
  	    endUpdate: exitModification,

  	    /**
  	     * Removes all nodes and links from the graph.
  	     */
  	    clear: clear,

  	    /**
  	     * Detects whether there is a link between two nodes.
  	     * Operation complexity is O(n) where n - number of links of a node.
  	     * NOTE: this function is synonym for getLink()
  	     *
  	     * @returns link if there is one. null otherwise.
  	     */
  	    hasLink: getLink,

  	    /**
  	     * Detects whether there is a node with given id
  	     * 
  	     * Operation complexity is O(1)
  	     * NOTE: this function is synonym for getNode()
  	     *
  	     * @returns node if there is one; Falsy value otherwise.
  	     */
  	    hasNode: getNode,

  	    /**
  	     * Gets an edge between two nodes.
  	     * Operation complexity is O(n) where n - number of links of a node.
  	     *
  	     * @param {string} fromId link start identifier
  	     * @param {string} toId link end identifier
  	     *
  	     * @returns link if there is one; undefined otherwise.
  	     */
  	    getLink: getLink
  	  };

  	  // this will add `on()` and `fire()` methods.
  	  eventify(graphPart);

  	  monitorSubscribers();

  	  return graphPart;

  	  function monitorSubscribers() {
  	    var realOn = graphPart.on;

  	    // replace real `on` with our temporary on, which will trigger change
  	    // modification monitoring:
  	    graphPart.on = on;

  	    function on() {
  	      // now it's time to start tracking stuff:
  	      graphPart.beginUpdate = enterModification = enterModificationReal;
  	      graphPart.endUpdate = exitModification = exitModificationReal;
  	      recordLinkChange = recordLinkChangeReal;
  	      recordNodeChange = recordNodeChangeReal;

  	      // this will replace current `on` method with real pub/sub from `eventify`.
  	      graphPart.on = realOn;
  	      // delegate to real `on` handler:
  	      return realOn.apply(graphPart, arguments);
  	    }
  	  }

  	  function recordLinkChangeReal(link, changeType) {
  	    changes.push({
  	      link: link,
  	      changeType: changeType
  	    });
  	  }

  	  function recordNodeChangeReal(node, changeType) {
  	    changes.push({
  	      node: node,
  	      changeType: changeType
  	    });
  	  }

  	  function addNode(nodeId, data) {
  	    if (nodeId === undefined) {
  	      throw new Error('Invalid node identifier');
  	    }

  	    enterModification();

  	    var node = getNode(nodeId);
  	    if (!node) {
  	      node = new Node(nodeId, data);
  	      recordNodeChange(node, 'add');
  	    } else {
  	      node.data = data;
  	      recordNodeChange(node, 'update');
  	    }

  	    nodes.set(nodeId, node);

  	    exitModification();
  	    return node;
  	  }

  	  function getNode(nodeId) {
  	    return nodes.get(nodeId);
  	  }

  	  function removeNode(nodeId) {
  	    var node = getNode(nodeId);
  	    if (!node) {
  	      return false;
  	    }

  	    enterModification();

  	    var prevLinks = node.links;
  	    if (prevLinks) {
  	      prevLinks.forEach(removeLinkInstance);
  	      node.links = null;
  	    }

  	    nodes.delete(nodeId);

  	    recordNodeChange(node, 'remove');

  	    exitModification();

  	    return true;
  	  }


  	  function addLink(fromId, toId, data) {
  	    enterModification();

  	    var fromNode = getNode(fromId) || addNode(fromId);
  	    var toNode = getNode(toId) || addNode(toId);

  	    var link = createLink(fromId, toId, data);
  	    var isUpdate = links.has(link.id);

  	    links.set(link.id, link);

  	    // TODO: this is not cool. On large graphs potentially would consume more memory.
  	    addLinkToNode(fromNode, link);
  	    if (fromId !== toId) {
  	      // make sure we are not duplicating links for self-loops
  	      addLinkToNode(toNode, link);
  	    }

  	    recordLinkChange(link, isUpdate ? 'update' : 'add');

  	    exitModification();

  	    return link;
  	  }

  	  function createSingleLink(fromId, toId, data) {
  	    var linkId = makeLinkId(fromId, toId);
  	    var prevLink = links.get(linkId);
  	    if (prevLink) {
  	      prevLink.data = data;
  	      return prevLink;
  	    }

  	    return new Link(fromId, toId, data, linkId);
  	  }

  	  function createUniqueLink(fromId, toId, data) {
  	    // TODO: Find a better/faster way to store multigraphs
  	    var linkId = makeLinkId(fromId, toId);
  	    var isMultiEdge = multiEdges.hasOwnProperty(linkId);
  	    if (isMultiEdge || getLink(fromId, toId)) {
  	      if (!isMultiEdge) {
  	        multiEdges[linkId] = 0;
  	      }
  	      var suffix = '@' + (++multiEdges[linkId]);
  	      linkId = makeLinkId(fromId + suffix, toId + suffix);
  	    }

  	    return new Link(fromId, toId, data, linkId);
  	  }

  	  function getNodeCount() {
  	    return nodes.size;
  	  }

  	  function getLinkCount() {
  	    return links.size;
  	  }

  	  function getLinks(nodeId) {
  	    var node = getNode(nodeId);
  	    return node ? node.links : null;
  	  }

  	  function removeLink(link, otherId) {
  	    if (otherId !== undefined) {
  	      link = getLink(link, otherId);
  	    }
  	    return removeLinkInstance(link);
  	  }

  	  function removeLinkInstance(link) {
  	    if (!link) {
  	      return false;
  	    }
  	    if (!links.get(link.id)) return false;

  	    enterModification();

  	    links.delete(link.id);

  	    var fromNode = getNode(link.fromId);
  	    var toNode = getNode(link.toId);

  	    if (fromNode) {
  	      fromNode.links.delete(link);
  	    }

  	    if (toNode) {
  	      toNode.links.delete(link);
  	    }

  	    recordLinkChange(link, 'remove');

  	    exitModification();

  	    return true;
  	  }

  	  function getLink(fromNodeId, toNodeId) {
  	    if (fromNodeId === undefined || toNodeId === undefined) return undefined;
  	    return links.get(makeLinkId(fromNodeId, toNodeId));
  	  }

  	  function clear() {
  	    enterModification();
  	    forEachNode(function(node) {
  	      removeNode(node.id);
  	    });
  	    exitModification();
  	  }

  	  function forEachLink(callback) {
  	    if (typeof callback === 'function') {
  	      var valuesIterator = links.values();
  	      var nextValue = valuesIterator.next();
  	      while (!nextValue.done) {
  	        if (callback(nextValue.value)) {
  	          return true; // client doesn't want to proceed. Return.
  	        }
  	        nextValue = valuesIterator.next();
  	      }
  	    }
  	  }

  	  function forEachLinkedNode(nodeId, callback, oriented) {
  	    var node = getNode(nodeId);

  	    if (node && node.links && typeof callback === 'function') {
  	      if (oriented) {
  	        return forEachOrientedLink(node.links, nodeId, callback);
  	      } else {
  	        return forEachNonOrientedLink(node.links, nodeId, callback);
  	      }
  	    }
  	  }

  	  // eslint-disable-next-line no-shadow
  	  function forEachNonOrientedLink(links, nodeId, callback) {
  	    var quitFast;

  	    var valuesIterator = links.values();
  	    var nextValue = valuesIterator.next();
  	    while (!nextValue.done) {
  	      var link = nextValue.value;
  	      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;
  	      quitFast = callback(nodes.get(linkedNodeId), link);
  	      if (quitFast) {
  	        return true; // Client does not need more iterations. Break now.
  	      }
  	      nextValue = valuesIterator.next();
  	    }
  	  }

  	  // eslint-disable-next-line no-shadow
  	  function forEachOrientedLink(links, nodeId, callback) {
  	    var quitFast;
  	    var valuesIterator = links.values();
  	    var nextValue = valuesIterator.next();
  	    while (!nextValue.done) {
  	      var link = nextValue.value;
  	      if (link.fromId === nodeId) {
  	        quitFast = callback(nodes.get(link.toId), link);
  	        if (quitFast) {
  	          return true; // Client does not need more iterations. Break now.
  	        }
  	      }
  	      nextValue = valuesIterator.next();
  	    }
  	  }

  	  // we will not fire anything until users of this library explicitly call `on()`
  	  // method.
  	  function noop() {}

  	  // Enter, Exit modification allows bulk graph updates without firing events.
  	  function enterModificationReal() {
  	    suspendEvents += 1;
  	  }

  	  function exitModificationReal() {
  	    suspendEvents -= 1;
  	    if (suspendEvents === 0 && changes.length > 0) {
  	      graphPart.fire('changed', changes);
  	      changes.length = 0;
  	    }
  	  }

  	  function forEachNode(callback) {
  	    if (typeof callback !== 'function') {
  	      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);
  	    }

  	    var valuesIterator = nodes.values();
  	    var nextValue = valuesIterator.next();
  	    while (!nextValue.done) {
  	      if (callback(nextValue.value)) {
  	        return true; // client doesn't want to proceed. Return.
  	      }
  	      nextValue = valuesIterator.next();
  	    }
  	  }
  	}

  	/**
  	 * Internal structure to represent node;
  	 */
  	function Node(id, data) {
  	  this.id = id;
  	  this.links = null;
  	  this.data = data;
  	}

  	function addLinkToNode(node, link) {
  	  if (node.links) {
  	    node.links.add(link);
  	  } else {
  	    node.links = new Set([link]);
  	  }
  	}

  	/**
  	 * Internal structure to represent links;
  	 */
  	function Link(fromId, toId, data, id) {
  	  this.fromId = fromId;
  	  this.toId = toId;
  	  this.data = data;
  	  this.id = id;
  	}

  	function makeLinkId(fromId, toId) {
  	  return fromId.toString() + '👉 ' + toId.toString();
  	}
  	return ngraph_graph;
  }

  var ngraph_graphExports = requireNgraph_graph();
  var graph = /*@__PURE__*/getDefaultExportFromCjs(ngraph_graphExports);

  var ngraph_forcelayout = {exports: {}};

  var generateCreateBody = {exports: {}};

  var getVariableName;
  var hasRequiredGetVariableName;

  function requireGetVariableName () {
  	if (hasRequiredGetVariableName) return getVariableName;
  	hasRequiredGetVariableName = 1;
  	getVariableName = function getVariableName(index) {
  	  if (index === 0) return 'x';
  	  if (index === 1) return 'y';
  	  if (index === 2) return 'z';
  	  return 'c' + (index + 1);
  	};
  	return getVariableName;
  }

  var createPatternBuilder;
  var hasRequiredCreatePatternBuilder;

  function requireCreatePatternBuilder () {
  	if (hasRequiredCreatePatternBuilder) return createPatternBuilder;
  	hasRequiredCreatePatternBuilder = 1;
  	const getVariableName = requireGetVariableName();

  	createPatternBuilder = function createPatternBuilder(dimension) {

  	  return pattern;
  	  
  	  function pattern(template, config) {
  	    let indent = (config && config.indent) || 0;
  	    let join = (config && config.join !== undefined) ? config.join : '\n';
  	    let indentString = Array(indent + 1).join(' ');
  	    let buffer = [];
  	    for (let i = 0; i < dimension; ++i) {
  	      let variableName = getVariableName(i);
  	      let prefix = (i === 0) ? '' : indentString;
  	      buffer.push(prefix + template.replace(/{var}/g, variableName));
  	    }
  	    return buffer.join(join);
  	  }
  	};
  	return createPatternBuilder;
  }

  var hasRequiredGenerateCreateBody;

  function requireGenerateCreateBody () {
  	if (hasRequiredGenerateCreateBody) return generateCreateBody.exports;
  	hasRequiredGenerateCreateBody = 1;
  	const createPatternBuilder = requireCreatePatternBuilder();

  	generateCreateBody.exports = generateCreateBodyFunction;
  	generateCreateBody.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;

  	// InlineTransform: getVectorCode
  	generateCreateBody.exports.getVectorCode = getVectorCode;
  	// InlineTransform: getBodyCode
  	generateCreateBody.exports.getBodyCode = getBodyCode;
  	// InlineTransformExport: module.exports = function() { return Body; }

  	function generateCreateBodyFunction(dimension, debugSetters) {
  	  let code = generateCreateBodyFunctionBody(dimension, debugSetters);
  	  let {Body} = (new Function(code))();
  	  return Body;
  	}

  	function generateCreateBodyFunctionBody(dimension, debugSetters) {
  	  let code = `
${getVectorCode(dimension, debugSetters)}
${getBodyCode(dimension)}
return {Body: Body, Vector: Vector};
`;
  	  return code;
  	}

  	function getBodyCode(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let variableList = pattern('{var}', {join: ', '});
  	  return `
function Body(${variableList}) {
  this.isPinned = false;
  this.pos = new Vector(${variableList});
  this.force = new Vector();
  this.velocity = new Vector();
  this.mass = 1;

  this.springCount = 0;
  this.springLength = 0;
}

Body.prototype.reset = function() {
  this.force.reset();
  this.springCount = 0;
  this.springLength = 0;
}

Body.prototype.setPosition = function (${variableList}) {
  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}
};`;
  	}

  	function getVectorCode(dimension, debugSetters) {
  	  let pattern = createPatternBuilder(dimension);
  	  let setters = '';
  	  if (debugSetters) {
  	    setters = `${pattern("\n\
	   var v{var};\n\
	Object.defineProperty(this, '{var}', {\n\
	  set: function(v) { \n\
	    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\n\
	    v{var} = v; \n\
	  },\n\
	  get: function() { return v{var}; }\n\
	});")}`;
  	  }

  	  let variableList = pattern('{var}', {join: ', '});
  	  return `function Vector(${variableList}) {
  ${setters}
    if (typeof arguments[0] === 'object') {
      // could be another vector
      let v = arguments[0];
      ${pattern('if (!Number.isFinite(v.{var})) throw new Error("Expected value is not a finite number at Vector constructor ({var})");', {indent: 4})}
      ${pattern('this.{var} = v.{var};', {indent: 4})}
    } else {
      ${pattern('this.{var} = typeof {var} === "number" ? {var} : 0;', {indent: 4})}
    }
  }
  
  Vector.prototype.reset = function () {
    ${pattern('this.{var} = ', {join: ''})}0;
  };`;
  	}
  	return generateCreateBody.exports;
  }

  var generateQuadTree = {exports: {}};

  var hasRequiredGenerateQuadTree;

  function requireGenerateQuadTree () {
  	if (hasRequiredGenerateQuadTree) return generateQuadTree.exports;
  	hasRequiredGenerateQuadTree = 1;
  	const createPatternBuilder = requireCreatePatternBuilder();
  	const getVariableName = requireGetVariableName();

  	generateQuadTree.exports = generateQuadTreeFunction;
  	generateQuadTree.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;

  	// These exports are for InlineTransform tool.
  	// InlineTransform: getInsertStackCode
  	generateQuadTree.exports.getInsertStackCode = getInsertStackCode;
  	// InlineTransform: getQuadNodeCode
  	generateQuadTree.exports.getQuadNodeCode = getQuadNodeCode;
  	// InlineTransform: isSamePosition
  	generateQuadTree.exports.isSamePosition = isSamePosition;
  	// InlineTransform: getChildBodyCode
  	generateQuadTree.exports.getChildBodyCode = getChildBodyCode;
  	// InlineTransform: setChildBodyCode
  	generateQuadTree.exports.setChildBodyCode = setChildBodyCode;

  	function generateQuadTreeFunction(dimension) {
  	  let code = generateQuadTreeFunctionBody(dimension);
  	  return (new Function(code))();
  	}

  	function generateQuadTreeFunctionBody(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let quadCount = Math.pow(2, dimension);

  	  let code = `
${getInsertStackCode()}
${getQuadNodeCode(dimension)}
${isSamePosition(dimension)}
${getChildBodyCode(dimension)}
${setChildBodyCode(dimension)}

function createQuadTree(options, random) {
  options = options || {};
  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;
  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;

  var gravity = options.gravity;
  var updateQueue = [];
  var insertStack = new InsertStack();
  var theta = options.theta;

  var nodesCache = [];
  var currentInCache = 0;
  var root = newNode();

  return {
    insertBodies: insertBodies,

    /**
     * Gets root node if it is present
     */
    getRoot: function() {
      return root;
    },

    updateBodyForce: update,

    options: function(newOptions) {
      if (newOptions) {
        if (typeof newOptions.gravity === 'number') {
          gravity = newOptions.gravity;
        }
        if (typeof newOptions.theta === 'number') {
          theta = newOptions.theta;
        }

        return this;
      }

      return {
        gravity: gravity,
        theta: theta
      };
    }
  };

  function newNode() {
    // To avoid pressure on GC we reuse nodes.
    var node = nodesCache[currentInCache];
    if (node) {
${assignQuads('      node.')}
      node.body = null;
      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;
      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;
    } else {
      node = new QuadNode();
      nodesCache[currentInCache] = node;
    }

    ++currentInCache;
    return node;
  }

  function update(sourceBody) {
    var queue = updateQueue;
    var v;
    ${pattern('var d{var};', {indent: 4})}
    var r; 
    ${pattern('var f{var} = 0;', {indent: 4})}
    var queueLength = 1;
    var shiftIdx = 0;
    var pushIdx = 1;

    queue[0] = root;

    while (queueLength) {
      var node = queue[shiftIdx];
      var body = node.body;

      queueLength -= 1;
      shiftIdx += 1;
      var differentBody = (body !== sourceBody);
      if (body && differentBody) {
        // If the current node is a leaf node (and it is not source body),
        // calculate the force exerted by the current node on body, and add this
        // amount to body's net force.
        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}
        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});

        if (r === 0) {
          // Poor man's protection against zero distance.
          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}
          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});
        }

        // This is standard gravitation force calculation but we divide
        // by r^3 to save two operations when normalizing force vector.
        v = gravity * body.mass * sourceBody.mass / (r * r * r);
        ${pattern('f{var} += v * d{var};', {indent: 8})}
      } else if (differentBody) {
        // Otherwise, calculate the ratio s / r,  where s is the width of the region
        // represented by the internal node, and r is the distance between the body
        // and the node's center-of-mass
        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}
        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});

        if (r === 0) {
          // Sorry about code duplication. I don't want to create many functions
          // right away. Just want to see performance first.
          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}
          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});
        }
        // If s / r < θ, treat this internal node as a single body, and calculate the
        // force it exerts on sourceBody, and add this amount to sourceBody's net force.
        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {
          // in the if statement above we consider node's width only
          // because the region was made into square during tree creation.
          // Thus there is no difference between using width or height.
          v = gravity * node.mass * sourceBody.mass / (r * r * r);
          ${pattern('f{var} += v * d{var};', {indent: 10})}
        } else {
          // Otherwise, run the procedure recursively on each of the current node's children.

          // I intentionally unfolded this loop, to save several CPU cycles.
${runRecursiveOnChildren()}
        }
      }
    }

    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}
  }

  function insertBodies(bodies) {
    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}
    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}
    var i = bodies.length;

    // To reduce quad tree depth we are looking for exact bounding box of all particles.
    while (i--) {
      var pos = bodies[i].pos;
      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}
      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}
    }

    // Makes the bounds square.
    var maxSideLength = -Infinity;
    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}

    currentInCache = 0;
    root = newNode();
    ${pattern('root.min_{var} = {var}min;', {indent: 4})}
    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}

    i = bodies.length - 1;
    if (i >= 0) {
      root.body = bodies[i];
    }
    while (i--) {
      insert(bodies[i], root);
    }
  }

  function insert(newBody) {
    insertStack.reset();
    insertStack.push(root, newBody);

    while (!insertStack.isEmpty()) {
      var stackItem = insertStack.pop();
      var node = stackItem.node;
      var body = stackItem.body;

      if (!node.body) {
        // This is internal node. Update the total mass of the node and center-of-mass.
        ${pattern('var {var} = body.pos.{var};', {indent: 8})}
        node.mass += body.mass;
        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}

        // Recursively insert the body in the appropriate quadrant.
        // But first find the appropriate quadrant.
        var quadIdx = 0; // Assume we are in the 0's quad.
        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}
        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}

${assignInsertionQuadIndex(8)}

        var child = getChild(node, quadIdx);

        if (!child) {
          // The node is internal but this quadrant is not taken. Add
          // subnode to it.
          child = newNode();
          ${pattern('child.min_{var} = min_{var};', {indent: 10})}
          ${pattern('child.max_{var} = max_{var};', {indent: 10})}
          child.body = body;

          setChild(node, quadIdx, child);
        } else {
          // continue searching in this quadrant.
          insertStack.push(child, body);
        }
      } else {
        // We are trying to add to the leaf node.
        // We have to convert current leaf into internal node
        // and continue adding two nodes.
        var oldBody = node.body;
        node.body = null; // internal nodes do not cary bodies

        if (isSamePosition(oldBody.pos, body.pos)) {
          // Prevent infinite subdivision by bumping one node
          // anywhere in this quadrant
          var retriesCount = 3;
          do {
            var offset = random.nextDouble();
            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}

            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}
            retriesCount -= 1;
            // Make sure we don't bump it out of the box. If we do, next iteration should fix it
          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));

          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {
            // This is very bad, we ran out of precision.
            // if we do not return from the method we'll get into
            // infinite loop here. So we sacrifice correctness of layout, and keep the app running
            // Next layout iteration should get larger bounding box in the first step and fix this
            return;
          }
        }
        // Next iteration should subdivide node further.
        insertStack.push(node, oldBody);
        insertStack.push(node, body);
      }
    }
  }
}
return createQuadTree;

`;
  	  return code;


  	  function assignInsertionQuadIndex(indentCount) {
  	    let insertionCode = [];
  	    let indent = Array(indentCount + 1).join(' ');
  	    for (let i = 0; i < dimension; ++i) {
  	      insertionCode.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);
  	      insertionCode.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);
  	      insertionCode.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);
  	      insertionCode.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);
  	      insertionCode.push(indent + `}`);
  	    }
  	    return insertionCode.join('\n');
  	    // if (x > max_x) { // somewhere in the eastern part.
  	    //   quadIdx = quadIdx + 1;
  	    //   left = right;
  	    //   right = node.right;
  	    // }
  	  }

  	  function runRecursiveOnChildren() {
  	    let indent = Array(11).join(' ');
  	    let recursiveCode = [];
  	    for (let i = 0; i < quadCount; ++i) {
  	      recursiveCode.push(indent + `if (node.quad${i}) {`);
  	      recursiveCode.push(indent + `  queue[pushIdx] = node.quad${i};`);
  	      recursiveCode.push(indent + `  queueLength += 1;`);
  	      recursiveCode.push(indent + `  pushIdx += 1;`);
  	      recursiveCode.push(indent + `}`);
  	    }
  	    return recursiveCode.join('\n');
  	    // if (node.quad0) {
  	    //   queue[pushIdx] = node.quad0;
  	    //   queueLength += 1;
  	    //   pushIdx += 1;
  	    // }
  	  }

  	  function assignQuads(indent) {
  	    // this.quad0 = null;
  	    // this.quad1 = null;
  	    // this.quad2 = null;
  	    // this.quad3 = null;
  	    let quads = [];
  	    for (let i = 0; i < quadCount; ++i) {
  	      quads.push(`${indent}quad${i} = null;`);
  	    }
  	    return quads.join('\n');
  	  }
  	}

  	function isSamePosition(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  return `
  function isSamePosition(point1, point2) {
    ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}
  
    return ${pattern('d{var} < 1e-8', {join: ' && '})};
  }  
`;
  	}

  	function setChildBodyCode(dimension) {
  	  var quadCount = Math.pow(2, dimension);
  	  return `
function setChild(node, idx, child) {
  ${setChildBody()}
}`;
  	  function setChildBody() {
  	    let childBody = [];
  	    for (let i = 0; i < quadCount; ++i) {
  	      let prefix = (i === 0) ? '  ' : '  else ';
  	      childBody.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);
  	    }

  	    return childBody.join('\n');
  	    // if (idx === 0) node.quad0 = child;
  	    // else if (idx === 1) node.quad1 = child;
  	    // else if (idx === 2) node.quad2 = child;
  	    // else if (idx === 3) node.quad3 = child;
  	  }
  	}

  	function getChildBodyCode(dimension) {
  	  return `function getChild(node, idx) {
${getChildBody()}
  return null;
}`;

  	  function getChildBody() {
  	    let childBody = [];
  	    let quadCount = Math.pow(2, dimension);
  	    for (let i = 0; i < quadCount; ++i) {
  	      childBody.push(`  if (idx === ${i}) return node.quad${i};`);
  	    }

  	    return childBody.join('\n');
  	    // if (idx === 0) return node.quad0;
  	    // if (idx === 1) return node.quad1;
  	    // if (idx === 2) return node.quad2;
  	    // if (idx === 3) return node.quad3;
  	  }
  	}

  	function getQuadNodeCode(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let quadCount = Math.pow(2, dimension);
  	  var quadNodeCode = `
function QuadNode() {
  // body stored inside this node. In quad tree only leaf nodes (by construction)
  // contain bodies:
  this.body = null;

  // Child nodes are stored in quads. Each quad is presented by number:
  // 0 | 1
  // -----
  // 2 | 3
${assignQuads('  this.')}

  // Total mass of current node
  this.mass = 0;

  // Center of mass coordinates
  ${pattern('this.mass_{var} = 0;', {indent: 2})}

  // bounding box coordinates
  ${pattern('this.min_{var} = 0;', {indent: 2})}
  ${pattern('this.max_{var} = 0;', {indent: 2})}
}
`;
  	  return quadNodeCode;

  	  function assignQuads(indent) {
  	    // this.quad0 = null;
  	    // this.quad1 = null;
  	    // this.quad2 = null;
  	    // this.quad3 = null;
  	    let quads = [];
  	    for (let i = 0; i < quadCount; ++i) {
  	      quads.push(`${indent}quad${i} = null;`);
  	    }
  	    return quads.join('\n');
  	  }
  	}

  	function getInsertStackCode() {
  	  return `
/**
 * Our implementation of QuadTree is non-recursive to avoid GC hit
 * This data structure represent stack of elements
 * which we are trying to insert into quad tree.
 */
function InsertStack () {
    this.stack = [];
    this.popIdx = 0;
}

InsertStack.prototype = {
    isEmpty: function() {
        return this.popIdx === 0;
    },
    push: function (node, body) {
        var item = this.stack[this.popIdx];
        if (!item) {
            // we are trying to avoid memory pressure: create new element
            // only when absolutely necessary
            this.stack[this.popIdx] = new InsertStackElement(node, body);
        } else {
            item.node = node;
            item.body = body;
        }
        ++this.popIdx;
    },
    pop: function () {
        if (this.popIdx > 0) {
            return this.stack[--this.popIdx];
        }
    },
    reset: function () {
        this.popIdx = 0;
    }
};

function InsertStackElement(node, body) {
    this.node = node; // QuadTree node
    this.body = body; // physical body which needs to be inserted to node
}
`;
  	}
  	return generateQuadTree.exports;
  }

  var generateBounds = {exports: {}};

  var hasRequiredGenerateBounds;

  function requireGenerateBounds () {
  	if (hasRequiredGenerateBounds) return generateBounds.exports;
  	hasRequiredGenerateBounds = 1;
  	generateBounds.exports = generateBoundsFunction;
  	generateBounds.exports.generateFunctionBody = generateBoundsFunctionBody;

  	const createPatternBuilder = requireCreatePatternBuilder();

  	function generateBoundsFunction(dimension) {
  	  let code = generateBoundsFunctionBody(dimension);
  	  return new Function('bodies', 'settings', 'random', code);
  	}

  	function generateBoundsFunctionBody(dimension) {
  	  let pattern = createPatternBuilder(dimension);

  	  let code = `
  var boundingBox = {
    ${pattern('min_{var}: 0, max_{var}: 0,', {indent: 4})}
  };

  return {
    box: boundingBox,

    update: updateBoundingBox,

    reset: resetBoundingBox,

    getBestNewPosition: function (neighbors) {
      var ${pattern('base_{var} = 0', {join: ', '})};

      if (neighbors.length) {
        for (var i = 0; i < neighbors.length; ++i) {
          let neighborPos = neighbors[i].pos;
          ${pattern('base_{var} += neighborPos.{var};', {indent: 10})}
        }

        ${pattern('base_{var} /= neighbors.length;', {indent: 8})}
      } else {
        ${pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {indent: 8})}
      }

      var springLength = settings.springLength;
      return {
        ${pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {indent: 8})}
      };
    }
  };

  function updateBoundingBox() {
    var i = bodies.length;
    if (i === 0) return; // No bodies - no borders.

    ${pattern('var max_{var} = -Infinity;', {indent: 4})}
    ${pattern('var min_{var} = Infinity;', {indent: 4})}

    while(i--) {
      // this is O(n), it could be done faster with quadtree, if we check the root node bounds
      var bodyPos = bodies[i].pos;
      ${pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {indent: 6})}
      ${pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {indent: 6})}
    }

    ${pattern('boundingBox.min_{var} = min_{var};', {indent: 4})}
    ${pattern('boundingBox.max_{var} = max_{var};', {indent: 4})}
  }

  function resetBoundingBox() {
    ${pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {indent: 4})}
  }
`;
  	  return code;
  	}
  	return generateBounds.exports;
  }

  var generateCreateDragForce = {exports: {}};

  var hasRequiredGenerateCreateDragForce;

  function requireGenerateCreateDragForce () {
  	if (hasRequiredGenerateCreateDragForce) return generateCreateDragForce.exports;
  	hasRequiredGenerateCreateDragForce = 1;
  	const createPatternBuilder = requireCreatePatternBuilder();

  	generateCreateDragForce.exports = generateCreateDragForceFunction;
  	generateCreateDragForce.exports.generateCreateDragForceFunctionBody = generateCreateDragForceFunctionBody;

  	function generateCreateDragForceFunction(dimension) {
  	  let code = generateCreateDragForceFunctionBody(dimension);
  	  return new Function('options', code);
  	}

  	function generateCreateDragForceFunctionBody(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let code = `
  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');

  return {
    update: function(body) {
      ${pattern('body.force.{var} -= options.dragCoefficient * body.velocity.{var};', {indent: 6})}
    }
  };
`;
  	  return code;
  	}
  	return generateCreateDragForce.exports;
  }

  var generateCreateSpringForce = {exports: {}};

  var hasRequiredGenerateCreateSpringForce;

  function requireGenerateCreateSpringForce () {
  	if (hasRequiredGenerateCreateSpringForce) return generateCreateSpringForce.exports;
  	hasRequiredGenerateCreateSpringForce = 1;
  	const createPatternBuilder = requireCreatePatternBuilder();

  	generateCreateSpringForce.exports = generateCreateSpringForceFunction;
  	generateCreateSpringForce.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;

  	function generateCreateSpringForceFunction(dimension) {
  	  let code = generateCreateSpringForceFunctionBody(dimension);
  	  return new Function('options', 'random', code);
  	}

  	function generateCreateSpringForceFunctionBody(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let code = `
  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');
  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');

  return {
    /**
     * Updates forces acting on a spring
     */
    update: function (spring) {
      var body1 = spring.from;
      var body2 = spring.to;
      var length = spring.length < 0 ? options.springLength : spring.length;
      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {indent: 6})}
      var r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});

      if (r === 0) {
        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 8})}
        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});
      }

      var d = r - length;
      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;

      ${pattern('body1.force.{var} += coefficient * d{var}', {indent: 6})};
      body1.springCount += 1;
      body1.springLength += r;

      ${pattern('body2.force.{var} -= coefficient * d{var}', {indent: 6})};
      body2.springCount += 1;
      body2.springLength += r;
    }
  };
`;
  	  return code;
  	}
  	return generateCreateSpringForce.exports;
  }

  var generateIntegrator = {exports: {}};

  var hasRequiredGenerateIntegrator;

  function requireGenerateIntegrator () {
  	if (hasRequiredGenerateIntegrator) return generateIntegrator.exports;
  	hasRequiredGenerateIntegrator = 1;
  	const createPatternBuilder = requireCreatePatternBuilder();

  	generateIntegrator.exports = generateIntegratorFunction;
  	generateIntegrator.exports.generateIntegratorFunctionBody = generateIntegratorFunctionBody;

  	function generateIntegratorFunction(dimension) {
  	  let code = generateIntegratorFunctionBody(dimension);
  	  return new Function('bodies', 'timeStep', 'adaptiveTimeStepWeight', code);
  	}

  	function generateIntegratorFunctionBody(dimension) {
  	  let pattern = createPatternBuilder(dimension);
  	  let code = `
  var length = bodies.length;
  if (length === 0) return 0;

  ${pattern('var d{var} = 0, t{var} = 0;', {indent: 2})}

  for (var i = 0; i < length; ++i) {
    var body = bodies[i];
    if (body.isPinned) continue;

    if (adaptiveTimeStepWeight && body.springCount) {
      timeStep = (adaptiveTimeStepWeight * body.springLength/body.springCount);
    }

    var coeff = timeStep / body.mass;

    ${pattern('body.velocity.{var} += coeff * body.force.{var};', {indent: 4})}
    ${pattern('var v{var} = body.velocity.{var};', {indent: 4})}
    var v = Math.sqrt(${pattern('v{var} * v{var}', {join: ' + '})});

    if (v > 1) {
      // We normalize it so that we move within timeStep range. 
      // for the case when v <= 1 - we let velocity to fade out.
      ${pattern('body.velocity.{var} = v{var} / v;', {indent: 6})}
    }

    ${pattern('d{var} = timeStep * body.velocity.{var};', {indent: 4})}

    ${pattern('body.pos.{var} += d{var};', {indent: 4})}

    ${pattern('t{var} += Math.abs(d{var});', {indent: 4})}
  }

  return (${pattern('t{var} * t{var}', {join: ' + '})})/length;
`;
  	  return code;
  	}
  	return generateIntegrator.exports;
  }

  var spring;
  var hasRequiredSpring;

  function requireSpring () {
  	if (hasRequiredSpring) return spring;
  	hasRequiredSpring = 1;
  	spring = Spring;

  	/**
  	 * Represents a physical spring. Spring connects two bodies, has rest length
  	 * stiffness coefficient and optional weight
  	 */
  	function Spring(fromBody, toBody, length, springCoefficient) {
  	    this.from = fromBody;
  	    this.to = toBody;
  	    this.length = length;
  	    this.coefficient = springCoefficient;
  	}
  	return spring;
  }

  var ngraph_merge;
  var hasRequiredNgraph_merge;

  function requireNgraph_merge () {
  	if (hasRequiredNgraph_merge) return ngraph_merge;
  	hasRequiredNgraph_merge = 1;
  	ngraph_merge = merge;

  	/**
  	 * Augments `target` with properties in `options`. Does not override
  	 * target's properties if they are defined and matches expected type in 
  	 * options
  	 *
  	 * @returns {Object} merged object
  	 */
  	function merge(target, options) {
  	  var key;
  	  if (!target) { target = {}; }
  	  if (options) {
  	    for (key in options) {
  	      if (options.hasOwnProperty(key)) {
  	        var targetHasIt = target.hasOwnProperty(key),
  	            optionsValueType = typeof options[key],
  	            shouldReplace = !targetHasIt || (typeof target[key] !== optionsValueType);

  	        if (shouldReplace) {
  	          target[key] = options[key];
  	        } else if (optionsValueType === 'object') {
  	          // go deep, don't care about loops here, we are simple API!:
  	          target[key] = merge(target[key], options[key]);
  	        }
  	      }
  	    }
  	  }

  	  return target;
  	}
  	return ngraph_merge;
  }

  var ngraph_random = {exports: {}};

  var hasRequiredNgraph_random;

  function requireNgraph_random () {
  	if (hasRequiredNgraph_random) return ngraph_random.exports;
  	hasRequiredNgraph_random = 1;
  	ngraph_random.exports = random;

  	// TODO: Deprecate?
  	ngraph_random.exports.random = random,
  	ngraph_random.exports.randomIterator = randomIterator;

  	/**
  	 * Creates seeded PRNG with two methods:
  	 *   next() and nextDouble()
  	 */
  	function random(inputSeed) {
  	  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());
  	  return new Generator(seed)
  	}

  	function Generator(seed) {
  	  this.seed = seed;
  	}

  	/**
  	  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)
  	  *
  	  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.
  	  */
  	Generator.prototype.next = next;

  	/**
  	  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)
  	  * This function is the same as Math.random() (except that it could be seeded)
  	  */
  	Generator.prototype.nextDouble = nextDouble;

  	/**
  	 * Returns a random real number from uniform distribution in [0, 1)
  	 */
  	Generator.prototype.uniform = nextDouble;

  	/**
  	 * Returns a random real number from a Gaussian distribution
  	 * with 0 as a mean, and 1 as standard deviation u ~ N(0,1)
  	 */
  	Generator.prototype.gaussian = gaussian;

  	function gaussian() {
  	  // use the polar form of the Box-Muller transform
  	  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java
  	  var r, x, y;
  	  do {
  	    x = this.nextDouble() * 2 - 1;
  	    y = this.nextDouble() * 2 - 1;
  	    r = x * x + y * y;
  	  } while (r >= 1 || r === 0);

  	  return x * Math.sqrt(-2 * Math.log(r)/r);
  	}

  	/**
  	 * See https://twitter.com/anvaka/status/1296182534150135808
  	 */
  	Generator.prototype.levy = levy;

  	function levy() {
  	  var beta = 3 / 2;
  	  var sigma = Math.pow(
  	      gamma( 1 + beta ) * Math.sin(Math.PI * beta / 2) / 
  	        (gamma((1 + beta) / 2) * beta * Math.pow(2, (beta - 1) / 2)),
  	      1/beta
  	  );
  	  return this.gaussian() * sigma / Math.pow(Math.abs(this.gaussian()), 1/beta);
  	}

  	// gamma function approximation
  	function gamma(z) {
  	  return Math.sqrt(2 * Math.PI / z) * Math.pow((1 / Math.E) * (z + 1 / (12 * z - 1 / (10 * z))), z);
  	}

  	function nextDouble() {
  	  var seed = this.seed;
  	  // Robert Jenkins' 32 bit integer hash function.
  	  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;
  	  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;
  	  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;
  	  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;
  	  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;
  	  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;
  	  this.seed = seed;
  	  return (seed & 0xfffffff) / 0x10000000;
  	}

  	function next(maxValue) {
  	  return Math.floor(this.nextDouble() * maxValue);
  	}

  	/*
  	 * Creates iterator over array, which returns items of array in random order
  	 * Time complexity is guaranteed to be O(n);
  	 */
  	function randomIterator(array, customRandom) {
  	  var localRandom = customRandom || random();
  	  if (typeof localRandom.next !== 'function') {
  	    throw new Error('customRandom does not match expected API: next() function is missing');
  	  }

  	  return {
  	    forEach: forEach,

  	    /**
  	     * Shuffles array randomly, in place.
  	     */
  	    shuffle: shuffle
  	  };

  	  function shuffle() {
  	    var i, j, t;
  	    for (i = array.length - 1; i > 0; --i) {
  	      j = localRandom.next(i + 1); // i inclusive
  	      t = array[j];
  	      array[j] = array[i];
  	      array[i] = t;
  	    }

  	    return array;
  	  }

  	  function forEach(callback) {
  	    var i, j, t;
  	    for (i = array.length - 1; i > 0; --i) {
  	      j = localRandom.next(i + 1); // i inclusive
  	      t = array[j];
  	      array[j] = array[i];
  	      array[i] = t;

  	      callback(t);
  	    }

  	    if (array.length) {
  	      callback(array[0]);
  	    }
  	  }
  	}
  	return ngraph_random.exports;
  }

  /**
   * Manages a simulation of physical forces acting on bodies and springs.
   */

  var createPhysicsSimulator_1;
  var hasRequiredCreatePhysicsSimulator;

  function requireCreatePhysicsSimulator () {
  	if (hasRequiredCreatePhysicsSimulator) return createPhysicsSimulator_1;
  	hasRequiredCreatePhysicsSimulator = 1;
  	createPhysicsSimulator_1 = createPhysicsSimulator;

  	var generateCreateBodyFunction = requireGenerateCreateBody();
  	var generateQuadTreeFunction = requireGenerateQuadTree();
  	var generateBoundsFunction = requireGenerateBounds();
  	var generateCreateDragForceFunction = requireGenerateCreateDragForce();
  	var generateCreateSpringForceFunction = requireGenerateCreateSpringForce();
  	var generateIntegratorFunction = requireGenerateIntegrator();

  	var dimensionalCache = {};

  	function createPhysicsSimulator(settings) {
  	  var Spring = requireSpring();
  	  var merge = requireNgraph_merge();
  	  var eventify = requireNgraph_events();
  	  if (settings) {
  	    // Check for names from older versions of the layout
  	    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');
  	    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');
  	  }

  	  settings = merge(settings, {
  	      /**
  	       * Ideal length for links (springs in physical model).
  	       */
  	      springLength: 10,

  	      /**
  	       * Hook's law coefficient. 1 - solid spring.
  	       */
  	      springCoefficient: 0.8, 

  	      /**
  	       * Coulomb's law coefficient. It's used to repel nodes thus should be negative
  	       * if you make it positive nodes start attract each other :).
  	       */
  	      gravity: -12,

  	      /**
  	       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).
  	       * The closer it's to 1 the more nodes algorithm will have to go through.
  	       * Setting it to one makes Barnes Hut simulation no different from
  	       * brute-force forces calculation (each node is considered).
  	       */
  	      theta: 0.8,

  	      /**
  	       * Drag force coefficient. Used to slow down system, thus should be less than 1.
  	       * The closer it is to 0 the less tight system will be.
  	       */
  	      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`

  	      /**
  	       * Default time step (dt) for forces integration
  	       */
  	      timeStep : 0.5,

  	      /**
  	       * Adaptive time step uses average spring length to compute actual time step:
  	       * See: https://twitter.com/anvaka/status/1293067160755957760
  	       */
  	      adaptiveTimeStepWeight: 0,

  	      /**
  	       * This parameter defines number of dimensions of the space where simulation
  	       * is performed. 
  	       */
  	      dimensions: 2,

  	      /**
  	       * In debug mode more checks are performed, this will help you catch errors
  	       * quickly, however for production build it is recommended to turn off this flag
  	       * to speed up computation.
  	       */
  	      debug: false
  	  });

  	  var factory = dimensionalCache[settings.dimensions];
  	  if (!factory) {
  	    var dimensions = settings.dimensions;
  	    factory = {
  	      Body: generateCreateBodyFunction(dimensions, settings.debug),
  	      createQuadTree: generateQuadTreeFunction(dimensions),
  	      createBounds: generateBoundsFunction(dimensions),
  	      createDragForce: generateCreateDragForceFunction(dimensions),
  	      createSpringForce: generateCreateSpringForceFunction(dimensions),
  	      integrate: generateIntegratorFunction(dimensions),
  	    };
  	    dimensionalCache[dimensions] = factory;
  	  }

  	  var Body = factory.Body;
  	  var createQuadTree = factory.createQuadTree;
  	  var createBounds = factory.createBounds;
  	  var createDragForce = factory.createDragForce;
  	  var createSpringForce = factory.createSpringForce;
  	  var integrate = factory.integrate;
  	  var createBody = pos => new Body(pos);

  	  var random = requireNgraph_random().random(42);
  	  var bodies = []; // Bodies in this simulation.
  	  var springs = []; // Springs in this simulation.

  	  var quadTree = createQuadTree(settings, random);
  	  var bounds = createBounds(bodies, settings, random);
  	  var springForce = createSpringForce(settings, random);
  	  var dragForce = createDragForce(settings);

  	  var totalMovement = 0; // how much movement we made on last step
  	  var forces = [];
  	  var forceMap = new Map();
  	  var iterationNumber = 0;
  	 
  	  addForce('nbody', nbodyForce);
  	  addForce('spring', updateSpringForce);

  	  var publicApi = {
  	    /**
  	     * Array of bodies, registered with current simulator
  	     *
  	     * Note: To add new body, use addBody() method. This property is only
  	     * exposed for testing/performance purposes.
  	     */
  	    bodies: bodies,
  	  
  	    quadTree: quadTree,

  	    /**
  	     * Array of springs, registered with current simulator
  	     *
  	     * Note: To add new spring, use addSpring() method. This property is only
  	     * exposed for testing/performance purposes.
  	     */
  	    springs: springs,

  	    /**
  	     * Returns settings with which current simulator was initialized
  	     */
  	    settings: settings,

  	    /**
  	     * Adds a new force to simulation
  	     */
  	    addForce: addForce,
  	    
  	    /**
  	     * Removes a force from the simulation.
  	     */
  	    removeForce: removeForce,

  	    /**
  	     * Returns a map of all registered forces.
  	     */
  	    getForces: getForces,

  	    /**
  	     * Performs one step of force simulation.
  	     *
  	     * @returns {boolean} true if system is considered stable; False otherwise.
  	     */
  	    step: function () {
  	      for (var i = 0; i < forces.length; ++i) {
  	        forces[i](iterationNumber);
  	      }
  	      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);
  	      iterationNumber += 1;
  	      return movement;
  	    },

  	    /**
  	     * Adds body to the system
  	     *
  	     * @param {ngraph.physics.primitives.Body} body physical body
  	     *
  	     * @returns {ngraph.physics.primitives.Body} added body
  	     */
  	    addBody: function (body) {
  	      if (!body) {
  	        throw new Error('Body is required');
  	      }
  	      bodies.push(body);

  	      return body;
  	    },

  	    /**
  	     * Adds body to the system at given position
  	     *
  	     * @param {Object} pos position of a body
  	     *
  	     * @returns {ngraph.physics.primitives.Body} added body
  	     */
  	    addBodyAt: function (pos) {
  	      if (!pos) {
  	        throw new Error('Body position is required');
  	      }
  	      var body = createBody(pos);
  	      bodies.push(body);

  	      return body;
  	    },

  	    /**
  	     * Removes body from the system
  	     *
  	     * @param {ngraph.physics.primitives.Body} body to remove
  	     *
  	     * @returns {Boolean} true if body found and removed. falsy otherwise;
  	     */
  	    removeBody: function (body) {
  	      if (!body) { return; }

  	      var idx = bodies.indexOf(body);
  	      if (idx < 0) { return; }

  	      bodies.splice(idx, 1);
  	      if (bodies.length === 0) {
  	        bounds.reset();
  	      }
  	      return true;
  	    },

  	    /**
  	     * Adds a spring to this simulation.
  	     *
  	     * @returns {Object} - a handle for a spring. If you want to later remove
  	     * spring pass it to removeSpring() method.
  	     */
  	    addSpring: function (body1, body2, springLength, springCoefficient) {
  	      if (!body1 || !body2) {
  	        throw new Error('Cannot add null spring to force simulator');
  	      }

  	      if (typeof springLength !== 'number') {
  	        springLength = -1; // assume global configuration
  	      }

  	      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);
  	      springs.push(spring);

  	      // TODO: could mark simulator as dirty.
  	      return spring;
  	    },

  	    /**
  	     * Returns amount of movement performed on last step() call
  	     */
  	    getTotalMovement: function () {
  	      return totalMovement;
  	    },

  	    /**
  	     * Removes spring from the system
  	     *
  	     * @param {Object} spring to remove. Spring is an object returned by addSpring
  	     *
  	     * @returns {Boolean} true if spring found and removed. falsy otherwise;
  	     */
  	    removeSpring: function (spring) {
  	      if (!spring) { return; }
  	      var idx = springs.indexOf(spring);
  	      if (idx > -1) {
  	        springs.splice(idx, 1);
  	        return true;
  	      }
  	    },

  	    getBestNewBodyPosition: function (neighbors) {
  	      return bounds.getBestNewPosition(neighbors);
  	    },

  	    /**
  	     * Returns bounding box which covers all bodies
  	     */
  	    getBBox: getBoundingBox, 
  	    getBoundingBox: getBoundingBox, 

  	    invalidateBBox: function () {
  	      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');
  	    },

  	    // TODO: Move the force specific stuff to force
  	    gravity: function (value) {
  	      if (value !== undefined) {
  	        settings.gravity = value;
  	        quadTree.options({gravity: value});
  	        return this;
  	      } else {
  	        return settings.gravity;
  	      }
  	    },

  	    theta: function (value) {
  	      if (value !== undefined) {
  	        settings.theta = value;
  	        quadTree.options({theta: value});
  	        return this;
  	      } else {
  	        return settings.theta;
  	      }
  	    },

  	    /**
  	     * Returns pseudo-random number generator instance.
  	     */
  	    random: random
  	  };

  	  // allow settings modification via public API:
  	  expose(settings, publicApi);

  	  eventify(publicApi);

  	  return publicApi;

  	  function getBoundingBox() {
  	    bounds.update();
  	    return bounds.box;
  	  }

  	  function addForce(forceName, forceFunction) {
  	    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');

  	    forceMap.set(forceName, forceFunction);
  	    forces.push(forceFunction);
  	  }

  	  function removeForce(forceName) {
  	    var forceIndex = forces.indexOf(forceMap.get(forceName));
  	    if (forceIndex < 0) return;
  	    forces.splice(forceIndex, 1);
  	    forceMap.delete(forceName);
  	  }

  	  function getForces() {
  	    // TODO: Should I trust them or clone the forces?
  	    return forceMap;
  	  }

  	  function nbodyForce(/* iterationUmber */) {
  	    if (bodies.length === 0) return;

  	    quadTree.insertBodies(bodies);
  	    var i = bodies.length;
  	    while (i--) {
  	      var body = bodies[i];
  	      if (!body.isPinned) {
  	        body.reset();
  	        quadTree.updateBodyForce(body);
  	        dragForce.update(body);
  	      }
  	    }
  	  }

  	  function updateSpringForce() {
  	    var i = springs.length;
  	    while (i--) {
  	      springForce.update(springs[i]);
  	    }
  	  }

  	}

  	function expose(settings, target) {
  	  for (var key in settings) {
  	    augment(settings, target, key);
  	  }
  	}

  	function augment(source, target, key) {
  	  if (!source.hasOwnProperty(key)) return;
  	  if (typeof target[key] === 'function') {
  	    // this accessor is already defined. Ignore it
  	    return;
  	  }
  	  var sourceIsNumber = Number.isFinite(source[key]);

  	  if (sourceIsNumber) {
  	    target[key] = function (value) {
  	      if (value !== undefined) {
  	        if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');
  	        source[key] = value;
  	        return target;
  	      }
  	      return source[key];
  	    };
  	  } else {
  	    target[key] = function (value) {
  	      if (value !== undefined) {
  	        source[key] = value;
  	        return target;
  	      }
  	      return source[key];
  	    };
  	  }
  	}
  	return createPhysicsSimulator_1;
  }

  var hasRequiredNgraph_forcelayout;

  function requireNgraph_forcelayout () {
  	if (hasRequiredNgraph_forcelayout) return ngraph_forcelayout.exports;
  	hasRequiredNgraph_forcelayout = 1;
  	ngraph_forcelayout.exports = createLayout;
  	ngraph_forcelayout.exports.simulator = requireCreatePhysicsSimulator();

  	var eventify = requireNgraph_events();

  	/**
  	 * Creates force based layout for a given graph.
  	 *
  	 * @param {ngraph.graph} graph which needs to be laid out
  	 * @param {object} physicsSettings if you need custom settings
  	 * for physics simulator you can pass your own settings here. If it's not passed
  	 * a default one will be created.
  	 */
  	function createLayout(graph, physicsSettings) {
  	  if (!graph) {
  	    throw new Error('Graph structure cannot be undefined');
  	  }

  	  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || requireCreatePhysicsSimulator();
  	  var physicsSimulator = createSimulator(physicsSettings);
  	  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');

  	  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;
  	  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {
  	    nodeMass = physicsSettings.nodeMass;
  	  }

  	  var nodeBodies = new Map();
  	  var springs = {};
  	  var bodiesCount = 0;

  	  var springTransform = physicsSimulator.settings.springTransform || noop;

  	  // Initialize physics with what we have in the graph:
  	  initPhysics();
  	  listenToEvents();

  	  var wasStable = false;

  	  var api = {
  	    /**
  	     * Performs one step of iterative layout algorithm
  	     *
  	     * @returns {boolean} true if the system should be considered stable; False otherwise.
  	     * The system is stable if no further call to `step()` can improve the layout.
  	     */
  	    step: function() {
  	      if (bodiesCount === 0) {
  	        updateStableStatus(true);
  	        return true;
  	      }

  	      var lastMove = physicsSimulator.step();

  	      // Save the movement in case if someone wants to query it in the step
  	      // callback.
  	      api.lastMove = lastMove;

  	      // Allow listeners to perform low-level actions after nodes are updated.
  	      api.fire('step');

  	      var ratio = lastMove/bodiesCount;
  	      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...
  	      updateStableStatus(isStableNow);


  	      return isStableNow;
  	    },

  	    /**
  	     * For a given `nodeId` returns position
  	     */
  	    getNodePosition: function (nodeId) {
  	      return getInitializedBody(nodeId).pos;
  	    },

  	    /**
  	     * Sets position of a node to a given coordinates
  	     * @param {string} nodeId node identifier
  	     * @param {number} x position of a node
  	     * @param {number} y position of a node
  	     * @param {number=} z position of node (only if applicable to body)
  	     */
  	    setNodePosition: function (nodeId) {
  	      var body = getInitializedBody(nodeId);
  	      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));
  	    },

  	    /**
  	     * @returns {Object} Link position by link id
  	     * @returns {Object.from} {x, y} coordinates of link start
  	     * @returns {Object.to} {x, y} coordinates of link end
  	     */
  	    getLinkPosition: function (linkId) {
  	      var spring = springs[linkId];
  	      if (spring) {
  	        return {
  	          from: spring.from.pos,
  	          to: spring.to.pos
  	        };
  	      }
  	    },

  	    /**
  	     * @returns {Object} area required to fit in the graph. Object contains
  	     * `x1`, `y1` - top left coordinates
  	     * `x2`, `y2` - bottom right coordinates
  	     */
  	    getGraphRect: function () {
  	      return physicsSimulator.getBBox();
  	    },

  	    /**
  	     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)
  	     */
  	    forEachBody: forEachBody,

  	    /*
  	     * Requests layout algorithm to pin/unpin node to its current position
  	     * Pinned nodes should not be affected by layout algorithm and always
  	     * remain at their position
  	     */
  	    pinNode: function (node, isPinned) {
  	      var body = getInitializedBody(node.id);
  	       body.isPinned = !!isPinned;
  	    },

  	    /**
  	     * Checks whether given graph's node is currently pinned
  	     */
  	    isNodePinned: function (node) {
  	      return getInitializedBody(node.id).isPinned;
  	    },

  	    /**
  	     * Request to release all resources
  	     */
  	    dispose: function() {
  	      graph.off('changed', onGraphChanged);
  	      api.fire('disposed');
  	    },

  	    /**
  	     * Gets physical body for a given node id. If node is not found undefined
  	     * value is returned.
  	     */
  	    getBody: getBody,

  	    /**
  	     * Gets spring for a given edge.
  	     *
  	     * @param {string} linkId link identifer. If two arguments are passed then
  	     * this argument is treated as formNodeId
  	     * @param {string=} toId when defined this parameter denotes head of the link
  	     * and first argument is treated as tail of the link (fromId)
  	     */
  	    getSpring: getSpring,

  	    /**
  	     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is
  	     */
  	    getForceVectorLength: getForceVectorLength,

  	    /**
  	     * [Read only] Gets current physics simulator
  	     */
  	    simulator: physicsSimulator,

  	    /**
  	     * Gets the graph that was used for layout
  	     */
  	    graph: graph,

  	    /**
  	     * Gets amount of movement performed during last step operation
  	     */
  	    lastMove: 0
  	  };

  	  eventify(api);

  	  return api;

  	  function updateStableStatus(isStableNow) {
  	    if (wasStable !== isStableNow) {
  	      wasStable = isStableNow;
  	      onStableChanged(isStableNow);
  	    }
  	  }

  	  function forEachBody(cb) {
  	    nodeBodies.forEach(cb);
  	  }

  	  function getForceVectorLength() {
  	    var fx = 0, fy = 0;
  	    forEachBody(function(body) {
  	      fx += Math.abs(body.force.x);
  	      fy += Math.abs(body.force.y);
  	    });
  	    return Math.sqrt(fx * fx + fy * fy);
  	  }

  	  function getSpring(fromId, toId) {
  	    var linkId;
  	    if (toId === undefined) {
  	      if (typeof fromId !== 'object') {
  	        // assume fromId as a linkId:
  	        linkId = fromId;
  	      } else {
  	        // assume fromId to be a link object:
  	        linkId = fromId.id;
  	      }
  	    } else {
  	      // toId is defined, should grab link:
  	      var link = graph.hasLink(fromId, toId);
  	      if (!link) return;
  	      linkId = link.id;
  	    }

  	    return springs[linkId];
  	  }

  	  function getBody(nodeId) {
  	    return nodeBodies.get(nodeId);
  	  }

  	  function listenToEvents() {
  	    graph.on('changed', onGraphChanged);
  	  }

  	  function onStableChanged(isStable) {
  	    api.fire('stable', isStable);
  	  }

  	  function onGraphChanged(changes) {
  	    for (var i = 0; i < changes.length; ++i) {
  	      var change = changes[i];
  	      if (change.changeType === 'add') {
  	        if (change.node) {
  	          initBody(change.node.id);
  	        }
  	        if (change.link) {
  	          initLink(change.link);
  	        }
  	      } else if (change.changeType === 'remove') {
  	        if (change.node) {
  	          releaseNode(change.node);
  	        }
  	        if (change.link) {
  	          releaseLink(change.link);
  	        }
  	      }
  	    }
  	    bodiesCount = graph.getNodesCount();
  	  }

  	  function initPhysics() {
  	    bodiesCount = 0;

  	    graph.forEachNode(function (node) {
  	      initBody(node.id);
  	      bodiesCount += 1;
  	    });

  	    graph.forEachLink(initLink);
  	  }

  	  function initBody(nodeId) {
  	    var body = nodeBodies.get(nodeId);
  	    if (!body) {
  	      var node = graph.getNode(nodeId);
  	      if (!node) {
  	        throw new Error('initBody() was called with unknown node id');
  	      }

  	      var pos = node.position;
  	      if (!pos) {
  	        var neighbors = getNeighborBodies(node);
  	        pos = physicsSimulator.getBestNewBodyPosition(neighbors);
  	      }

  	      body = physicsSimulator.addBodyAt(pos);
  	      body.id = nodeId;

  	      nodeBodies.set(nodeId, body);
  	      updateBodyMass(nodeId);

  	      if (isNodeOriginallyPinned(node)) {
  	        body.isPinned = true;
  	      }
  	    }
  	  }

  	  function releaseNode(node) {
  	    var nodeId = node.id;
  	    var body = nodeBodies.get(nodeId);
  	    if (body) {
  	      nodeBodies.delete(nodeId);
  	      physicsSimulator.removeBody(body);
  	    }
  	  }

  	  function initLink(link) {
  	    updateBodyMass(link.fromId);
  	    updateBodyMass(link.toId);

  	    var fromBody = nodeBodies.get(link.fromId),
  	        toBody  = nodeBodies.get(link.toId),
  	        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);

  	    springTransform(link, spring);

  	    springs[link.id] = spring;
  	  }

  	  function releaseLink(link) {
  	    var spring = springs[link.id];
  	    if (spring) {
  	      var from = graph.getNode(link.fromId),
  	          to = graph.getNode(link.toId);

  	      if (from) updateBodyMass(from.id);
  	      if (to) updateBodyMass(to.id);

  	      delete springs[link.id];

  	      physicsSimulator.removeSpring(spring);
  	    }
  	  }

  	  function getNeighborBodies(node) {
  	    // TODO: Could probably be done better on memory
  	    var neighbors = [];
  	    if (!node.links) {
  	      return neighbors;
  	    }
  	    var maxNeighbors = Math.min(node.links.length, 2);
  	    for (var i = 0; i < maxNeighbors; ++i) {
  	      var link = node.links[i];
  	      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);
  	      if (otherBody && otherBody.pos) {
  	        neighbors.push(otherBody);
  	      }
  	    }

  	    return neighbors;
  	  }

  	  function updateBodyMass(nodeId) {
  	    var body = nodeBodies.get(nodeId);
  	    body.mass = nodeMass(nodeId);
  	    if (Number.isNaN(body.mass)) {
  	      throw new Error('Node mass should be a number');
  	    }
  	  }

  	  /**
  	   * Checks whether graph node has in its settings pinned attribute,
  	   * which means layout algorithm cannot move it. Node can be marked
  	   * as pinned, if it has "isPinned" attribute, or when node.data has it.
  	   *
  	   * @param {Object} node a graph node to check
  	   * @return {Boolean} true if node should be treated as pinned; false otherwise.
  	   */
  	  function isNodeOriginallyPinned(node) {
  	    return (node && (node.isPinned || (node.data && node.data.isPinned)));
  	  }

  	  function getInitializedBody(nodeId) {
  	    var body = nodeBodies.get(nodeId);
  	    if (!body) {
  	      initBody(nodeId);
  	      body = nodeBodies.get(nodeId);
  	    }
  	    return body;
  	  }

  	  /**
  	   * Calculates mass of a body, which corresponds to node with given id.
  	   *
  	   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated
  	   * @returns {Number} recommended mass of the body;
  	   */
  	  function defaultArrayNodeMass(nodeId) {
  	    // This function is for older versions of ngraph.graph.
  	    var links = graph.getLinks(nodeId);
  	    if (!links) return 1;
  	    return 1 + links.length / 3.0;
  	  }

  	  function defaultSetNodeMass(nodeId) {
  	    var links = graph.getLinks(nodeId);
  	    if (!links) return 1;
  	    return 1 + links.size / 3.0;
  	  }
  	}

  	function noop() { }
  	return ngraph_forcelayout.exports;
  }

  var ngraph_forcelayoutExports = requireNgraph_forcelayout();
  var forcelayout = /*@__PURE__*/getDefaultExportFromCjs(ngraph_forcelayoutExports);

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now$1 = function() {
    return root.Date.now();
  };

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /** Built-in value references. */
  var Symbol$1 = root.Symbol;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto$1.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now$1();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now$1());
    }

    function debounced() {
      var time = now$1(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  function _arrayLikeToArray$4(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles$4(r) {
    if (Array.isArray(r)) return r;
  }
  function _classCallCheck$1(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _createClass$1(e, r, t) {
    return Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _iterableToArrayLimit$4(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest$4() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray$4(r, e) {
    return _arrayWithHoles$4(r) || _iterableToArrayLimit$4(r, e) || _unsupportedIterableToArray$4(r, e) || _nonIterableRest$4();
  }
  function _unsupportedIterableToArray$4(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$4(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$4(r, a) : void 0;
    }
  }

  var Prop = /*#__PURE__*/_createClass$1(function Prop(name, _ref) {
    var _ref$default = _ref["default"],
      defaultVal = _ref$default === void 0 ? null : _ref$default,
      _ref$triggerUpdate = _ref.triggerUpdate,
      triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function (newVal, state) {} : _ref$onChange;
    _classCallCheck$1(this, Prop);
    this.name = name;
    this.defaultVal = defaultVal;
    this.triggerUpdate = triggerUpdate;
    this.onChange = onChange;
  });
  function index$2 (_ref2) {
    var _ref2$stateInit = _ref2.stateInit,
      stateInit = _ref2$stateInit === void 0 ? function () {
        return {};
      } : _ref2$stateInit,
      _ref2$props = _ref2.props,
      rawProps = _ref2$props === void 0 ? {} : _ref2$props,
      _ref2$methods = _ref2.methods,
      methods = _ref2$methods === void 0 ? {} : _ref2$methods,
      _ref2$aliases = _ref2.aliases,
      aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases,
      _ref2$init = _ref2.init,
      initFn = _ref2$init === void 0 ? function () {} : _ref2$init,
      _ref2$update = _ref2.update,
      updateFn = _ref2$update === void 0 ? function () {} : _ref2$update;
    // Parse props into Prop instances
    var props = Object.keys(rawProps).map(function (propName) {
      return new Prop(propName, rawProps[propName]);
    });
    return function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Holds component state
      var state = Object.assign({}, stateInit instanceof Function ? stateInit(options) : stateInit,
      // Support plain objects for backwards compatibility
      {
        initialised: false
      });

      // keeps track of which props triggered an update
      var changedProps = {};

      // Component constructor
      function comp(nodeElement) {
        initStatic(nodeElement, options);
        digest();
        return comp;
      }
      var initStatic = function initStatic(nodeElement, options) {
        initFn.call(comp, nodeElement, state, options);
        state.initialised = true;
      };
      var digest = debounce(function () {
        if (!state.initialised) {
          return;
        }
        updateFn.call(comp, state, changedProps);
        changedProps = {};
      }, 1);

      // Getter/setter methods
      props.forEach(function (prop) {
        comp[prop.name] = getSetProp(prop);
        function getSetProp(_ref3) {
          var prop = _ref3.name,
            _ref3$triggerUpdate = _ref3.triggerUpdate,
            redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate,
            _ref3$onChange = _ref3.onChange,
            onChange = _ref3$onChange === void 0 ? function (newVal, state) {} : _ref3$onChange,
            _ref3$defaultVal = _ref3.defaultVal,
            defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
          return function (_) {
            var curVal = state[prop];
            if (!arguments.length) {
              return curVal;
            } // Getter mode

            var val = _ === undefined ? defaultVal : _; // pick default if value passed is undefined
            state[prop] = val;
            onChange.call(comp, val, state, curVal);

            // track changed props
            !changedProps.hasOwnProperty(prop) && (changedProps[prop] = curVal);
            if (redigest) {
              digest();
            }
            return comp;
          };
        }
      });

      // Other methods
      Object.keys(methods).forEach(function (methodName) {
        comp[methodName] = function () {
          var _methods$methodName;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args));
        };
      });

      // Link aliases
      Object.entries(aliases).forEach(function (_ref4) {
        var _ref5 = _slicedToArray$4(_ref4, 2),
          alias = _ref5[0],
          target = _ref5[1];
        return comp[alias] = comp[target];
      });

      // Reset all component props to their default value
      comp.resetProps = function () {
        props.forEach(function (prop) {
          comp[prop.name](prop.defaultVal);
        });
        return comp;
      };

      //

      comp.resetProps(); // Apply all prop defaults
      state._rerender = digest; // Expose digest method

      return comp;
    };
  }

  var index$1 = (function (p) {
    return typeof p === 'function' ? p // fn
    : typeof p === 'string' ? function (obj) {
      return obj[p];
    } // property name
    : function (obj) {
      return p;
    };
  }); // constant

  class InternMap extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
      if (entries != null) for (const [key, value] of entries) this.set(key, value);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value) {
      return super.set(intern_set(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  }

  function intern_get({_intern, _key}, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }

  function intern_set({_intern, _key}, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
  }

  function intern_delete({_intern, _key}, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }

  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }

  function max(values, valueof) {
    let max;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null
            && (max < value || (max === undefined && value >= value))) {
          max = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null
            && (max < value || (max === undefined && value >= value))) {
          max = value;
        }
      }
    }
    return max;
  }

  function min(values, valueof) {
    let min;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null
            && (min > value || (min === undefined && value >= value))) {
          min = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null
            && (min > value || (min === undefined && value >= value))) {
          min = value;
        }
      }
    }
    return min;
  }

  function _arrayLikeToArray$3(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles$3(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles$3(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$3(r);
  }
  function _iterableToArray$3(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit$3(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest$3() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread$3() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _objectWithoutProperties$2(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose$2(e, t);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(e);
      for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose$2(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  function _slicedToArray$3(r, e) {
    return _arrayWithHoles$3(r) || _iterableToArrayLimit$3(r, e) || _unsupportedIterableToArray$3(r, e) || _nonIterableRest$3();
  }
  function _toConsumableArray$3(r) {
    return _arrayWithoutHoles$3(r) || _iterableToArray$3(r) || _unsupportedIterableToArray$3(r) || _nonIterableSpread$3();
  }
  function _toPrimitive$3(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r );
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (String )(t);
  }
  function _toPropertyKey$3(t) {
    var i = _toPrimitive$3(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray$3(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$3(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0;
    }
  }

  var index = (function () {
    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var keyAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var multiItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var flattenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [undefined] : [keyAccessors]).map(function (key) {
      return {
        keyAccessor: key,
        isProp: !(key instanceof Function)
      };
    });
    var indexedResult = list.reduce(function (res, item) {
      var iterObj = res;
      var itemVal = item;
      keys.forEach(function (_ref, idx) {
        var keyAccessor = _ref.keyAccessor,
          isProp = _ref.isProp;
        var key;
        if (isProp) {
          var _itemVal = itemVal,
            propVal = _itemVal[keyAccessor],
            rest = _objectWithoutProperties$2(_itemVal, [keyAccessor].map(_toPropertyKey$3));
          key = propVal;
          itemVal = rest;
        } else {
          key = keyAccessor(itemVal, idx);
        }
        if (idx + 1 < keys.length) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = {};
          }
          iterObj = iterObj[key];
        } else {
          // Leaf key
          if (multiItem) {
            if (!iterObj.hasOwnProperty(key)) {
              iterObj[key] = [];
            }
            iterObj[key].push(itemVal);
          } else {
            iterObj[key] = itemVal;
          }
        }
      });
      return res;
    }, {});
    if (multiItem instanceof Function) {
      // Reduce leaf multiple values
      (function reduce(node) {
        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (level === keys.length) {
          Object.keys(node).forEach(function (k) {
            return node[k] = multiItem(node[k]);
          });
        } else {
          Object.values(node).forEach(function (child) {
            return reduce(child, level + 1);
          });
        }
      })(indexedResult); // IIFE
    }
    var result = indexedResult;
    if (flattenKeys) {
      // flatten into array
      result = [];
      (function flatten(node) {
        var accKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        if (accKeys.length === keys.length) {
          result.push({
            keys: accKeys,
            vals: node
          });
        } else {
          Object.entries(node).forEach(function (_ref2) {
            var _ref3 = _slicedToArray$3(_ref2, 2),
              key = _ref3[0],
              val = _ref3[1];
            return flatten(val, [].concat(_toConsumableArray$3(accKeys), [key]));
          });
        }
      })(indexedResult); //IIFE

      if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
        // clear keys if there's no key accessors (single result)
        result[0].keys = [];
      }
    }
    return result;
  });

  function _iterableToArrayLimit$2(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) ; else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {
        _defineProperty$2(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey$2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _slicedToArray$2(arr, i) {
    return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$2();
  }
  function _toConsumableArray$2(arr) {
    return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2();
  }
  function _arrayWithoutHoles$2(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
  }
  function _arrayWithHoles$2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArray$2(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
  }
  function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread$2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest$2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive$2(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$2(arg) {
    var key = _toPrimitive$2(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var _excluded$1 = ["createObj", "updateObj", "exitObj", "objBindAttr", "dataBindAttr"];
  function diffArrays(prev, next, idAccessor) {
    var result = {
      enter: [],
      update: [],
      exit: []
    };
    if (!idAccessor) {
      // use object references for comparison
      var prevSet = new Set(prev);
      var nextSet = new Set(next);
      new Set([].concat(_toConsumableArray$2(prevSet), _toConsumableArray$2(nextSet))).forEach(function (item) {
        var type = !prevSet.has(item) ? 'enter' : !nextSet.has(item) ? 'exit' : 'update';
        result[type].push(type === 'update' ? [item, item] : item);
      });
    } else {
      // compare by id (duplicate keys are ignored)
      var prevById = index(prev, idAccessor, false);
      var nextById = index(next, idAccessor, false);
      var byId = Object.assign({}, prevById, nextById);
      Object.entries(byId).forEach(function (_ref) {
        var _ref2 = _slicedToArray$2(_ref, 2),
          id = _ref2[0],
          item = _ref2[1];
        var type = !prevById.hasOwnProperty(id) ? 'enter' : !nextById.hasOwnProperty(id) ? 'exit' : 'update';
        result[type].push(type === 'update' ? [prevById[id], nextById[id]] : item);
      });
    }
    return result;
  }
  function dataBindDiff(data, existingObjs, _ref3) {
    var _ref3$objBindAttr = _ref3.objBindAttr,
      objBindAttr = _ref3$objBindAttr === void 0 ? '__obj' : _ref3$objBindAttr,
      _ref3$dataBindAttr = _ref3.dataBindAttr,
      dataBindAttr = _ref3$dataBindAttr === void 0 ? '__data' : _ref3$dataBindAttr,
      idAccessor = _ref3.idAccessor,
      _ref3$purge = _ref3.purge,
      purge = _ref3$purge === void 0 ? false : _ref3$purge;
    var isObjValid = function isObjValid(obj) {
      return obj.hasOwnProperty(dataBindAttr);
    };
    var removeObjs = existingObjs.filter(function (obj) {
      return !isObjValid(obj);
    });
    var prevD = existingObjs.filter(isObjValid).map(function (obj) {
      return obj[dataBindAttr];
    });
    var nextD = data;
    var diff = purge ? {
      enter: nextD,
      exit: prevD,
      update: []
    } // don't diff data in purge mode
    : diffArrays(prevD, nextD, idAccessor);
    diff.update = diff.update.map(function (_ref4) {
      var _ref5 = _slicedToArray$2(_ref4, 2),
        prevD = _ref5[0],
        nextD = _ref5[1];
      if (prevD !== nextD) {
        // transfer obj to new data point (if different)
        nextD[objBindAttr] = prevD[objBindAttr];
        nextD[objBindAttr][dataBindAttr] = nextD;
      }
      return nextD;
    });
    diff.exit = diff.exit.concat(removeObjs.map(function (obj) {
      return _defineProperty$2({}, objBindAttr, obj);
    }));
    return diff;
  }
  function viewDigest(data, existingObjs,
  // list
  appendObj,
  // item => {...} function
  removeObj, // item => {...} function
  _ref7) {
    var _ref7$createObj = _ref7.createObj,
      createObj = _ref7$createObj === void 0 ? function (d) {
        return {};
      } : _ref7$createObj,
      _ref7$updateObj = _ref7.updateObj,
      updateObj = _ref7$updateObj === void 0 ? function (obj, d) {} : _ref7$updateObj,
      _ref7$exitObj = _ref7.exitObj,
      exitObj = _ref7$exitObj === void 0 ? function (obj) {} : _ref7$exitObj,
      _ref7$objBindAttr = _ref7.objBindAttr,
      objBindAttr = _ref7$objBindAttr === void 0 ? '__obj' : _ref7$objBindAttr,
      _ref7$dataBindAttr = _ref7.dataBindAttr,
      dataBindAttr = _ref7$dataBindAttr === void 0 ? '__data' : _ref7$dataBindAttr,
      dataDiffOptions = _objectWithoutProperties$1(_ref7, _excluded$1);
    var _dataBindDiff = dataBindDiff(data, existingObjs, _objectSpread2$1({
        objBindAttr: objBindAttr,
        dataBindAttr: dataBindAttr
      }, dataDiffOptions)),
      enter = _dataBindDiff.enter,
      update = _dataBindDiff.update,
      exit = _dataBindDiff.exit;

    // Remove exiting points
    exit.forEach(function (d) {
      var obj = d[objBindAttr];
      delete d[objBindAttr]; // unbind obj

      exitObj(obj);
      removeObj(obj);
    });
    var newObjs = createObjs(enter);
    var pointsData = [].concat(_toConsumableArray$2(enter), _toConsumableArray$2(update));
    updateObjs(pointsData);

    // Add new points
    newObjs.forEach(appendObj);

    //

    function createObjs(data) {
      var newObjs = [];
      data.forEach(function (d) {
        var obj = createObj(d);
        if (obj) {
          obj[dataBindAttr] = d;
          d[objBindAttr] = obj;
          newObjs.push(obj);
        }
      });
      return newObjs;
    }
    function updateObjs(data) {
      data.forEach(function (d) {
        var obj = d[objBindAttr];
        if (obj) {
          obj[dataBindAttr] = d;
          updateObj(obj, d);
        }
      });
    }
  }

  function initRange(domain, range) {
    switch (arguments.length) {
      case 0: break;
      case 1: this.range(domain); break;
      default: this.range(range).domain(domain); break;
    }
    return this;
  }

  const implicit = Symbol("implicit");

  function ordinal() {
    var index = new InternMap(),
        domain = [],
        range = [],
        unknown = implicit;

    function scale(d) {
      let i = index.get(d);
      if (i === undefined) {
        if (unknown !== implicit) return unknown;
        index.set(d, i = domain.push(d) - 1);
      }
      return range[i % range.length];
    }

    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [], index = new InternMap();
      for (const value of _) {
        if (index.has(value)) continue;
        index.set(value, domain.push(value) - 1);
      }
      return scale;
    };

    scale.range = function(_) {
      return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };

    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function() {
      return ordinal(domain, range).unknown(unknown);
    };

    initRange.apply(scale, arguments);

    return scale;
  }

  function colors(specifier) {
    var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
    while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
    return colors;
  }

  var schemePaired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

  // This file is autogenerated. It's used to publish ESM to npm.
  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
      return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360),
        s = Math.round(hsv.s * 100),
        v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl$1(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl$1(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360),
        s = Math.round(hsl.s * 100),
        l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function (color, opts) {
    if (_typeof$1(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof$1(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb$1(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a
    };
  }

  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl$1(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      l = (max + min) / 2;
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb$1(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
      f = h - i,
      p = v * (1 - s),
      q = v * (1 - f * s),
      t = v * (1 - (1 - f) * s),
      mod = i % 6,
      r = [v, q, p, p, t, v][mod],
      g = [t, v, v, q, p, p][mod],
      b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
      s = hsv.s,
      v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level: level,
      size: size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };

  // Big List of Colors
  // ------------------
  // <https://www.w3.org/TR/css-color-4/#named-colors>
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level: level,
      size: size
    };
  }

  function _arrayLikeToArray$1(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles$1(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles$1(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$1(r);
  }
  function _assertThisInitialized$1(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf$1(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf$1(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _construct$1(t, e, r) {
    if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return p;
  }
  function _createClass(e, r, t) {
    return Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _defineProperty$1(e, r, t) {
    return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _getPrototypeOf$1(t) {
    return _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf$1(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf$1(t, e);
  }
  function _isNativeReflectConstruct$1() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct$1 = function () {
      return !!t;
    })();
  }
  function _iterableToArray$1(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit$1(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty$1(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(e);
      for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized$1(t);
  }
  function _setPrototypeOf$1(t, e) {
    return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf$1(t, e);
  }
  function _slicedToArray$1(r, e) {
    return _arrayWithHoles$1(r) || _iterableToArrayLimit$1(r, e) || _unsupportedIterableToArray$1(r, e) || _nonIterableRest$1();
  }
  function _toConsumableArray$1(r) {
    return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread$1();
  }
  function _toPrimitive$1(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey$1(t) {
    var i = _toPrimitive$1(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray$1(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$1(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;
    }
  }

  var _materialDispose = function materialDispose(material) {
    if (material instanceof Array) {
      material.forEach(_materialDispose);
    } else {
      if (material.map) {
        material.map.dispose();
      }
      material.dispose();
    }
  };
  var _deallocate = function deallocate(obj) {
    if (obj.geometry) {
      obj.geometry.dispose();
    }
    if (obj.material) {
      _materialDispose(obj.material);
    }
    if (obj.texture) {
      obj.texture.dispose();
    }
    if (obj.children) {
      obj.children.forEach(_deallocate);
    }
  };
  var emptyObject = function emptyObject(obj) {
    while (obj.children.length) {
      var childObj = obj.children[0];
      obj.remove(childObj);
      _deallocate(childObj);
    }
  };

  var _excluded = ["objFilter"];
  function threeDigest(data, scene) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$objFilter = _ref.objFilter,
      objFilter = _ref$objFilter === void 0 ? function () {
        return true;
      } : _ref$objFilter,
      options = _objectWithoutProperties(_ref, _excluded);
    return viewDigest(data, scene.children.filter(objFilter), function (obj) {
      return scene.add(obj);
    }, function (obj) {
      scene.remove(obj);
      emptyObject(obj);
    }, _objectSpread2({
      objBindAttr: '__threeObj'
    }, options));
  }

  var colorStr2Hex = function colorStr2Hex(str) {
    return isNaN(str) ? parseInt(tinycolor(str).toHex(), 16) : str;
  };
  var colorAlpha = function colorAlpha(str) {
    return isNaN(str) ? tinycolor(str).getAlpha() : 1;
  };
  var autoColorScale = ordinal(schemePaired);

  // Autoset attribute colorField by colorByAccessor property
  // If an object has already a color, don't set it
  // Objects can be nodes or links
  function autoColorObjects(objects, colorByAccessor, colorField) {
    if (!colorByAccessor || typeof colorField !== 'string') return;
    objects.filter(function (obj) {
      return !obj[colorField];
    }).forEach(function (obj) {
      obj[colorField] = autoColorScale(colorByAccessor(obj));
    });
  }

  function getDagDepths (_ref, idAccessor) {
    var nodes = _ref.nodes,
      links = _ref.links;
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$nodeFilter = _ref2.nodeFilter,
      nodeFilter = _ref2$nodeFilter === void 0 ? function () {
        return true;
      } : _ref2$nodeFilter,
      _ref2$onLoopError = _ref2.onLoopError,
      onLoopError = _ref2$onLoopError === void 0 ? function (loopIds) {
        throw "Invalid DAG structure! Found cycle in node path: ".concat(loopIds.join(' -> '), ".");
      } : _ref2$onLoopError;
    // linked graph
    var graph = {};
    nodes.forEach(function (node) {
      return graph[idAccessor(node)] = {
        data: node,
        out: [],
        depth: -1,
        skip: !nodeFilter(node)
      };
    });
    links.forEach(function (_ref3) {
      var source = _ref3.source,
        target = _ref3.target;
      var sourceId = getNodeId(source);
      var targetId = getNodeId(target);
      if (!graph.hasOwnProperty(sourceId)) throw "Missing source node with id: ".concat(sourceId);
      if (!graph.hasOwnProperty(targetId)) throw "Missing target node with id: ".concat(targetId);
      var sourceNode = graph[sourceId];
      var targetNode = graph[targetId];
      sourceNode.out.push(targetNode);
      function getNodeId(node) {
        return _typeof(node) === 'object' ? idAccessor(node) : node;
      }
    });
    var foundLoops = [];
    traverse(Object.values(graph));
    var nodeDepths = Object.assign.apply(Object, [{}].concat(_toConsumableArray$1(Object.entries(graph).filter(function (_ref4) {
      var _ref5 = _slicedToArray$1(_ref4, 2),
        node = _ref5[1];
      return !node.skip;
    }).map(function (_ref6) {
      var _ref7 = _slicedToArray$1(_ref6, 2),
        id = _ref7[0],
        node = _ref7[1];
      return _defineProperty$1({}, id, node.depth);
    }))));
    return nodeDepths;
    function traverse(nodes) {
      var nodeStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var currentDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var _loop = function _loop() {
        var node = nodes[i];
        if (nodeStack.indexOf(node) !== -1) {
          var loop = [].concat(_toConsumableArray$1(nodeStack.slice(nodeStack.indexOf(node))), [node]).map(function (d) {
            return idAccessor(d.data);
          });
          if (!foundLoops.some(function (foundLoop) {
            return foundLoop.length === loop.length && foundLoop.every(function (id, idx) {
              return id === loop[idx];
            });
          })) {
            foundLoops.push(loop);
            onLoopError(loop);
          }
          return 1; // continue
        }
        if (currentDepth > node.depth) {
          // Don't unnecessarily revisit chunks of the graph
          node.depth = currentDepth;
          traverse(node.out, [].concat(_toConsumableArray$1(nodeStack), [node]), currentDepth + (node.skip ? 0 : 1));
        }
      };
      for (var i = 0, l = nodes.length; i < l; i++) {
        if (_loop()) continue;
      }
    }
  }

  var three$1$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists
  : {
    Group: Group$1,
    Mesh: Mesh$1,
    MeshLambertMaterial: MeshLambertMaterial$1,
    Color: Color$1,
    BufferGeometry: BufferGeometry$1,
    BufferAttribute: BufferAttribute$1,
    Matrix4: Matrix4$1,
    Vector3: Vector3$1,
    SphereGeometry: SphereGeometry$1,
    CylinderGeometry: CylinderGeometry,
    TubeGeometry: TubeGeometry,
    ConeGeometry: ConeGeometry,
    Line: Line,
    LineBasicMaterial: LineBasicMaterial$1,
    QuadraticBezierCurve3: QuadraticBezierCurve3,
    CubicBezierCurve3: CubicBezierCurve3,
    Box3: Box3$1
  };
  var ngraph = {
    graph: graph,
    forcelayout: forcelayout
  };

  //

  var DAG_LEVEL_NODE_RATIO = 2;

  // support multiple method names for backwards threejs compatibility
  var setAttributeFn = new three$1$1.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';
  var applyMatrix4Fn = new three$1$1.BufferGeometry().applyMatrix4 ? 'applyMatrix4' : 'applyMatrix';
  var ForceGraph = index$2({
    props: {
      jsonUrl: {
        onChange: function onChange(jsonUrl, state) {
          var _this = this;
          if (jsonUrl && !state.fetchingJson) {
            // Load data asynchronously
            state.fetchingJson = true;
            state.onLoading();
            fetch(jsonUrl).then(function (r) {
              return r.json();
            }).then(function (json) {
              state.fetchingJson = false;
              state.onFinishLoading(json);
              _this.graphData(json);
            });
          }
        },
        triggerUpdate: false
      },
      graphData: {
        "default": {
          nodes: [],
          links: []
        },
        onChange: function onChange(graphData, state) {
          state.engineRunning = false; // Pause simulation immediately
        }
      },
      numDimensions: {
        "default": 3,
        onChange: function onChange(numDim, state) {
          var chargeForce = state.d3ForceLayout.force('charge');
          // Increase repulsion on 3D mode for improved spatial separation
          if (chargeForce) {
            chargeForce.strength(numDim > 2 ? -60 : -30);
          }
          if (numDim < 3) {
            eraseDimension(state.graphData.nodes, 'z');
          }
          if (numDim < 2) {
            eraseDimension(state.graphData.nodes, 'y');
          }
          function eraseDimension(nodes, dim) {
            nodes.forEach(function (d) {
              delete d[dim]; // position
              delete d["v".concat(dim)]; // velocity
            });
          }
        }
      },
      dagMode: {
        onChange: function onChange(dagMode, state) {
          // td, bu, lr, rl, zin, zout, radialin, radialout
          !dagMode && state.forceEngine === 'd3' && (state.graphData.nodes || []).forEach(function (n) {
            return n.fx = n.fy = n.fz = undefined;
          }); // unfix nodes when disabling dag mode
        }
      },
      dagLevelDistance: {},
      dagNodeFilter: {
        "default": function _default(node) {
          return true;
        }
      },
      onDagError: {
        triggerUpdate: false
      },
      nodeRelSize: {
        "default": 4
      },
      // volume per val unit
      nodeId: {
        "default": 'id'
      },
      nodeVal: {
        "default": 'val'
      },
      nodeResolution: {
        "default": 8
      },
      // how many slice segments in the sphere's circumference
      nodeColor: {
        "default": 'color'
      },
      nodeAutoColorBy: {},
      nodeOpacity: {
        "default": 0.75
      },
      nodeVisibility: {
        "default": true
      },
      nodeThreeObject: {},
      nodeThreeObjectExtend: {
        "default": false
      },
      nodePositionUpdate: {
        triggerUpdate: false
      },
      // custom function to call for updating the node's position. Signature: (threeObj, { x, y, z}, node). If the function returns a truthy value, the regular node position update will not run.
      linkSource: {
        "default": 'source'
      },
      linkTarget: {
        "default": 'target'
      },
      linkVisibility: {
        "default": true
      },
      linkColor: {
        "default": 'color'
      },
      linkAutoColorBy: {},
      linkOpacity: {
        "default": 0.2
      },
      linkWidth: {},
      // Rounded to nearest decimal. For falsy values use dimensionless line with 1px regardless of distance.
      linkResolution: {
        "default": 6
      },
      // how many radial segments in each line tube's geometry
      linkCurvature: {
        "default": 0,
        triggerUpdate: false
      },
      // line curvature radius (0: straight, 1: semi-circle)
      linkCurveRotation: {
        "default": 0,
        triggerUpdate: false
      },
      // line curve rotation along the line axis (0: interection with XY plane, PI: upside down)
      linkMaterial: {},
      linkThreeObject: {},
      linkThreeObjectExtend: {
        "default": false
      },
      linkPositionUpdate: {
        triggerUpdate: false
      },
      // custom function to call for updating the link's position. Signature: (threeObj, { start: { x, y, z},  end: { x, y, z }}, link). If the function returns a truthy value, the regular link position update will not run.
      linkDirectionalArrowLength: {
        "default": 0
      },
      linkDirectionalArrowColor: {},
      linkDirectionalArrowRelPos: {
        "default": 0.5,
        triggerUpdate: false
      },
      // value between 0<>1 indicating the relative pos along the (exposed) line
      linkDirectionalArrowResolution: {
        "default": 8
      },
      // how many slice segments in the arrow's conic circumference
      linkDirectionalParticles: {
        "default": 0
      },
      // animate photons travelling in the link direction
      linkDirectionalParticleSpeed: {
        "default": 0.01,
        triggerUpdate: false
      },
      // in link length ratio per frame
      linkDirectionalParticleWidth: {
        "default": 0.5
      },
      linkDirectionalParticleColor: {},
      linkDirectionalParticleResolution: {
        "default": 4
      },
      // how many slice segments in the particle sphere's circumference
      forceEngine: {
        "default": 'd3'
      },
      // d3 or ngraph
      d3AlphaMin: {
        "default": 0
      },
      d3AlphaDecay: {
        "default": 0.0228,
        triggerUpdate: false,
        onChange: function onChange(alphaDecay, state) {
          state.d3ForceLayout.alphaDecay(alphaDecay);
        }
      },
      d3AlphaTarget: {
        "default": 0,
        triggerUpdate: false,
        onChange: function onChange(alphaTarget, state) {
          state.d3ForceLayout.alphaTarget(alphaTarget);
        }
      },
      d3VelocityDecay: {
        "default": 0.4,
        triggerUpdate: false,
        onChange: function onChange(velocityDecay, state) {
          state.d3ForceLayout.velocityDecay(velocityDecay);
        }
      },
      ngraphPhysics: {
        "default": {
          // defaults from https://github.com/anvaka/ngraph.physics.simulator/blob/master/index.js
          timeStep: 20,
          gravity: -1.2,
          theta: 0.8,
          springLength: 30,
          springCoefficient: 0.0008,
          dragCoefficient: 0.02
        }
      },
      warmupTicks: {
        "default": 0,
        triggerUpdate: false
      },
      // how many times to tick the force engine at init before starting to render
      cooldownTicks: {
        "default": Infinity,
        triggerUpdate: false
      },
      cooldownTime: {
        "default": 15000,
        triggerUpdate: false
      },
      // ms
      onLoading: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onFinishLoading: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onUpdate: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onFinishUpdate: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onEngineTick: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onEngineStop: {
        "default": function _default() {},
        triggerUpdate: false
      }
    },
    methods: {
      refresh: function refresh(state) {
        state._flushObjects = true;
        state._rerender();
        return this;
      },
      // Expose d3 forces for external manipulation
      d3Force: function d3Force(state, forceName, forceFn) {
        if (forceFn === undefined) {
          return state.d3ForceLayout.force(forceName); // Force getter
        }
        state.d3ForceLayout.force(forceName, forceFn); // Force setter
        return this;
      },
      d3ReheatSimulation: function d3ReheatSimulation(state) {
        state.d3ForceLayout.alpha(1);
        this.resetCountdown();
        return this;
      },
      // reset cooldown state
      resetCountdown: function resetCountdown(state) {
        state.cntTicks = 0;
        state.startTickTime = new Date();
        state.engineRunning = true;
        return this;
      },
      tickFrame: function tickFrame(state) {
        var isD3Sim = state.forceEngine !== 'ngraph';
        if (state.engineRunning) {
          layoutTick();
        }
        updateArrows();
        updatePhotons();
        return this;

        //

        function layoutTick() {
          if (++state.cntTicks > state.cooldownTicks || new Date() - state.startTickTime > state.cooldownTime || isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin) {
            state.engineRunning = false; // Stop ticking graph
            state.onEngineStop();
          } else {
            state.layout[isD3Sim ? 'tick' : 'step'](); // Tick it
            state.onEngineTick();
          }
          var nodeThreeObjectExtendAccessor = index$1(state.nodeThreeObjectExtend);

          // Update nodes position
          state.graphData.nodes.forEach(function (node) {
            var obj = node.__threeObj;
            if (!obj) return;
            var pos = isD3Sim ? node : state.layout.getNodePosition(node[state.nodeId]);
            var extendedObj = nodeThreeObjectExtendAccessor(node);
            if (!state.nodePositionUpdate || !state.nodePositionUpdate(extendedObj ? obj.children[0] : obj, {
              x: pos.x,
              y: pos.y,
              z: pos.z
            }, node) // pass child custom object if extending the default
            || extendedObj) {
              obj.position.x = pos.x;
              obj.position.y = pos.y || 0;
              obj.position.z = pos.z || 0;
            }
          });

          // Update links position
          var linkWidthAccessor = index$1(state.linkWidth);
          var linkCurvatureAccessor = index$1(state.linkCurvature);
          var linkCurveRotationAccessor = index$1(state.linkCurveRotation);
          var linkThreeObjectExtendAccessor = index$1(state.linkThreeObjectExtend);
          state.graphData.links.forEach(function (link) {
            var lineObj = link.__lineObj;
            if (!lineObj) return;
            var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);
            var start = pos[isD3Sim ? 'source' : 'from'];
            var end = pos[isD3Sim ? 'target' : 'to'];
            if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link

            calcLinkCurve(link); // calculate link curve for all links, including custom replaced, so it can be used in directional functionality

            var extendedObj = linkThreeObjectExtendAccessor(link);
            if (state.linkPositionUpdate && state.linkPositionUpdate(extendedObj ? lineObj.children[1] : lineObj,
            // pass child custom object if extending the default
            {
              start: {
                x: start.x,
                y: start.y,
                z: start.z
              },
              end: {
                x: end.x,
                y: end.y,
                z: end.z
              }
            }, link) && !extendedObj) {
              // exit if successfully custom updated position of non-extended obj
              return;
            }
            var curveResolution = 30; // # line segments
            var curve = link.__curve;

            // select default line obj if it's an extended group
            var line = lineObj.children.length ? lineObj.children[0] : lineObj;
            if (line.type === 'Line') {
              // Update line geometry
              if (!curve) {
                // straight line
                var linePos = line.geometry.getAttribute('position');
                if (!linePos || !linePos.array || linePos.array.length !== 6) {
                  line.geometry[setAttributeFn]('position', linePos = new three$1$1.BufferAttribute(new Float32Array(2 * 3), 3));
                }
                linePos.array[0] = start.x;
                linePos.array[1] = start.y || 0;
                linePos.array[2] = start.z || 0;
                linePos.array[3] = end.x;
                linePos.array[4] = end.y || 0;
                linePos.array[5] = end.z || 0;
                linePos.needsUpdate = true;
              } else {
                // bezier curve line
                var curvePnts = curve.getPoints(curveResolution);
                // resize buffer if needed
                if (line.geometry.getAttribute('position').array.length !== curvePnts.length * 3) {
                  line.geometry[setAttributeFn]('position', new three$1$1.BufferAttribute(new Float32Array(curvePnts.length * 3), 3));
                }
                line.geometry.setFromPoints(curvePnts);
              }
              line.geometry.computeBoundingSphere();
            } else if (line.type === 'Mesh') {
              // Update cylinder geometry

              if (!curve) {
                // straight tube
                if (!line.geometry.type.match(/^Cylinder(Buffer)?Geometry$/)) {
                  var linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;
                  var r = linkWidth / 2;
                  var geometry = new three$1$1.CylinderGeometry(r, r, 1, state.linkResolution, 1, false);
                  geometry[applyMatrix4Fn](new three$1$1.Matrix4().makeTranslation(0, 1 / 2, 0));
                  geometry[applyMatrix4Fn](new three$1$1.Matrix4().makeRotationX(Math.PI / 2));
                  line.geometry.dispose();
                  line.geometry = geometry;
                }
                var vStart = new three$1$1.Vector3(start.x, start.y || 0, start.z || 0);
                var vEnd = new three$1$1.Vector3(end.x, end.y || 0, end.z || 0);
                var distance = vStart.distanceTo(vEnd);
                line.position.x = vStart.x;
                line.position.y = vStart.y;
                line.position.z = vStart.z;
                line.scale.z = distance;
                line.parent.localToWorld(vEnd); // lookAt requires world coords
                line.lookAt(vEnd);
              } else {
                // curved tube
                if (!line.geometry.type.match(/^Tube(Buffer)?Geometry$/)) {
                  // reset object positioning
                  line.position.set(0, 0, 0);
                  line.rotation.set(0, 0, 0);
                  line.scale.set(1, 1, 1);
                }
                var _linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;
                var _r = _linkWidth / 2;
                var _geometry = new three$1$1.TubeGeometry(curve, curveResolution, _r, state.linkResolution, false);
                line.geometry.dispose();
                line.geometry = _geometry;
              }
            }
          });

          //

          function calcLinkCurve(link) {
            var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);
            var start = pos[isD3Sim ? 'source' : 'from'];
            var end = pos[isD3Sim ? 'target' : 'to'];
            if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link

            var curvature = linkCurvatureAccessor(link);
            if (!curvature) {
              link.__curve = null; // Straight line
            } else {
              // bezier curve line (only for line types)
              var vStart = new three$1$1.Vector3(start.x, start.y || 0, start.z || 0);
              var vEnd = new three$1$1.Vector3(end.x, end.y || 0, end.z || 0);
              var l = vStart.distanceTo(vEnd); // line length

              var curve;
              var curveRotation = linkCurveRotationAccessor(link);
              if (l > 0) {
                var dx = end.x - start.x;
                var dy = end.y - start.y || 0;
                var vLine = new three$1$1.Vector3().subVectors(vEnd, vStart);
                var cp = vLine.clone().multiplyScalar(curvature).cross(dx !== 0 || dy !== 0 ? new three$1$1.Vector3(0, 0, 1) : new three$1$1.Vector3(0, 1, 0)) // avoid cross-product of parallel vectors (prefer Z, fallback to Y)
                .applyAxisAngle(vLine.normalize(), curveRotation) // rotate along line axis according to linkCurveRotation
                .add(new three$1$1.Vector3().addVectors(vStart, vEnd).divideScalar(2));
                curve = new three$1$1.QuadraticBezierCurve3(vStart, cp, vEnd);
              } else {
                // Same point, draw a loop
                var d = curvature * 70;
                var endAngle = -curveRotation; // Rotate clockwise (from Z angle perspective)
                var startAngle = endAngle + Math.PI / 2;
                curve = new three$1$1.CubicBezierCurve3(vStart, new three$1$1.Vector3(d * Math.cos(startAngle), d * Math.sin(startAngle), 0).add(vStart), new three$1$1.Vector3(d * Math.cos(endAngle), d * Math.sin(endAngle), 0).add(vStart), vEnd);
              }
              link.__curve = curve;
            }
          }
        }
        function updateArrows() {
          // update link arrow position
          var arrowRelPosAccessor = index$1(state.linkDirectionalArrowRelPos);
          var arrowLengthAccessor = index$1(state.linkDirectionalArrowLength);
          var nodeValAccessor = index$1(state.nodeVal);
          state.graphData.links.forEach(function (link) {
            var arrowObj = link.__arrowObj;
            if (!arrowObj) return;
            var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);
            var start = pos[isD3Sim ? 'source' : 'from'];
            var end = pos[isD3Sim ? 'target' : 'to'];
            if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link

            var startR = Math.cbrt(Math.max(0, nodeValAccessor(start) || 1)) * state.nodeRelSize;
            var endR = Math.cbrt(Math.max(0, nodeValAccessor(end) || 1)) * state.nodeRelSize;
            var arrowLength = arrowLengthAccessor(link);
            var arrowRelPos = arrowRelPosAccessor(link);
            var getPosAlongLine = link.__curve ? function (t) {
              return link.__curve.getPoint(t);
            } // interpolate along bezier curve
            : function (t) {
              // straight line: interpolate linearly
              var iplt = function iplt(dim, start, end, t) {
                return start[dim] + (end[dim] - start[dim]) * t || 0;
              };
              return {
                x: iplt('x', start, end, t),
                y: iplt('y', start, end, t),
                z: iplt('z', start, end, t)
              };
            };
            var lineLen = link.__curve ? link.__curve.getLength() : Math.sqrt(['x', 'y', 'z'].map(function (dim) {
              return Math.pow((end[dim] || 0) - (start[dim] || 0), 2);
            }).reduce(function (acc, v) {
              return acc + v;
            }, 0));
            var posAlongLine = startR + arrowLength + (lineLen - startR - endR - arrowLength) * arrowRelPos;
            var arrowHead = getPosAlongLine(posAlongLine / lineLen);
            var arrowTail = getPosAlongLine((posAlongLine - arrowLength) / lineLen);
            ['x', 'y', 'z'].forEach(function (dim) {
              return arrowObj.position[dim] = arrowTail[dim];
            });
            var headVec = _construct$1(three$1$1.Vector3, _toConsumableArray$1(['x', 'y', 'z'].map(function (c) {
              return arrowHead[c];
            })));
            arrowObj.parent.localToWorld(headVec); // lookAt requires world coords
            arrowObj.lookAt(headVec);
          });
        }
        function updatePhotons() {
          // update link particle positions
          var particleSpeedAccessor = index$1(state.linkDirectionalParticleSpeed);
          state.graphData.links.forEach(function (link) {
            var cyclePhotons = link.__photonsObj && link.__photonsObj.children;
            var singleHopPhotons = link.__singleHopPhotonsObj && link.__singleHopPhotonsObj.children;
            if ((!singleHopPhotons || !singleHopPhotons.length) && (!cyclePhotons || !cyclePhotons.length)) return;
            var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);
            var start = pos[isD3Sim ? 'source' : 'from'];
            var end = pos[isD3Sim ? 'target' : 'to'];
            if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link

            var particleSpeed = particleSpeedAccessor(link);
            var getPhotonPos = link.__curve ? function (t) {
              return link.__curve.getPoint(t);
            } // interpolate along bezier curve
            : function (t) {
              // straight line: interpolate linearly
              var iplt = function iplt(dim, start, end, t) {
                return start[dim] + (end[dim] - start[dim]) * t || 0;
              };
              return {
                x: iplt('x', start, end, t),
                y: iplt('y', start, end, t),
                z: iplt('z', start, end, t)
              };
            };
            var photons = [].concat(_toConsumableArray$1(cyclePhotons || []), _toConsumableArray$1(singleHopPhotons || []));
            photons.forEach(function (photon, idx) {
              var singleHop = photon.parent.__linkThreeObjType === 'singleHopPhotons';
              if (!photon.hasOwnProperty('__progressRatio')) {
                photon.__progressRatio = singleHop ? 0 : idx / cyclePhotons.length;
              }
              photon.__progressRatio += particleSpeed;
              if (photon.__progressRatio >= 1) {
                if (!singleHop) {
                  photon.__progressRatio = photon.__progressRatio % 1;
                } else {
                  // remove particle
                  photon.parent.remove(photon);
                  emptyObject(photon);
                  return;
                }
              }
              var photonPosRatio = photon.__progressRatio;
              var pos = getPhotonPos(photonPosRatio);
              ['x', 'y', 'z'].forEach(function (dim) {
                return photon.position[dim] = pos[dim];
              });
            });
          });
        }
      },
      emitParticle: function emitParticle(state, link) {
        if (link && state.graphData.links.includes(link)) {
          if (!link.__singleHopPhotonsObj) {
            var obj = new three$1$1.Group();
            obj.__linkThreeObjType = 'singleHopPhotons';
            link.__singleHopPhotonsObj = obj;
            state.graphScene.add(obj);
          }
          var particleWidthAccessor = index$1(state.linkDirectionalParticleWidth);
          var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;
          var numSegments = state.linkDirectionalParticleResolution;
          var particleGeometry = new three$1$1.SphereGeometry(photonR, numSegments, numSegments);
          var linkColorAccessor = index$1(state.linkColor);
          var particleColorAccessor = index$1(state.linkDirectionalParticleColor);
          var photonColor = particleColorAccessor(link) || linkColorAccessor(link) || '#f0f0f0';
          var materialColor = new three$1$1.Color(colorStr2Hex(photonColor));
          var opacity = state.linkOpacity * 3;
          var particleMaterial = new three$1$1.MeshLambertMaterial({
            color: materialColor,
            transparent: true,
            opacity: opacity
          });

          // add a single hop particle
          link.__singleHopPhotonsObj.add(new three$1$1.Mesh(particleGeometry, particleMaterial));
        }
        return this;
      },
      getGraphBbox: function getGraphBbox(state) {
        var nodeFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
          return true;
        };
        if (!state.initialised) return null;

        // recursively collect all nested geometries bboxes
        var bboxes = function getBboxes(obj) {
          var bboxes = [];
          if (obj.geometry) {
            obj.geometry.computeBoundingBox();
            var box = new three$1$1.Box3();
            box.copy(obj.geometry.boundingBox).applyMatrix4(obj.matrixWorld);
            bboxes.push(box);
          }
          return bboxes.concat.apply(bboxes, _toConsumableArray$1((obj.children || []).filter(function (obj) {
            return !obj.hasOwnProperty('__graphObjType') || obj.__graphObjType === 'node' && nodeFilter(obj.__data);
          } // exclude filtered out nodes
          ).map(getBboxes)));
        }(state.graphScene);
        if (!bboxes.length) return null;

        // extract global x,y,z min/max
        return Object.assign.apply(Object, _toConsumableArray$1(['x', 'y', 'z'].map(function (c) {
          return _defineProperty$1({}, c, [min(bboxes, function (bb) {
            return bb.min[c];
          }), max(bboxes, function (bb) {
            return bb.max[c];
          })]);
        })));
      }
    },
    stateInit: function stateInit() {
      return {
        d3ForceLayout: forceSimulation().force('link', forceLink()).force('charge', forceManyBody()).force('center', forceCenter()).force('dagRadial', null).stop(),
        engineRunning: false
      };
    },
    init: function init(threeObj, state) {
      // Main three object to manipulate
      state.graphScene = threeObj;
    },
    update: function update(state, changedProps) {
      var hasAnyPropChanged = function hasAnyPropChanged(propList) {
        return propList.some(function (p) {
          return changedProps.hasOwnProperty(p);
        });
      };
      state.engineRunning = false; // pause simulation
      state.onUpdate();
      if (state.nodeAutoColorBy !== null && hasAnyPropChanged(['nodeAutoColorBy', 'graphData', 'nodeColor'])) {
        // Auto add color to uncolored nodes
        autoColorObjects(state.graphData.nodes, index$1(state.nodeAutoColorBy), state.nodeColor);
      }
      if (state.linkAutoColorBy !== null && hasAnyPropChanged(['linkAutoColorBy', 'graphData', 'linkColor'])) {
        // Auto add color to uncolored links
        autoColorObjects(state.graphData.links, index$1(state.linkAutoColorBy), state.linkColor);
      }

      // Digest nodes WebGL objects
      if (state._flushObjects || hasAnyPropChanged(['graphData', 'nodeThreeObject', 'nodeThreeObjectExtend', 'nodeVal', 'nodeColor', 'nodeVisibility', 'nodeRelSize', 'nodeResolution', 'nodeOpacity'])) {
        var customObjectAccessor = index$1(state.nodeThreeObject);
        var customObjectExtendAccessor = index$1(state.nodeThreeObjectExtend);
        var valAccessor = index$1(state.nodeVal);
        var colorAccessor = index$1(state.nodeColor);
        var visibilityAccessor = index$1(state.nodeVisibility);
        var sphereGeometries = {}; // indexed by node value
        var sphereMaterials = {}; // indexed by color

        threeDigest(state.graphData.nodes.filter(visibilityAccessor), state.graphScene, {
          purge: state._flushObjects || hasAnyPropChanged([
          // recreate objects if any of these props have changed
          'nodeThreeObject', 'nodeThreeObjectExtend']),
          objFilter: function objFilter(obj) {
            return obj.__graphObjType === 'node';
          },
          createObj: function createObj(node) {
            var customObj = customObjectAccessor(node);
            var extendObj = customObjectExtendAccessor(node);
            if (customObj && state.nodeThreeObject === customObj) {
              // clone object if it's a shared object among all nodes
              customObj = customObj.clone();
            }
            var obj;
            if (customObj && !extendObj) {
              obj = customObj;
            } else {
              // Add default object (sphere mesh)
              obj = new three$1$1.Mesh();
              obj.__graphDefaultObj = true;
              if (customObj && extendObj) {
                obj.add(customObj); // extend default with custom
              }
            }
            obj.__graphObjType = 'node'; // Add object type

            return obj;
          },
          updateObj: function updateObj(obj, node) {
            if (obj.__graphDefaultObj) {
              // bypass internal updates for custom node objects
              var val = valAccessor(node) || 1;
              var radius = Math.cbrt(val) * state.nodeRelSize;
              var numSegments = state.nodeResolution;
              if (!obj.geometry.type.match(/^Sphere(Buffer)?Geometry$/) || obj.geometry.parameters.radius !== radius || obj.geometry.parameters.widthSegments !== numSegments) {
                if (!sphereGeometries.hasOwnProperty(val)) {
                  sphereGeometries[val] = new three$1$1.SphereGeometry(radius, numSegments, numSegments);
                }
                obj.geometry.dispose();
                obj.geometry = sphereGeometries[val];
              }
              var color = colorAccessor(node);
              var materialColor = new three$1$1.Color(colorStr2Hex(color || '#ffffaa'));
              var opacity = state.nodeOpacity * colorAlpha(color);
              if (obj.material.type !== 'MeshLambertMaterial' || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {
                if (!sphereMaterials.hasOwnProperty(color)) {
                  sphereMaterials[color] = new three$1$1.MeshLambertMaterial({
                    color: materialColor,
                    transparent: true,
                    opacity: opacity
                  });
                }
                obj.material.dispose();
                obj.material = sphereMaterials[color];
              }
            }
          }
        });
      }

      // Digest links WebGL objects
      if (state._flushObjects || hasAnyPropChanged(['graphData', 'linkThreeObject', 'linkThreeObjectExtend', 'linkMaterial', 'linkColor', 'linkWidth', 'linkVisibility', 'linkResolution', 'linkOpacity', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution'])) {
        var _customObjectAccessor = index$1(state.linkThreeObject);
        var _customObjectExtendAccessor = index$1(state.linkThreeObjectExtend);
        var customMaterialAccessor = index$1(state.linkMaterial);
        var _visibilityAccessor = index$1(state.linkVisibility);
        var _colorAccessor = index$1(state.linkColor);
        var widthAccessor = index$1(state.linkWidth);
        var cylinderGeometries = {}; // indexed by link width
        var lambertLineMaterials = {}; // for cylinder objects, indexed by link color
        var basicLineMaterials = {}; // for line objects, indexed by link color

        var visibleLinks = state.graphData.links.filter(_visibilityAccessor);

        // lines digest cycle
        threeDigest(visibleLinks, state.graphScene, {
          objBindAttr: '__lineObj',
          purge: state._flushObjects || hasAnyPropChanged([
          // recreate objects if any of these props have changed
          'linkThreeObject', 'linkThreeObjectExtend', 'linkWidth']),
          objFilter: function objFilter(obj) {
            return obj.__graphObjType === 'link';
          },
          exitObj: function exitObj(obj) {
            // remove trailing single photons
            var singlePhotonsObj = obj.__data && obj.__data.__singleHopPhotonsObj;
            if (singlePhotonsObj) {
              singlePhotonsObj.parent.remove(singlePhotonsObj);
              emptyObject(singlePhotonsObj);
              delete obj.__data.__singleHopPhotonsObj;
            }
          },
          createObj: function createObj(link) {
            var customObj = _customObjectAccessor(link);
            var extendObj = _customObjectExtendAccessor(link);
            if (customObj && state.linkThreeObject === customObj) {
              // clone object if it's a shared object among all links
              customObj = customObj.clone();
            }
            var defaultObj;
            if (!customObj || extendObj) {
              // construct default line obj
              var useCylinder = !!widthAccessor(link);
              if (useCylinder) {
                defaultObj = new three$1$1.Mesh();
              } else {
                // Use plain line (constant width)
                var lineGeometry = new three$1$1.BufferGeometry();
                lineGeometry[setAttributeFn]('position', new three$1$1.BufferAttribute(new Float32Array(2 * 3), 3));
                defaultObj = new three$1$1.Line(lineGeometry);
              }
            }
            var obj;
            if (!customObj) {
              obj = defaultObj;
              obj.__graphDefaultObj = true;
            } else {
              if (!extendObj) {
                // use custom object
                obj = customObj;
              } else {
                // extend default with custom in a group
                obj = new three$1$1.Group();
                obj.__graphDefaultObj = true;
                obj.add(defaultObj);
                obj.add(customObj);
              }
            }
            obj.renderOrder = 10; // Prevent visual glitches of dark lines on top of nodes by rendering them last

            obj.__graphObjType = 'link'; // Add object type

            return obj;
          },
          updateObj: function updateObj(updObj, link) {
            if (updObj.__graphDefaultObj) {
              // bypass internal updates for custom link objects
              // select default object if it's an extended group
              var obj = updObj.children.length ? updObj.children[0] : updObj;
              var linkWidth = Math.ceil(widthAccessor(link) * 10) / 10;
              var useCylinder = !!linkWidth;
              if (useCylinder) {
                var r = linkWidth / 2;
                var numSegments = state.linkResolution;
                if (!obj.geometry.type.match(/^Cylinder(Buffer)?Geometry$/) || obj.geometry.parameters.radiusTop !== r || obj.geometry.parameters.radialSegments !== numSegments) {
                  if (!cylinderGeometries.hasOwnProperty(linkWidth)) {
                    var geometry = new three$1$1.CylinderGeometry(r, r, 1, numSegments, 1, false);
                    geometry[applyMatrix4Fn](new three$1$1.Matrix4().makeTranslation(0, 1 / 2, 0));
                    geometry[applyMatrix4Fn](new three$1$1.Matrix4().makeRotationX(Math.PI / 2));
                    cylinderGeometries[linkWidth] = geometry;
                  }
                  obj.geometry.dispose();
                  obj.geometry = cylinderGeometries[linkWidth];
                }
              }
              var customMaterial = customMaterialAccessor(link);
              if (customMaterial) {
                obj.material = customMaterial;
              } else {
                var color = _colorAccessor(link);
                var materialColor = new three$1$1.Color(colorStr2Hex(color || '#f0f0f0'));
                var opacity = state.linkOpacity * colorAlpha(color);
                var materialType = useCylinder ? 'MeshLambertMaterial' : 'LineBasicMaterial';
                if (obj.material.type !== materialType || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {
                  var lineMaterials = useCylinder ? lambertLineMaterials : basicLineMaterials;
                  if (!lineMaterials.hasOwnProperty(color)) {
                    lineMaterials[color] = new three$1$1[materialType]({
                      color: materialColor,
                      transparent: opacity < 1,
                      opacity: opacity,
                      depthWrite: opacity >= 1 // Prevent transparency issues
                    });
                  }
                  obj.material.dispose();
                  obj.material = lineMaterials[color];
                }
              }
            }
          }
        });

        // Arrows digest cycle
        if (state.linkDirectionalArrowLength || changedProps.hasOwnProperty('linkDirectionalArrowLength')) {
          var arrowLengthAccessor = index$1(state.linkDirectionalArrowLength);
          var arrowColorAccessor = index$1(state.linkDirectionalArrowColor);
          threeDigest(visibleLinks.filter(arrowLengthAccessor), state.graphScene, {
            objBindAttr: '__arrowObj',
            objFilter: function objFilter(obj) {
              return obj.__linkThreeObjType === 'arrow';
            },
            createObj: function createObj() {
              var obj = new three$1$1.Mesh(undefined, new three$1$1.MeshLambertMaterial({
                transparent: true
              }));
              obj.__linkThreeObjType = 'arrow'; // Add object type

              return obj;
            },
            updateObj: function updateObj(obj, link) {
              var arrowLength = arrowLengthAccessor(link);
              var numSegments = state.linkDirectionalArrowResolution;
              if (!obj.geometry.type.match(/^Cone(Buffer)?Geometry$/) || obj.geometry.parameters.height !== arrowLength || obj.geometry.parameters.radialSegments !== numSegments) {
                var coneGeometry = new three$1$1.ConeGeometry(arrowLength * 0.25, arrowLength, numSegments);
                // Correct orientation
                coneGeometry.translate(0, arrowLength / 2, 0);
                coneGeometry.rotateX(Math.PI / 2);
                obj.geometry.dispose();
                obj.geometry = coneGeometry;
              }
              var arrowColor = arrowColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';
              obj.material.color = new three$1$1.Color(colorStr2Hex(arrowColor));
              obj.material.opacity = state.linkOpacity * 3 * colorAlpha(arrowColor);
            }
          });
        }

        // Photon particles digest cycle
        if (state.linkDirectionalParticles || changedProps.hasOwnProperty('linkDirectionalParticles')) {
          var particlesAccessor = index$1(state.linkDirectionalParticles);
          var particleWidthAccessor = index$1(state.linkDirectionalParticleWidth);
          var particleColorAccessor = index$1(state.linkDirectionalParticleColor);
          var particleMaterials = {}; // indexed by link color
          var particleGeometries = {}; // indexed by particle width

          threeDigest(visibleLinks.filter(particlesAccessor), state.graphScene, {
            objBindAttr: '__photonsObj',
            objFilter: function objFilter(obj) {
              return obj.__linkThreeObjType === 'photons';
            },
            createObj: function createObj() {
              var obj = new three$1$1.Group();
              obj.__linkThreeObjType = 'photons'; // Add object type

              return obj;
            },
            updateObj: function updateObj(obj, link) {
              var numPhotons = Math.round(Math.abs(particlesAccessor(link)));
              var curPhoton = !!obj.children.length && obj.children[0];
              var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;
              var numSegments = state.linkDirectionalParticleResolution;
              var particleGeometry;
              if (curPhoton && curPhoton.geometry.parameters.radius === photonR && curPhoton.geometry.parameters.widthSegments === numSegments) {
                particleGeometry = curPhoton.geometry;
              } else {
                if (!particleGeometries.hasOwnProperty(photonR)) {
                  particleGeometries[photonR] = new three$1$1.SphereGeometry(photonR, numSegments, numSegments);
                }
                particleGeometry = particleGeometries[photonR];
                curPhoton && curPhoton.geometry.dispose();
              }
              var photonColor = particleColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';
              var materialColor = new three$1$1.Color(colorStr2Hex(photonColor));
              var opacity = state.linkOpacity * 3;
              var particleMaterial;
              if (curPhoton && curPhoton.material.color.equals(materialColor) && curPhoton.material.opacity === opacity) {
                particleMaterial = curPhoton.material;
              } else {
                if (!particleMaterials.hasOwnProperty(photonColor)) {
                  particleMaterials[photonColor] = new three$1$1.MeshLambertMaterial({
                    color: materialColor,
                    transparent: true,
                    opacity: opacity
                  });
                }
                particleMaterial = particleMaterials[photonColor];
                curPhoton && curPhoton.material.dispose();
              }

              // digest cycle for each photon
              threeDigest(_toConsumableArray$1(new Array(numPhotons)).map(function (_, idx) {
                return {
                  idx: idx
                };
              }), obj, {
                idAccessor: function idAccessor(d) {
                  return d.idx;
                },
                createObj: function createObj() {
                  return new three$1$1.Mesh(particleGeometry, particleMaterial);
                },
                updateObj: function updateObj(obj) {
                  obj.geometry = particleGeometry;
                  obj.material = particleMaterial;
                }
              });
            }
          });
        }
      }
      state._flushObjects = false; // reset objects refresh flag

      // simulation engine
      if (hasAnyPropChanged(['graphData', 'nodeId', 'linkSource', 'linkTarget', 'numDimensions', 'forceEngine', 'dagMode', 'dagNodeFilter', 'dagLevelDistance'])) {
        state.engineRunning = false; // Pause simulation

        // parse links
        state.graphData.links.forEach(function (link) {
          link.source = link[state.linkSource];
          link.target = link[state.linkTarget];
        });

        // Feed data to force-directed layout
        var isD3Sim = state.forceEngine !== 'ngraph';
        var layout;
        if (isD3Sim) {
          // D3-force
          (layout = state.d3ForceLayout).stop().alpha(1) // re-heat the simulation
          .numDimensions(state.numDimensions).nodes(state.graphData.nodes);

          // add links (if link force is still active)
          var linkForce = state.d3ForceLayout.force('link');
          if (linkForce) {
            linkForce.id(function (d) {
              return d[state.nodeId];
            }).links(state.graphData.links);
          }

          // setup dag force constraints
          var nodeDepths = state.dagMode && getDagDepths(state.graphData, function (node) {
            return node[state.nodeId];
          }, {
            nodeFilter: state.dagNodeFilter,
            onLoopError: state.onDagError || undefined
          });
          var maxDepth = Math.max.apply(Math, _toConsumableArray$1(Object.values(nodeDepths || [])));
          var dagLevelDistance = state.dagLevelDistance || state.graphData.nodes.length / (maxDepth || 1) * DAG_LEVEL_NODE_RATIO * (['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? 0.7 : 1);

          // Reset relevant f* when swapping dag modes
          if (['lr', 'rl', 'td', 'bu', 'zin', 'zout'].includes(changedProps.dagMode)) {
            var resetProp = ['lr', 'rl'].includes(changedProps.dagMode) ? 'fx' : ['td', 'bu'].includes(changedProps.dagMode) ? 'fy' : 'fz';
            state.graphData.nodes.filter(state.dagNodeFilter).forEach(function (node) {
              return delete node[resetProp];
            });
          }

          // Fix nodes to x,y,z for dag mode
          if (['lr', 'rl', 'td', 'bu', 'zin', 'zout'].includes(state.dagMode)) {
            var invert = ['rl', 'td', 'zout'].includes(state.dagMode);
            var fixFn = function fixFn(node) {
              return (nodeDepths[node[state.nodeId]] - maxDepth / 2) * dagLevelDistance * (invert ? -1 : 1);
            };
            var _resetProp = ['lr', 'rl'].includes(state.dagMode) ? 'fx' : ['td', 'bu'].includes(state.dagMode) ? 'fy' : 'fz';
            state.graphData.nodes.filter(state.dagNodeFilter).forEach(function (node) {
              return node[_resetProp] = fixFn(node);
            });
          }

          // Use radial force for radial dags
          state.d3ForceLayout.force('dagRadial', ['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? forceRadial(function (node) {
            var nodeDepth = nodeDepths[node[state.nodeId]] || -1;
            return (state.dagMode === 'radialin' ? maxDepth - nodeDepth : nodeDepth) * dagLevelDistance;
          }).strength(function (node) {
            return state.dagNodeFilter(node) ? 1 : 0;
          }) : null);
        } else {
          // ngraph
          var _graph = ngraph.graph();
          state.graphData.nodes.forEach(function (node) {
            _graph.addNode(node[state.nodeId]);
          });
          state.graphData.links.forEach(function (link) {
            _graph.addLink(link.source, link.target);
          });
          layout = ngraph.forcelayout(_graph, _objectSpread2({
            dimensions: state.numDimensions
          }, state.ngraphPhysics));
          layout.graph = _graph; // Attach graph reference to layout
        }
        for (var i = 0; i < state.warmupTicks && !(isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin); i++) {
          layout[isD3Sim ? "tick" : "step"]();
        } // Initial ticks before starting to render

        state.layout = layout;
        this.resetCountdown();
      }
      state.engineRunning = true; // resume simulation

      state.onFinishUpdate();
    }
  });

  function fromKapsule (kapsule) {
    var baseClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object;
    var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var FromKapsule = /*#__PURE__*/function (_baseClass) {
      function FromKapsule() {
        var _this;
        _classCallCheck(this, FromKapsule);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, FromKapsule, [].concat(args));
        _this.__kapsuleInstance = kapsule().apply(void 0, [].concat(_toConsumableArray$1(initKapsuleWithSelf ? [_this] : []), args));
        return _this;
      }
      _inherits(FromKapsule, _baseClass);
      return _createClass(FromKapsule);
    }(baseClass); // attach kapsule props/methods to class prototype
    Object.keys(kapsule()).forEach(function (m) {
      return FromKapsule.prototype[m] = function () {
        var _this$__kapsuleInstan;
        var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);
        return returnVal === this.__kapsuleInstance ? this // chain based on this class, not the kapsule obj
        : returnVal;
      };
    });
    return FromKapsule;
  }

  var three$2 = window.THREE ? window.THREE : {
    Group: Group$1
  }; // Prefer consumption from global THREE, if exists
  var threeForcegraph = fromKapsule(ForceGraph, three$2.Group, true);

  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION = '170';
  const CullFaceNone = 0;
  const CullFaceBack = 1;
  const CullFaceFront = 2;
  const PCFShadowMap$1 = 1;
  const VSMShadowMap = 3;
  const FrontSide = 0;
  const BackSide = 1;
  const DoubleSide = 2;
  const NoBlending = 0;
  const NormalBlending = 1;
  const AdditiveBlending = 2;
  const SubtractiveBlending = 3;
  const MultiplyBlending = 4;
  const CustomBlending = 5;
  const AddEquation = 100;
  const SubtractEquation = 101;
  const ReverseSubtractEquation = 102;
  const MinEquation = 103;
  const MaxEquation = 104;
  const ZeroFactor = 200;
  const OneFactor = 201;
  const SrcColorFactor = 202;
  const OneMinusSrcColorFactor = 203;
  const SrcAlphaFactor = 204;
  const OneMinusSrcAlphaFactor = 205;
  const DstAlphaFactor = 206;
  const OneMinusDstAlphaFactor = 207;
  const DstColorFactor = 208;
  const OneMinusDstColorFactor = 209;
  const SrcAlphaSaturateFactor = 210;
  const NeverDepth = 0;
  const AlwaysDepth = 1;
  const LessDepth = 2;
  const LessEqualDepth = 3;
  const EqualDepth = 4;
  const GreaterEqualDepth = 5;
  const GreaterDepth = 6;
  const NotEqualDepth = 7;
  const MultiplyOperation = 0;
  const MixOperation = 1;
  const AddOperation = 2;
  const NoToneMapping = 0;
  const LinearToneMapping = 1;
  const ReinhardToneMapping = 2;
  const CineonToneMapping = 3;
  const ACESFilmicToneMapping = 4;
  const AgXToneMapping = 6;
  const NeutralToneMapping = 7;

  const UVMapping = 300;
  const CubeReflectionMapping = 301;
  const CubeRefractionMapping = 302;
  const EquirectangularReflectionMapping = 303;
  const EquirectangularRefractionMapping = 304;
  const CubeUVReflectionMapping = 306;
  const RepeatWrapping = 1000;
  const ClampToEdgeWrapping = 1001;
  const MirroredRepeatWrapping = 1002;
  const NearestFilter = 1003;
  const NearestMipmapNearestFilter = 1004;
  const NearestMipmapLinearFilter = 1005;
  const LinearFilter = 1006;
  const LinearMipmapNearestFilter = 1007;
  const LinearMipmapLinearFilter = 1008;
  const UnsignedByteType = 1009;
  const ByteType = 1010;
  const ShortType = 1011;
  const UnsignedShortType = 1012;
  const IntType = 1013;
  const UnsignedIntType = 1014;
  const FloatType = 1015;
  const HalfFloatType = 1016;
  const UnsignedShort4444Type = 1017;
  const UnsignedShort5551Type = 1018;
  const UnsignedInt248Type = 1020;
  const UnsignedInt5999Type = 35902;
  const AlphaFormat = 1021;
  const RGBFormat = 1022;
  const RGBAFormat = 1023;
  const LuminanceFormat = 1024;
  const LuminanceAlphaFormat = 1025;
  const DepthFormat = 1026;
  const DepthStencilFormat = 1027;
  const RedFormat = 1028;
  const RedIntegerFormat = 1029;
  const RGFormat = 1030;
  const RGIntegerFormat = 1031;
  const RGBIntegerFormat = 1032;
  const RGBAIntegerFormat = 1033;

  const RGB_S3TC_DXT1_Format = 33776;
  const RGBA_S3TC_DXT1_Format = 33777;
  const RGBA_S3TC_DXT3_Format = 33778;
  const RGBA_S3TC_DXT5_Format = 33779;
  const RGB_PVRTC_4BPPV1_Format = 35840;
  const RGB_PVRTC_2BPPV1_Format = 35841;
  const RGBA_PVRTC_4BPPV1_Format = 35842;
  const RGBA_PVRTC_2BPPV1_Format = 35843;
  const RGB_ETC1_Format = 36196;
  const RGB_ETC2_Format = 37492;
  const RGBA_ETC2_EAC_Format = 37496;
  const RGBA_ASTC_4x4_Format = 37808;
  const RGBA_ASTC_5x4_Format = 37809;
  const RGBA_ASTC_5x5_Format = 37810;
  const RGBA_ASTC_6x5_Format = 37811;
  const RGBA_ASTC_6x6_Format = 37812;
  const RGBA_ASTC_8x5_Format = 37813;
  const RGBA_ASTC_8x6_Format = 37814;
  const RGBA_ASTC_8x8_Format = 37815;
  const RGBA_ASTC_10x5_Format = 37816;
  const RGBA_ASTC_10x6_Format = 37817;
  const RGBA_ASTC_10x8_Format = 37818;
  const RGBA_ASTC_10x10_Format = 37819;
  const RGBA_ASTC_12x10_Format = 37820;
  const RGBA_ASTC_12x12_Format = 37821;
  const RGBA_BPTC_Format = 36492;
  const RED_RGTC1_Format = 36283;
  const SIGNED_RED_RGTC1_Format = 36284;
  const RED_GREEN_RGTC2_Format = 36285;
  const SIGNED_RED_GREEN_RGTC2_Format = 36286;
  const TangentSpaceNormalMap = 0;
  const ObjectSpaceNormalMap = 1;

  // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
  const NoColorSpace = '';
  const SRGBColorSpace = 'srgb';
  const LinearSRGBColorSpace = 'srgb-linear';

  const LinearTransfer = 'linear';
  const SRGBTransfer = 'srgb';

  const ZeroStencilOp = 0;
  const KeepStencilOp = 7680;
  const ReplaceStencilOp = 7681;
  const IncrementStencilOp = 7682;
  const DecrementStencilOp = 7683;
  const IncrementWrapStencilOp = 34055;
  const DecrementWrapStencilOp = 34056;
  const InvertStencilOp = 5386;

  const NeverStencilFunc = 512;
  const LessStencilFunc = 513;
  const EqualStencilFunc = 514;
  const LessEqualStencilFunc = 515;
  const GreaterStencilFunc = 516;
  const NotEqualStencilFunc = 517;
  const GreaterEqualStencilFunc = 518;
  const AlwaysStencilFunc = 519;

  const NeverCompare = 512;
  const LessCompare = 513;
  const EqualCompare = 514;
  const LessEqualCompare = 515;
  const GreaterCompare = 516;
  const NotEqualCompare = 517;
  const GreaterEqualCompare = 518;
  const AlwaysCompare = 519;

  const StaticDrawUsage = 35044;
  const DynamicDrawUsage = 35048;

  const WebGLCoordinateSystem = 2000;
  const WebGPUCoordinateSystem = 2001;

  /**
   * https://github.com/mrdoob/eventdispatcher.js/
   */

  class EventDispatcher {

  	addEventListener( type, listener ) {

  		if ( this._listeners === undefined ) this._listeners = {};

  		const listeners = this._listeners;

  		if ( listeners[ type ] === undefined ) {

  			listeners[ type ] = [];

  		}

  		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

  			listeners[ type ].push( listener );

  		}

  	}

  	hasEventListener( type, listener ) {

  		if ( this._listeners === undefined ) return false;

  		const listeners = this._listeners;

  		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

  	}

  	removeEventListener( type, listener ) {

  		if ( this._listeners === undefined ) return;

  		const listeners = this._listeners;
  		const listenerArray = listeners[ type ];

  		if ( listenerArray !== undefined ) {

  			const index = listenerArray.indexOf( listener );

  			if ( index !== - 1 ) {

  				listenerArray.splice( index, 1 );

  			}

  		}

  	}

  	dispatchEvent( event ) {

  		if ( this._listeners === undefined ) return;

  		const listeners = this._listeners;
  		const listenerArray = listeners[ event.type ];

  		if ( listenerArray !== undefined ) {

  			event.target = this;

  			// Make a copy, in case listeners are removed while iterating.
  			const array = listenerArray.slice( 0 );

  			for ( let i = 0, l = array.length; i < l; i ++ ) {

  				array[ i ].call( this, event );

  			}

  			event.target = null;

  		}

  	}

  }

  const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

  let _seed = 1234567;


  const DEG2RAD = Math.PI / 180;
  const RAD2DEG = 180 / Math.PI;

  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
  function generateUUID() {

  	const d0 = Math.random() * 0xffffffff | 0;
  	const d1 = Math.random() * 0xffffffff | 0;
  	const d2 = Math.random() * 0xffffffff | 0;
  	const d3 = Math.random() * 0xffffffff | 0;
  	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
  			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
  			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
  			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

  	// .toLowerCase() here flattens concatenated strings to save heap memory space.
  	return uuid.toLowerCase();

  }

  function clamp$1( value, min, max ) {

  	return Math.max( min, Math.min( max, value ) );

  }

  // compute euclidean modulo of m % n
  // https://en.wikipedia.org/wiki/Modulo_operation
  function euclideanModulo( n, m ) {

  	return ( ( n % m ) + m ) % m;

  }

  // Linear mapping from range <a1, a2> to range <b1, b2>
  function mapLinear( x, a1, a2, b1, b2 ) {

  	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  }

  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
  function inverseLerp( x, y, value ) {

  	if ( x !== y ) {

  		return ( value - x ) / ( y - x );

  	} else {

  		return 0;

  	}

  }

  // https://en.wikipedia.org/wiki/Linear_interpolation
  function lerp( x, y, t ) {

  	return ( 1 - t ) * x + t * y;

  }

  // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
  function damp( x, y, lambda, dt ) {

  	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

  }

  // https://www.desmos.com/calculator/vcsjnyz7x4
  function pingpong( x, length = 1 ) {

  	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

  }

  // http://en.wikipedia.org/wiki/Smoothstep
  function smoothstep$1( x, min, max ) {

  	if ( x <= min ) return 0;
  	if ( x >= max ) return 1;

  	x = ( x - min ) / ( max - min );

  	return x * x * ( 3 - 2 * x );

  }

  function smootherstep( x, min, max ) {

  	if ( x <= min ) return 0;
  	if ( x >= max ) return 1;

  	x = ( x - min ) / ( max - min );

  	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

  }

  // Random integer from <low, high> interval
  function randInt( low, high ) {

  	return low + Math.floor( Math.random() * ( high - low + 1 ) );

  }

  // Random float from <low, high> interval
  function randFloat( low, high ) {

  	return low + Math.random() * ( high - low );

  }

  // Random float from <-range/2, range/2> interval
  function randFloatSpread( range ) {

  	return range * ( 0.5 - Math.random() );

  }

  // Deterministic pseudo-random float in the interval [ 0, 1 ]
  function seededRandom( s ) {

  	if ( s !== undefined ) _seed = s;

  	// Mulberry32 generator

  	let t = _seed += 0x6D2B79F5;

  	t = Math.imul( t ^ t >>> 15, t | 1 );

  	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

  	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

  }

  function degToRad( degrees ) {

  	return degrees * DEG2RAD;

  }

  function radToDeg( radians ) {

  	return radians * RAD2DEG;

  }

  function isPowerOfTwo( value ) {

  	return ( value & ( value - 1 ) ) === 0 && value !== 0;

  }

  function ceilPowerOfTwo( value ) {

  	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

  }

  function floorPowerOfTwo( value ) {

  	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

  }

  function setQuaternionFromProperEuler( q, a, b, c, order ) {

  	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

  	// rotations are applied to the axes in the order specified by 'order'
  	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
  	// angles are in radians

  	const cos = Math.cos;
  	const sin = Math.sin;

  	const c2 = cos( b / 2 );
  	const s2 = sin( b / 2 );

  	const c13 = cos( ( a + c ) / 2 );
  	const s13 = sin( ( a + c ) / 2 );

  	const c1_3 = cos( ( a - c ) / 2 );
  	const s1_3 = sin( ( a - c ) / 2 );

  	const c3_1 = cos( ( c - a ) / 2 );
  	const s3_1 = sin( ( c - a ) / 2 );

  	switch ( order ) {

  		case 'XYX':
  			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
  			break;

  		case 'YZY':
  			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
  			break;

  		case 'ZXZ':
  			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
  			break;

  		case 'XZX':
  			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
  			break;

  		case 'YXY':
  			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
  			break;

  		case 'ZYZ':
  			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
  			break;

  		default:
  			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

  	}

  }

  function denormalize( value, array ) {

  	switch ( array.constructor ) {

  		case Float32Array:

  			return value;

  		case Uint32Array:

  			return value / 4294967295.0;

  		case Uint16Array:

  			return value / 65535.0;

  		case Uint8Array:

  			return value / 255.0;

  		case Int32Array:

  			return Math.max( value / 2147483647.0, - 1.0 );

  		case Int16Array:

  			return Math.max( value / 32767.0, - 1.0 );

  		case Int8Array:

  			return Math.max( value / 127.0, - 1.0 );

  		default:

  			throw new Error( 'Invalid component type.' );

  	}

  }

  function normalize$1( value, array ) {

  	switch ( array.constructor ) {

  		case Float32Array:

  			return value;

  		case Uint32Array:

  			return Math.round( value * 4294967295.0 );

  		case Uint16Array:

  			return Math.round( value * 65535.0 );

  		case Uint8Array:

  			return Math.round( value * 255.0 );

  		case Int32Array:

  			return Math.round( value * 2147483647.0 );

  		case Int16Array:

  			return Math.round( value * 32767.0 );

  		case Int8Array:

  			return Math.round( value * 127.0 );

  		default:

  			throw new Error( 'Invalid component type.' );

  	}

  }

  const MathUtils = {
  	DEG2RAD: DEG2RAD,
  	RAD2DEG: RAD2DEG,
  	generateUUID: generateUUID,
  	clamp: clamp$1,
  	euclideanModulo: euclideanModulo,
  	mapLinear: mapLinear,
  	inverseLerp: inverseLerp,
  	lerp: lerp,
  	damp: damp,
  	pingpong: pingpong,
  	smoothstep: smoothstep$1,
  	smootherstep: smootherstep,
  	randInt: randInt,
  	randFloat: randFloat,
  	randFloatSpread: randFloatSpread,
  	seededRandom: seededRandom,
  	degToRad: degToRad,
  	radToDeg: radToDeg,
  	isPowerOfTwo: isPowerOfTwo,
  	ceilPowerOfTwo: ceilPowerOfTwo,
  	floorPowerOfTwo: floorPowerOfTwo,
  	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
  	normalize: normalize$1,
  	denormalize: denormalize
  };

  class Vector2 {

  	constructor( x = 0, y = 0 ) {

  		Vector2.prototype.isVector2 = true;

  		this.x = x;
  		this.y = y;

  	}

  	get width() {

  		return this.x;

  	}

  	set width( value ) {

  		this.x = value;

  	}

  	get height() {

  		return this.y;

  	}

  	set height( value ) {

  		this.y = value;

  	}

  	set( x, y ) {

  		this.x = x;
  		this.y = y;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;

  		return this;

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	applyMatrix3( m ) {

  		const x = this.x, y = this.y;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

  		return this;

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y;

  	}

  	cross( v ) {

  		return this.x * v.y - this.y * v.x;

  	}

  	lengthSq() {

  		return this.x * this.x + this.y * this.y;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	angle() {

  		// computes the angle in radians with respect to the positive x-axis

  		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

  		return angle;

  	}

  	angleTo( v ) {

  		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) return Math.PI / 2;

  		const theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( clamp$1( theta, - 1, 1 ) );

  	}

  	distanceTo( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	}

  	distanceToSquared( v ) {

  		const dx = this.x - v.x, dy = this.y - v.y;
  		return dx * dx + dy * dy;

  	}

  	manhattanDistanceTo( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );

  		return this;

  	}

  	rotateAround( center, angle ) {

  		const c = Math.cos( angle ), s = Math.sin( angle );

  		const x = this.x - center.x;
  		const y = this.y - center.y;

  		this.x = x * c - y * s + center.x;
  		this.y = x * s + y * c + center.y;

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;

  	}

  }

  class Matrix3 {

  	constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		Matrix3.prototype.isMatrix3 = true;

  		this.elements = [

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		];

  		if ( n11 !== undefined ) {

  			this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

  		}

  	}

  	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		const te = this.elements;

  		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
  		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
  		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

  		return this;

  	}

  	identity() {

  		this.set(

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	copy( m ) {

  		const te = this.elements;
  		const me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
  		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
  		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

  		return this;

  	}

  	extractBasis( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrix3Column( this, 0 );
  		yAxis.setFromMatrix3Column( this, 1 );
  		zAxis.setFromMatrix3Column( this, 2 );

  		return this;

  	}

  	setFromMatrix4( m ) {

  		const me = m.elements;

  		this.set(

  			me[ 0 ], me[ 4 ], me[ 8 ],
  			me[ 1 ], me[ 5 ], me[ 9 ],
  			me[ 2 ], me[ 6 ], me[ 10 ]

  		);

  		return this;

  	}

  	multiply( m ) {

  		return this.multiplyMatrices( this, m );

  	}

  	premultiply( m ) {

  		return this.multiplyMatrices( m, this );

  	}

  	multiplyMatrices( a, b ) {

  		const ae = a.elements;
  		const be = b.elements;
  		const te = this.elements;

  		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
  		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
  		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

  		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
  		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
  		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
  		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
  		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
  		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
  		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
  		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
  		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

  		return this;

  	}

  	multiplyScalar( s ) {

  		const te = this.elements;

  		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
  		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
  		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

  		return this;

  	}

  	determinant() {

  		const te = this.elements;

  		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
  			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
  			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

  		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

  	}

  	invert() {

  		const te = this.elements,

  			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
  			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
  			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

  			t11 = n33 * n22 - n32 * n23,
  			t12 = n32 * n13 - n33 * n12,
  			t13 = n23 * n12 - n22 * n13,

  			det = n11 * t11 + n21 * t12 + n31 * t13;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		const detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
  		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

  		te[ 3 ] = t12 * detInv;
  		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
  		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

  		te[ 6 ] = t13 * detInv;
  		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
  		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

  		return this;

  	}

  	transpose() {

  		let tmp;
  		const m = this.elements;

  		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
  		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
  		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

  		return this;

  	}

  	getNormalMatrix( matrix4 ) {

  		return this.setFromMatrix4( matrix4 ).invert().transpose();

  	}

  	transposeIntoArray( r ) {

  		const m = this.elements;

  		r[ 0 ] = m[ 0 ];
  		r[ 1 ] = m[ 3 ];
  		r[ 2 ] = m[ 6 ];
  		r[ 3 ] = m[ 1 ];
  		r[ 4 ] = m[ 4 ];
  		r[ 5 ] = m[ 7 ];
  		r[ 6 ] = m[ 2 ];
  		r[ 7 ] = m[ 5 ];
  		r[ 8 ] = m[ 8 ];

  		return this;

  	}

  	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

  		const c = Math.cos( rotation );
  		const s = Math.sin( rotation );

  		this.set(
  			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
  			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
  			0, 0, 1
  		);

  		return this;

  	}

  	//

  	scale( sx, sy ) {

  		this.premultiply( _m3.makeScale( sx, sy ) );

  		return this;

  	}

  	rotate( theta ) {

  		this.premultiply( _m3.makeRotation( - theta ) );

  		return this;

  	}

  	translate( tx, ty ) {

  		this.premultiply( _m3.makeTranslation( tx, ty ) );

  		return this;

  	}

  	// for 2D Transforms

  	makeTranslation( x, y ) {

  		if ( x.isVector2 ) {

  			this.set(

  				1, 0, x.x,
  				0, 1, x.y,
  				0, 0, 1

  			);

  		} else {

  			this.set(

  				1, 0, x,
  				0, 1, y,
  				0, 0, 1

  			);

  		}

  		return this;

  	}

  	makeRotation( theta ) {

  		// counterclockwise

  		const c = Math.cos( theta );
  		const s = Math.sin( theta );

  		this.set(

  			c, - s, 0,
  			s, c, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	makeScale( x, y ) {

  		this.set(

  			x, 0, 0,
  			0, y, 0,
  			0, 0, 1

  		);

  		return this;

  	}

  	//

  	equals( matrix ) {

  		const te = this.elements;
  		const me = matrix.elements;

  		for ( let i = 0; i < 9; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	}

  	fromArray( array, offset = 0 ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		const te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];

  		array[ offset + 3 ] = te[ 3 ];
  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];

  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];
  		array[ offset + 8 ] = te[ 8 ];

  		return array;

  	}

  	clone() {

  		return new this.constructor().fromArray( this.elements );

  	}

  }

  const _m3 = /*@__PURE__*/ new Matrix3();

  function arrayNeedsUint32$1( array ) {

  	// assumes larger values usually on last

  	for ( let i = array.length - 1; i >= 0; -- i ) {

  		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

  	}

  	return false;

  }

  function createElementNS( name ) {

  	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

  }

  function createCanvasElement() {

  	const canvas = createElementNS( 'canvas' );
  	canvas.style.display = 'block';
  	return canvas;

  }

  const _cache$2 = {};

  function warnOnce( message ) {

  	if ( message in _cache$2 ) return;

  	_cache$2[ message ] = true;

  	console.warn( message );

  }

  const ColorManagement = {

  	enabled: true,

  	workingColorSpace: LinearSRGBColorSpace,

  	/**
  	 * Implementations of supported color spaces.
  	 *
  	 * Required:
  	 *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
  	 *	- whitePoint: reference white [ x y ]
  	 *	- transfer: transfer function (pre-defined)
  	 *	- toXYZ: Matrix3 RGB to XYZ transform
  	 *	- fromXYZ: Matrix3 XYZ to RGB transform
  	 *	- luminanceCoefficients: RGB luminance coefficients
  	 *
  	 * Optional:
  	 *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
  	 *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
  	 *
  	 * Reference:
  	 * - https://www.russellcottrell.com/photo/matrixCalculator.htm
  	 */
  	spaces: {},

  	convert: function ( color, sourceColorSpace, targetColorSpace ) {

  		if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

  			return color;

  		}

  		if ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {

  			color.r = SRGBToLinear( color.r );
  			color.g = SRGBToLinear( color.g );
  			color.b = SRGBToLinear( color.b );

  		}

  		if ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {

  			color.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );
  			color.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );

  		}

  		if ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {

  			color.r = LinearToSRGB( color.r );
  			color.g = LinearToSRGB( color.g );
  			color.b = LinearToSRGB( color.b );

  		}

  		return color;

  	},

  	fromWorkingColorSpace: function ( color, targetColorSpace ) {

  		return this.convert( color, this.workingColorSpace, targetColorSpace );

  	},

  	toWorkingColorSpace: function ( color, sourceColorSpace ) {

  		return this.convert( color, sourceColorSpace, this.workingColorSpace );

  	},

  	getPrimaries: function ( colorSpace ) {

  		return this.spaces[ colorSpace ].primaries;

  	},

  	getTransfer: function ( colorSpace ) {

  		if ( colorSpace === NoColorSpace ) return LinearTransfer;

  		return this.spaces[ colorSpace ].transfer;

  	},

  	getLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {

  		return target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );

  	},

  	define: function ( colorSpaces ) {

  		Object.assign( this.spaces, colorSpaces );

  	},

  	// Internal APIs

  	_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {

  		return targetMatrix
  			.copy( this.spaces[ sourceColorSpace ].toXYZ )
  			.multiply( this.spaces[ targetColorSpace ].fromXYZ );

  	},

  	_getDrawingBufferColorSpace: function ( colorSpace ) {

  		return this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;

  	},

  	_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {

  		return this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;

  	}

  };

  function SRGBToLinear( c ) {

  	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

  }

  function LinearToSRGB( c ) {

  	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

  }

  /******************************************************************************
   * sRGB definitions
   */

  const REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];
  const REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];
  const D65 = [ 0.3127, 0.3290 ];

  const LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(
  	0.4123908, 0.3575843, 0.1804808,
  	0.2126390, 0.7151687, 0.0721923,
  	0.0193308, 0.1191948, 0.9505322
  );

  const XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(
  	3.2409699, - 1.5373832, - 0.4986108,
  	- 0.9692436, 1.8759675, 0.0415551,
  	0.0556301, - 0.2039770, 1.0569715
  );

  ColorManagement.define( {

  	[ LinearSRGBColorSpace ]: {
  		primaries: REC709_PRIMARIES,
  		whitePoint: D65,
  		transfer: LinearTransfer,
  		toXYZ: LINEAR_REC709_TO_XYZ,
  		fromXYZ: XYZ_TO_LINEAR_REC709,
  		luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
  		workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
  		outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
  	},

  	[ SRGBColorSpace ]: {
  		primaries: REC709_PRIMARIES,
  		whitePoint: D65,
  		transfer: SRGBTransfer,
  		toXYZ: LINEAR_REC709_TO_XYZ,
  		fromXYZ: XYZ_TO_LINEAR_REC709,
  		luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
  		outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
  	},

  } );

  let _canvas;

  class ImageUtils {

  	static getDataURL( image ) {

  		if ( /^data:/i.test( image.src ) ) {

  			return image.src;

  		}

  		if ( typeof HTMLCanvasElement === 'undefined' ) {

  			return image.src;

  		}

  		let canvas;

  		if ( image instanceof HTMLCanvasElement ) {

  			canvas = image;

  		} else {

  			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

  			_canvas.width = image.width;
  			_canvas.height = image.height;

  			const context = _canvas.getContext( '2d' );

  			if ( image instanceof ImageData ) {

  				context.putImageData( image, 0, 0 );

  			} else {

  				context.drawImage( image, 0, 0, image.width, image.height );

  			}

  			canvas = _canvas;

  		}

  		if ( canvas.width > 2048 || canvas.height > 2048 ) {

  			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

  			return canvas.toDataURL( 'image/jpeg', 0.6 );

  		} else {

  			return canvas.toDataURL( 'image/png' );

  		}

  	}

  	static sRGBToLinear( image ) {

  		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  			const canvas = createElementNS( 'canvas' );

  			canvas.width = image.width;
  			canvas.height = image.height;

  			const context = canvas.getContext( '2d' );
  			context.drawImage( image, 0, 0, image.width, image.height );

  			const imageData = context.getImageData( 0, 0, image.width, image.height );
  			const data = imageData.data;

  			for ( let i = 0; i < data.length; i ++ ) {

  				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

  			}

  			context.putImageData( imageData, 0, 0 );

  			return canvas;

  		} else if ( image.data ) {

  			const data = image.data.slice( 0 );

  			for ( let i = 0; i < data.length; i ++ ) {

  				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

  					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

  				} else {

  					// assuming float

  					data[ i ] = SRGBToLinear( data[ i ] );

  				}

  			}

  			return {
  				data: data,
  				width: image.width,
  				height: image.height
  			};

  		} else {

  			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
  			return image;

  		}

  	}

  }

  let _sourceId = 0;

  class Source {

  	constructor( data = null ) {

  		this.isSource = true;

  		Object.defineProperty( this, 'id', { value: _sourceId ++ } );

  		this.uuid = generateUUID();

  		this.data = data;
  		this.dataReady = true;

  		this.version = 0;

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

  			return meta.images[ this.uuid ];

  		}

  		const output = {
  			uuid: this.uuid,
  			url: ''
  		};

  		const data = this.data;

  		if ( data !== null ) {

  			let url;

  			if ( Array.isArray( data ) ) {

  				// cube texture

  				url = [];

  				for ( let i = 0, l = data.length; i < l; i ++ ) {

  					if ( data[ i ].isDataTexture ) {

  						url.push( serializeImage( data[ i ].image ) );

  					} else {

  						url.push( serializeImage( data[ i ] ) );

  					}

  				}

  			} else {

  				// texture

  				url = serializeImage( data );

  			}

  			output.url = url;

  		}

  		if ( ! isRootObject ) {

  			meta.images[ this.uuid ] = output;

  		}

  		return output;

  	}

  }

  function serializeImage( image ) {

  	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  		// default images

  		return ImageUtils.getDataURL( image );

  	} else {

  		if ( image.data ) {

  			// images of DataTexture

  			return {
  				data: Array.from( image.data ),
  				width: image.width,
  				height: image.height,
  				type: image.data.constructor.name
  			};

  		} else {

  			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
  			return {};

  		}

  	}

  }

  let _textureId = 0;

  class Texture extends EventDispatcher {

  	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {

  		super();

  		this.isTexture = true;

  		Object.defineProperty( this, 'id', { value: _textureId ++ } );

  		this.uuid = generateUUID();

  		this.name = '';

  		this.source = new Source( image );
  		this.mipmaps = [];

  		this.mapping = mapping;
  		this.channel = 0;

  		this.wrapS = wrapS;
  		this.wrapT = wrapT;

  		this.magFilter = magFilter;
  		this.minFilter = minFilter;

  		this.anisotropy = anisotropy;

  		this.format = format;
  		this.internalFormat = null;
  		this.type = type;

  		this.offset = new Vector2( 0, 0 );
  		this.repeat = new Vector2( 1, 1 );
  		this.center = new Vector2( 0, 0 );
  		this.rotation = 0;

  		this.matrixAutoUpdate = true;
  		this.matrix = new Matrix3();

  		this.generateMipmaps = true;
  		this.premultiplyAlpha = false;
  		this.flipY = true;
  		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  		this.colorSpace = colorSpace;

  		this.userData = {};

  		this.version = 0;
  		this.onUpdate = null;

  		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
  		this.pmremVersion = 0; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

  	}

  	get image() {

  		return this.source.data;

  	}

  	set image( value = null ) {

  		this.source.data = value;

  	}

  	updateMatrix() {

  		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.name = source.name;

  		this.source = source.source;
  		this.mipmaps = source.mipmaps.slice( 0 );

  		this.mapping = source.mapping;
  		this.channel = source.channel;

  		this.wrapS = source.wrapS;
  		this.wrapT = source.wrapT;

  		this.magFilter = source.magFilter;
  		this.minFilter = source.minFilter;

  		this.anisotropy = source.anisotropy;

  		this.format = source.format;
  		this.internalFormat = source.internalFormat;
  		this.type = source.type;

  		this.offset.copy( source.offset );
  		this.repeat.copy( source.repeat );
  		this.center.copy( source.center );
  		this.rotation = source.rotation;

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrix.copy( source.matrix );

  		this.generateMipmaps = source.generateMipmaps;
  		this.premultiplyAlpha = source.premultiplyAlpha;
  		this.flipY = source.flipY;
  		this.unpackAlignment = source.unpackAlignment;
  		this.colorSpace = source.colorSpace;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		this.needsUpdate = true;

  		return this;

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

  			return meta.textures[ this.uuid ];

  		}

  		const output = {

  			metadata: {
  				version: 4.6,
  				type: 'Texture',
  				generator: 'Texture.toJSON'
  			},

  			uuid: this.uuid,
  			name: this.name,

  			image: this.source.toJSON( meta ).uuid,

  			mapping: this.mapping,
  			channel: this.channel,

  			repeat: [ this.repeat.x, this.repeat.y ],
  			offset: [ this.offset.x, this.offset.y ],
  			center: [ this.center.x, this.center.y ],
  			rotation: this.rotation,

  			wrap: [ this.wrapS, this.wrapT ],

  			format: this.format,
  			internalFormat: this.internalFormat,
  			type: this.type,
  			colorSpace: this.colorSpace,

  			minFilter: this.minFilter,
  			magFilter: this.magFilter,
  			anisotropy: this.anisotropy,

  			flipY: this.flipY,

  			generateMipmaps: this.generateMipmaps,
  			premultiplyAlpha: this.premultiplyAlpha,
  			unpackAlignment: this.unpackAlignment

  		};

  		if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

  		if ( ! isRootObject ) {

  			meta.textures[ this.uuid ] = output;

  		}

  		return output;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	transformUv( uv ) {

  		if ( this.mapping !== UVMapping ) return uv;

  		uv.applyMatrix3( this.matrix );

  		if ( uv.x < 0 || uv.x > 1 ) {

  			switch ( this.wrapS ) {

  				case RepeatWrapping:

  					uv.x = uv.x - Math.floor( uv.x );
  					break;

  				case ClampToEdgeWrapping:

  					uv.x = uv.x < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

  						uv.x = Math.ceil( uv.x ) - uv.x;

  					} else {

  						uv.x = uv.x - Math.floor( uv.x );

  					}

  					break;

  			}

  		}

  		if ( uv.y < 0 || uv.y > 1 ) {

  			switch ( this.wrapT ) {

  				case RepeatWrapping:

  					uv.y = uv.y - Math.floor( uv.y );
  					break;

  				case ClampToEdgeWrapping:

  					uv.y = uv.y < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

  						uv.y = Math.ceil( uv.y ) - uv.y;

  					} else {

  						uv.y = uv.y - Math.floor( uv.y );

  					}

  					break;

  			}

  		}

  		if ( this.flipY ) {

  			uv.y = 1 - uv.y;

  		}

  		return uv;

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) {

  			this.version ++;
  			this.source.needsUpdate = true;

  		}

  	}

  	set needsPMREMUpdate( value ) {

  		if ( value === true ) {

  			this.pmremVersion ++;

  		}

  	}

  }

  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;

  class Vector4 {

  	constructor( x = 0, y = 0, z = 0, w = 1 ) {

  		Vector4.prototype.isVector4 = true;

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  	}

  	get width() {

  		return this.z;

  	}

  	set width( value ) {

  		this.z = value;

  	}

  	get height() {

  		return this.w;

  	}

  	set height( value ) {

  		this.w = value;

  	}

  	set( x, y, z, w ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;
  		this.w = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setZ( z ) {

  		this.z = z;

  		return this;

  	}

  	setW( w ) {

  		this.w = w;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			case 3: this.w = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			case 3: return this.w;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y, this.z, this.w );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;
  		this.w = ( v.w !== undefined ) ? v.w : 1;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;
  		this.w += v.w;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;
  		this.w += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;
  		this.w = a.w + b.w;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;
  		this.w += v.w * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;
  		this.w -= v.w;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;
  		this.w -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;
  		this.w = a.w - b.w;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;
  		this.w *= v.w;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;
  		this.w *= scalar;

  		return this;

  	}

  	applyMatrix4( m ) {

  		const x = this.x, y = this.y, z = this.z, w = this.w;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
  		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

  		return this;

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;
  		this.w /= v.w;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	setAxisAngleFromQuaternion( q ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

  		// q is assumed to be normalized

  		this.w = 2 * Math.acos( q.w );

  		const s = Math.sqrt( 1 - q.w * q.w );

  		if ( s < 0.0001 ) {

  			this.x = 1;
  			this.y = 0;
  			this.z = 0;

  		} else {

  			this.x = q.x / s;
  			this.y = q.y / s;
  			this.z = q.z / s;

  		}

  		return this;

  	}

  	setAxisAngleFromRotationMatrix( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		let angle, x, y, z; // variables for result
  		const epsilon = 0.01,		// margin to allow for rounding errors
  			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

  			te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
  		     ( Math.abs( m13 - m31 ) < epsilon ) &&
  		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

  			// singularity found
  			// first check for identity matrix which must have +1 for all terms
  			// in leading diagonal and zero in other terms

  			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
  			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
  			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
  			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

  				// this singularity is identity matrix so angle = 0

  				this.set( 1, 0, 0, 0 );

  				return this; // zero angle, arbitrary axis

  			}

  			// otherwise this singularity is angle = 180

  			angle = Math.PI;

  			const xx = ( m11 + 1 ) / 2;
  			const yy = ( m22 + 1 ) / 2;
  			const zz = ( m33 + 1 ) / 2;
  			const xy = ( m12 + m21 ) / 4;
  			const xz = ( m13 + m31 ) / 4;
  			const yz = ( m23 + m32 ) / 4;

  			if ( ( xx > yy ) && ( xx > zz ) ) {

  				// m11 is the largest diagonal term

  				if ( xx < epsilon ) {

  					x = 0;
  					y = 0.707106781;
  					z = 0.707106781;

  				} else {

  					x = Math.sqrt( xx );
  					y = xy / x;
  					z = xz / x;

  				}

  			} else if ( yy > zz ) {

  				// m22 is the largest diagonal term

  				if ( yy < epsilon ) {

  					x = 0.707106781;
  					y = 0;
  					z = 0.707106781;

  				} else {

  					y = Math.sqrt( yy );
  					x = xy / y;
  					z = yz / y;

  				}

  			} else {

  				// m33 is the largest diagonal term so base result on this

  				if ( zz < epsilon ) {

  					x = 0.707106781;
  					y = 0.707106781;
  					z = 0;

  				} else {

  					z = Math.sqrt( zz );
  					x = xz / z;
  					y = yz / z;

  				}

  			}

  			this.set( x, y, z, angle );

  			return this; // return 180 deg rotation

  		}

  		// as we have reached here there are no singularities so we can handle normally

  		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
  			( m13 - m31 ) * ( m13 - m31 ) +
  			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

  		if ( Math.abs( s ) < 0.001 ) s = 1;

  		// prevent divide by zero, should not happen if matrix is orthogonal and should be
  		// caught by singularity test above, but I've left it in just in case

  		this.x = ( m32 - m23 ) / s;
  		this.y = ( m13 - m31 ) / s;
  		this.z = ( m21 - m12 ) / s;
  		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

  		return this;

  	}

  	setFromMatrixPosition( m ) {

  		const e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];
  		this.w = e[ 15 ];

  		return this;

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );
  		this.w = Math.min( this.w, v.w );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );
  		this.w = Math.max( this.w, v.w );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
  		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
  		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );
  		this.w = Math.floor( this.w );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );
  		this.w = Math.ceil( this.w );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );
  		this.w = Math.round( this.w );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );
  		this.z = Math.trunc( this.z );
  		this.w = Math.trunc( this.w );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;
  		this.w = - this.w;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  	}

  	lengthSq() {

  		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;
  		this.w += ( v.w - this.w ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;
  		this.w = v1.w + ( v2.w - v1.w ) * alpha;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];
  		this.w = array[ offset + 3 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;
  		array[ offset + 3 ] = this.w;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );
  		this.w = attribute.getW( index );

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();
  		this.w = Math.random();

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;
  		yield this.z;
  		yield this.w;

  	}

  }

  /*
   In options, we can specify:
   * Texture parameters for an auto-generated target texture
   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
  */
  class RenderTarget extends EventDispatcher {

  	constructor( width = 1, height = 1, options = {} ) {

  		super();

  		this.isRenderTarget = true;

  		this.width = width;
  		this.height = height;
  		this.depth = 1;

  		this.scissor = new Vector4( 0, 0, width, height );
  		this.scissorTest = false;

  		this.viewport = new Vector4( 0, 0, width, height );

  		const image = { width: width, height: height, depth: 1 };

  		options = Object.assign( {
  			generateMipmaps: false,
  			internalFormat: null,
  			minFilter: LinearFilter,
  			depthBuffer: true,
  			stencilBuffer: false,
  			resolveDepthBuffer: true,
  			resolveStencilBuffer: true,
  			depthTexture: null,
  			samples: 0,
  			count: 1
  		}, options );

  		const texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

  		texture.flipY = false;
  		texture.generateMipmaps = options.generateMipmaps;
  		texture.internalFormat = options.internalFormat;

  		this.textures = [];

  		const count = options.count;
  		for ( let i = 0; i < count; i ++ ) {

  			this.textures[ i ] = texture.clone();
  			this.textures[ i ].isRenderTargetTexture = true;

  		}

  		this.depthBuffer = options.depthBuffer;
  		this.stencilBuffer = options.stencilBuffer;

  		this.resolveDepthBuffer = options.resolveDepthBuffer;
  		this.resolveStencilBuffer = options.resolveStencilBuffer;

  		this.depthTexture = options.depthTexture;

  		this.samples = options.samples;

  	}

  	get texture() {

  		return this.textures[ 0 ];

  	}

  	set texture( value ) {

  		this.textures[ 0 ] = value;

  	}

  	setSize( width, height, depth = 1 ) {

  		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

  			this.width = width;
  			this.height = height;
  			this.depth = depth;

  			for ( let i = 0, il = this.textures.length; i < il; i ++ ) {

  				this.textures[ i ].image.width = width;
  				this.textures[ i ].image.height = height;
  				this.textures[ i ].image.depth = depth;

  			}

  			this.dispose();

  		}

  		this.viewport.set( 0, 0, width, height );
  		this.scissor.set( 0, 0, width, height );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.width = source.width;
  		this.height = source.height;
  		this.depth = source.depth;

  		this.scissor.copy( source.scissor );
  		this.scissorTest = source.scissorTest;

  		this.viewport.copy( source.viewport );

  		this.textures.length = 0;

  		for ( let i = 0, il = source.textures.length; i < il; i ++ ) {

  			this.textures[ i ] = source.textures[ i ].clone();
  			this.textures[ i ].isRenderTargetTexture = true;

  		}

  		// ensure image object is not shared, see #20328

  		const image = Object.assign( {}, source.texture.image );
  		this.texture.source = new Source( image );

  		this.depthBuffer = source.depthBuffer;
  		this.stencilBuffer = source.stencilBuffer;

  		this.resolveDepthBuffer = source.resolveDepthBuffer;
  		this.resolveStencilBuffer = source.resolveStencilBuffer;

  		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

  		this.samples = source.samples;

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  }

  class WebGLRenderTarget extends RenderTarget {

  	constructor( width = 1, height = 1, options = {} ) {

  		super( width, height, options );

  		this.isWebGLRenderTarget = true;

  	}

  }

  class DataArrayTexture extends Texture {

  	constructor( data = null, width = 1, height = 1, depth = 1 ) {

  		super( null );

  		this.isDataArrayTexture = true;

  		this.image = { data, width, height, depth };

  		this.magFilter = NearestFilter;
  		this.minFilter = NearestFilter;

  		this.wrapR = ClampToEdgeWrapping;

  		this.generateMipmaps = false;
  		this.flipY = false;
  		this.unpackAlignment = 1;

  		this.layerUpdates = new Set();

  	}

  	addLayerUpdate( layerIndex ) {

  		this.layerUpdates.add( layerIndex );

  	}

  	clearLayerUpdates() {

  		this.layerUpdates.clear();

  	}

  }

  class Quaternion {

  	constructor( x = 0, y = 0, z = 0, w = 1 ) {

  		this.isQuaternion = true;

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  	}

  	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

  		// fuzz-free, array-based Quaternion SLERP operation

  		let x0 = src0[ srcOffset0 + 0 ],
  			y0 = src0[ srcOffset0 + 1 ],
  			z0 = src0[ srcOffset0 + 2 ],
  			w0 = src0[ srcOffset0 + 3 ];

  		const x1 = src1[ srcOffset1 + 0 ],
  			y1 = src1[ srcOffset1 + 1 ],
  			z1 = src1[ srcOffset1 + 2 ],
  			w1 = src1[ srcOffset1 + 3 ];

  		if ( t === 0 ) {

  			dst[ dstOffset + 0 ] = x0;
  			dst[ dstOffset + 1 ] = y0;
  			dst[ dstOffset + 2 ] = z0;
  			dst[ dstOffset + 3 ] = w0;
  			return;

  		}

  		if ( t === 1 ) {

  			dst[ dstOffset + 0 ] = x1;
  			dst[ dstOffset + 1 ] = y1;
  			dst[ dstOffset + 2 ] = z1;
  			dst[ dstOffset + 3 ] = w1;
  			return;

  		}

  		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

  			let s = 1 - t;
  			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
  				dir = ( cos >= 0 ? 1 : - 1 ),
  				sqrSin = 1 - cos * cos;

  			// Skip the Slerp for tiny steps to avoid numeric problems:
  			if ( sqrSin > Number.EPSILON ) {

  				const sin = Math.sqrt( sqrSin ),
  					len = Math.atan2( sin, cos * dir );

  				s = Math.sin( s * len ) / sin;
  				t = Math.sin( t * len ) / sin;

  			}

  			const tDir = t * dir;

  			x0 = x0 * s + x1 * tDir;
  			y0 = y0 * s + y1 * tDir;
  			z0 = z0 * s + z1 * tDir;
  			w0 = w0 * s + w1 * tDir;

  			// Normalize in case we just did a lerp:
  			if ( s === 1 - t ) {

  				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

  				x0 *= f;
  				y0 *= f;
  				z0 *= f;
  				w0 *= f;

  			}

  		}

  		dst[ dstOffset ] = x0;
  		dst[ dstOffset + 1 ] = y0;
  		dst[ dstOffset + 2 ] = z0;
  		dst[ dstOffset + 3 ] = w0;

  	}

  	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

  		const x0 = src0[ srcOffset0 ];
  		const y0 = src0[ srcOffset0 + 1 ];
  		const z0 = src0[ srcOffset0 + 2 ];
  		const w0 = src0[ srcOffset0 + 3 ];

  		const x1 = src1[ srcOffset1 ];
  		const y1 = src1[ srcOffset1 + 1 ];
  		const z1 = src1[ srcOffset1 + 2 ];
  		const w1 = src1[ srcOffset1 + 3 ];

  		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
  		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
  		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
  		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

  		return dst;

  	}

  	get x() {

  		return this._x;

  	}

  	set x( value ) {

  		this._x = value;
  		this._onChangeCallback();

  	}

  	get y() {

  		return this._y;

  	}

  	set y( value ) {

  		this._y = value;
  		this._onChangeCallback();

  	}

  	get z() {

  		return this._z;

  	}

  	set z( value ) {

  		this._z = value;
  		this._onChangeCallback();

  	}

  	get w() {

  		return this._w;

  	}

  	set w( value ) {

  		this._w = value;
  		this._onChangeCallback();

  	}

  	set( x, y, z, w ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  		this._onChangeCallback();

  		return this;

  	}

  	clone() {

  		return new this.constructor( this._x, this._y, this._z, this._w );

  	}

  	copy( quaternion ) {

  		this._x = quaternion.x;
  		this._y = quaternion.y;
  		this._z = quaternion.z;
  		this._w = quaternion.w;

  		this._onChangeCallback();

  		return this;

  	}

  	setFromEuler( euler, update = true ) {

  		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

  		// http://www.mathworks.com/matlabcentral/fileexchange/
  		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
  		//	content/SpinCalc.m

  		const cos = Math.cos;
  		const sin = Math.sin;

  		const c1 = cos( x / 2 );
  		const c2 = cos( y / 2 );
  		const c3 = cos( z / 2 );

  		const s1 = sin( x / 2 );
  		const s2 = sin( y / 2 );
  		const s3 = sin( z / 2 );

  		switch ( order ) {

  			case 'XYZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'YXZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'ZXY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'ZYX':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'YZX':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'XZY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			default:
  				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

  		}

  		if ( update === true ) this._onChangeCallback();

  		return this;

  	}

  	setFromAxisAngle( axis, angle ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

  		// assumes axis is normalized

  		const halfAngle = angle / 2, s = Math.sin( halfAngle );

  		this._x = axis.x * s;
  		this._y = axis.y * s;
  		this._z = axis.z * s;
  		this._w = Math.cos( halfAngle );

  		this._onChangeCallback();

  		return this;

  	}

  	setFromRotationMatrix( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		const te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

  			trace = m11 + m22 + m33;

  		if ( trace > 0 ) {

  			const s = 0.5 / Math.sqrt( trace + 1.0 );

  			this._w = 0.25 / s;
  			this._x = ( m32 - m23 ) * s;
  			this._y = ( m13 - m31 ) * s;
  			this._z = ( m21 - m12 ) * s;

  		} else if ( m11 > m22 && m11 > m33 ) {

  			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

  			this._w = ( m32 - m23 ) / s;
  			this._x = 0.25 * s;
  			this._y = ( m12 + m21 ) / s;
  			this._z = ( m13 + m31 ) / s;

  		} else if ( m22 > m33 ) {

  			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

  			this._w = ( m13 - m31 ) / s;
  			this._x = ( m12 + m21 ) / s;
  			this._y = 0.25 * s;
  			this._z = ( m23 + m32 ) / s;

  		} else {

  			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

  			this._w = ( m21 - m12 ) / s;
  			this._x = ( m13 + m31 ) / s;
  			this._y = ( m23 + m32 ) / s;
  			this._z = 0.25 * s;

  		}

  		this._onChangeCallback();

  		return this;

  	}

  	setFromUnitVectors( vFrom, vTo ) {

  		// assumes direction vectors vFrom and vTo are normalized

  		let r = vFrom.dot( vTo ) + 1;

  		if ( r < Number.EPSILON ) {

  			// vFrom and vTo point in opposite directions

  			r = 0;

  			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

  				this._x = - vFrom.y;
  				this._y = vFrom.x;
  				this._z = 0;
  				this._w = r;

  			} else {

  				this._x = 0;
  				this._y = - vFrom.z;
  				this._z = vFrom.y;
  				this._w = r;

  			}

  		} else {

  			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

  			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
  			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
  			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
  			this._w = r;

  		}

  		return this.normalize();

  	}

  	angleTo( q ) {

  		return 2 * Math.acos( Math.abs( clamp$1( this.dot( q ), - 1, 1 ) ) );

  	}

  	rotateTowards( q, step ) {

  		const angle = this.angleTo( q );

  		if ( angle === 0 ) return this;

  		const t = Math.min( 1, step / angle );

  		this.slerp( q, t );

  		return this;

  	}

  	identity() {

  		return this.set( 0, 0, 0, 1 );

  	}

  	invert() {

  		// quaternion is assumed to have unit length

  		return this.conjugate();

  	}

  	conjugate() {

  		this._x *= - 1;
  		this._y *= - 1;
  		this._z *= - 1;

  		this._onChangeCallback();

  		return this;

  	}

  	dot( v ) {

  		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

  	}

  	lengthSq() {

  		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  	}

  	length() {

  		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  	}

  	normalize() {

  		let l = this.length();

  		if ( l === 0 ) {

  			this._x = 0;
  			this._y = 0;
  			this._z = 0;
  			this._w = 1;

  		} else {

  			l = 1 / l;

  			this._x = this._x * l;
  			this._y = this._y * l;
  			this._z = this._z * l;
  			this._w = this._w * l;

  		}

  		this._onChangeCallback();

  		return this;

  	}

  	multiply( q ) {

  		return this.multiplyQuaternions( this, q );

  	}

  	premultiply( q ) {

  		return this.multiplyQuaternions( q, this );

  	}

  	multiplyQuaternions( a, b ) {

  		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

  		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
  		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

  		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

  		this._onChangeCallback();

  		return this;

  	}

  	slerp( qb, t ) {

  		if ( t === 0 ) return this;
  		if ( t === 1 ) return this.copy( qb );

  		const x = this._x, y = this._y, z = this._z, w = this._w;

  		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

  		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

  		if ( cosHalfTheta < 0 ) {

  			this._w = - qb._w;
  			this._x = - qb._x;
  			this._y = - qb._y;
  			this._z = - qb._z;

  			cosHalfTheta = - cosHalfTheta;

  		} else {

  			this.copy( qb );

  		}

  		if ( cosHalfTheta >= 1.0 ) {

  			this._w = w;
  			this._x = x;
  			this._y = y;
  			this._z = z;

  			return this;

  		}

  		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

  		if ( sqrSinHalfTheta <= Number.EPSILON ) {

  			const s = 1 - t;
  			this._w = s * w + t * this._w;
  			this._x = s * x + t * this._x;
  			this._y = s * y + t * this._y;
  			this._z = s * z + t * this._z;

  			this.normalize(); // normalize calls _onChangeCallback()

  			return this;

  		}

  		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
  		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
  		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
  			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

  		this._w = ( w * ratioA + this._w * ratioB );
  		this._x = ( x * ratioA + this._x * ratioB );
  		this._y = ( y * ratioA + this._y * ratioB );
  		this._z = ( z * ratioA + this._z * ratioB );

  		this._onChangeCallback();

  		return this;

  	}

  	slerpQuaternions( qa, qb, t ) {

  		return this.copy( qa ).slerp( qb, t );

  	}

  	random() {

  		// sets this quaternion to a uniform random unit quaternnion

  		// Ken Shoemake
  		// Uniform random rotations
  		// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.

  		const theta1 = 2 * Math.PI * Math.random();
  		const theta2 = 2 * Math.PI * Math.random();

  		const x0 = Math.random();
  		const r1 = Math.sqrt( 1 - x0 );
  		const r2 = Math.sqrt( x0 );

  		return this.set(
  			r1 * Math.sin( theta1 ),
  			r1 * Math.cos( theta1 ),
  			r2 * Math.sin( theta2 ),
  			r2 * Math.cos( theta2 ),
  		);

  	}

  	equals( quaternion ) {

  		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  	}

  	fromArray( array, offset = 0 ) {

  		this._x = array[ offset ];
  		this._y = array[ offset + 1 ];
  		this._z = array[ offset + 2 ];
  		this._w = array[ offset + 3 ];

  		this._onChangeCallback();

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._w;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this._x = attribute.getX( index );
  		this._y = attribute.getY( index );
  		this._z = attribute.getZ( index );
  		this._w = attribute.getW( index );

  		this._onChangeCallback();

  		return this;

  	}

  	toJSON() {

  		return this.toArray();

  	}

  	_onChange( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	}

  	_onChangeCallback() {}

  	*[ Symbol.iterator ]() {

  		yield this._x;
  		yield this._y;
  		yield this._z;
  		yield this._w;

  	}

  }

  class Vector3 {

  	constructor( x = 0, y = 0, z = 0 ) {

  		Vector3.prototype.isVector3 = true;

  		this.x = x;
  		this.y = y;
  		this.z = z;

  	}

  	set( x, y, z ) {

  		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

  		this.x = x;
  		this.y = y;
  		this.z = z;

  		return this;

  	}

  	setScalar( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;

  		return this;

  	}

  	setX( x ) {

  		this.x = x;

  		return this;

  	}

  	setY( y ) {

  		this.y = y;

  		return this;

  	}

  	setZ( z ) {

  		this.z = z;

  		return this;

  	}

  	setComponent( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	}

  	getComponent( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	}

  	clone() {

  		return new this.constructor( this.x, this.y, this.z );

  	}

  	copy( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;

  		return this;

  	}

  	add( v ) {

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;

  		return this;

  	}

  	addScalar( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;

  		return this;

  	}

  	addVectors( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;

  		return this;

  	}

  	addScaledVector( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;

  		return this;

  	}

  	sub( v ) {

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;

  		return this;

  	}

  	subScalar( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;

  		return this;

  	}

  	subVectors( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;

  		return this;

  	}

  	multiply( v ) {

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;

  		return this;

  	}

  	multiplyScalar( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;

  		return this;

  	}

  	multiplyVectors( a, b ) {

  		this.x = a.x * b.x;
  		this.y = a.y * b.y;
  		this.z = a.z * b.z;

  		return this;

  	}

  	applyEuler( euler ) {

  		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

  	}

  	applyAxisAngle( axis, angle ) {

  		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

  	}

  	applyMatrix3( m ) {

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
  		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

  		return this;

  	}

  	applyNormalMatrix( m ) {

  		return this.applyMatrix3( m ).normalize();

  	}

  	applyMatrix4( m ) {

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

  		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
  		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
  		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

  		return this;

  	}

  	applyQuaternion( q ) {

  		// quaternion q is assumed to have unit length

  		const vx = this.x, vy = this.y, vz = this.z;
  		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

  		// t = 2 * cross( q.xyz, v );
  		const tx = 2 * ( qy * vz - qz * vy );
  		const ty = 2 * ( qz * vx - qx * vz );
  		const tz = 2 * ( qx * vy - qy * vx );

  		// v + q.w * t + cross( q.xyz, t );
  		this.x = vx + qw * tx + qy * tz - qz * ty;
  		this.y = vy + qw * ty + qz * tx - qx * tz;
  		this.z = vz + qw * tz + qx * ty - qy * tx;

  		return this;

  	}

  	project( camera ) {

  		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

  	}

  	unproject( camera ) {

  		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

  	}

  	transformDirection( m ) {

  		// input: THREE.Matrix4 affine matrix
  		// vector interpreted as a direction

  		const x = this.x, y = this.y, z = this.z;
  		const e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

  		return this.normalize();

  	}

  	divide( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;

  		return this;

  	}

  	divideScalar( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	}

  	min( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );

  		return this;

  	}

  	max( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );

  		return this;

  	}

  	clamp( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

  		return this;

  	}

  	clampScalar( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

  		return this;

  	}

  	clampLength( min, max ) {

  		const length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	}

  	floor() {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );

  		return this;

  	}

  	ceil() {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );

  		return this;

  	}

  	round() {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );

  		return this;

  	}

  	roundToZero() {

  		this.x = Math.trunc( this.x );
  		this.y = Math.trunc( this.y );
  		this.z = Math.trunc( this.z );

  		return this;

  	}

  	negate() {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;

  		return this;

  	}

  	dot( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z;

  	}

  	// TODO lengthSquared?

  	lengthSq() {

  		return this.x * this.x + this.y * this.y + this.z * this.z;

  	}

  	length() {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  	}

  	manhattanLength() {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  	}

  	normalize() {

  		return this.divideScalar( this.length() || 1 );

  	}

  	setLength( length ) {

  		return this.normalize().multiplyScalar( length );

  	}

  	lerp( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;

  		return this;

  	}

  	lerpVectors( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;

  		return this;

  	}

  	cross( v ) {

  		return this.crossVectors( this, v );

  	}

  	crossVectors( a, b ) {

  		const ax = a.x, ay = a.y, az = a.z;
  		const bx = b.x, by = b.y, bz = b.z;

  		this.x = ay * bz - az * by;
  		this.y = az * bx - ax * bz;
  		this.z = ax * by - ay * bx;

  		return this;

  	}

  	projectOnVector( v ) {

  		const denominator = v.lengthSq();

  		if ( denominator === 0 ) return this.set( 0, 0, 0 );

  		const scalar = v.dot( this ) / denominator;

  		return this.copy( v ).multiplyScalar( scalar );

  	}

  	projectOnPlane( planeNormal ) {

  		_vector$c.copy( this ).projectOnVector( planeNormal );

  		return this.sub( _vector$c );

  	}

  	reflect( normal ) {

  		// reflect incident vector off plane orthogonal to normal
  		// normal is assumed to have unit length

  		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

  	}

  	angleTo( v ) {

  		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) return Math.PI / 2;

  		const theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( clamp$1( theta, - 1, 1 ) );

  	}

  	distanceTo( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	}

  	distanceToSquared( v ) {

  		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

  		return dx * dx + dy * dy + dz * dz;

  	}

  	manhattanDistanceTo( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

  	}

  	setFromSpherical( s ) {

  		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

  	}

  	setFromSphericalCoords( radius, phi, theta ) {

  		const sinPhiRadius = Math.sin( phi ) * radius;

  		this.x = sinPhiRadius * Math.sin( theta );
  		this.y = Math.cos( phi ) * radius;
  		this.z = sinPhiRadius * Math.cos( theta );

  		return this;

  	}

  	setFromCylindrical( c ) {

  		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

  	}

  	setFromCylindricalCoords( radius, theta, y ) {

  		this.x = radius * Math.sin( theta );
  		this.y = y;
  		this.z = radius * Math.cos( theta );

  		return this;

  	}

  	setFromMatrixPosition( m ) {

  		const e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];

  		return this;

  	}

  	setFromMatrixScale( m ) {

  		const sx = this.setFromMatrixColumn( m, 0 ).length();
  		const sy = this.setFromMatrixColumn( m, 1 ).length();
  		const sz = this.setFromMatrixColumn( m, 2 ).length();

  		this.x = sx;
  		this.y = sy;
  		this.z = sz;

  		return this;

  	}

  	setFromMatrixColumn( m, index ) {

  		return this.fromArray( m.elements, index * 4 );

  	}

  	setFromMatrix3Column( m, index ) {

  		return this.fromArray( m.elements, index * 3 );

  	}

  	setFromEuler( e ) {

  		this.x = e._x;
  		this.y = e._y;
  		this.z = e._z;

  		return this;

  	}

  	setFromColor( c ) {

  		this.x = c.r;
  		this.y = c.g;
  		this.z = c.b;

  		return this;

  	}

  	equals( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  	}

  	fromArray( array, offset = 0 ) {

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );

  		return this;

  	}

  	random() {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();

  		return this;

  	}

  	randomDirection() {

  		// https://mathworld.wolfram.com/SpherePointPicking.html

  		const theta = Math.random() * Math.PI * 2;
  		const u = Math.random() * 2 - 1;
  		const c = Math.sqrt( 1 - u * u );

  		this.x = c * Math.cos( theta );
  		this.y = u;
  		this.z = c * Math.sin( theta );

  		return this;

  	}

  	*[ Symbol.iterator ]() {

  		yield this.x;
  		yield this.y;
  		yield this.z;

  	}

  }

  const _vector$c = /*@__PURE__*/ new Vector3();
  const _quaternion$4 = /*@__PURE__*/ new Quaternion();

  class Box3 {

  	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

  		this.isBox3 = true;

  		this.min = min;
  		this.max = max;

  	}

  	set( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	}

  	setFromArray( array ) {

  		this.makeEmpty();

  		for ( let i = 0, il = array.length; i < il; i += 3 ) {

  			this.expandByPoint( _vector$b.fromArray( array, i ) );

  		}

  		return this;

  	}

  	setFromBufferAttribute( attribute ) {

  		this.makeEmpty();

  		for ( let i = 0, il = attribute.count; i < il; i ++ ) {

  			this.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );

  		}

  		return this;

  	}

  	setFromPoints( points ) {

  		this.makeEmpty();

  		for ( let i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	}

  	setFromCenterAndSize( center, size ) {

  		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );

  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	}

  	setFromObject( object, precise = false ) {

  		this.makeEmpty();

  		return this.expandByObject( object, precise );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	}

  	makeEmpty() {

  		this.min.x = this.min.y = this.min.z = + Infinity;
  		this.max.x = this.max.y = this.max.z = - Infinity;

  		return this;

  	}

  	isEmpty() {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  	}

  	getCenter( target ) {

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	}

  	getSize( target ) {

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

  	}

  	expandByPoint( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	}

  	expandByVector( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	}

  	expandByScalar( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	}

  	expandByObject( object, precise = false ) {

  		// Computes the world-axis-aligned bounding box of an object (including its children),
  		// accounting for both the object's, and children's, world transforms

  		object.updateWorldMatrix( false, false );

  		const geometry = object.geometry;

  		if ( geometry !== undefined ) {

  			const positionAttribute = geometry.getAttribute( 'position' );

  			// precise AABB computation based on vertex data requires at least a position attribute.
  			// instancing isn't supported so far and uses the normal (conservative) code path.

  			if ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {

  				for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

  					if ( object.isMesh === true ) {

  						object.getVertexPosition( i, _vector$b );

  					} else {

  						_vector$b.fromBufferAttribute( positionAttribute, i );

  					}

  					_vector$b.applyMatrix4( object.matrixWorld );
  					this.expandByPoint( _vector$b );

  				}

  			} else {

  				if ( object.boundingBox !== undefined ) {

  					// object-level bounding box

  					if ( object.boundingBox === null ) {

  						object.computeBoundingBox();

  					}

  					_box$4.copy( object.boundingBox );


  				} else {

  					// geometry-level bounding box

  					if ( geometry.boundingBox === null ) {

  						geometry.computeBoundingBox();

  					}

  					_box$4.copy( geometry.boundingBox );

  				}

  				_box$4.applyMatrix4( object.matrixWorld );

  				this.union( _box$4 );

  			}

  		}

  		const children = object.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			this.expandByObject( children[ i ], precise );

  		}

  		return this;

  	}

  	containsPoint( point ) {

  		return point.x >= this.min.x && point.x <= this.max.x &&
  			point.y >= this.min.y && point.y <= this.max.y &&
  			point.z >= this.min.z && point.z <= this.max.z;

  	}

  	containsBox( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y &&
  			this.min.z <= box.min.z && box.max.z <= this.max.z;

  	}

  	getParameter( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
  			( point.z - this.min.z ) / ( this.max.z - this.min.z )
  		);

  	}

  	intersectsBox( box ) {

  		// using 6 splitting planes to rule out intersections.
  		return box.max.x >= this.min.x && box.min.x <= this.max.x &&
  			box.max.y >= this.min.y && box.min.y <= this.max.y &&
  			box.max.z >= this.min.z && box.min.z <= this.max.z;

  	}

  	intersectsSphere( sphere ) {

  		// Find the point on the AABB closest to the sphere center.
  		this.clampPoint( sphere.center, _vector$b );

  		// If that point is inside the sphere, the AABB and sphere intersect.
  		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

  	}

  	intersectsPlane( plane ) {

  		// We compute the minimum and maximum dot product values. If those values
  		// are on the same side (back or front) of the plane, then there is no intersection.

  		let min, max;

  		if ( plane.normal.x > 0 ) {

  			min = plane.normal.x * this.min.x;
  			max = plane.normal.x * this.max.x;

  		} else {

  			min = plane.normal.x * this.max.x;
  			max = plane.normal.x * this.min.x;

  		}

  		if ( plane.normal.y > 0 ) {

  			min += plane.normal.y * this.min.y;
  			max += plane.normal.y * this.max.y;

  		} else {

  			min += plane.normal.y * this.max.y;
  			max += plane.normal.y * this.min.y;

  		}

  		if ( plane.normal.z > 0 ) {

  			min += plane.normal.z * this.min.z;
  			max += plane.normal.z * this.max.z;

  		} else {

  			min += plane.normal.z * this.max.z;
  			max += plane.normal.z * this.min.z;

  		}

  		return ( min <= - plane.constant && max >= - plane.constant );

  	}

  	intersectsTriangle( triangle ) {

  		if ( this.isEmpty() ) {

  			return false;

  		}

  		// compute box center and extents
  		this.getCenter( _center );
  		_extents.subVectors( this.max, _center );

  		// translate triangle to aabb origin
  		_v0$2.subVectors( triangle.a, _center );
  		_v1$7.subVectors( triangle.b, _center );
  		_v2$4.subVectors( triangle.c, _center );

  		// compute edge vectors for triangle
  		_f0.subVectors( _v1$7, _v0$2 );
  		_f1.subVectors( _v2$4, _v1$7 );
  		_f2.subVectors( _v0$2, _v2$4 );

  		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
  		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
  		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
  		let axes = [
  			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
  			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
  			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
  		];
  		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

  			return false;

  		}

  		// test 3 face normals from the aabb
  		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
  		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

  			return false;

  		}

  		// finally testing the face normal of the triangle
  		// use already existing triangle edge vectors here
  		_triangleNormal.crossVectors( _f0, _f1 );
  		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

  		return satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );

  	}

  	clampPoint( point, target ) {

  		return target.copy( point ).clamp( this.min, this.max );

  	}

  	distanceToPoint( point ) {

  		return this.clampPoint( point, _vector$b ).distanceTo( point );

  	}

  	getBoundingSphere( target ) {

  		if ( this.isEmpty() ) {

  			target.makeEmpty();

  		} else {

  			this.getCenter( target.center );

  			target.radius = this.getSize( _vector$b ).length() * 0.5;

  		}

  		return target;

  	}

  	intersect( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
  		if ( this.isEmpty() ) this.makeEmpty();

  		return this;

  	}

  	union( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	}

  	applyMatrix4( matrix ) {

  		// transform of empty box is an empty box.
  		if ( this.isEmpty() ) return this;

  		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
  		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
  		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
  		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
  		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
  		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
  		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
  		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
  		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

  		this.setFromPoints( _points );

  		return this;

  	}

  	translate( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	}

  	equals( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  }

  const _points = [
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3(),
  	/*@__PURE__*/ new Vector3()
  ];

  const _vector$b = /*@__PURE__*/ new Vector3();

  const _box$4 = /*@__PURE__*/ new Box3();

  // triangle centered vertices

  const _v0$2 = /*@__PURE__*/ new Vector3();
  const _v1$7 = /*@__PURE__*/ new Vector3();
  const _v2$4 = /*@__PURE__*/ new Vector3();

  // triangle edge vectors

  const _f0 = /*@__PURE__*/ new Vector3();
  const _f1 = /*@__PURE__*/ new Vector3();
  const _f2 = /*@__PURE__*/ new Vector3();

  const _center = /*@__PURE__*/ new Vector3();
  const _extents = /*@__PURE__*/ new Vector3();
  const _triangleNormal = /*@__PURE__*/ new Vector3();
  const _testAxis = /*@__PURE__*/ new Vector3();

  function satForAxes( axes, v0, v1, v2, extents ) {

  	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

  		_testAxis.fromArray( axes, i );
  		// project the aabb onto the separating axis
  		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
  		// project all 3 vertices of the triangle onto the separating axis
  		const p0 = v0.dot( _testAxis );
  		const p1 = v1.dot( _testAxis );
  		const p2 = v2.dot( _testAxis );
  		// actual test, basically see if either of the most extreme of the triangle points intersects r
  		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

  			// points of the projected triangle are outside the projected half-length of the aabb
  			// the axis is separating and we can exit
  			return false;

  		}

  	}

  	return true;

  }

  const _box$3 = /*@__PURE__*/ new Box3();
  const _v1$6 = /*@__PURE__*/ new Vector3();
  const _v2$3 = /*@__PURE__*/ new Vector3();

  class Sphere {

  	constructor( center = new Vector3(), radius = - 1 ) {

  		this.isSphere = true;

  		this.center = center;
  		this.radius = radius;

  	}

  	set( center, radius ) {

  		this.center.copy( center );
  		this.radius = radius;

  		return this;

  	}

  	setFromPoints( points, optionalCenter ) {

  		const center = this.center;

  		if ( optionalCenter !== undefined ) {

  			center.copy( optionalCenter );

  		} else {

  			_box$3.setFromPoints( points ).getCenter( center );

  		}

  		let maxRadiusSq = 0;

  		for ( let i = 0, il = points.length; i < il; i ++ ) {

  			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

  		}

  		this.radius = Math.sqrt( maxRadiusSq );

  		return this;

  	}

  	copy( sphere ) {

  		this.center.copy( sphere.center );
  		this.radius = sphere.radius;

  		return this;

  	}

  	isEmpty() {

  		return ( this.radius < 0 );

  	}

  	makeEmpty() {

  		this.center.set( 0, 0, 0 );
  		this.radius = - 1;

  		return this;

  	}

  	containsPoint( point ) {

  		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  	}

  	distanceToPoint( point ) {

  		return ( point.distanceTo( this.center ) - this.radius );

  	}

  	intersectsSphere( sphere ) {

  		const radiusSum = this.radius + sphere.radius;

  		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  	}

  	intersectsBox( box ) {

  		return box.intersectsSphere( this );

  	}

  	intersectsPlane( plane ) {

  		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

  	}

  	clampPoint( point, target ) {

  		const deltaLengthSq = this.center.distanceToSquared( point );

  		target.copy( point );

  		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

  			target.sub( this.center ).normalize();
  			target.multiplyScalar( this.radius ).add( this.center );

  		}

  		return target;

  	}

  	getBoundingBox( target ) {

  		if ( this.isEmpty() ) {

  			// Empty sphere produces empty bounding box
  			target.makeEmpty();
  			return target;

  		}

  		target.set( this.center, this.center );
  		target.expandByScalar( this.radius );

  		return target;

  	}

  	applyMatrix4( matrix ) {

  		this.center.applyMatrix4( matrix );
  		this.radius = this.radius * matrix.getMaxScaleOnAxis();

  		return this;

  	}

  	translate( offset ) {

  		this.center.add( offset );

  		return this;

  	}

  	expandByPoint( point ) {

  		if ( this.isEmpty() ) {

  			this.center.copy( point );

  			this.radius = 0;

  			return this;

  		}

  		_v1$6.subVectors( point, this.center );

  		const lengthSq = _v1$6.lengthSq();

  		if ( lengthSq > ( this.radius * this.radius ) ) {

  			// calculate the minimal sphere

  			const length = Math.sqrt( lengthSq );

  			const delta = ( length - this.radius ) * 0.5;

  			this.center.addScaledVector( _v1$6, delta / length );

  			this.radius += delta;

  		}

  		return this;

  	}

  	union( sphere ) {

  		if ( sphere.isEmpty() ) {

  			return this;

  		}

  		if ( this.isEmpty() ) {

  			this.copy( sphere );

  			return this;

  		}

  		if ( this.center.equals( sphere.center ) === true ) {

  			 this.radius = Math.max( this.radius, sphere.radius );

  		} else {

  			_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );

  			this.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );

  			this.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );

  		}

  		return this;

  	}

  	equals( sphere ) {

  		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  const _vector$a = /*@__PURE__*/ new Vector3();
  const _segCenter = /*@__PURE__*/ new Vector3();
  const _segDir = /*@__PURE__*/ new Vector3();
  const _diff = /*@__PURE__*/ new Vector3();

  const _edge1 = /*@__PURE__*/ new Vector3();
  const _edge2 = /*@__PURE__*/ new Vector3();
  const _normal$2 = /*@__PURE__*/ new Vector3();

  class Ray {

  	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

  		this.origin = origin;
  		this.direction = direction;

  	}

  	set( origin, direction ) {

  		this.origin.copy( origin );
  		this.direction.copy( direction );

  		return this;

  	}

  	copy( ray ) {

  		this.origin.copy( ray.origin );
  		this.direction.copy( ray.direction );

  		return this;

  	}

  	at( t, target ) {

  		return target.copy( this.origin ).addScaledVector( this.direction, t );

  	}

  	lookAt( v ) {

  		this.direction.copy( v ).sub( this.origin ).normalize();

  		return this;

  	}

  	recast( t ) {

  		this.origin.copy( this.at( t, _vector$a ) );

  		return this;

  	}

  	closestPointToPoint( point, target ) {

  		target.subVectors( point, this.origin );

  		const directionDistance = target.dot( this.direction );

  		if ( directionDistance < 0 ) {

  			return target.copy( this.origin );

  		}

  		return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

  	}

  	distanceToPoint( point ) {

  		return Math.sqrt( this.distanceSqToPoint( point ) );

  	}

  	distanceSqToPoint( point ) {

  		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );

  		// point behind the ray

  		if ( directionDistance < 0 ) {

  			return this.origin.distanceToSquared( point );

  		}

  		_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );

  		return _vector$a.distanceToSquared( point );

  	}

  	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

  		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
  		// It returns the min distance between the ray and the segment
  		// defined by v0 and v1
  		// It can also set two optional targets :
  		// - The closest point on the ray
  		// - The closest point on the segment

  		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
  		_segDir.copy( v1 ).sub( v0 ).normalize();
  		_diff.copy( this.origin ).sub( _segCenter );

  		const segExtent = v0.distanceTo( v1 ) * 0.5;
  		const a01 = - this.direction.dot( _segDir );
  		const b0 = _diff.dot( this.direction );
  		const b1 = - _diff.dot( _segDir );
  		const c = _diff.lengthSq();
  		const det = Math.abs( 1 - a01 * a01 );
  		let s0, s1, sqrDist, extDet;

  		if ( det > 0 ) {

  			// The ray and segment are not parallel.

  			s0 = a01 * b1 - b0;
  			s1 = a01 * b0 - b1;
  			extDet = segExtent * det;

  			if ( s0 >= 0 ) {

  				if ( s1 >= - extDet ) {

  					if ( s1 <= extDet ) {

  						// region 0
  						// Minimum at interior points of ray and segment.

  						const invDet = 1 / det;
  						s0 *= invDet;
  						s1 *= invDet;
  						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

  					} else {

  						// region 1

  						s1 = segExtent;
  						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				} else {

  					// region 5

  					s1 = - segExtent;
  					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			} else {

  				if ( s1 <= - extDet ) {

  					// region 4

  					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				} else if ( s1 <= extDet ) {

  					// region 3

  					s0 = 0;
  					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

  				} else {

  					// region 2

  					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			}

  		} else {

  			// Ray and segment are parallel.

  			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
  			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  		}

  		if ( optionalPointOnRay ) {

  			optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

  		}

  		if ( optionalPointOnSegment ) {

  			optionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );

  		}

  		return sqrDist;

  	}

  	intersectSphere( sphere, target ) {

  		_vector$a.subVectors( sphere.center, this.origin );
  		const tca = _vector$a.dot( this.direction );
  		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
  		const radius2 = sphere.radius * sphere.radius;

  		if ( d2 > radius2 ) return null;

  		const thc = Math.sqrt( radius2 - d2 );

  		// t0 = first intersect point - entrance on front of sphere
  		const t0 = tca - thc;

  		// t1 = second intersect point - exit point on back of sphere
  		const t1 = tca + thc;

  		// test to see if t1 is behind the ray - if so, return null
  		if ( t1 < 0 ) return null;

  		// test to see if t0 is behind the ray:
  		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
  		// in order to always return an intersect point that is in front of the ray.
  		if ( t0 < 0 ) return this.at( t1, target );

  		// else t0 is in front of the ray, so return the first collision point scaled by t0
  		return this.at( t0, target );

  	}

  	intersectsSphere( sphere ) {

  		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

  	}

  	distanceToPlane( plane ) {

  		const denominator = plane.normal.dot( this.direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( plane.distanceToPoint( this.origin ) === 0 ) {

  				return 0;

  			}

  			// Null is preferable to undefined since undefined means.... it is undefined

  			return null;

  		}

  		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

  		// Return if the ray never intersects the plane

  		return t >= 0 ? t : null;

  	}

  	intersectPlane( plane, target ) {

  		const t = this.distanceToPlane( plane );

  		if ( t === null ) {

  			return null;

  		}

  		return this.at( t, target );

  	}

  	intersectsPlane( plane ) {

  		// check if the ray lies on the plane first

  		const distToPoint = plane.distanceToPoint( this.origin );

  		if ( distToPoint === 0 ) {

  			return true;

  		}

  		const denominator = plane.normal.dot( this.direction );

  		if ( denominator * distToPoint < 0 ) {

  			return true;

  		}

  		// ray origin is behind the plane (and is pointing behind it)

  		return false;

  	}

  	intersectBox( box, target ) {

  		let tmin, tmax, tymin, tymax, tzmin, tzmax;

  		const invdirx = 1 / this.direction.x,
  			invdiry = 1 / this.direction.y,
  			invdirz = 1 / this.direction.z;

  		const origin = this.origin;

  		if ( invdirx >= 0 ) {

  			tmin = ( box.min.x - origin.x ) * invdirx;
  			tmax = ( box.max.x - origin.x ) * invdirx;

  		} else {

  			tmin = ( box.max.x - origin.x ) * invdirx;
  			tmax = ( box.min.x - origin.x ) * invdirx;

  		}

  		if ( invdiry >= 0 ) {

  			tymin = ( box.min.y - origin.y ) * invdiry;
  			tymax = ( box.max.y - origin.y ) * invdiry;

  		} else {

  			tymin = ( box.max.y - origin.y ) * invdiry;
  			tymax = ( box.min.y - origin.y ) * invdiry;

  		}

  		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

  		if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

  		if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

  		if ( invdirz >= 0 ) {

  			tzmin = ( box.min.z - origin.z ) * invdirz;
  			tzmax = ( box.max.z - origin.z ) * invdirz;

  		} else {

  			tzmin = ( box.max.z - origin.z ) * invdirz;
  			tzmax = ( box.min.z - origin.z ) * invdirz;

  		}

  		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

  		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

  		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

  		//return point closest to the ray (positive side)

  		if ( tmax < 0 ) return null;

  		return this.at( tmin >= 0 ? tmin : tmax, target );

  	}

  	intersectsBox( box ) {

  		return this.intersectBox( box, _vector$a ) !== null;

  	}

  	intersectTriangle( a, b, c, backfaceCulling, target ) {

  		// Compute the offset origin, edges, and normal.

  		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

  		_edge1.subVectors( b, a );
  		_edge2.subVectors( c, a );
  		_normal$2.crossVectors( _edge1, _edge2 );

  		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
  		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
  		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
  		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
  		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
  		let DdN = this.direction.dot( _normal$2 );
  		let sign;

  		if ( DdN > 0 ) {

  			if ( backfaceCulling ) return null;
  			sign = 1;

  		} else if ( DdN < 0 ) {

  			sign = - 1;
  			DdN = - DdN;

  		} else {

  			return null;

  		}

  		_diff.subVectors( this.origin, a );
  		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

  		// b1 < 0, no intersection
  		if ( DdQxE2 < 0 ) {

  			return null;

  		}

  		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

  		// b2 < 0, no intersection
  		if ( DdE1xQ < 0 ) {

  			return null;

  		}

  		// b1+b2 > 1, no intersection
  		if ( DdQxE2 + DdE1xQ > DdN ) {

  			return null;

  		}

  		// Line intersects triangle, check if ray does.
  		const QdN = - sign * _diff.dot( _normal$2 );

  		// t < 0, no intersection
  		if ( QdN < 0 ) {

  			return null;

  		}

  		// Ray intersects triangle.
  		return this.at( QdN / DdN, target );

  	}

  	applyMatrix4( matrix4 ) {

  		this.origin.applyMatrix4( matrix4 );
  		this.direction.transformDirection( matrix4 );

  		return this;

  	}

  	equals( ray ) {

  		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  class Matrix4 {

  	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		Matrix4.prototype.isMatrix4 = true;

  		this.elements = [

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		];

  		if ( n11 !== undefined ) {

  			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

  		}

  	}

  	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		const te = this.elements;

  		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
  		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
  		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
  		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

  		return this;

  	}

  	identity() {

  		this.set(

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	clone() {

  		return new Matrix4().fromArray( this.elements );

  	}

  	copy( m ) {

  		const te = this.elements;
  		const me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
  		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
  		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
  		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

  		return this;

  	}

  	copyPosition( m ) {

  		const te = this.elements, me = m.elements;

  		te[ 12 ] = me[ 12 ];
  		te[ 13 ] = me[ 13 ];
  		te[ 14 ] = me[ 14 ];

  		return this;

  	}

  	setFromMatrix3( m ) {

  		const me = m.elements;

  		this.set(

  			me[ 0 ], me[ 3 ], me[ 6 ], 0,
  			me[ 1 ], me[ 4 ], me[ 7 ], 0,
  			me[ 2 ], me[ 5 ], me[ 8 ], 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	extractBasis( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrixColumn( this, 0 );
  		yAxis.setFromMatrixColumn( this, 1 );
  		zAxis.setFromMatrixColumn( this, 2 );

  		return this;

  	}

  	makeBasis( xAxis, yAxis, zAxis ) {

  		this.set(
  			xAxis.x, yAxis.x, zAxis.x, 0,
  			xAxis.y, yAxis.y, zAxis.y, 0,
  			xAxis.z, yAxis.z, zAxis.z, 0,
  			0, 0, 0, 1
  		);

  		return this;

  	}

  	extractRotation( m ) {

  		// this method does not support reflection matrices

  		const te = this.elements;
  		const me = m.elements;

  		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
  		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
  		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

  		te[ 0 ] = me[ 0 ] * scaleX;
  		te[ 1 ] = me[ 1 ] * scaleX;
  		te[ 2 ] = me[ 2 ] * scaleX;
  		te[ 3 ] = 0;

  		te[ 4 ] = me[ 4 ] * scaleY;
  		te[ 5 ] = me[ 5 ] * scaleY;
  		te[ 6 ] = me[ 6 ] * scaleY;
  		te[ 7 ] = 0;

  		te[ 8 ] = me[ 8 ] * scaleZ;
  		te[ 9 ] = me[ 9 ] * scaleZ;
  		te[ 10 ] = me[ 10 ] * scaleZ;
  		te[ 11 ] = 0;

  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	}

  	makeRotationFromEuler( euler ) {

  		const te = this.elements;

  		const x = euler.x, y = euler.y, z = euler.z;
  		const a = Math.cos( x ), b = Math.sin( x );
  		const c = Math.cos( y ), d = Math.sin( y );
  		const e = Math.cos( z ), f = Math.sin( z );

  		if ( euler.order === 'XYZ' ) {

  			const ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - c * f;
  			te[ 8 ] = d;

  			te[ 1 ] = af + be * d;
  			te[ 5 ] = ae - bf * d;
  			te[ 9 ] = - b * c;

  			te[ 2 ] = bf - ae * d;
  			te[ 6 ] = be + af * d;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YXZ' ) {

  			const ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce + df * b;
  			te[ 4 ] = de * b - cf;
  			te[ 8 ] = a * d;

  			te[ 1 ] = a * f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b;

  			te[ 2 ] = cf * b - de;
  			te[ 6 ] = df + ce * b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZXY' ) {

  			const ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce - df * b;
  			te[ 4 ] = - a * f;
  			te[ 8 ] = de + cf * b;

  			te[ 1 ] = cf + de * b;
  			te[ 5 ] = a * e;
  			te[ 9 ] = df - ce * b;

  			te[ 2 ] = - a * d;
  			te[ 6 ] = b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZYX' ) {

  			const ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = be * d - af;
  			te[ 8 ] = ae * d + bf;

  			te[ 1 ] = c * f;
  			te[ 5 ] = bf * d + ae;
  			te[ 9 ] = af * d - be;

  			te[ 2 ] = - d;
  			te[ 6 ] = b * c;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YZX' ) {

  			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = bd - ac * f;
  			te[ 8 ] = bc * f + ad;

  			te[ 1 ] = f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b * e;

  			te[ 2 ] = - d * e;
  			te[ 6 ] = ad * f + bc;
  			te[ 10 ] = ac - bd * f;

  		} else if ( euler.order === 'XZY' ) {

  			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - f;
  			te[ 8 ] = d * e;

  			te[ 1 ] = ac * f + bd;
  			te[ 5 ] = a * e;
  			te[ 9 ] = ad * f - bc;

  			te[ 2 ] = bc * f - ad;
  			te[ 6 ] = b * e;
  			te[ 10 ] = bd * f + ac;

  		}

  		// bottom row
  		te[ 3 ] = 0;
  		te[ 7 ] = 0;
  		te[ 11 ] = 0;

  		// last column
  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	}

  	makeRotationFromQuaternion( q ) {

  		return this.compose( _zero, q, _one );

  	}

  	lookAt( eye, target, up ) {

  		const te = this.elements;

  		_z.subVectors( eye, target );

  		if ( _z.lengthSq() === 0 ) {

  			// eye and target are in the same position

  			_z.z = 1;

  		}

  		_z.normalize();
  		_x.crossVectors( up, _z );

  		if ( _x.lengthSq() === 0 ) {

  			// up and z are parallel

  			if ( Math.abs( up.z ) === 1 ) {

  				_z.x += 0.0001;

  			} else {

  				_z.z += 0.0001;

  			}

  			_z.normalize();
  			_x.crossVectors( up, _z );

  		}

  		_x.normalize();
  		_y.crossVectors( _z, _x );

  		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
  		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
  		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

  		return this;

  	}

  	multiply( m ) {

  		return this.multiplyMatrices( this, m );

  	}

  	premultiply( m ) {

  		return this.multiplyMatrices( m, this );

  	}

  	multiplyMatrices( a, b ) {

  		const ae = a.elements;
  		const be = b.elements;
  		const te = this.elements;

  		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
  		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
  		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
  		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

  		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
  		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
  		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
  		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

  		return this;

  	}

  	multiplyScalar( s ) {

  		const te = this.elements;

  		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
  		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
  		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
  		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

  		return this;

  	}

  	determinant() {

  		const te = this.elements;

  		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
  		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
  		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
  		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

  		//TODO: make this more efficient
  		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

  		return (
  			n41 * (
  				+ n14 * n23 * n32
  				 - n13 * n24 * n32
  				 - n14 * n22 * n33
  				 + n12 * n24 * n33
  				 + n13 * n22 * n34
  				 - n12 * n23 * n34
  			) +
  			n42 * (
  				+ n11 * n23 * n34
  				 - n11 * n24 * n33
  				 + n14 * n21 * n33
  				 - n13 * n21 * n34
  				 + n13 * n24 * n31
  				 - n14 * n23 * n31
  			) +
  			n43 * (
  				+ n11 * n24 * n32
  				 - n11 * n22 * n34
  				 - n14 * n21 * n32
  				 + n12 * n21 * n34
  				 + n14 * n22 * n31
  				 - n12 * n24 * n31
  			) +
  			n44 * (
  				- n13 * n22 * n31
  				 - n11 * n23 * n32
  				 + n11 * n22 * n33
  				 + n13 * n21 * n32
  				 - n12 * n21 * n33
  				 + n12 * n23 * n31
  			)

  		);

  	}

  	transpose() {

  		const te = this.elements;
  		let tmp;

  		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
  		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
  		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

  		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
  		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
  		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

  		return this;

  	}

  	setPosition( x, y, z ) {

  		const te = this.elements;

  		if ( x.isVector3 ) {

  			te[ 12 ] = x.x;
  			te[ 13 ] = x.y;
  			te[ 14 ] = x.z;

  		} else {

  			te[ 12 ] = x;
  			te[ 13 ] = y;
  			te[ 14 ] = z;

  		}

  		return this;

  	}

  	invert() {

  		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
  		const te = this.elements,

  			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
  			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
  			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
  			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

  			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
  			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
  			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
  			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

  		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		const detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
  		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
  		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

  		te[ 4 ] = t12 * detInv;
  		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
  		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
  		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

  		te[ 8 ] = t13 * detInv;
  		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
  		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
  		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

  		te[ 12 ] = t14 * detInv;
  		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
  		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
  		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

  		return this;

  	}

  	scale( v ) {

  		const te = this.elements;
  		const x = v.x, y = v.y, z = v.z;

  		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
  		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
  		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
  		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

  		return this;

  	}

  	getMaxScaleOnAxis() {

  		const te = this.elements;

  		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
  		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
  		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

  		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

  	}

  	makeTranslation( x, y, z ) {

  		if ( x.isVector3 ) {

  			this.set(

  				1, 0, 0, x.x,
  				0, 1, 0, x.y,
  				0, 0, 1, x.z,
  				0, 0, 0, 1

  			);

  		} else {

  			this.set(

  				1, 0, 0, x,
  				0, 1, 0, y,
  				0, 0, 1, z,
  				0, 0, 0, 1

  			);

  		}

  		return this;

  	}

  	makeRotationX( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			1, 0, 0, 0,
  			0, c, - s, 0,
  			0, s, c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationY( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			 c, 0, s, 0,
  			 0, 1, 0, 0,
  			- s, 0, c, 0,
  			 0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationZ( theta ) {

  		const c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			c, - s, 0, 0,
  			s, c, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeRotationAxis( axis, angle ) {

  		// Based on http://www.gamedev.net/reference/articles/article1199.asp

  		const c = Math.cos( angle );
  		const s = Math.sin( angle );
  		const t = 1 - c;
  		const x = axis.x, y = axis.y, z = axis.z;
  		const tx = t * x, ty = t * y;

  		this.set(

  			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
  			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
  			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeScale( x, y, z ) {

  		this.set(

  			x, 0, 0, 0,
  			0, y, 0, 0,
  			0, 0, z, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	makeShear( xy, xz, yx, yz, zx, zy ) {

  		this.set(

  			1, yx, zx, 0,
  			xy, 1, zy, 0,
  			xz, yz, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	}

  	compose( position, quaternion, scale ) {

  		const te = this.elements;

  		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
  		const x2 = x + x,	y2 = y + y, z2 = z + z;
  		const xx = x * x2, xy = x * y2, xz = x * z2;
  		const yy = y * y2, yz = y * z2, zz = z * z2;
  		const wx = w * x2, wy = w * y2, wz = w * z2;

  		const sx = scale.x, sy = scale.y, sz = scale.z;

  		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
  		te[ 1 ] = ( xy + wz ) * sx;
  		te[ 2 ] = ( xz - wy ) * sx;
  		te[ 3 ] = 0;

  		te[ 4 ] = ( xy - wz ) * sy;
  		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
  		te[ 6 ] = ( yz + wx ) * sy;
  		te[ 7 ] = 0;

  		te[ 8 ] = ( xz + wy ) * sz;
  		te[ 9 ] = ( yz - wx ) * sz;
  		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
  		te[ 11 ] = 0;

  		te[ 12 ] = position.x;
  		te[ 13 ] = position.y;
  		te[ 14 ] = position.z;
  		te[ 15 ] = 1;

  		return this;

  	}

  	decompose( position, quaternion, scale ) {

  		const te = this.elements;

  		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
  		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
  		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

  		// if determine is negative, we need to invert one scale
  		const det = this.determinant();
  		if ( det < 0 ) sx = - sx;

  		position.x = te[ 12 ];
  		position.y = te[ 13 ];
  		position.z = te[ 14 ];

  		// scale the rotation part
  		_m1$3.copy( this );

  		const invSX = 1 / sx;
  		const invSY = 1 / sy;
  		const invSZ = 1 / sz;

  		_m1$3.elements[ 0 ] *= invSX;
  		_m1$3.elements[ 1 ] *= invSX;
  		_m1$3.elements[ 2 ] *= invSX;

  		_m1$3.elements[ 4 ] *= invSY;
  		_m1$3.elements[ 5 ] *= invSY;
  		_m1$3.elements[ 6 ] *= invSY;

  		_m1$3.elements[ 8 ] *= invSZ;
  		_m1$3.elements[ 9 ] *= invSZ;
  		_m1$3.elements[ 10 ] *= invSZ;

  		quaternion.setFromRotationMatrix( _m1$3 );

  		scale.x = sx;
  		scale.y = sy;
  		scale.z = sz;

  		return this;

  	}

  	makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

  		const te = this.elements;
  		const x = 2 * near / ( right - left );
  		const y = 2 * near / ( top - bottom );

  		const a = ( right + left ) / ( right - left );
  		const b = ( top + bottom ) / ( top - bottom );

  		let c, d;

  		if ( coordinateSystem === WebGLCoordinateSystem ) {

  			c = - ( far + near ) / ( far - near );
  			d = ( - 2 * far * near ) / ( far - near );

  		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

  			c = - far / ( far - near );
  			d = ( - far * near ) / ( far - near );

  		} else {

  			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
  		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

  		return this;

  	}

  	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

  		const te = this.elements;
  		const w = 1.0 / ( right - left );
  		const h = 1.0 / ( top - bottom );
  		const p = 1.0 / ( far - near );

  		const x = ( right + left ) * w;
  		const y = ( top + bottom ) * h;

  		let z, zInv;

  		if ( coordinateSystem === WebGLCoordinateSystem ) {

  			z = ( far + near ) * p;
  			zInv = - 2 * p;

  		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

  			z = near * p;
  			zInv = - 1 * p;

  		} else {

  			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
  		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
  		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
  		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

  		return this;

  	}

  	equals( matrix ) {

  		const te = this.elements;
  		const me = matrix.elements;

  		for ( let i = 0; i < 16; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	}

  	fromArray( array, offset = 0 ) {

  		for ( let i = 0; i < 16; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		const te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];
  		array[ offset + 3 ] = te[ 3 ];

  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];
  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];

  		array[ offset + 8 ] = te[ 8 ];
  		array[ offset + 9 ] = te[ 9 ];
  		array[ offset + 10 ] = te[ 10 ];
  		array[ offset + 11 ] = te[ 11 ];

  		array[ offset + 12 ] = te[ 12 ];
  		array[ offset + 13 ] = te[ 13 ];
  		array[ offset + 14 ] = te[ 14 ];
  		array[ offset + 15 ] = te[ 15 ];

  		return array;

  	}

  }

  const _v1$5 = /*@__PURE__*/ new Vector3();
  const _m1$3 = /*@__PURE__*/ new Matrix4();
  const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
  const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
  const _x = /*@__PURE__*/ new Vector3();
  const _y = /*@__PURE__*/ new Vector3();
  const _z = /*@__PURE__*/ new Vector3();

  const _matrix$2 = /*@__PURE__*/ new Matrix4();
  const _quaternion$3 = /*@__PURE__*/ new Quaternion();

  class Euler {

  	constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

  		this.isEuler = true;

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order;

  	}

  	get x() {

  		return this._x;

  	}

  	set x( value ) {

  		this._x = value;
  		this._onChangeCallback();

  	}

  	get y() {

  		return this._y;

  	}

  	set y( value ) {

  		this._y = value;
  		this._onChangeCallback();

  	}

  	get z() {

  		return this._z;

  	}

  	set z( value ) {

  		this._z = value;
  		this._onChangeCallback();

  	}

  	get order() {

  		return this._order;

  	}

  	set order( value ) {

  		this._order = value;
  		this._onChangeCallback();

  	}

  	set( x, y, z, order = this._order ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order;

  		this._onChangeCallback();

  		return this;

  	}

  	clone() {

  		return new this.constructor( this._x, this._y, this._z, this._order );

  	}

  	copy( euler ) {

  		this._x = euler._x;
  		this._y = euler._y;
  		this._z = euler._z;
  		this._order = euler._order;

  		this._onChangeCallback();

  		return this;

  	}

  	setFromRotationMatrix( m, order = this._order, update = true ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		const te = m.elements;
  		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
  		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
  		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		switch ( order ) {

  			case 'XYZ':

  				this._y = Math.asin( clamp$1( m13, - 1, 1 ) );

  				if ( Math.abs( m13 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m33 );
  					this._z = Math.atan2( - m12, m11 );

  				} else {

  					this._x = Math.atan2( m32, m22 );
  					this._z = 0;

  				}

  				break;

  			case 'YXZ':

  				this._x = Math.asin( - clamp$1( m23, - 1, 1 ) );

  				if ( Math.abs( m23 ) < 0.9999999 ) {

  					this._y = Math.atan2( m13, m33 );
  					this._z = Math.atan2( m21, m22 );

  				} else {

  					this._y = Math.atan2( - m31, m11 );
  					this._z = 0;

  				}

  				break;

  			case 'ZXY':

  				this._x = Math.asin( clamp$1( m32, - 1, 1 ) );

  				if ( Math.abs( m32 ) < 0.9999999 ) {

  					this._y = Math.atan2( - m31, m33 );
  					this._z = Math.atan2( - m12, m22 );

  				} else {

  					this._y = 0;
  					this._z = Math.atan2( m21, m11 );

  				}

  				break;

  			case 'ZYX':

  				this._y = Math.asin( - clamp$1( m31, - 1, 1 ) );

  				if ( Math.abs( m31 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m33 );
  					this._z = Math.atan2( m21, m11 );

  				} else {

  					this._x = 0;
  					this._z = Math.atan2( - m12, m22 );

  				}

  				break;

  			case 'YZX':

  				this._z = Math.asin( clamp$1( m21, - 1, 1 ) );

  				if ( Math.abs( m21 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m22 );
  					this._y = Math.atan2( - m31, m11 );

  				} else {

  					this._x = 0;
  					this._y = Math.atan2( m13, m33 );

  				}

  				break;

  			case 'XZY':

  				this._z = Math.asin( - clamp$1( m12, - 1, 1 ) );

  				if ( Math.abs( m12 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m22 );
  					this._y = Math.atan2( m13, m11 );

  				} else {

  					this._x = Math.atan2( - m23, m33 );
  					this._y = 0;

  				}

  				break;

  			default:

  				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

  		}

  		this._order = order;

  		if ( update === true ) this._onChangeCallback();

  		return this;

  	}

  	setFromQuaternion( q, order, update ) {

  		_matrix$2.makeRotationFromQuaternion( q );

  		return this.setFromRotationMatrix( _matrix$2, order, update );

  	}

  	setFromVector3( v, order = this._order ) {

  		return this.set( v.x, v.y, v.z, order );

  	}

  	reorder( newOrder ) {

  		// WARNING: this discards revolution information -bhouston

  		_quaternion$3.setFromEuler( this );

  		return this.setFromQuaternion( _quaternion$3, newOrder );

  	}

  	equals( euler ) {

  		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  	}

  	fromArray( array ) {

  		this._x = array[ 0 ];
  		this._y = array[ 1 ];
  		this._z = array[ 2 ];
  		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

  		this._onChangeCallback();

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._order;

  		return array;

  	}

  	_onChange( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	}

  	_onChangeCallback() {}

  	*[ Symbol.iterator ]() {

  		yield this._x;
  		yield this._y;
  		yield this._z;
  		yield this._order;

  	}

  }

  Euler.DEFAULT_ORDER = 'XYZ';

  class Layers {

  	constructor() {

  		this.mask = 1 | 0;

  	}

  	set( channel ) {

  		this.mask = ( 1 << channel | 0 ) >>> 0;

  	}

  	enable( channel ) {

  		this.mask |= 1 << channel | 0;

  	}

  	enableAll() {

  		this.mask = 0xffffffff | 0;

  	}

  	toggle( channel ) {

  		this.mask ^= 1 << channel | 0;

  	}

  	disable( channel ) {

  		this.mask &= ~ ( 1 << channel | 0 );

  	}

  	disableAll() {

  		this.mask = 0;

  	}

  	test( layers ) {

  		return ( this.mask & layers.mask ) !== 0;

  	}

  	isEnabled( channel ) {

  		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

  	}

  }

  let _object3DId = 0;

  const _v1$4 = /*@__PURE__*/ new Vector3();
  const _q1 = /*@__PURE__*/ new Quaternion();
  const _m1$2 = /*@__PURE__*/ new Matrix4();
  const _target$1 = /*@__PURE__*/ new Vector3();

  const _position$3 = /*@__PURE__*/ new Vector3();
  const _scale$2 = /*@__PURE__*/ new Vector3();
  const _quaternion$2 = /*@__PURE__*/ new Quaternion();

  const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
  const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
  const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

  const _addedEvent = { type: 'added' };
  const _removedEvent = { type: 'removed' };

  const _childaddedEvent = { type: 'childadded', child: null };
  const _childremovedEvent = { type: 'childremoved', child: null };

  class Object3D extends EventDispatcher {

  	constructor() {

  		super();

  		this.isObject3D = true;

  		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

  		this.uuid = generateUUID();

  		this.name = '';
  		this.type = 'Object3D';

  		this.parent = null;
  		this.children = [];

  		this.up = Object3D.DEFAULT_UP.clone();

  		const position = new Vector3();
  		const rotation = new Euler();
  		const quaternion = new Quaternion();
  		const scale = new Vector3( 1, 1, 1 );

  		function onRotationChange() {

  			quaternion.setFromEuler( rotation, false );

  		}

  		function onQuaternionChange() {

  			rotation.setFromQuaternion( quaternion, undefined, false );

  		}

  		rotation._onChange( onRotationChange );
  		quaternion._onChange( onQuaternionChange );

  		Object.defineProperties( this, {
  			position: {
  				configurable: true,
  				enumerable: true,
  				value: position
  			},
  			rotation: {
  				configurable: true,
  				enumerable: true,
  				value: rotation
  			},
  			quaternion: {
  				configurable: true,
  				enumerable: true,
  				value: quaternion
  			},
  			scale: {
  				configurable: true,
  				enumerable: true,
  				value: scale
  			},
  			modelViewMatrix: {
  				value: new Matrix4()
  			},
  			normalMatrix: {
  				value: new Matrix3()
  			}
  		} );

  		this.matrix = new Matrix4();
  		this.matrixWorld = new Matrix4();

  		this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;

  		this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer
  		this.matrixWorldNeedsUpdate = false;

  		this.layers = new Layers();
  		this.visible = true;

  		this.castShadow = false;
  		this.receiveShadow = false;

  		this.frustumCulled = true;
  		this.renderOrder = 0;

  		this.animations = [];

  		this.userData = {};

  	}

  	onBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

  	onAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

  	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

  	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

  	applyMatrix4( matrix ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		this.matrix.premultiply( matrix );

  		this.matrix.decompose( this.position, this.quaternion, this.scale );

  	}

  	applyQuaternion( q ) {

  		this.quaternion.premultiply( q );

  		return this;

  	}

  	setRotationFromAxisAngle( axis, angle ) {

  		// assumes axis is normalized

  		this.quaternion.setFromAxisAngle( axis, angle );

  	}

  	setRotationFromEuler( euler ) {

  		this.quaternion.setFromEuler( euler, true );

  	}

  	setRotationFromMatrix( m ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		this.quaternion.setFromRotationMatrix( m );

  	}

  	setRotationFromQuaternion( q ) {

  		// assumes q is normalized

  		this.quaternion.copy( q );

  	}

  	rotateOnAxis( axis, angle ) {

  		// rotate object on axis in object space
  		// axis is assumed to be normalized

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.multiply( _q1 );

  		return this;

  	}

  	rotateOnWorldAxis( axis, angle ) {

  		// rotate object on axis in world space
  		// axis is assumed to be normalized
  		// method assumes no rotated parent

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.premultiply( _q1 );

  		return this;

  	}

  	rotateX( angle ) {

  		return this.rotateOnAxis( _xAxis, angle );

  	}

  	rotateY( angle ) {

  		return this.rotateOnAxis( _yAxis, angle );

  	}

  	rotateZ( angle ) {

  		return this.rotateOnAxis( _zAxis, angle );

  	}

  	translateOnAxis( axis, distance ) {

  		// translate object by distance along axis in object space
  		// axis is assumed to be normalized

  		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

  		this.position.add( _v1$4.multiplyScalar( distance ) );

  		return this;

  	}

  	translateX( distance ) {

  		return this.translateOnAxis( _xAxis, distance );

  	}

  	translateY( distance ) {

  		return this.translateOnAxis( _yAxis, distance );

  	}

  	translateZ( distance ) {

  		return this.translateOnAxis( _zAxis, distance );

  	}

  	localToWorld( vector ) {

  		this.updateWorldMatrix( true, false );

  		return vector.applyMatrix4( this.matrixWorld );

  	}

  	worldToLocal( vector ) {

  		this.updateWorldMatrix( true, false );

  		return vector.applyMatrix4( _m1$2.copy( this.matrixWorld ).invert() );

  	}

  	lookAt( x, y, z ) {

  		// This method does not support objects having non-uniformly-scaled parent(s)

  		if ( x.isVector3 ) {

  			_target$1.copy( x );

  		} else {

  			_target$1.set( x, y, z );

  		}

  		const parent = this.parent;

  		this.updateWorldMatrix( true, false );

  		_position$3.setFromMatrixPosition( this.matrixWorld );

  		if ( this.isCamera || this.isLight ) {

  			_m1$2.lookAt( _position$3, _target$1, this.up );

  		} else {

  			_m1$2.lookAt( _target$1, _position$3, this.up );

  		}

  		this.quaternion.setFromRotationMatrix( _m1$2 );

  		if ( parent ) {

  			_m1$2.extractRotation( parent.matrixWorld );
  			_q1.setFromRotationMatrix( _m1$2 );
  			this.quaternion.premultiply( _q1.invert() );

  		}

  	}

  	add( object ) {

  		if ( arguments.length > 1 ) {

  			for ( let i = 0; i < arguments.length; i ++ ) {

  				this.add( arguments[ i ] );

  			}

  			return this;

  		}

  		if ( object === this ) {

  			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
  			return this;

  		}

  		if ( object && object.isObject3D ) {

  			object.removeFromParent();
  			object.parent = this;
  			this.children.push( object );

  			object.dispatchEvent( _addedEvent );

  			_childaddedEvent.child = object;
  			this.dispatchEvent( _childaddedEvent );
  			_childaddedEvent.child = null;

  		} else {

  			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

  		}

  		return this;

  	}

  	remove( object ) {

  		if ( arguments.length > 1 ) {

  			for ( let i = 0; i < arguments.length; i ++ ) {

  				this.remove( arguments[ i ] );

  			}

  			return this;

  		}

  		const index = this.children.indexOf( object );

  		if ( index !== - 1 ) {

  			object.parent = null;
  			this.children.splice( index, 1 );

  			object.dispatchEvent( _removedEvent );

  			_childremovedEvent.child = object;
  			this.dispatchEvent( _childremovedEvent );
  			_childremovedEvent.child = null;

  		}

  		return this;

  	}

  	removeFromParent() {

  		const parent = this.parent;

  		if ( parent !== null ) {

  			parent.remove( this );

  		}

  		return this;

  	}

  	clear() {

  		return this.remove( ... this.children );

  	}

  	attach( object ) {

  		// adds object as a child of this, while maintaining the object's world transform

  		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

  		this.updateWorldMatrix( true, false );

  		_m1$2.copy( this.matrixWorld ).invert();

  		if ( object.parent !== null ) {

  			object.parent.updateWorldMatrix( true, false );

  			_m1$2.multiply( object.parent.matrixWorld );

  		}

  		object.applyMatrix4( _m1$2 );

  		object.removeFromParent();
  		object.parent = this;
  		this.children.push( object );

  		object.updateWorldMatrix( false, true );

  		object.dispatchEvent( _addedEvent );

  		_childaddedEvent.child = object;
  		this.dispatchEvent( _childaddedEvent );
  		_childaddedEvent.child = null;

  		return this;

  	}

  	getObjectById( id ) {

  		return this.getObjectByProperty( 'id', id );

  	}

  	getObjectByName( name ) {

  		return this.getObjectByProperty( 'name', name );

  	}

  	getObjectByProperty( name, value ) {

  		if ( this[ name ] === value ) return this;

  		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

  			const child = this.children[ i ];
  			const object = child.getObjectByProperty( name, value );

  			if ( object !== undefined ) {

  				return object;

  			}

  		}

  		return undefined;

  	}

  	getObjectsByProperty( name, value, result = [] ) {

  		if ( this[ name ] === value ) result.push( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].getObjectsByProperty( name, value, result );

  		}

  		return result;

  	}

  	getWorldPosition( target ) {

  		this.updateWorldMatrix( true, false );

  		return target.setFromMatrixPosition( this.matrixWorld );

  	}

  	getWorldQuaternion( target ) {

  		this.updateWorldMatrix( true, false );

  		this.matrixWorld.decompose( _position$3, target, _scale$2 );

  		return target;

  	}

  	getWorldScale( target ) {

  		this.updateWorldMatrix( true, false );

  		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

  		return target;

  	}

  	getWorldDirection( target ) {

  		this.updateWorldMatrix( true, false );

  		const e = this.matrixWorld.elements;

  		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

  	}

  	raycast( /* raycaster, intersects */ ) {}

  	traverse( callback ) {

  		callback( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverse( callback );

  		}

  	}

  	traverseVisible( callback ) {

  		if ( this.visible === false ) return;

  		callback( this );

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverseVisible( callback );

  		}

  	}

  	traverseAncestors( callback ) {

  		const parent = this.parent;

  		if ( parent !== null ) {

  			callback( parent );

  			parent.traverseAncestors( callback );

  		}

  	}

  	updateMatrix() {

  		this.matrix.compose( this.position, this.quaternion, this.scale );

  		this.matrixWorldNeedsUpdate = true;

  	}

  	updateMatrixWorld( force ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldNeedsUpdate || force ) {

  			if ( this.matrixWorldAutoUpdate === true ) {

  				if ( this.parent === null ) {

  					this.matrixWorld.copy( this.matrix );

  				} else {

  					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  				}

  			}

  			this.matrixWorldNeedsUpdate = false;

  			force = true;

  		}

  		// make sure descendants are updated if required

  		const children = this.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			const child = children[ i ];

  			child.updateMatrixWorld( force );

  		}

  	}

  	updateWorldMatrix( updateParents, updateChildren ) {

  		const parent = this.parent;

  		if ( updateParents === true && parent !== null ) {

  			parent.updateWorldMatrix( true, false );

  		}

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldAutoUpdate === true ) {

  			if ( this.parent === null ) {

  				this.matrixWorld.copy( this.matrix );

  			} else {

  				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  			}

  		}

  		// make sure descendants are updated

  		if ( updateChildren === true ) {

  			const children = this.children;

  			for ( let i = 0, l = children.length; i < l; i ++ ) {

  				const child = children[ i ];

  				child.updateWorldMatrix( false, true );

  			}

  		}

  	}

  	toJSON( meta ) {

  		// meta is a string when called from JSON.stringify
  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		const output = {};

  		// meta is a hash used to collect geometries, materials.
  		// not providing it implies that this is the root object
  		// being serialized.
  		if ( isRootObject ) {

  			// initialize meta obj
  			meta = {
  				geometries: {},
  				materials: {},
  				textures: {},
  				images: {},
  				shapes: {},
  				skeletons: {},
  				animations: {},
  				nodes: {}
  			};

  			output.metadata = {
  				version: 4.6,
  				type: 'Object',
  				generator: 'Object3D.toJSON'
  			};

  		}

  		// standard Object3D serialization

  		const object = {};

  		object.uuid = this.uuid;
  		object.type = this.type;

  		if ( this.name !== '' ) object.name = this.name;
  		if ( this.castShadow === true ) object.castShadow = true;
  		if ( this.receiveShadow === true ) object.receiveShadow = true;
  		if ( this.visible === false ) object.visible = false;
  		if ( this.frustumCulled === false ) object.frustumCulled = false;
  		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
  		if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

  		object.layers = this.layers.mask;
  		object.matrix = this.matrix.toArray();
  		object.up = this.up.toArray();

  		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

  		// object specific properties

  		if ( this.isInstancedMesh ) {

  			object.type = 'InstancedMesh';
  			object.count = this.count;
  			object.instanceMatrix = this.instanceMatrix.toJSON();
  			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

  		}

  		if ( this.isBatchedMesh ) {

  			object.type = 'BatchedMesh';
  			object.perObjectFrustumCulled = this.perObjectFrustumCulled;
  			object.sortObjects = this.sortObjects;

  			object.drawRanges = this._drawRanges;
  			object.reservedRanges = this._reservedRanges;

  			object.visibility = this._visibility;
  			object.active = this._active;
  			object.bounds = this._bounds.map( bound => ( {
  				boxInitialized: bound.boxInitialized,
  				boxMin: bound.box.min.toArray(),
  				boxMax: bound.box.max.toArray(),

  				sphereInitialized: bound.sphereInitialized,
  				sphereRadius: bound.sphere.radius,
  				sphereCenter: bound.sphere.center.toArray()
  			} ) );

  			object.maxInstanceCount = this._maxInstanceCount;
  			object.maxVertexCount = this._maxVertexCount;
  			object.maxIndexCount = this._maxIndexCount;

  			object.geometryInitialized = this._geometryInitialized;
  			object.geometryCount = this._geometryCount;

  			object.matricesTexture = this._matricesTexture.toJSON( meta );

  			if ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );

  			if ( this.boundingSphere !== null ) {

  				object.boundingSphere = {
  					center: object.boundingSphere.center.toArray(),
  					radius: object.boundingSphere.radius
  				};

  			}

  			if ( this.boundingBox !== null ) {

  				object.boundingBox = {
  					min: object.boundingBox.min.toArray(),
  					max: object.boundingBox.max.toArray()
  				};

  			}

  		}

  		//

  		function serialize( library, element ) {

  			if ( library[ element.uuid ] === undefined ) {

  				library[ element.uuid ] = element.toJSON( meta );

  			}

  			return element.uuid;

  		}

  		if ( this.isScene ) {

  			if ( this.background ) {

  				if ( this.background.isColor ) {

  					object.background = this.background.toJSON();

  				} else if ( this.background.isTexture ) {

  					object.background = this.background.toJSON( meta ).uuid;

  				}

  			}

  			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

  				object.environment = this.environment.toJSON( meta ).uuid;

  			}

  		} else if ( this.isMesh || this.isLine || this.isPoints ) {

  			object.geometry = serialize( meta.geometries, this.geometry );

  			const parameters = this.geometry.parameters;

  			if ( parameters !== undefined && parameters.shapes !== undefined ) {

  				const shapes = parameters.shapes;

  				if ( Array.isArray( shapes ) ) {

  					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

  						const shape = shapes[ i ];

  						serialize( meta.shapes, shape );

  					}

  				} else {

  					serialize( meta.shapes, shapes );

  				}

  			}

  		}

  		if ( this.isSkinnedMesh ) {

  			object.bindMode = this.bindMode;
  			object.bindMatrix = this.bindMatrix.toArray();

  			if ( this.skeleton !== undefined ) {

  				serialize( meta.skeletons, this.skeleton );

  				object.skeleton = this.skeleton.uuid;

  			}

  		}

  		if ( this.material !== undefined ) {

  			if ( Array.isArray( this.material ) ) {

  				const uuids = [];

  				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

  					uuids.push( serialize( meta.materials, this.material[ i ] ) );

  				}

  				object.material = uuids;

  			} else {

  				object.material = serialize( meta.materials, this.material );

  			}

  		}

  		//

  		if ( this.children.length > 0 ) {

  			object.children = [];

  			for ( let i = 0; i < this.children.length; i ++ ) {

  				object.children.push( this.children[ i ].toJSON( meta ).object );

  			}

  		}

  		//

  		if ( this.animations.length > 0 ) {

  			object.animations = [];

  			for ( let i = 0; i < this.animations.length; i ++ ) {

  				const animation = this.animations[ i ];

  				object.animations.push( serialize( meta.animations, animation ) );

  			}

  		}

  		if ( isRootObject ) {

  			const geometries = extractFromCache( meta.geometries );
  			const materials = extractFromCache( meta.materials );
  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );
  			const shapes = extractFromCache( meta.shapes );
  			const skeletons = extractFromCache( meta.skeletons );
  			const animations = extractFromCache( meta.animations );
  			const nodes = extractFromCache( meta.nodes );

  			if ( geometries.length > 0 ) output.geometries = geometries;
  			if ( materials.length > 0 ) output.materials = materials;
  			if ( textures.length > 0 ) output.textures = textures;
  			if ( images.length > 0 ) output.images = images;
  			if ( shapes.length > 0 ) output.shapes = shapes;
  			if ( skeletons.length > 0 ) output.skeletons = skeletons;
  			if ( animations.length > 0 ) output.animations = animations;
  			if ( nodes.length > 0 ) output.nodes = nodes;

  		}

  		output.object = object;

  		return output;

  		// extract data from the cache hash
  		// remove metadata on each item
  		// and return as array
  		function extractFromCache( cache ) {

  			const values = [];
  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  	}

  	clone( recursive ) {

  		return new this.constructor().copy( this, recursive );

  	}

  	copy( source, recursive = true ) {

  		this.name = source.name;

  		this.up.copy( source.up );

  		this.position.copy( source.position );
  		this.rotation.order = source.rotation.order;
  		this.quaternion.copy( source.quaternion );
  		this.scale.copy( source.scale );

  		this.matrix.copy( source.matrix );
  		this.matrixWorld.copy( source.matrixWorld );

  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
  		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

  		this.layers.mask = source.layers.mask;
  		this.visible = source.visible;

  		this.castShadow = source.castShadow;
  		this.receiveShadow = source.receiveShadow;

  		this.frustumCulled = source.frustumCulled;
  		this.renderOrder = source.renderOrder;

  		this.animations = source.animations.slice();

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		if ( recursive === true ) {

  			for ( let i = 0; i < source.children.length; i ++ ) {

  				const child = source.children[ i ];
  				this.add( child.clone() );

  			}

  		}

  		return this;

  	}

  }

  Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

  const _v0$1 = /*@__PURE__*/ new Vector3();
  const _v1$3 = /*@__PURE__*/ new Vector3();
  const _v2$2 = /*@__PURE__*/ new Vector3();
  const _v3$2 = /*@__PURE__*/ new Vector3();

  const _vab = /*@__PURE__*/ new Vector3();
  const _vac = /*@__PURE__*/ new Vector3();
  const _vbc = /*@__PURE__*/ new Vector3();
  const _vap = /*@__PURE__*/ new Vector3();
  const _vbp = /*@__PURE__*/ new Vector3();
  const _vcp = /*@__PURE__*/ new Vector3();

  const _v40 = /*@__PURE__*/ new Vector4();
  const _v41 = /*@__PURE__*/ new Vector4();
  const _v42 = /*@__PURE__*/ new Vector4();

  class Triangle {

  	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

  		this.a = a;
  		this.b = b;
  		this.c = c;

  	}

  	static getNormal( a, b, c, target ) {

  		target.subVectors( c, b );
  		_v0$1.subVectors( a, b );
  		target.cross( _v0$1 );

  		const targetLengthSq = target.lengthSq();
  		if ( targetLengthSq > 0 ) {

  			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

  		}

  		return target.set( 0, 0, 0 );

  	}

  	// static/instance method to calculate barycentric coordinates
  	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  	static getBarycoord( point, a, b, c, target ) {

  		_v0$1.subVectors( c, a );
  		_v1$3.subVectors( b, a );
  		_v2$2.subVectors( point, a );

  		const dot00 = _v0$1.dot( _v0$1 );
  		const dot01 = _v0$1.dot( _v1$3 );
  		const dot02 = _v0$1.dot( _v2$2 );
  		const dot11 = _v1$3.dot( _v1$3 );
  		const dot12 = _v1$3.dot( _v2$2 );

  		const denom = ( dot00 * dot11 - dot01 * dot01 );

  		// collinear or singular triangle
  		if ( denom === 0 ) {

  			target.set( 0, 0, 0 );
  			return null;

  		}

  		const invDenom = 1 / denom;
  		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
  		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

  		// barycentric coordinates must always sum to 1
  		return target.set( 1 - u - v, v, u );

  	}

  	static containsPoint( point, a, b, c ) {

  		// if the triangle is degenerate then we can't contain a point
  		if ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {

  			return false;

  		}

  		return ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );

  	}

  	static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

  		if ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {

  			target.x = 0;
  			target.y = 0;
  			if ( 'z' in target ) target.z = 0;
  			if ( 'w' in target ) target.w = 0;
  			return null;

  		}

  		target.setScalar( 0 );
  		target.addScaledVector( v1, _v3$2.x );
  		target.addScaledVector( v2, _v3$2.y );
  		target.addScaledVector( v3, _v3$2.z );

  		return target;

  	}

  	static getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {

  		_v40.setScalar( 0 );
  		_v41.setScalar( 0 );
  		_v42.setScalar( 0 );

  		_v40.fromBufferAttribute( attr, i1 );
  		_v41.fromBufferAttribute( attr, i2 );
  		_v42.fromBufferAttribute( attr, i3 );

  		target.setScalar( 0 );
  		target.addScaledVector( _v40, barycoord.x );
  		target.addScaledVector( _v41, barycoord.y );
  		target.addScaledVector( _v42, barycoord.z );

  		return target;

  	}

  	static isFrontFacing( a, b, c, direction ) {

  		_v0$1.subVectors( c, b );
  		_v1$3.subVectors( a, b );

  		// strictly front facing
  		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

  	}

  	set( a, b, c ) {

  		this.a.copy( a );
  		this.b.copy( b );
  		this.c.copy( c );

  		return this;

  	}

  	setFromPointsAndIndices( points, i0, i1, i2 ) {

  		this.a.copy( points[ i0 ] );
  		this.b.copy( points[ i1 ] );
  		this.c.copy( points[ i2 ] );

  		return this;

  	}

  	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

  		this.a.fromBufferAttribute( attribute, i0 );
  		this.b.fromBufferAttribute( attribute, i1 );
  		this.c.fromBufferAttribute( attribute, i2 );

  		return this;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( triangle ) {

  		this.a.copy( triangle.a );
  		this.b.copy( triangle.b );
  		this.c.copy( triangle.c );

  		return this;

  	}

  	getArea() {

  		_v0$1.subVectors( this.c, this.b );
  		_v1$3.subVectors( this.a, this.b );

  		return _v0$1.cross( _v1$3 ).length() * 0.5;

  	}

  	getMidpoint( target ) {

  		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  	}

  	getNormal( target ) {

  		return Triangle.getNormal( this.a, this.b, this.c, target );

  	}

  	getPlane( target ) {

  		return target.setFromCoplanarPoints( this.a, this.b, this.c );

  	}

  	getBarycoord( point, target ) {

  		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

  	}

  	getInterpolation( point, v1, v2, v3, target ) {

  		return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

  	}

  	containsPoint( point ) {

  		return Triangle.containsPoint( point, this.a, this.b, this.c );

  	}

  	isFrontFacing( direction ) {

  		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

  	}

  	intersectsBox( box ) {

  		return box.intersectsTriangle( this );

  	}

  	closestPointToPoint( p, target ) {

  		const a = this.a, b = this.b, c = this.c;
  		let v, w;

  		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
  		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
  		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
  		// basically, we're distinguishing which of the voronoi regions of the triangle
  		// the point lies in with the minimum amount of redundant computation.

  		_vab.subVectors( b, a );
  		_vac.subVectors( c, a );
  		_vap.subVectors( p, a );
  		const d1 = _vab.dot( _vap );
  		const d2 = _vac.dot( _vap );
  		if ( d1 <= 0 && d2 <= 0 ) {

  			// vertex region of A; barycentric coords (1, 0, 0)
  			return target.copy( a );

  		}

  		_vbp.subVectors( p, b );
  		const d3 = _vab.dot( _vbp );
  		const d4 = _vac.dot( _vbp );
  		if ( d3 >= 0 && d4 <= d3 ) {

  			// vertex region of B; barycentric coords (0, 1, 0)
  			return target.copy( b );

  		}

  		const vc = d1 * d4 - d3 * d2;
  		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

  			v = d1 / ( d1 - d3 );
  			// edge region of AB; barycentric coords (1-v, v, 0)
  			return target.copy( a ).addScaledVector( _vab, v );

  		}

  		_vcp.subVectors( p, c );
  		const d5 = _vab.dot( _vcp );
  		const d6 = _vac.dot( _vcp );
  		if ( d6 >= 0 && d5 <= d6 ) {

  			// vertex region of C; barycentric coords (0, 0, 1)
  			return target.copy( c );

  		}

  		const vb = d5 * d2 - d1 * d6;
  		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

  			w = d2 / ( d2 - d6 );
  			// edge region of AC; barycentric coords (1-w, 0, w)
  			return target.copy( a ).addScaledVector( _vac, w );

  		}

  		const va = d3 * d6 - d5 * d4;
  		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

  			_vbc.subVectors( c, b );
  			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
  			// edge region of BC; barycentric coords (0, 1-w, w)
  			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

  		}

  		// face region
  		const denom = 1 / ( va + vb + vc );
  		// u = va * denom
  		v = vb * denom;
  		w = vc * denom;

  		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

  	}

  	equals( triangle ) {

  		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  	}

  }

  const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
  	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
  	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
  	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
  	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
  	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
  	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
  	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
  	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
  	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
  	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
  	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
  	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
  	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
  	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
  	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
  	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
  	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
  	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
  	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
  	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
  	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
  	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
  	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

  const _hslA = { h: 0, s: 0, l: 0 };
  const _hslB = { h: 0, s: 0, l: 0 };

  function hue2rgb( p, q, t ) {

  	if ( t < 0 ) t += 1;
  	if ( t > 1 ) t -= 1;
  	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
  	if ( t < 1 / 2 ) return q;
  	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
  	return p;

  }

  class Color {

  	constructor( r, g, b ) {

  		this.isColor = true;

  		this.r = 1;
  		this.g = 1;
  		this.b = 1;

  		return this.set( r, g, b );

  	}

  	set( r, g, b ) {

  		if ( g === undefined && b === undefined ) {

  			// r is THREE.Color, hex or string

  			const value = r;

  			if ( value && value.isColor ) {

  				this.copy( value );

  			} else if ( typeof value === 'number' ) {

  				this.setHex( value );

  			} else if ( typeof value === 'string' ) {

  				this.setStyle( value );

  			}

  		} else {

  			this.setRGB( r, g, b );

  		}

  		return this;

  	}

  	setScalar( scalar ) {

  		this.r = scalar;
  		this.g = scalar;
  		this.b = scalar;

  		return this;

  	}

  	setHex( hex, colorSpace = SRGBColorSpace ) {

  		hex = Math.floor( hex );

  		this.r = ( hex >> 16 & 255 ) / 255;
  		this.g = ( hex >> 8 & 255 ) / 255;
  		this.b = ( hex & 255 ) / 255;

  		ColorManagement.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {

  		this.r = r;
  		this.g = g;
  		this.b = b;

  		ColorManagement.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {

  		// h,s,l ranges are in 0.0 - 1.0
  		h = euclideanModulo( h, 1 );
  		s = clamp$1( s, 0, 1 );
  		l = clamp$1( l, 0, 1 );

  		if ( s === 0 ) {

  			this.r = this.g = this.b = l;

  		} else {

  			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
  			const q = ( 2 * l ) - p;

  			this.r = hue2rgb( q, p, h + 1 / 3 );
  			this.g = hue2rgb( q, p, h );
  			this.b = hue2rgb( q, p, h - 1 / 3 );

  		}

  		ColorManagement.toWorkingColorSpace( this, colorSpace );

  		return this;

  	}

  	setStyle( style, colorSpace = SRGBColorSpace ) {

  		function handleAlpha( string ) {

  			if ( string === undefined ) return;

  			if ( parseFloat( string ) < 1 ) {

  				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

  			}

  		}


  		let m;

  		if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

  			// rgb / hsl

  			let color;
  			const name = m[ 1 ];
  			const components = m[ 2 ];

  			switch ( name ) {

  				case 'rgb':
  				case 'rgba':

  					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// rgb(255,0,0) rgba(255,0,0,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setRGB(
  							Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
  							Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
  							Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
  							colorSpace
  						);

  					}

  					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setRGB(
  							Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
  							Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
  							Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
  							colorSpace
  						);

  					}

  					break;

  				case 'hsl':
  				case 'hsla':

  					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

  						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

  						handleAlpha( color[ 4 ] );

  						return this.setHSL(
  							parseFloat( color[ 1 ] ) / 360,
  							parseFloat( color[ 2 ] ) / 100,
  							parseFloat( color[ 3 ] ) / 100,
  							colorSpace
  						);

  					}

  					break;

  				default:

  					console.warn( 'THREE.Color: Unknown color model ' + style );

  			}

  		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

  			// hex color

  			const hex = m[ 1 ];
  			const size = hex.length;

  			if ( size === 3 ) {

  				// #ff0
  				return this.setRGB(
  					parseInt( hex.charAt( 0 ), 16 ) / 15,
  					parseInt( hex.charAt( 1 ), 16 ) / 15,
  					parseInt( hex.charAt( 2 ), 16 ) / 15,
  					colorSpace
  				);

  			} else if ( size === 6 ) {

  				// #ff0000
  				return this.setHex( parseInt( hex, 16 ), colorSpace );

  			} else {

  				console.warn( 'THREE.Color: Invalid hex color ' + style );

  			}

  		} else if ( style && style.length > 0 ) {

  			return this.setColorName( style, colorSpace );

  		}

  		return this;

  	}

  	setColorName( style, colorSpace = SRGBColorSpace ) {

  		// color keywords
  		const hex = _colorKeywords[ style.toLowerCase() ];

  		if ( hex !== undefined ) {

  			// red
  			this.setHex( hex, colorSpace );

  		} else {

  			// unknown color
  			console.warn( 'THREE.Color: Unknown color ' + style );

  		}

  		return this;

  	}

  	clone() {

  		return new this.constructor( this.r, this.g, this.b );

  	}

  	copy( color ) {

  		this.r = color.r;
  		this.g = color.g;
  		this.b = color.b;

  		return this;

  	}

  	copySRGBToLinear( color ) {

  		this.r = SRGBToLinear( color.r );
  		this.g = SRGBToLinear( color.g );
  		this.b = SRGBToLinear( color.b );

  		return this;

  	}

  	copyLinearToSRGB( color ) {

  		this.r = LinearToSRGB( color.r );
  		this.g = LinearToSRGB( color.g );
  		this.b = LinearToSRGB( color.b );

  		return this;

  	}

  	convertSRGBToLinear() {

  		this.copySRGBToLinear( this );

  		return this;

  	}

  	convertLinearToSRGB() {

  		this.copyLinearToSRGB( this );

  		return this;

  	}

  	getHex( colorSpace = SRGBColorSpace ) {

  		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

  		return Math.round( clamp$1( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp$1( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp$1( _color.b * 255, 0, 255 ) );

  	}

  	getHexString( colorSpace = SRGBColorSpace ) {

  		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

  	}

  	getHSL( target, colorSpace = ColorManagement.workingColorSpace ) {

  		// h,s,l ranges are in 0.0 - 1.0

  		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

  		const r = _color.r, g = _color.g, b = _color.b;

  		const max = Math.max( r, g, b );
  		const min = Math.min( r, g, b );

  		let hue, saturation;
  		const lightness = ( min + max ) / 2.0;

  		if ( min === max ) {

  			hue = 0;
  			saturation = 0;

  		} else {

  			const delta = max - min;

  			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

  			switch ( max ) {

  				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
  				case g: hue = ( b - r ) / delta + 2; break;
  				case b: hue = ( r - g ) / delta + 4; break;

  			}

  			hue /= 6;

  		}

  		target.h = hue;
  		target.s = saturation;
  		target.l = lightness;

  		return target;

  	}

  	getRGB( target, colorSpace = ColorManagement.workingColorSpace ) {

  		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

  		target.r = _color.r;
  		target.g = _color.g;
  		target.b = _color.b;

  		return target;

  	}

  	getStyle( colorSpace = SRGBColorSpace ) {

  		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

  		const r = _color.r, g = _color.g, b = _color.b;

  		if ( colorSpace !== SRGBColorSpace ) {

  			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
  			return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

  		}

  		return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

  	}

  	offsetHSL( h, s, l ) {

  		this.getHSL( _hslA );

  		return this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );

  	}

  	add( color ) {

  		this.r += color.r;
  		this.g += color.g;
  		this.b += color.b;

  		return this;

  	}

  	addColors( color1, color2 ) {

  		this.r = color1.r + color2.r;
  		this.g = color1.g + color2.g;
  		this.b = color1.b + color2.b;

  		return this;

  	}

  	addScalar( s ) {

  		this.r += s;
  		this.g += s;
  		this.b += s;

  		return this;

  	}

  	sub( color ) {

  		this.r = Math.max( 0, this.r - color.r );
  		this.g = Math.max( 0, this.g - color.g );
  		this.b = Math.max( 0, this.b - color.b );

  		return this;

  	}

  	multiply( color ) {

  		this.r *= color.r;
  		this.g *= color.g;
  		this.b *= color.b;

  		return this;

  	}

  	multiplyScalar( s ) {

  		this.r *= s;
  		this.g *= s;
  		this.b *= s;

  		return this;

  	}

  	lerp( color, alpha ) {

  		this.r += ( color.r - this.r ) * alpha;
  		this.g += ( color.g - this.g ) * alpha;
  		this.b += ( color.b - this.b ) * alpha;

  		return this;

  	}

  	lerpColors( color1, color2, alpha ) {

  		this.r = color1.r + ( color2.r - color1.r ) * alpha;
  		this.g = color1.g + ( color2.g - color1.g ) * alpha;
  		this.b = color1.b + ( color2.b - color1.b ) * alpha;

  		return this;

  	}

  	lerpHSL( color, alpha ) {

  		this.getHSL( _hslA );
  		color.getHSL( _hslB );

  		const h = lerp( _hslA.h, _hslB.h, alpha );
  		const s = lerp( _hslA.s, _hslB.s, alpha );
  		const l = lerp( _hslA.l, _hslB.l, alpha );

  		this.setHSL( h, s, l );

  		return this;

  	}

  	setFromVector3( v ) {

  		this.r = v.x;
  		this.g = v.y;
  		this.b = v.z;

  		return this;

  	}

  	applyMatrix3( m ) {

  		const r = this.r, g = this.g, b = this.b;
  		const e = m.elements;

  		this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
  		this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
  		this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

  		return this;

  	}

  	equals( c ) {

  		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  	}

  	fromArray( array, offset = 0 ) {

  		this.r = array[ offset ];
  		this.g = array[ offset + 1 ];
  		this.b = array[ offset + 2 ];

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		array[ offset ] = this.r;
  		array[ offset + 1 ] = this.g;
  		array[ offset + 2 ] = this.b;

  		return array;

  	}

  	fromBufferAttribute( attribute, index ) {

  		this.r = attribute.getX( index );
  		this.g = attribute.getY( index );
  		this.b = attribute.getZ( index );

  		return this;

  	}

  	toJSON() {

  		return this.getHex();

  	}

  	*[ Symbol.iterator ]() {

  		yield this.r;
  		yield this.g;
  		yield this.b;

  	}

  }

  const _color = /*@__PURE__*/ new Color();

  Color.NAMES = _colorKeywords;

  let _materialId = 0;

  class Material extends EventDispatcher {

  	static get type() {

  		return 'Material';

  	}

  	get type() {

  		return this.constructor.type;

  	}

  	set type( _value ) { /* */ }

  	constructor() {

  		super();

  		this.isMaterial = true;

  		Object.defineProperty( this, 'id', { value: _materialId ++ } );

  		this.uuid = generateUUID();

  		this.name = '';

  		this.blending = NormalBlending;
  		this.side = FrontSide;
  		this.vertexColors = false;

  		this.opacity = 1;
  		this.transparent = false;
  		this.alphaHash = false;

  		this.blendSrc = SrcAlphaFactor;
  		this.blendDst = OneMinusSrcAlphaFactor;
  		this.blendEquation = AddEquation;
  		this.blendSrcAlpha = null;
  		this.blendDstAlpha = null;
  		this.blendEquationAlpha = null;
  		this.blendColor = new Color( 0, 0, 0 );
  		this.blendAlpha = 0;

  		this.depthFunc = LessEqualDepth;
  		this.depthTest = true;
  		this.depthWrite = true;

  		this.stencilWriteMask = 0xff;
  		this.stencilFunc = AlwaysStencilFunc;
  		this.stencilRef = 0;
  		this.stencilFuncMask = 0xff;
  		this.stencilFail = KeepStencilOp;
  		this.stencilZFail = KeepStencilOp;
  		this.stencilZPass = KeepStencilOp;
  		this.stencilWrite = false;

  		this.clippingPlanes = null;
  		this.clipIntersection = false;
  		this.clipShadows = false;

  		this.shadowSide = null;

  		this.colorWrite = true;

  		this.precision = null; // override the renderer's default precision for this material

  		this.polygonOffset = false;
  		this.polygonOffsetFactor = 0;
  		this.polygonOffsetUnits = 0;

  		this.dithering = false;

  		this.alphaToCoverage = false;
  		this.premultipliedAlpha = false;
  		this.forceSinglePass = false;

  		this.visible = true;

  		this.toneMapped = true;

  		this.userData = {};

  		this.version = 0;

  		this._alphaTest = 0;

  	}

  	get alphaTest() {

  		return this._alphaTest;

  	}

  	set alphaTest( value ) {

  		if ( this._alphaTest > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._alphaTest = value;

  	}

  	// onBeforeRender and onBeforeCompile only supported in WebGLRenderer

  	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

  	onBeforeCompile( /* shaderobject, renderer */ ) {}

  	customProgramCacheKey() {

  		return this.onBeforeCompile.toString();

  	}

  	setValues( values ) {

  		if ( values === undefined ) return;

  		for ( const key in values ) {

  			const newValue = values[ key ];

  			if ( newValue === undefined ) {

  				console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
  				continue;

  			}

  			const currentValue = this[ key ];

  			if ( currentValue === undefined ) {

  				console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
  				continue;

  			}

  			if ( currentValue && currentValue.isColor ) {

  				currentValue.set( newValue );

  			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

  				currentValue.copy( newValue );

  			} else {

  				this[ key ] = newValue;

  			}

  		}

  	}

  	toJSON( meta ) {

  		const isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( isRootObject ) {

  			meta = {
  				textures: {},
  				images: {}
  			};

  		}

  		const data = {
  			metadata: {
  				version: 4.6,
  				type: 'Material',
  				generator: 'Material.toJSON'
  			}
  		};

  		// standard Material serialization
  		data.uuid = this.uuid;
  		data.type = this.type;

  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

  		if ( this.roughness !== undefined ) data.roughness = this.roughness;
  		if ( this.metalness !== undefined ) data.metalness = this.metalness;

  		if ( this.sheen !== undefined ) data.sheen = this.sheen;
  		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
  		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
  		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
  		if ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

  		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
  		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
  		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
  		if ( this.shininess !== undefined ) data.shininess = this.shininess;
  		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
  		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

  		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

  			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

  			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

  			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
  			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

  		}

  		if ( this.dispersion !== undefined ) data.dispersion = this.dispersion;

  		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
  		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
  		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

  		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

  			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

  		}

  		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

  			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

  		}

  		if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
  		if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

  		if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

  			data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

  		}

  		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
  		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
  		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

  		if ( this.lightMap && this.lightMap.isTexture ) {

  			data.lightMap = this.lightMap.toJSON( meta ).uuid;
  			data.lightMapIntensity = this.lightMapIntensity;

  		}

  		if ( this.aoMap && this.aoMap.isTexture ) {

  			data.aoMap = this.aoMap.toJSON( meta ).uuid;
  			data.aoMapIntensity = this.aoMapIntensity;

  		}

  		if ( this.bumpMap && this.bumpMap.isTexture ) {

  			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
  			data.bumpScale = this.bumpScale;

  		}

  		if ( this.normalMap && this.normalMap.isTexture ) {

  			data.normalMap = this.normalMap.toJSON( meta ).uuid;
  			data.normalMapType = this.normalMapType;
  			data.normalScale = this.normalScale.toArray();

  		}

  		if ( this.displacementMap && this.displacementMap.isTexture ) {

  			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
  			data.displacementScale = this.displacementScale;
  			data.displacementBias = this.displacementBias;

  		}

  		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
  		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

  		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
  		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
  		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
  		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

  		if ( this.envMap && this.envMap.isTexture ) {

  			data.envMap = this.envMap.toJSON( meta ).uuid;

  			if ( this.combine !== undefined ) data.combine = this.combine;

  		}

  		if ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();
  		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
  		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
  		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

  		if ( this.gradientMap && this.gradientMap.isTexture ) {

  			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

  		}

  		if ( this.transmission !== undefined ) data.transmission = this.transmission;
  		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
  		if ( this.thickness !== undefined ) data.thickness = this.thickness;
  		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
  		if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
  		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

  		if ( this.size !== undefined ) data.size = this.size;
  		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
  		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

  		if ( this.blending !== NormalBlending ) data.blending = this.blending;
  		if ( this.side !== FrontSide ) data.side = this.side;
  		if ( this.vertexColors === true ) data.vertexColors = true;

  		if ( this.opacity < 1 ) data.opacity = this.opacity;
  		if ( this.transparent === true ) data.transparent = true;

  		if ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;
  		if ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;
  		if ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;
  		if ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;
  		if ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;
  		if ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;
  		if ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();
  		if ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;

  		if ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;
  		if ( this.depthTest === false ) data.depthTest = this.depthTest;
  		if ( this.depthWrite === false ) data.depthWrite = this.depthWrite;
  		if ( this.colorWrite === false ) data.colorWrite = this.colorWrite;

  		if ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;
  		if ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;
  		if ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;
  		if ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;
  		if ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;
  		if ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;
  		if ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;
  		if ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;

  		// rotation (SpriteMaterial)
  		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

  		if ( this.polygonOffset === true ) data.polygonOffset = true;
  		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
  		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

  		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
  		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
  		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
  		if ( this.scale !== undefined ) data.scale = this.scale;

  		if ( this.dithering === true ) data.dithering = true;

  		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
  		if ( this.alphaHash === true ) data.alphaHash = true;
  		if ( this.alphaToCoverage === true ) data.alphaToCoverage = true;
  		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;
  		if ( this.forceSinglePass === true ) data.forceSinglePass = true;

  		if ( this.wireframe === true ) data.wireframe = true;
  		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
  		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
  		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

  		if ( this.flatShading === true ) data.flatShading = true;

  		if ( this.visible === false ) data.visible = false;

  		if ( this.toneMapped === false ) data.toneMapped = false;

  		if ( this.fog === false ) data.fog = false;

  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			const values = [];

  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRootObject ) {

  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;

  		}

  		return data;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		this.name = source.name;

  		this.blending = source.blending;
  		this.side = source.side;
  		this.vertexColors = source.vertexColors;

  		this.opacity = source.opacity;
  		this.transparent = source.transparent;

  		this.blendSrc = source.blendSrc;
  		this.blendDst = source.blendDst;
  		this.blendEquation = source.blendEquation;
  		this.blendSrcAlpha = source.blendSrcAlpha;
  		this.blendDstAlpha = source.blendDstAlpha;
  		this.blendEquationAlpha = source.blendEquationAlpha;
  		this.blendColor.copy( source.blendColor );
  		this.blendAlpha = source.blendAlpha;

  		this.depthFunc = source.depthFunc;
  		this.depthTest = source.depthTest;
  		this.depthWrite = source.depthWrite;

  		this.stencilWriteMask = source.stencilWriteMask;
  		this.stencilFunc = source.stencilFunc;
  		this.stencilRef = source.stencilRef;
  		this.stencilFuncMask = source.stencilFuncMask;
  		this.stencilFail = source.stencilFail;
  		this.stencilZFail = source.stencilZFail;
  		this.stencilZPass = source.stencilZPass;
  		this.stencilWrite = source.stencilWrite;

  		const srcPlanes = source.clippingPlanes;
  		let dstPlanes = null;

  		if ( srcPlanes !== null ) {

  			const n = srcPlanes.length;
  			dstPlanes = new Array( n );

  			for ( let i = 0; i !== n; ++ i ) {

  				dstPlanes[ i ] = srcPlanes[ i ].clone();

  			}

  		}

  		this.clippingPlanes = dstPlanes;
  		this.clipIntersection = source.clipIntersection;
  		this.clipShadows = source.clipShadows;

  		this.shadowSide = source.shadowSide;

  		this.colorWrite = source.colorWrite;

  		this.precision = source.precision;

  		this.polygonOffset = source.polygonOffset;
  		this.polygonOffsetFactor = source.polygonOffsetFactor;
  		this.polygonOffsetUnits = source.polygonOffsetUnits;

  		this.dithering = source.dithering;

  		this.alphaTest = source.alphaTest;
  		this.alphaHash = source.alphaHash;
  		this.alphaToCoverage = source.alphaToCoverage;
  		this.premultipliedAlpha = source.premultipliedAlpha;
  		this.forceSinglePass = source.forceSinglePass;

  		this.visible = source.visible;

  		this.toneMapped = source.toneMapped;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	onBuild( /* shaderobject, renderer */ ) {

  		console.warn( 'Material: onBuild() has been removed.' ); // @deprecated, r166

  	}

  }

  class MeshBasicMaterial extends Material {

  	static get type() {

  		return 'MeshBasicMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshBasicMaterial = true;

  		this.color = new Color( 0xffffff ); // emissive

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.specularMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler();
  		this.combine = MultiplyOperation;
  		this.reflectivity = 1;
  		this.refractionRatio = 0.98;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.specularMap = source.specularMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.combine = source.combine;
  		this.reflectivity = source.reflectivity;
  		this.refractionRatio = source.refractionRatio;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.fog = source.fog;

  		return this;

  	}

  }

  // Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf

  const _tables = /*@__PURE__*/ _generateTables();

  function _generateTables() {

  	// float32 to float16 helpers

  	const buffer = new ArrayBuffer( 4 );
  	const floatView = new Float32Array( buffer );
  	const uint32View = new Uint32Array( buffer );

  	const baseTable = new Uint32Array( 512 );
  	const shiftTable = new Uint32Array( 512 );

  	for ( let i = 0; i < 256; ++ i ) {

  		const e = i - 127;

  		// very small number (0, -0)

  		if ( e < - 27 ) {

  			baseTable[ i ] = 0x0000;
  			baseTable[ i | 0x100 ] = 0x8000;
  			shiftTable[ i ] = 24;
  			shiftTable[ i | 0x100 ] = 24;

  			// small number (denorm)

  		} else if ( e < - 14 ) {

  			baseTable[ i ] = 0x0400 >> ( - e - 14 );
  			baseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;
  			shiftTable[ i ] = - e - 1;
  			shiftTable[ i | 0x100 ] = - e - 1;

  			// normal number

  		} else if ( e <= 15 ) {

  			baseTable[ i ] = ( e + 15 ) << 10;
  			baseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;
  			shiftTable[ i ] = 13;
  			shiftTable[ i | 0x100 ] = 13;

  			// large number (Infinity, -Infinity)

  		} else if ( e < 128 ) {

  			baseTable[ i ] = 0x7c00;
  			baseTable[ i | 0x100 ] = 0xfc00;
  			shiftTable[ i ] = 24;
  			shiftTable[ i | 0x100 ] = 24;

  			// stay (NaN, Infinity, -Infinity)

  		} else {

  			baseTable[ i ] = 0x7c00;
  			baseTable[ i | 0x100 ] = 0xfc00;
  			shiftTable[ i ] = 13;
  			shiftTable[ i | 0x100 ] = 13;

  		}

  	}

  	// float16 to float32 helpers

  	const mantissaTable = new Uint32Array( 2048 );
  	const exponentTable = new Uint32Array( 64 );
  	const offsetTable = new Uint32Array( 64 );

  	for ( let i = 1; i < 1024; ++ i ) {

  		let m = i << 13; // zero pad mantissa bits
  		let e = 0; // zero exponent

  		// normalized
  		while ( ( m & 0x00800000 ) === 0 ) {

  			m <<= 1;
  			e -= 0x00800000; // decrement exponent

  		}

  		m &= ~ 0x00800000; // clear leading 1 bit
  		e += 0x38800000; // adjust bias

  		mantissaTable[ i ] = m | e;

  	}

  	for ( let i = 1024; i < 2048; ++ i ) {

  		mantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );

  	}

  	for ( let i = 1; i < 31; ++ i ) {

  		exponentTable[ i ] = i << 23;

  	}

  	exponentTable[ 31 ] = 0x47800000;
  	exponentTable[ 32 ] = 0x80000000;

  	for ( let i = 33; i < 63; ++ i ) {

  		exponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );

  	}

  	exponentTable[ 63 ] = 0xc7800000;

  	for ( let i = 1; i < 64; ++ i ) {

  		if ( i !== 32 ) {

  			offsetTable[ i ] = 1024;

  		}

  	}

  	return {
  		floatView: floatView,
  		uint32View: uint32View,
  		baseTable: baseTable,
  		shiftTable: shiftTable,
  		mantissaTable: mantissaTable,
  		exponentTable: exponentTable,
  		offsetTable: offsetTable
  	};

  }

  // float32 to float16

  function toHalfFloat( val ) {

  	if ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );

  	val = clamp$1( val, - 65504, 65504 );

  	_tables.floatView[ 0 ] = val;
  	const f = _tables.uint32View[ 0 ];
  	const e = ( f >> 23 ) & 0x1ff;
  	return _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );

  }

  // float16 to float32

  function fromHalfFloat( val ) {

  	const m = val >> 10;
  	_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];
  	return _tables.floatView[ 0 ];

  }

  const _vector$9 = /*@__PURE__*/ new Vector3();
  const _vector2$1 = /*@__PURE__*/ new Vector2();

  class BufferAttribute {

  	constructor( array, itemSize, normalized = false ) {

  		if ( Array.isArray( array ) ) {

  			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  		}

  		this.isBufferAttribute = true;

  		this.name = '';

  		this.array = array;
  		this.itemSize = itemSize;
  		this.count = array !== undefined ? array.length / itemSize : 0;
  		this.normalized = normalized;

  		this.usage = StaticDrawUsage;
  		this.updateRanges = [];
  		this.gpuType = FloatType;

  		this.version = 0;

  	}

  	onUploadCallback() {}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	setUsage( value ) {

  		this.usage = value;

  		return this;

  	}

  	addUpdateRange( start, count ) {

  		this.updateRanges.push( { start, count } );

  	}

  	clearUpdateRanges() {

  		this.updateRanges.length = 0;

  	}

  	copy( source ) {

  		this.name = source.name;
  		this.array = new source.array.constructor( source.array );
  		this.itemSize = source.itemSize;
  		this.count = source.count;
  		this.normalized = source.normalized;

  		this.usage = source.usage;
  		this.gpuType = source.gpuType;

  		return this;

  	}

  	copyAt( index1, attribute, index2 ) {

  		index1 *= this.itemSize;
  		index2 *= attribute.itemSize;

  		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	}

  	copyArray( array ) {

  		this.array.set( array );

  		return this;

  	}

  	applyMatrix3( m ) {

  		if ( this.itemSize === 2 ) {

  			for ( let i = 0, l = this.count; i < l; i ++ ) {

  				_vector2$1.fromBufferAttribute( this, i );
  				_vector2$1.applyMatrix3( m );

  				this.setXY( i, _vector2$1.x, _vector2$1.y );

  			}

  		} else if ( this.itemSize === 3 ) {

  			for ( let i = 0, l = this.count; i < l; i ++ ) {

  				_vector$9.fromBufferAttribute( this, i );
  				_vector$9.applyMatrix3( m );

  				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

  			}

  		}

  		return this;

  	}

  	applyMatrix4( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9.fromBufferAttribute( this, i );

  			_vector$9.applyMatrix4( m );

  			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

  		}

  		return this;

  	}

  	applyNormalMatrix( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9.fromBufferAttribute( this, i );

  			_vector$9.applyNormalMatrix( m );

  			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

  		}

  		return this;

  	}

  	transformDirection( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$9.fromBufferAttribute( this, i );

  			_vector$9.transformDirection( m );

  			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

  		}

  		return this;

  	}

  	set( value, offset = 0 ) {

  		// Matching BufferAttribute constructor, do not normalize the array.
  		this.array.set( value, offset );

  		return this;

  	}

  	getComponent( index, component ) {

  		let value = this.array[ index * this.itemSize + component ];

  		if ( this.normalized ) value = denormalize( value, this.array );

  		return value;

  	}

  	setComponent( index, component, value ) {

  		if ( this.normalized ) value = normalize$1( value, this.array );

  		this.array[ index * this.itemSize + component ] = value;

  		return this;

  	}

  	getX( index ) {

  		let x = this.array[ index * this.itemSize ];

  		if ( this.normalized ) x = denormalize( x, this.array );

  		return x;

  	}

  	setX( index, x ) {

  		if ( this.normalized ) x = normalize$1( x, this.array );

  		this.array[ index * this.itemSize ] = x;

  		return this;

  	}

  	getY( index ) {

  		let y = this.array[ index * this.itemSize + 1 ];

  		if ( this.normalized ) y = denormalize( y, this.array );

  		return y;

  	}

  	setY( index, y ) {

  		if ( this.normalized ) y = normalize$1( y, this.array );

  		this.array[ index * this.itemSize + 1 ] = y;

  		return this;

  	}

  	getZ( index ) {

  		let z = this.array[ index * this.itemSize + 2 ];

  		if ( this.normalized ) z = denormalize( z, this.array );

  		return z;

  	}

  	setZ( index, z ) {

  		if ( this.normalized ) z = normalize$1( z, this.array );

  		this.array[ index * this.itemSize + 2 ] = z;

  		return this;

  	}

  	getW( index ) {

  		let w = this.array[ index * this.itemSize + 3 ];

  		if ( this.normalized ) w = denormalize( w, this.array );

  		return w;

  	}

  	setW( index, w ) {

  		if ( this.normalized ) w = normalize$1( w, this.array );

  		this.array[ index * this.itemSize + 3 ] = w;

  		return this;

  	}

  	setXY( index, x, y ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;

  		return this;

  	}

  	setXYZ( index, x, y, z ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;

  		return this;

  	}

  	setXYZW( index, x, y, z, w ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );
  			w = normalize$1( w, this.array );

  		}

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;
  		this.array[ index + 3 ] = w;

  		return this;

  	}

  	onUpload( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	}

  	clone() {

  		return new this.constructor( this.array, this.itemSize ).copy( this );

  	}

  	toJSON() {

  		const data = {
  			itemSize: this.itemSize,
  			type: this.array.constructor.name,
  			array: Array.from( this.array ),
  			normalized: this.normalized
  		};

  		if ( this.name !== '' ) data.name = this.name;
  		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;

  		return data;

  	}

  }

  class Uint16BufferAttribute extends BufferAttribute {

  	constructor( array, itemSize, normalized ) {

  		super( new Uint16Array( array ), itemSize, normalized );

  	}

  }

  class Uint32BufferAttribute extends BufferAttribute {

  	constructor( array, itemSize, normalized ) {

  		super( new Uint32Array( array ), itemSize, normalized );

  	}

  }

  class Float16BufferAttribute extends BufferAttribute {

  	constructor( array, itemSize, normalized ) {

  		super( new Uint16Array( array ), itemSize, normalized );

  		this.isFloat16BufferAttribute = true;

  	}

  	getX( index ) {

  		let x = fromHalfFloat( this.array[ index * this.itemSize ] );

  		if ( this.normalized ) x = denormalize( x, this.array );

  		return x;

  	}

  	setX( index, x ) {

  		if ( this.normalized ) x = normalize$1( x, this.array );

  		this.array[ index * this.itemSize ] = toHalfFloat( x );

  		return this;

  	}

  	getY( index ) {

  		let y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );

  		if ( this.normalized ) y = denormalize( y, this.array );

  		return y;

  	}

  	setY( index, y ) {

  		if ( this.normalized ) y = normalize$1( y, this.array );

  		this.array[ index * this.itemSize + 1 ] = toHalfFloat( y );

  		return this;

  	}

  	getZ( index ) {

  		let z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );

  		if ( this.normalized ) z = denormalize( z, this.array );

  		return z;

  	}

  	setZ( index, z ) {

  		if ( this.normalized ) z = normalize$1( z, this.array );

  		this.array[ index * this.itemSize + 2 ] = toHalfFloat( z );

  		return this;

  	}

  	getW( index ) {

  		let w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );

  		if ( this.normalized ) w = denormalize( w, this.array );

  		return w;

  	}

  	setW( index, w ) {

  		if ( this.normalized ) w = normalize$1( w, this.array );

  		this.array[ index * this.itemSize + 3 ] = toHalfFloat( w );

  		return this;

  	}

  	setXY( index, x, y ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );

  		}

  		this.array[ index + 0 ] = toHalfFloat( x );
  		this.array[ index + 1 ] = toHalfFloat( y );

  		return this;

  	}

  	setXYZ( index, x, y, z ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );

  		}

  		this.array[ index + 0 ] = toHalfFloat( x );
  		this.array[ index + 1 ] = toHalfFloat( y );
  		this.array[ index + 2 ] = toHalfFloat( z );

  		return this;

  	}

  	setXYZW( index, x, y, z, w ) {

  		index *= this.itemSize;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );
  			w = normalize$1( w, this.array );

  		}

  		this.array[ index + 0 ] = toHalfFloat( x );
  		this.array[ index + 1 ] = toHalfFloat( y );
  		this.array[ index + 2 ] = toHalfFloat( z );
  		this.array[ index + 3 ] = toHalfFloat( w );

  		return this;

  	}

  }


  class Float32BufferAttribute extends BufferAttribute {

  	constructor( array, itemSize, normalized ) {

  		super( new Float32Array( array ), itemSize, normalized );

  	}

  }

  let _id$9 = 0;

  const _m1$1 = /*@__PURE__*/ new Matrix4();
  const _obj = /*@__PURE__*/ new Object3D();
  const _offset = /*@__PURE__*/ new Vector3();
  const _box$2 = /*@__PURE__*/ new Box3();
  const _boxMorphTargets = /*@__PURE__*/ new Box3();
  const _vector$8 = /*@__PURE__*/ new Vector3();

  class BufferGeometry extends EventDispatcher {

  	constructor() {

  		super();

  		this.isBufferGeometry = true;

  		Object.defineProperty( this, 'id', { value: _id$9 ++ } );

  		this.uuid = generateUUID();

  		this.name = '';
  		this.type = 'BufferGeometry';

  		this.index = null;
  		this.indirect = null;
  		this.attributes = {};

  		this.morphAttributes = {};
  		this.morphTargetsRelative = false;

  		this.groups = [];

  		this.boundingBox = null;
  		this.boundingSphere = null;

  		this.drawRange = { start: 0, count: Infinity };

  		this.userData = {};

  	}

  	getIndex() {

  		return this.index;

  	}

  	setIndex( index ) {

  		if ( Array.isArray( index ) ) {

  			this.index = new ( arrayNeedsUint32$1( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

  		} else {

  			this.index = index;

  		}

  		return this;

  	}

  	setIndirect( indirect ) {

  		this.indirect = indirect;

  		return this;

  	}

  	getIndirect() {

  		return this.indirect;

  	}

  	getAttribute( name ) {

  		return this.attributes[ name ];

  	}

  	setAttribute( name, attribute ) {

  		this.attributes[ name ] = attribute;

  		return this;

  	}

  	deleteAttribute( name ) {

  		delete this.attributes[ name ];

  		return this;

  	}

  	hasAttribute( name ) {

  		return this.attributes[ name ] !== undefined;

  	}

  	addGroup( start, count, materialIndex = 0 ) {

  		this.groups.push( {

  			start: start,
  			count: count,
  			materialIndex: materialIndex

  		} );

  	}

  	clearGroups() {

  		this.groups = [];

  	}

  	setDrawRange( start, count ) {

  		this.drawRange.start = start;
  		this.drawRange.count = count;

  	}

  	applyMatrix4( matrix ) {

  		const position = this.attributes.position;

  		if ( position !== undefined ) {

  			position.applyMatrix4( matrix );

  			position.needsUpdate = true;

  		}

  		const normal = this.attributes.normal;

  		if ( normal !== undefined ) {

  			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

  			normal.applyNormalMatrix( normalMatrix );

  			normal.needsUpdate = true;

  		}

  		const tangent = this.attributes.tangent;

  		if ( tangent !== undefined ) {

  			tangent.transformDirection( matrix );

  			tangent.needsUpdate = true;

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		return this;

  	}

  	applyQuaternion( q ) {

  		_m1$1.makeRotationFromQuaternion( q );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	rotateX( angle ) {

  		// rotate geometry around world x-axis

  		_m1$1.makeRotationX( angle );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	rotateY( angle ) {

  		// rotate geometry around world y-axis

  		_m1$1.makeRotationY( angle );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	rotateZ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$1.makeRotationZ( angle );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	translate( x, y, z ) {

  		// translate geometry

  		_m1$1.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	scale( x, y, z ) {

  		// scale geometry

  		_m1$1.makeScale( x, y, z );

  		this.applyMatrix4( _m1$1 );

  		return this;

  	}

  	lookAt( vector ) {

  		_obj.lookAt( vector );

  		_obj.updateMatrix();

  		this.applyMatrix4( _obj.matrix );

  		return this;

  	}

  	center() {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset ).negate();

  		this.translate( _offset.x, _offset.y, _offset.z );

  		return this;

  	}

  	setFromPoints( points ) {

  		const positionAttribute = this.getAttribute( 'position' );

  		if ( positionAttribute === undefined ) {

  			const position = [];

  			for ( let i = 0, l = points.length; i < l; i ++ ) {

  				const point = points[ i ];
  				position.push( point.x, point.y, point.z || 0 );

  			}

  			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

  		} else {

  			for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

  				const point = points[ i ];
  				positionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );

  			}

  			if ( points.length > positionAttribute.count ) {

  				console.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );

  			}

  			positionAttribute.needsUpdate = true;

  		}

  		return this;

  	}

  	computeBoundingBox() {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		const position = this.attributes.position;
  		const morphAttributesPosition = this.morphAttributes.position;

  		if ( position && position.isGLBufferAttribute ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );

  			this.boundingBox.set(
  				new Vector3( - Infinity, - Infinity, - Infinity ),
  				new Vector3( + Infinity, + Infinity, + Infinity )
  			);

  			return;

  		}

  		if ( position !== undefined ) {

  			this.boundingBox.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					_box$2.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$8.addVectors( this.boundingBox.min, _box$2.min );
  						this.boundingBox.expandByPoint( _vector$8 );

  						_vector$8.addVectors( this.boundingBox.max, _box$2.max );
  						this.boundingBox.expandByPoint( _vector$8 );

  					} else {

  						this.boundingBox.expandByPoint( _box$2.min );
  						this.boundingBox.expandByPoint( _box$2.max );

  					}

  				}

  			}

  		} else {

  			this.boundingBox.makeEmpty();

  		}

  		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

  		}

  	}

  	computeBoundingSphere() {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		const position = this.attributes.position;
  		const morphAttributesPosition = this.morphAttributes.position;

  		if ( position && position.isGLBufferAttribute ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );

  			this.boundingSphere.set( new Vector3(), Infinity );

  			return;

  		}

  		if ( position ) {

  			// first, find the center of the bounding sphere

  			const center = this.boundingSphere.center;

  			_box$2.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );
  						_box$2.expandByPoint( _vector$8 );

  						_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );
  						_box$2.expandByPoint( _vector$8 );

  					} else {

  						_box$2.expandByPoint( _boxMorphTargets.min );
  						_box$2.expandByPoint( _boxMorphTargets.max );

  					}

  				}

  			}

  			_box$2.getCenter( center );

  			// second, try to find a boundingSphere with a radius smaller than the
  			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

  			let maxRadiusSq = 0;

  			for ( let i = 0, il = position.count; i < il; i ++ ) {

  				_vector$8.fromBufferAttribute( position, i );

  				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

  			}

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					const morphAttribute = morphAttributesPosition[ i ];
  					const morphTargetsRelative = this.morphTargetsRelative;

  					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

  						_vector$8.fromBufferAttribute( morphAttribute, j );

  						if ( morphTargetsRelative ) {

  							_offset.fromBufferAttribute( position, j );
  							_vector$8.add( _offset );

  						}

  						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

  					}

  				}

  			}

  			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

  			if ( isNaN( this.boundingSphere.radius ) ) {

  				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

  			}

  		}

  	}

  	computeTangents() {

  		const index = this.index;
  		const attributes = this.attributes;

  		// based on http://www.terathon.com/code/tangent.html
  		// (per vertex tangents)

  		if ( index === null ||
  			 attributes.position === undefined ||
  			 attributes.normal === undefined ||
  			 attributes.uv === undefined ) {

  			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
  			return;

  		}

  		const positionAttribute = attributes.position;
  		const normalAttribute = attributes.normal;
  		const uvAttribute = attributes.uv;

  		if ( this.hasAttribute( 'tangent' ) === false ) {

  			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );

  		}

  		const tangentAttribute = this.getAttribute( 'tangent' );

  		const tan1 = [], tan2 = [];

  		for ( let i = 0; i < positionAttribute.count; i ++ ) {

  			tan1[ i ] = new Vector3();
  			tan2[ i ] = new Vector3();

  		}

  		const vA = new Vector3(),
  			vB = new Vector3(),
  			vC = new Vector3(),

  			uvA = new Vector2(),
  			uvB = new Vector2(),
  			uvC = new Vector2(),

  			sdir = new Vector3(),
  			tdir = new Vector3();

  		function handleTriangle( a, b, c ) {

  			vA.fromBufferAttribute( positionAttribute, a );
  			vB.fromBufferAttribute( positionAttribute, b );
  			vC.fromBufferAttribute( positionAttribute, c );

  			uvA.fromBufferAttribute( uvAttribute, a );
  			uvB.fromBufferAttribute( uvAttribute, b );
  			uvC.fromBufferAttribute( uvAttribute, c );

  			vB.sub( vA );
  			vC.sub( vA );

  			uvB.sub( uvA );
  			uvC.sub( uvA );

  			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

  			// silently ignore degenerate uv triangles having coincident or colinear vertices

  			if ( ! isFinite( r ) ) return;

  			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
  			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

  			tan1[ a ].add( sdir );
  			tan1[ b ].add( sdir );
  			tan1[ c ].add( sdir );

  			tan2[ a ].add( tdir );
  			tan2[ b ].add( tdir );
  			tan2[ c ].add( tdir );

  		}

  		let groups = this.groups;

  		if ( groups.length === 0 ) {

  			groups = [ {
  				start: 0,
  				count: index.count
  			} ];

  		}

  		for ( let i = 0, il = groups.length; i < il; ++ i ) {

  			const group = groups[ i ];

  			const start = group.start;
  			const count = group.count;

  			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

  				handleTriangle(
  					index.getX( j + 0 ),
  					index.getX( j + 1 ),
  					index.getX( j + 2 )
  				);

  			}

  		}

  		const tmp = new Vector3(), tmp2 = new Vector3();
  		const n = new Vector3(), n2 = new Vector3();

  		function handleVertex( v ) {

  			n.fromBufferAttribute( normalAttribute, v );
  			n2.copy( n );

  			const t = tan1[ v ];

  			// Gram-Schmidt orthogonalize

  			tmp.copy( t );
  			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

  			// Calculate handedness

  			tmp2.crossVectors( n2, t );
  			const test = tmp2.dot( tan2[ v ] );
  			const w = ( test < 0.0 ) ? - 1.0 : 1.0;

  			tangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );

  		}

  		for ( let i = 0, il = groups.length; i < il; ++ i ) {

  			const group = groups[ i ];

  			const start = group.start;
  			const count = group.count;

  			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

  				handleVertex( index.getX( j + 0 ) );
  				handleVertex( index.getX( j + 1 ) );
  				handleVertex( index.getX( j + 2 ) );

  			}

  		}

  	}

  	computeVertexNormals() {

  		const index = this.index;
  		const positionAttribute = this.getAttribute( 'position' );

  		if ( positionAttribute !== undefined ) {

  			let normalAttribute = this.getAttribute( 'normal' );

  			if ( normalAttribute === undefined ) {

  				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
  				this.setAttribute( 'normal', normalAttribute );

  			} else {

  				// reset existing normals to zero

  				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

  					normalAttribute.setXYZ( i, 0, 0, 0 );

  				}

  			}

  			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
  			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
  			const cb = new Vector3(), ab = new Vector3();

  			// indexed elements

  			if ( index ) {

  				for ( let i = 0, il = index.count; i < il; i += 3 ) {

  					const vA = index.getX( i + 0 );
  					const vB = index.getX( i + 1 );
  					const vC = index.getX( i + 2 );

  					pA.fromBufferAttribute( positionAttribute, vA );
  					pB.fromBufferAttribute( positionAttribute, vB );
  					pC.fromBufferAttribute( positionAttribute, vC );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					nA.fromBufferAttribute( normalAttribute, vA );
  					nB.fromBufferAttribute( normalAttribute, vB );
  					nC.fromBufferAttribute( normalAttribute, vC );

  					nA.add( cb );
  					nB.add( cb );
  					nC.add( cb );

  					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
  					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
  					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

  				}

  			} else {

  				// non-indexed elements (unconnected triangle soup)

  				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

  					pA.fromBufferAttribute( positionAttribute, i + 0 );
  					pB.fromBufferAttribute( positionAttribute, i + 1 );
  					pC.fromBufferAttribute( positionAttribute, i + 2 );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

  				}

  			}

  			this.normalizeNormals();

  			normalAttribute.needsUpdate = true;

  		}

  	}

  	normalizeNormals() {

  		const normals = this.attributes.normal;

  		for ( let i = 0, il = normals.count; i < il; i ++ ) {

  			_vector$8.fromBufferAttribute( normals, i );

  			_vector$8.normalize();

  			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

  		}

  	}

  	toNonIndexed() {

  		function convertBufferAttribute( attribute, indices ) {

  			const array = attribute.array;
  			const itemSize = attribute.itemSize;
  			const normalized = attribute.normalized;

  			const array2 = new array.constructor( indices.length * itemSize );

  			let index = 0, index2 = 0;

  			for ( let i = 0, l = indices.length; i < l; i ++ ) {

  				if ( attribute.isInterleavedBufferAttribute ) {

  					index = indices[ i ] * attribute.data.stride + attribute.offset;

  				} else {

  					index = indices[ i ] * itemSize;

  				}

  				for ( let j = 0; j < itemSize; j ++ ) {

  					array2[ index2 ++ ] = array[ index ++ ];

  				}

  			}

  			return new BufferAttribute( array2, itemSize, normalized );

  		}

  		//

  		if ( this.index === null ) {

  			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
  			return this;

  		}

  		const geometry2 = new BufferGeometry();

  		const indices = this.index.array;
  		const attributes = this.attributes;

  		// attributes

  		for ( const name in attributes ) {

  			const attribute = attributes[ name ];

  			const newAttribute = convertBufferAttribute( attribute, indices );

  			geometry2.setAttribute( name, newAttribute );

  		}

  		// morph attributes

  		const morphAttributes = this.morphAttributes;

  		for ( const name in morphAttributes ) {

  			const morphArray = [];
  			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

  				const attribute = morphAttribute[ i ];

  				const newAttribute = convertBufferAttribute( attribute, indices );

  				morphArray.push( newAttribute );

  			}

  			geometry2.morphAttributes[ name ] = morphArray;

  		}

  		geometry2.morphTargetsRelative = this.morphTargetsRelative;

  		// groups

  		const groups = this.groups;

  		for ( let i = 0, l = groups.length; i < l; i ++ ) {

  			const group = groups[ i ];
  			geometry2.addGroup( group.start, group.count, group.materialIndex );

  		}

  		return geometry2;

  	}

  	toJSON() {

  		const data = {
  			metadata: {
  				version: 4.6,
  				type: 'BufferGeometry',
  				generator: 'BufferGeometry.toJSON'
  			}
  		};

  		// standard BufferGeometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;
  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		if ( this.parameters !== undefined ) {

  			const parameters = this.parameters;

  			for ( const key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		// for simplicity the code assumes attributes are not shared across geometries, see #15811

  		data.data = { attributes: {} };

  		const index = this.index;

  		if ( index !== null ) {

  			data.data.index = {
  				type: index.array.constructor.name,
  				array: Array.prototype.slice.call( index.array )
  			};

  		}

  		const attributes = this.attributes;

  		for ( const key in attributes ) {

  			const attribute = attributes[ key ];

  			data.data.attributes[ key ] = attribute.toJSON( data.data );

  		}

  		const morphAttributes = {};
  		let hasMorphAttributes = false;

  		for ( const key in this.morphAttributes ) {

  			const attributeArray = this.morphAttributes[ key ];

  			const array = [];

  			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

  				const attribute = attributeArray[ i ];

  				array.push( attribute.toJSON( data.data ) );

  			}

  			if ( array.length > 0 ) {

  				morphAttributes[ key ] = array;

  				hasMorphAttributes = true;

  			}

  		}

  		if ( hasMorphAttributes ) {

  			data.data.morphAttributes = morphAttributes;
  			data.data.morphTargetsRelative = this.morphTargetsRelative;

  		}

  		const groups = this.groups;

  		if ( groups.length > 0 ) {

  			data.data.groups = JSON.parse( JSON.stringify( groups ) );

  		}

  		const boundingSphere = this.boundingSphere;

  		if ( boundingSphere !== null ) {

  			data.data.boundingSphere = {
  				center: boundingSphere.center.toArray(),
  				radius: boundingSphere.radius
  			};

  		}

  		return data;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	copy( source ) {

  		// reset

  		this.index = null;
  		this.attributes = {};
  		this.morphAttributes = {};
  		this.groups = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// used for storing cloned, shared data

  		const data = {};

  		// name

  		this.name = source.name;

  		// index

  		const index = source.index;

  		if ( index !== null ) {

  			this.setIndex( index.clone( data ) );

  		}

  		// attributes

  		const attributes = source.attributes;

  		for ( const name in attributes ) {

  			const attribute = attributes[ name ];
  			this.setAttribute( name, attribute.clone( data ) );

  		}

  		// morph attributes

  		const morphAttributes = source.morphAttributes;

  		for ( const name in morphAttributes ) {

  			const array = [];
  			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

  				array.push( morphAttribute[ i ].clone( data ) );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		this.morphTargetsRelative = source.morphTargetsRelative;

  		// groups

  		const groups = source.groups;

  		for ( let i = 0, l = groups.length; i < l; i ++ ) {

  			const group = groups[ i ];
  			this.addGroup( group.start, group.count, group.materialIndex );

  		}

  		// bounding box

  		const boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		const boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// draw range

  		this.drawRange.start = source.drawRange.start;
  		this.drawRange.count = source.drawRange.count;

  		// user data

  		this.userData = source.userData;

  		return this;

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  }

  const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
  const _ray$3 = /*@__PURE__*/ new Ray();
  const _sphere$6 = /*@__PURE__*/ new Sphere();
  const _sphereHitAt = /*@__PURE__*/ new Vector3();

  const _vA$1 = /*@__PURE__*/ new Vector3();
  const _vB$1 = /*@__PURE__*/ new Vector3();
  const _vC$1 = /*@__PURE__*/ new Vector3();

  const _tempA = /*@__PURE__*/ new Vector3();
  const _morphA = /*@__PURE__*/ new Vector3();

  const _intersectionPoint = /*@__PURE__*/ new Vector3();
  const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

  class Mesh extends Object3D {

  	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

  		super();

  		this.isMesh = true;

  		this.type = 'Mesh';

  		this.geometry = geometry;
  		this.material = material;

  		this.updateMorphTargets();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		if ( source.morphTargetInfluences !== undefined ) {

  			this.morphTargetInfluences = source.morphTargetInfluences.slice();

  		}

  		if ( source.morphTargetDictionary !== undefined ) {

  			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

  		}

  		this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
  		this.geometry = source.geometry;

  		return this;

  	}

  	updateMorphTargets() {

  		const geometry = this.geometry;

  		const morphAttributes = geometry.morphAttributes;
  		const keys = Object.keys( morphAttributes );

  		if ( keys.length > 0 ) {

  			const morphAttribute = morphAttributes[ keys[ 0 ] ];

  			if ( morphAttribute !== undefined ) {

  				this.morphTargetInfluences = [];
  				this.morphTargetDictionary = {};

  				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  					const name = morphAttribute[ m ].name || String( m );

  					this.morphTargetInfluences.push( 0 );
  					this.morphTargetDictionary[ name ] = m;

  				}

  			}

  		}

  	}

  	getVertexPosition( index, target ) {

  		const geometry = this.geometry;
  		const position = geometry.attributes.position;
  		const morphPosition = geometry.morphAttributes.position;
  		const morphTargetsRelative = geometry.morphTargetsRelative;

  		target.fromBufferAttribute( position, index );

  		const morphInfluences = this.morphTargetInfluences;

  		if ( morphPosition && morphInfluences ) {

  			_morphA.set( 0, 0, 0 );

  			for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

  				const influence = morphInfluences[ i ];
  				const morphAttribute = morphPosition[ i ];

  				if ( influence === 0 ) continue;

  				_tempA.fromBufferAttribute( morphAttribute, index );

  				if ( morphTargetsRelative ) {

  					_morphA.addScaledVector( _tempA, influence );

  				} else {

  					_morphA.addScaledVector( _tempA.sub( target ), influence );

  				}

  			}

  			target.add( _morphA );

  		}

  		return target;

  	}

  	raycast( raycaster, intersects ) {

  		const geometry = this.geometry;
  		const material = this.material;
  		const matrixWorld = this.matrixWorld;

  		if ( material === undefined ) return;

  		// test with bounding sphere in world space

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$6.copy( geometry.boundingSphere );
  		_sphere$6.applyMatrix4( matrixWorld );

  		// check distance from ray origin to bounding sphere

  		_ray$3.copy( raycaster.ray ).recast( raycaster.near );

  		if ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {

  			if ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;

  			if ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

  		}

  		// convert ray to local space of mesh

  		_inverseMatrix$3.copy( matrixWorld ).invert();
  		_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );

  		// test with bounding box in local space

  		if ( geometry.boundingBox !== null ) {

  			if ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;

  		}

  		// test for intersections with geometry

  		this._computeIntersections( raycaster, intersects, _ray$3 );

  	}

  	_computeIntersections( raycaster, intersects, rayLocalSpace ) {

  		let intersection;

  		const geometry = this.geometry;
  		const material = this.material;

  		const index = geometry.index;
  		const position = geometry.attributes.position;
  		const uv = geometry.attributes.uv;
  		const uv1 = geometry.attributes.uv1;
  		const normal = geometry.attributes.normal;
  		const groups = geometry.groups;
  		const drawRange = geometry.drawRange;

  		if ( index !== null ) {

  			// indexed buffer geometry

  			if ( Array.isArray( material ) ) {

  				for ( let i = 0, il = groups.length; i < il; i ++ ) {

  					const group = groups[ i ];
  					const groupMaterial = material[ group.materialIndex ];

  					const start = Math.max( group.start, drawRange.start );
  					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

  					for ( let j = start, jl = end; j < jl; j += 3 ) {

  						const a = index.getX( j );
  						const b = index.getX( j + 1 );
  						const c = index.getX( j + 2 );

  						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
  							intersection.face.materialIndex = group.materialIndex;
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else {

  				const start = Math.max( 0, drawRange.start );
  				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  				for ( let i = start, il = end; i < il; i += 3 ) {

  					const a = index.getX( i );
  					const b = index.getX( i + 1 );
  					const c = index.getX( i + 2 );

  					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  					if ( intersection ) {

  						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
  						intersects.push( intersection );

  					}

  				}

  			}

  		} else if ( position !== undefined ) {

  			// non-indexed buffer geometry

  			if ( Array.isArray( material ) ) {

  				for ( let i = 0, il = groups.length; i < il; i ++ ) {

  					const group = groups[ i ];
  					const groupMaterial = material[ group.materialIndex ];

  					const start = Math.max( group.start, drawRange.start );
  					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

  					for ( let j = start, jl = end; j < jl; j += 3 ) {

  						const a = j;
  						const b = j + 1;
  						const c = j + 2;

  						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
  							intersection.face.materialIndex = group.materialIndex;
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else {

  				const start = Math.max( 0, drawRange.start );
  				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

  				for ( let i = start, il = end; i < il; i += 3 ) {

  					const a = i;
  					const b = i + 1;
  					const c = i + 2;

  					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

  					if ( intersection ) {

  						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
  						intersects.push( intersection );

  					}

  				}

  			}

  		}

  	}

  }

  function checkIntersection$1( object, material, raycaster, ray, pA, pB, pC, point ) {

  	let intersect;

  	if ( material.side === BackSide ) {

  		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

  	} else {

  		intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );

  	}

  	if ( intersect === null ) return null;

  	_intersectionPointWorld.copy( point );
  	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

  	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

  	if ( distance < raycaster.near || distance > raycaster.far ) return null;

  	return {
  		distance: distance,
  		point: _intersectionPointWorld.clone(),
  		object: object
  	};

  }

  function checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

  	object.getVertexPosition( a, _vA$1 );
  	object.getVertexPosition( b, _vB$1 );
  	object.getVertexPosition( c, _vC$1 );

  	const intersection = checkIntersection$1( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

  	if ( intersection ) {

  		const barycoord = new Vector3();
  		Triangle.getBarycoord( _intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord );

  		if ( uv ) {

  			intersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );

  		}

  		if ( uv1 ) {

  			intersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );

  		}

  		if ( normal ) {

  			intersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );

  			if ( intersection.normal.dot( ray.direction ) > 0 ) {

  				intersection.normal.multiplyScalar( - 1 );

  			}

  		}

  		const face = {
  			a: a,
  			b: b,
  			c: c,
  			normal: new Vector3(),
  			materialIndex: 0
  		};

  		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

  		intersection.face = face;
  		intersection.barycoord = barycoord;

  	}

  	return intersection;

  }

  class BoxGeometry extends BufferGeometry {

  	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

  		super();

  		this.type = 'BoxGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		const scope = this;

  		// segments

  		widthSegments = Math.floor( widthSegments );
  		heightSegments = Math.floor( heightSegments );
  		depthSegments = Math.floor( depthSegments );

  		// buffers

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		// helper variables

  		let numberOfVertices = 0;
  		let groupStart = 0;

  		// build each side of the box geometry

  		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
  		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
  		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
  		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
  		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
  		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

  			const segmentWidth = width / gridX;
  			const segmentHeight = height / gridY;

  			const widthHalf = width / 2;
  			const heightHalf = height / 2;
  			const depthHalf = depth / 2;

  			const gridX1 = gridX + 1;
  			const gridY1 = gridY + 1;

  			let vertexCounter = 0;
  			let groupCount = 0;

  			const vector = new Vector3();

  			// generate vertices, normals and uvs

  			for ( let iy = 0; iy < gridY1; iy ++ ) {

  				const y = iy * segmentHeight - heightHalf;

  				for ( let ix = 0; ix < gridX1; ix ++ ) {

  					const x = ix * segmentWidth - widthHalf;

  					// set values to correct vector component

  					vector[ u ] = x * udir;
  					vector[ v ] = y * vdir;
  					vector[ w ] = depthHalf;

  					// now apply vector to vertex buffer

  					vertices.push( vector.x, vector.y, vector.z );

  					// set values to correct vector component

  					vector[ u ] = 0;
  					vector[ v ] = 0;
  					vector[ w ] = depth > 0 ? 1 : - 1;

  					// now apply vector to normal buffer

  					normals.push( vector.x, vector.y, vector.z );

  					// uvs

  					uvs.push( ix / gridX );
  					uvs.push( 1 - ( iy / gridY ) );

  					// counters

  					vertexCounter += 1;

  				}

  			}

  			// indices

  			// 1. you need three indices to draw a single face
  			// 2. a single segment consists of two faces
  			// 3. so we need to generate six (2*3) indices per segment

  			for ( let iy = 0; iy < gridY; iy ++ ) {

  				for ( let ix = 0; ix < gridX; ix ++ ) {

  					const a = numberOfVertices + ix + gridX1 * iy;
  					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
  					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
  					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

  					// faces

  					indices.push( a, b, d );
  					indices.push( b, c, d );

  					// increase counter

  					groupCount += 6;

  				}

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, materialIndex );

  			// calculate new start value for groups

  			groupStart += groupCount;

  			// update total number of vertices

  			numberOfVertices += vertexCounter;

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

  	}

  }

  /**
   * Uniform Utilities
   */

  function cloneUniforms( src ) {

  	const dst = {};

  	for ( const u in src ) {

  		dst[ u ] = {};

  		for ( const p in src[ u ] ) {

  			const property = src[ u ][ p ];

  			if ( property && ( property.isColor ||
  				property.isMatrix3 || property.isMatrix4 ||
  				property.isVector2 || property.isVector3 || property.isVector4 ||
  				property.isTexture || property.isQuaternion ) ) {

  				if ( property.isRenderTargetTexture ) {

  					console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
  					dst[ u ][ p ] = null;

  				} else {

  					dst[ u ][ p ] = property.clone();

  				}

  			} else if ( Array.isArray( property ) ) {

  				dst[ u ][ p ] = property.slice();

  			} else {

  				dst[ u ][ p ] = property;

  			}

  		}

  	}

  	return dst;

  }

  function cloneUniformsGroups( src ) {

  	const dst = [];

  	for ( let u = 0; u < src.length; u ++ ) {

  		dst.push( src[ u ].clone() );

  	}

  	return dst;

  }

  var default_vertex = /* glsl */`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`;

  var default_fragment = /* glsl */`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;

  class ShaderMaterial extends Material {

  	static get type() {

  		return 'ShaderMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isShaderMaterial = true;

  		this.defines = {};
  		this.uniforms = {};
  		this.uniformsGroups = [];

  		this.vertexShader = default_vertex;
  		this.fragmentShader = default_fragment;

  		this.linewidth = 1;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;

  		this.fog = false; // set to use scene fog
  		this.lights = false; // set to use scene lights
  		this.clipping = false; // set to use user-defined clipping planes

  		this.forceSinglePass = true;

  		this.extensions = {
  			clipCullDistance: false, // set to use vertex shader clipping
  			multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID
  		};

  		// When rendered geometry doesn't include these attributes but the material does,
  		// use these default values in WebGL. This avoids errors when buffer data is missing.
  		this.defaultAttributeValues = {
  			'color': [ 1, 1, 1 ],
  			'uv': [ 0, 0 ],
  			'uv1': [ 0, 0 ]
  		};

  		this.index0AttributeName = undefined;
  		this.uniformsNeedUpdate = false;

  		this.glslVersion = null;

  		if ( parameters !== undefined ) {

  			this.setValues( parameters );

  		}

  	}

  	copy( source ) {

  		super.copy( source );

  		this.fragmentShader = source.fragmentShader;
  		this.vertexShader = source.vertexShader;

  		this.uniforms = cloneUniforms( source.uniforms );
  		this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );

  		this.defines = Object.assign( {}, source.defines );

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;

  		this.fog = source.fog;
  		this.lights = source.lights;
  		this.clipping = source.clipping;

  		this.extensions = Object.assign( {}, source.extensions );

  		this.glslVersion = source.glslVersion;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.glslVersion = this.glslVersion;
  		data.uniforms = {};

  		for ( const name in this.uniforms ) {

  			const uniform = this.uniforms[ name ];
  			const value = uniform.value;

  			if ( value && value.isTexture ) {

  				data.uniforms[ name ] = {
  					type: 't',
  					value: value.toJSON( meta ).uuid
  				};

  			} else if ( value && value.isColor ) {

  				data.uniforms[ name ] = {
  					type: 'c',
  					value: value.getHex()
  				};

  			} else if ( value && value.isVector2 ) {

  				data.uniforms[ name ] = {
  					type: 'v2',
  					value: value.toArray()
  				};

  			} else if ( value && value.isVector3 ) {

  				data.uniforms[ name ] = {
  					type: 'v3',
  					value: value.toArray()
  				};

  			} else if ( value && value.isVector4 ) {

  				data.uniforms[ name ] = {
  					type: 'v4',
  					value: value.toArray()
  				};

  			} else if ( value && value.isMatrix3 ) {

  				data.uniforms[ name ] = {
  					type: 'm3',
  					value: value.toArray()
  				};

  			} else if ( value && value.isMatrix4 ) {

  				data.uniforms[ name ] = {
  					type: 'm4',
  					value: value.toArray()
  				};

  			} else {

  				data.uniforms[ name ] = {
  					value: value
  				};

  				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

  			}

  		}

  		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

  		data.vertexShader = this.vertexShader;
  		data.fragmentShader = this.fragmentShader;

  		data.lights = this.lights;
  		data.clipping = this.clipping;

  		const extensions = {};

  		for ( const key in this.extensions ) {

  			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

  		}

  		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

  		return data;

  	}

  }

  class Camera extends Object3D {

  	constructor() {

  		super();

  		this.isCamera = true;

  		this.type = 'Camera';

  		this.matrixWorldInverse = new Matrix4();

  		this.projectionMatrix = new Matrix4();
  		this.projectionMatrixInverse = new Matrix4();

  		this.coordinateSystem = WebGLCoordinateSystem;

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.matrixWorldInverse.copy( source.matrixWorldInverse );

  		this.projectionMatrix.copy( source.projectionMatrix );
  		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

  		this.coordinateSystem = source.coordinateSystem;

  		return this;

  	}

  	getWorldDirection( target ) {

  		return super.getWorldDirection( target ).negate();

  	}

  	updateMatrixWorld( force ) {

  		super.updateMatrixWorld( force );

  		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

  	}

  	updateWorldMatrix( updateParents, updateChildren ) {

  		super.updateWorldMatrix( updateParents, updateChildren );

  		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  const _v3$1 = /*@__PURE__*/ new Vector3();
  const _minTarget = /*@__PURE__*/ new Vector2();
  const _maxTarget = /*@__PURE__*/ new Vector2();


  class PerspectiveCamera extends Camera {

  	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

  		super();

  		this.isPerspectiveCamera = true;

  		this.type = 'PerspectiveCamera';

  		this.fov = fov;
  		this.zoom = 1;

  		this.near = near;
  		this.far = far;
  		this.focus = 10;

  		this.aspect = aspect;
  		this.view = null;

  		this.filmGauge = 35;	// width of the film (default in millimeters)
  		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

  		this.updateProjectionMatrix();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.fov = source.fov;
  		this.zoom = source.zoom;

  		this.near = source.near;
  		this.far = source.far;
  		this.focus = source.focus;

  		this.aspect = source.aspect;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		this.filmGauge = source.filmGauge;
  		this.filmOffset = source.filmOffset;

  		return this;

  	}

  	/**
  	 * Sets the FOV by focal length in respect to the current .filmGauge.
  	 *
  	 * The default film gauge is 35, so that the focal length can be specified for
  	 * a 35mm (full frame) camera.
  	 *
  	 * Values for focal length and film gauge must have the same unit.
  	 */
  	setFocalLength( focalLength ) {

  		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
  		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

  		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
  		this.updateProjectionMatrix();

  	}

  	/**
  	 * Calculates the focal length from the current .fov and .filmGauge.
  	 */
  	getFocalLength() {

  		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

  		return 0.5 * this.getFilmHeight() / vExtentSlope;

  	}

  	getEffectiveFOV() {

  		return RAD2DEG * 2 * Math.atan(
  			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

  	}

  	getFilmWidth() {

  		// film not completely covered in portrait format (aspect < 1)
  		return this.filmGauge * Math.min( this.aspect, 1 );

  	}

  	getFilmHeight() {

  		// film not completely covered in landscape format (aspect > 1)
  		return this.filmGauge / Math.max( this.aspect, 1 );

  	}

  	/**
  	 * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
  	 * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
  	 */
  	getViewBounds( distance, minTarget, maxTarget ) {

  		_v3$1.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

  		minTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

  		_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

  		maxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

  	}

  	/**
  	 * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
  	 * Copies the result into the target Vector2, where x is width and y is height.
  	 */
  	getViewSize( distance, target ) {

  		this.getViewBounds( distance, _minTarget, _maxTarget );

  		return target.subVectors( _maxTarget, _minTarget );

  	}

  	/**
  	 * Sets an offset in a larger frustum. This is useful for multi-window or
  	 * multi-monitor/multi-machine setups.
  	 *
  	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
  	 * the monitors are in grid like this
  	 *
  	 *   +---+---+---+
  	 *   | A | B | C |
  	 *   +---+---+---+
  	 *   | D | E | F |
  	 *   +---+---+---+
  	 *
  	 * then for each monitor you would call it like this
  	 *
  	 *   const w = 1920;
  	 *   const h = 1080;
  	 *   const fullWidth = w * 3;
  	 *   const fullHeight = h * 2;
  	 *
  	 *   --A--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
  	 *   --B--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
  	 *   --C--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
  	 *   --D--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
  	 *   --E--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
  	 *   --F--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
  	 *
  	 *   Note there is no reason monitors have to be the same size or in a grid.
  	 */
  	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

  		this.aspect = fullWidth / fullHeight;

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	}

  	clearViewOffset() {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	}

  	updateProjectionMatrix() {

  		const near = this.near;
  		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
  		let height = 2 * top;
  		let width = this.aspect * height;
  		let left = - 0.5 * width;
  		const view = this.view;

  		if ( this.view !== null && this.view.enabled ) {

  			const fullWidth = view.fullWidth,
  				fullHeight = view.fullHeight;

  			left += view.offsetX * width / fullWidth;
  			top -= view.offsetY * height / fullHeight;
  			width *= view.width / fullWidth;
  			height *= view.height / fullHeight;

  		}

  		const skew = this.filmOffset;
  		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

  		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

  		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.fov = this.fov;
  		data.object.zoom = this.zoom;

  		data.object.near = this.near;
  		data.object.far = this.far;
  		data.object.focus = this.focus;

  		data.object.aspect = this.aspect;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		data.object.filmGauge = this.filmGauge;
  		data.object.filmOffset = this.filmOffset;

  		return data;

  	}

  }

  const fov = - 90; // negative fov is not an error
  const aspect = 1;

  class CubeCamera extends Object3D {

  	constructor( near, far, renderTarget ) {

  		super();

  		this.type = 'CubeCamera';

  		this.renderTarget = renderTarget;
  		this.coordinateSystem = null;
  		this.activeMipmapLevel = 0;

  		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
  		cameraPX.layers = this.layers;
  		this.add( cameraPX );

  		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
  		cameraNX.layers = this.layers;
  		this.add( cameraNX );

  		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
  		cameraPY.layers = this.layers;
  		this.add( cameraPY );

  		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
  		cameraNY.layers = this.layers;
  		this.add( cameraNY );

  		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
  		cameraPZ.layers = this.layers;
  		this.add( cameraPZ );

  		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
  		cameraNZ.layers = this.layers;
  		this.add( cameraNZ );

  	}

  	updateCoordinateSystem() {

  		const coordinateSystem = this.coordinateSystem;

  		const cameras = this.children.concat();

  		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

  		for ( const camera of cameras ) this.remove( camera );

  		if ( coordinateSystem === WebGLCoordinateSystem ) {

  			cameraPX.up.set( 0, 1, 0 );
  			cameraPX.lookAt( 1, 0, 0 );

  			cameraNX.up.set( 0, 1, 0 );
  			cameraNX.lookAt( - 1, 0, 0 );

  			cameraPY.up.set( 0, 0, - 1 );
  			cameraPY.lookAt( 0, 1, 0 );

  			cameraNY.up.set( 0, 0, 1 );
  			cameraNY.lookAt( 0, - 1, 0 );

  			cameraPZ.up.set( 0, 1, 0 );
  			cameraPZ.lookAt( 0, 0, 1 );

  			cameraNZ.up.set( 0, 1, 0 );
  			cameraNZ.lookAt( 0, 0, - 1 );

  		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

  			cameraPX.up.set( 0, - 1, 0 );
  			cameraPX.lookAt( - 1, 0, 0 );

  			cameraNX.up.set( 0, - 1, 0 );
  			cameraNX.lookAt( 1, 0, 0 );

  			cameraPY.up.set( 0, 0, 1 );
  			cameraPY.lookAt( 0, 1, 0 );

  			cameraNY.up.set( 0, 0, - 1 );
  			cameraNY.lookAt( 0, - 1, 0 );

  			cameraPZ.up.set( 0, - 1, 0 );
  			cameraPZ.lookAt( 0, 0, 1 );

  			cameraNZ.up.set( 0, - 1, 0 );
  			cameraNZ.lookAt( 0, 0, - 1 );

  		} else {

  			throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		for ( const camera of cameras ) {

  			this.add( camera );

  			camera.updateMatrixWorld();

  		}

  	}

  	update( renderer, scene ) {

  		if ( this.parent === null ) this.updateMatrixWorld();

  		const { renderTarget, activeMipmapLevel } = this;

  		if ( this.coordinateSystem !== renderer.coordinateSystem ) {

  			this.coordinateSystem = renderer.coordinateSystem;

  			this.updateCoordinateSystem();

  		}

  		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

  		const currentRenderTarget = renderer.getRenderTarget();
  		const currentActiveCubeFace = renderer.getActiveCubeFace();
  		const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();

  		const currentXrEnabled = renderer.xr.enabled;

  		renderer.xr.enabled = false;

  		const generateMipmaps = renderTarget.texture.generateMipmaps;

  		renderTarget.texture.generateMipmaps = false;

  		renderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );
  		renderer.render( scene, cameraPX );

  		renderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );
  		renderer.render( scene, cameraNX );

  		renderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );
  		renderer.render( scene, cameraPY );

  		renderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );
  		renderer.render( scene, cameraNY );

  		renderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );
  		renderer.render( scene, cameraPZ );

  		// mipmaps are generated during the last call of render()
  		// at this point, all sides of the cube render target are defined

  		renderTarget.texture.generateMipmaps = generateMipmaps;

  		renderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );
  		renderer.render( scene, cameraNZ );

  		renderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );

  		renderer.xr.enabled = currentXrEnabled;

  		renderTarget.texture.needsPMREMUpdate = true;

  	}

  }

  class CubeTexture extends Texture {

  	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

  		images = images !== undefined ? images : [];
  		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

  		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

  		this.isCubeTexture = true;

  		this.flipY = false;

  	}

  	get images() {

  		return this.image;

  	}

  	set images( value ) {

  		this.image = value;

  	}

  }

  class WebGLCubeRenderTarget extends WebGLRenderTarget {

  	constructor( size = 1, options = {} ) {

  		super( size, size, options );

  		this.isWebGLCubeRenderTarget = true;

  		const image = { width: size, height: size, depth: 1 };
  		const images = [ image, image, image, image, image, image ];

  		this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

  		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
  		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
  		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

  		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
  		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
  		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

  		this.texture.isRenderTargetTexture = true;

  		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

  	}

  	fromEquirectangularTexture( renderer, texture ) {

  		this.texture.type = texture.type;
  		this.texture.colorSpace = texture.colorSpace;

  		this.texture.generateMipmaps = texture.generateMipmaps;
  		this.texture.minFilter = texture.minFilter;
  		this.texture.magFilter = texture.magFilter;

  		const shader = {

  			uniforms: {
  				tEquirect: { value: null },
  			},

  			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

  			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
  		};

  		const geometry = new BoxGeometry( 5, 5, 5 );

  		const material = new ShaderMaterial( {

  			name: 'CubemapFromEquirect',

  			uniforms: cloneUniforms( shader.uniforms ),
  			vertexShader: shader.vertexShader,
  			fragmentShader: shader.fragmentShader,
  			side: BackSide,
  			blending: NoBlending

  		} );

  		material.uniforms.tEquirect.value = texture;

  		const mesh = new Mesh( geometry, material );

  		const currentMinFilter = texture.minFilter;

  		// Avoid blurred poles
  		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

  		const camera = new CubeCamera( 1, 10, this );
  		camera.update( renderer, mesh );

  		texture.minFilter = currentMinFilter;

  		mesh.geometry.dispose();
  		mesh.material.dispose();

  		return this;

  	}

  	clear( renderer, color, depth, stencil ) {

  		const currentRenderTarget = renderer.getRenderTarget();

  		for ( let i = 0; i < 6; i ++ ) {

  			renderer.setRenderTarget( this, i );

  			renderer.clear( color, depth, stencil );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  	}

  }

  class Scene extends Object3D {

  	constructor() {

  		super();

  		this.isScene = true;

  		this.type = 'Scene';

  		this.background = null;
  		this.environment = null;
  		this.fog = null;

  		this.backgroundBlurriness = 0;
  		this.backgroundIntensity = 1;
  		this.backgroundRotation = new Euler();

  		this.environmentIntensity = 1;
  		this.environmentRotation = new Euler();

  		this.overrideMaterial = null;

  		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

  		}

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		if ( source.background !== null ) this.background = source.background.clone();
  		if ( source.environment !== null ) this.environment = source.environment.clone();
  		if ( source.fog !== null ) this.fog = source.fog.clone();

  		this.backgroundBlurriness = source.backgroundBlurriness;
  		this.backgroundIntensity = source.backgroundIntensity;
  		this.backgroundRotation.copy( source.backgroundRotation );

  		this.environmentIntensity = source.environmentIntensity;
  		this.environmentRotation.copy( source.environmentRotation );

  		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

  		if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
  		if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;
  		data.object.backgroundRotation = this.backgroundRotation.toArray();

  		if ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;
  		data.object.environmentRotation = this.environmentRotation.toArray();

  		return data;

  	}

  }

  class InterleavedBuffer {

  	constructor( array, stride ) {

  		this.isInterleavedBuffer = true;

  		this.array = array;
  		this.stride = stride;
  		this.count = array !== undefined ? array.length / stride : 0;

  		this.usage = StaticDrawUsage;
  		this.updateRanges = [];

  		this.version = 0;

  		this.uuid = generateUUID();

  	}

  	onUploadCallback() {}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	setUsage( value ) {

  		this.usage = value;

  		return this;

  	}

  	addUpdateRange( start, count ) {

  		this.updateRanges.push( { start, count } );

  	}

  	clearUpdateRanges() {

  		this.updateRanges.length = 0;

  	}

  	copy( source ) {

  		this.array = new source.array.constructor( source.array );
  		this.count = source.count;
  		this.stride = source.stride;
  		this.usage = source.usage;

  		return this;

  	}

  	copyAt( index1, attribute, index2 ) {

  		index1 *= this.stride;
  		index2 *= attribute.stride;

  		for ( let i = 0, l = this.stride; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	}

  	set( value, offset = 0 ) {

  		this.array.set( value, offset );

  		return this;

  	}

  	clone( data ) {

  		if ( data.arrayBuffers === undefined ) {

  			data.arrayBuffers = {};

  		}

  		if ( this.array.buffer._uuid === undefined ) {

  			this.array.buffer._uuid = generateUUID();

  		}

  		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

  			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

  		}

  		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

  		const ib = new this.constructor( array, this.stride );
  		ib.setUsage( this.usage );

  		return ib;

  	}

  	onUpload( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	}

  	toJSON( data ) {

  		if ( data.arrayBuffers === undefined ) {

  			data.arrayBuffers = {};

  		}

  		// generate UUID for array buffer if necessary

  		if ( this.array.buffer._uuid === undefined ) {

  			this.array.buffer._uuid = generateUUID();

  		}

  		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

  			data.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );

  		}

  		//

  		return {
  			uuid: this.uuid,
  			buffer: this.array.buffer._uuid,
  			type: this.array.constructor.name,
  			stride: this.stride
  		};

  	}

  }

  const _vector$7 = /*@__PURE__*/ new Vector3();

  class InterleavedBufferAttribute {

  	constructor( interleavedBuffer, itemSize, offset, normalized = false ) {

  		this.isInterleavedBufferAttribute = true;

  		this.name = '';

  		this.data = interleavedBuffer;
  		this.itemSize = itemSize;
  		this.offset = offset;

  		this.normalized = normalized;

  	}

  	get count() {

  		return this.data.count;

  	}

  	get array() {

  		return this.data.array;

  	}

  	set needsUpdate( value ) {

  		this.data.needsUpdate = value;

  	}

  	applyMatrix4( m ) {

  		for ( let i = 0, l = this.data.count; i < l; i ++ ) {

  			_vector$7.fromBufferAttribute( this, i );

  			_vector$7.applyMatrix4( m );

  			this.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

  		}

  		return this;

  	}

  	applyNormalMatrix( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$7.fromBufferAttribute( this, i );

  			_vector$7.applyNormalMatrix( m );

  			this.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

  		}

  		return this;

  	}

  	transformDirection( m ) {

  		for ( let i = 0, l = this.count; i < l; i ++ ) {

  			_vector$7.fromBufferAttribute( this, i );

  			_vector$7.transformDirection( m );

  			this.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

  		}

  		return this;

  	}

  	getComponent( index, component ) {

  		let value = this.array[ index * this.data.stride + this.offset + component ];

  		if ( this.normalized ) value = denormalize( value, this.array );

  		return value;

  	}

  	setComponent( index, component, value ) {

  		if ( this.normalized ) value = normalize$1( value, this.array );

  		this.data.array[ index * this.data.stride + this.offset + component ] = value;

  		return this;

  	}

  	setX( index, x ) {

  		if ( this.normalized ) x = normalize$1( x, this.array );

  		this.data.array[ index * this.data.stride + this.offset ] = x;

  		return this;

  	}

  	setY( index, y ) {

  		if ( this.normalized ) y = normalize$1( y, this.array );

  		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

  		return this;

  	}

  	setZ( index, z ) {

  		if ( this.normalized ) z = normalize$1( z, this.array );

  		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

  		return this;

  	}

  	setW( index, w ) {

  		if ( this.normalized ) w = normalize$1( w, this.array );

  		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

  		return this;

  	}

  	getX( index ) {

  		let x = this.data.array[ index * this.data.stride + this.offset ];

  		if ( this.normalized ) x = denormalize( x, this.array );

  		return x;

  	}

  	getY( index ) {

  		let y = this.data.array[ index * this.data.stride + this.offset + 1 ];

  		if ( this.normalized ) y = denormalize( y, this.array );

  		return y;

  	}

  	getZ( index ) {

  		let z = this.data.array[ index * this.data.stride + this.offset + 2 ];

  		if ( this.normalized ) z = denormalize( z, this.array );

  		return z;

  	}

  	getW( index ) {

  		let w = this.data.array[ index * this.data.stride + this.offset + 3 ];

  		if ( this.normalized ) w = denormalize( w, this.array );

  		return w;

  	}

  	setXY( index, x, y ) {

  		index = index * this.data.stride + this.offset;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );

  		}

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;

  		return this;

  	}

  	setXYZ( index, x, y, z ) {

  		index = index * this.data.stride + this.offset;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );

  		}

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;

  		return this;

  	}

  	setXYZW( index, x, y, z, w ) {

  		index = index * this.data.stride + this.offset;

  		if ( this.normalized ) {

  			x = normalize$1( x, this.array );
  			y = normalize$1( y, this.array );
  			z = normalize$1( z, this.array );
  			w = normalize$1( w, this.array );

  		}

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;
  		this.data.array[ index + 3 ] = w;

  		return this;

  	}

  	clone( data ) {

  		if ( data === undefined ) {

  			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );

  			const array = [];

  			for ( let i = 0; i < this.count; i ++ ) {

  				const index = i * this.data.stride + this.offset;

  				for ( let j = 0; j < this.itemSize; j ++ ) {

  					array.push( this.data.array[ index + j ] );

  				}

  			}

  			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

  		} else {

  			if ( data.interleavedBuffers === undefined ) {

  				data.interleavedBuffers = {};

  			}

  			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

  				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

  			}

  			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

  		}

  	}

  	toJSON( data ) {

  		if ( data === undefined ) {

  			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );

  			const array = [];

  			for ( let i = 0; i < this.count; i ++ ) {

  				const index = i * this.data.stride + this.offset;

  				for ( let j = 0; j < this.itemSize; j ++ ) {

  					array.push( this.data.array[ index + j ] );

  				}

  			}

  			// de-interleave data and save it as an ordinary buffer attribute for now

  			return {
  				itemSize: this.itemSize,
  				type: this.array.constructor.name,
  				array: array,
  				normalized: this.normalized
  			};

  		} else {

  			// save as true interleaved attribute

  			if ( data.interleavedBuffers === undefined ) {

  				data.interleavedBuffers = {};

  			}

  			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

  				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

  			}

  			return {
  				isInterleavedBufferAttribute: true,
  				itemSize: this.itemSize,
  				data: this.data.uuid,
  				offset: this.offset,
  				normalized: this.normalized
  			};

  		}

  	}

  }

  class SpriteMaterial extends Material {

  	static get type() {

  		return 'SpriteMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isSpriteMaterial = true;

  		this.color = new Color( 0xffffff );

  		this.map = null;

  		this.alphaMap = null;

  		this.rotation = 0;

  		this.sizeAttenuation = true;

  		this.transparent = true;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.alphaMap = source.alphaMap;

  		this.rotation = source.rotation;

  		this.sizeAttenuation = source.sizeAttenuation;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class DataTexture extends Texture {

  	constructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {

  		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

  		this.isDataTexture = true;

  		this.image = { data: data, width: width, height: height };

  		this.generateMipmaps = false;
  		this.flipY = false;
  		this.unpackAlignment = 1;

  	}

  }

  class InstancedBufferAttribute extends BufferAttribute {

  	constructor( array, itemSize, normalized, meshPerAttribute = 1 ) {

  		super( array, itemSize, normalized );

  		this.isInstancedBufferAttribute = true;

  		this.meshPerAttribute = meshPerAttribute;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	}

  	toJSON() {

  		const data = super.toJSON();

  		data.meshPerAttribute = this.meshPerAttribute;

  		data.isInstancedBufferAttribute = true;

  		return data;

  	}

  }

  const _vector1 = /*@__PURE__*/ new Vector3();
  const _vector2 = /*@__PURE__*/ new Vector3();
  const _normalMatrix = /*@__PURE__*/ new Matrix3();

  class Plane {

  	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

  		this.isPlane = true;

  		// normal is assumed to be normalized

  		this.normal = normal;
  		this.constant = constant;

  	}

  	set( normal, constant ) {

  		this.normal.copy( normal );
  		this.constant = constant;

  		return this;

  	}

  	setComponents( x, y, z, w ) {

  		this.normal.set( x, y, z );
  		this.constant = w;

  		return this;

  	}

  	setFromNormalAndCoplanarPoint( normal, point ) {

  		this.normal.copy( normal );
  		this.constant = - point.dot( this.normal );

  		return this;

  	}

  	setFromCoplanarPoints( a, b, c ) {

  		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

  		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

  		this.setFromNormalAndCoplanarPoint( normal, a );

  		return this;

  	}

  	copy( plane ) {

  		this.normal.copy( plane.normal );
  		this.constant = plane.constant;

  		return this;

  	}

  	normalize() {

  		// Note: will lead to a divide by zero if the plane is invalid.

  		const inverseNormalLength = 1.0 / this.normal.length();
  		this.normal.multiplyScalar( inverseNormalLength );
  		this.constant *= inverseNormalLength;

  		return this;

  	}

  	negate() {

  		this.constant *= - 1;
  		this.normal.negate();

  		return this;

  	}

  	distanceToPoint( point ) {

  		return this.normal.dot( point ) + this.constant;

  	}

  	distanceToSphere( sphere ) {

  		return this.distanceToPoint( sphere.center ) - sphere.radius;

  	}

  	projectPoint( point, target ) {

  		return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

  	}

  	intersectLine( line, target ) {

  		const direction = line.delta( _vector1 );

  		const denominator = this.normal.dot( direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( this.distanceToPoint( line.start ) === 0 ) {

  				return target.copy( line.start );

  			}

  			// Unsure if this is the correct method to handle this case.
  			return null;

  		}

  		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

  		if ( t < 0 || t > 1 ) {

  			return null;

  		}

  		return target.copy( line.start ).addScaledVector( direction, t );

  	}

  	intersectsLine( line ) {

  		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

  		const startSign = this.distanceToPoint( line.start );
  		const endSign = this.distanceToPoint( line.end );

  		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  	}

  	intersectsBox( box ) {

  		return box.intersectsPlane( this );

  	}

  	intersectsSphere( sphere ) {

  		return sphere.intersectsPlane( this );

  	}

  	coplanarPoint( target ) {

  		return target.copy( this.normal ).multiplyScalar( - this.constant );

  	}

  	applyMatrix4( matrix, optionalNormalMatrix ) {

  		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

  		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

  		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

  		this.constant = - referencePoint.dot( normal );

  		return this;

  	}

  	translate( offset ) {

  		this.constant -= offset.dot( this.normal );

  		return this;

  	}

  	equals( plane ) {

  		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  const _sphere$3 = /*@__PURE__*/ new Sphere();
  const _vector$6 = /*@__PURE__*/ new Vector3();

  class Frustum {

  	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

  		this.planes = [ p0, p1, p2, p3, p4, p5 ];

  	}

  	set( p0, p1, p2, p3, p4, p5 ) {

  		const planes = this.planes;

  		planes[ 0 ].copy( p0 );
  		planes[ 1 ].copy( p1 );
  		planes[ 2 ].copy( p2 );
  		planes[ 3 ].copy( p3 );
  		planes[ 4 ].copy( p4 );
  		planes[ 5 ].copy( p5 );

  		return this;

  	}

  	copy( frustum ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			planes[ i ].copy( frustum.planes[ i ] );

  		}

  		return this;

  	}

  	setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {

  		const planes = this.planes;
  		const me = m.elements;
  		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
  		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
  		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
  		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

  		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
  		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
  		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
  		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
  		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

  		if ( coordinateSystem === WebGLCoordinateSystem ) {

  			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

  		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

  			planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

  		} else {

  			throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

  		}

  		return this;

  	}

  	intersectsObject( object ) {

  		if ( object.boundingSphere !== undefined ) {

  			if ( object.boundingSphere === null ) object.computeBoundingSphere();

  			_sphere$3.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

  		} else {

  			const geometry = object.geometry;

  			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  			_sphere$3.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

  		}

  		return this.intersectsSphere( _sphere$3 );

  	}

  	intersectsSprite( sprite ) {

  		_sphere$3.center.set( 0, 0, 0 );
  		_sphere$3.radius = 0.7071067811865476;
  		_sphere$3.applyMatrix4( sprite.matrixWorld );

  		return this.intersectsSphere( _sphere$3 );

  	}

  	intersectsSphere( sphere ) {

  		const planes = this.planes;
  		const center = sphere.center;
  		const negRadius = - sphere.radius;

  		for ( let i = 0; i < 6; i ++ ) {

  			const distance = planes[ i ].distanceToPoint( center );

  			if ( distance < negRadius ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	intersectsBox( box ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			const plane = planes[ i ];

  			// corner at max distance

  			_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
  			_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
  			_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;

  			if ( plane.distanceToPoint( _vector$6 ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	containsPoint( point ) {

  		const planes = this.planes;

  		for ( let i = 0; i < 6; i ++ ) {

  			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  }

  class LineBasicMaterial extends Material {

  	static get type() {

  		return 'LineBasicMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isLineBasicMaterial = true;

  		this.color = new Color( 0xffffff );

  		this.map = null;

  		this.linewidth = 1;
  		this.linecap = 'round';
  		this.linejoin = 'round';

  		this.fog = true;

  		this.setValues( parameters );

  	}


  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.linewidth = source.linewidth;
  		this.linecap = source.linecap;
  		this.linejoin = source.linejoin;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class PointsMaterial extends Material {

  	static get type() {

  		return 'PointsMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isPointsMaterial = true;

  		this.color = new Color( 0xffffff );

  		this.map = null;

  		this.alphaMap = null;

  		this.size = 1;
  		this.sizeAttenuation = true;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.alphaMap = source.alphaMap;

  		this.size = source.size;
  		this.sizeAttenuation = source.sizeAttenuation;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class FramebufferTexture extends Texture {

  	constructor( width, height ) {

  		super( { width, height } );

  		this.isFramebufferTexture = true;

  		this.magFilter = NearestFilter;
  		this.minFilter = NearestFilter;

  		this.generateMipmaps = false;

  		this.needsUpdate = true;

  	}

  }

  class DepthTexture extends Texture {

  	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat ) {

  		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

  			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

  		}

  		if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
  		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

  		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  		this.isDepthTexture = true;

  		this.image = { width: width, height: height };

  		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  		this.flipY = false;
  		this.generateMipmaps = false;

  		this.compareFunction = null;

  	}


  	copy( source ) {

  		super.copy( source );

  		this.compareFunction = source.compareFunction;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

  		return data;

  	}

  }

  class SphereGeometry extends BufferGeometry {

  	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {

  		super();

  		this.type = 'SphereGeometry';

  		this.parameters = {
  			radius: radius,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			phiStart: phiStart,
  			phiLength: phiLength,
  			thetaStart: thetaStart,
  			thetaLength: thetaLength
  		};

  		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
  		heightSegments = Math.max( 2, Math.floor( heightSegments ) );

  		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

  		let index = 0;
  		const grid = [];

  		const vertex = new Vector3();
  		const normal = new Vector3();

  		// buffers

  		const indices = [];
  		const vertices = [];
  		const normals = [];
  		const uvs = [];

  		// generate vertices, normals and uvs

  		for ( let iy = 0; iy <= heightSegments; iy ++ ) {

  			const verticesRow = [];

  			const v = iy / heightSegments;

  			// special case for the poles

  			let uOffset = 0;

  			if ( iy === 0 && thetaStart === 0 ) {

  				uOffset = 0.5 / widthSegments;

  			} else if ( iy === heightSegments && thetaEnd === Math.PI ) {

  				uOffset = - 0.5 / widthSegments;

  			}

  			for ( let ix = 0; ix <= widthSegments; ix ++ ) {

  				const u = ix / widthSegments;

  				// vertex

  				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
  				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
  				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normal.copy( vertex ).normalize();
  				normals.push( normal.x, normal.y, normal.z );

  				// uv

  				uvs.push( u + uOffset, 1 - v );

  				verticesRow.push( index ++ );

  			}

  			grid.push( verticesRow );

  		}

  		// indices

  		for ( let iy = 0; iy < heightSegments; iy ++ ) {

  			for ( let ix = 0; ix < widthSegments; ix ++ ) {

  				const a = grid[ iy ][ ix + 1 ];
  				const b = grid[ iy ][ ix ];
  				const c = grid[ iy + 1 ][ ix ];
  				const d = grid[ iy + 1 ][ ix + 1 ];

  				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
  				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

  			}

  		}

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.parameters = Object.assign( {}, source.parameters );

  		return this;

  	}

  	static fromJSON( data ) {

  		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );

  	}

  }

  class ShadowMaterial extends Material {

  	static get type() {

  		return 'ShadowMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isShadowMaterial = true;

  		this.color = new Color( 0x000000 );
  		this.transparent = true;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.fog = source.fog;

  		return this;

  	}

  }

  class MeshStandardMaterial extends Material {

  	static get type() {

  		return 'MeshStandardMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshStandardMaterial = true;

  		this.defines = { 'STANDARD': '' };

  		this.color = new Color( 0xffffff ); // diffuse
  		this.roughness = 1.0;
  		this.metalness = 0.0;

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.emissive = new Color( 0x000000 );
  		this.emissiveIntensity = 1.0;
  		this.emissiveMap = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.roughnessMap = null;

  		this.metalnessMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler();
  		this.envMapIntensity = 1.0;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.flatShading = false;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.defines = { 'STANDARD': '' };

  		this.color.copy( source.color );
  		this.roughness = source.roughness;
  		this.metalness = source.metalness;

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.emissive.copy( source.emissive );
  		this.emissiveMap = source.emissiveMap;
  		this.emissiveIntensity = source.emissiveIntensity;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.roughnessMap = source.roughnessMap;

  		this.metalnessMap = source.metalnessMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.envMapIntensity = source.envMapIntensity;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.flatShading = source.flatShading;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class MeshPhysicalMaterial extends MeshStandardMaterial {

  	static get type() {

  		return 'MeshPhysicalMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshPhysicalMaterial = true;

  		this.defines = {

  			'STANDARD': '',
  			'PHYSICAL': ''

  		};

  		this.anisotropyRotation = 0;
  		this.anisotropyMap = null;

  		this.clearcoatMap = null;
  		this.clearcoatRoughness = 0.0;
  		this.clearcoatRoughnessMap = null;
  		this.clearcoatNormalScale = new Vector2( 1, 1 );
  		this.clearcoatNormalMap = null;

  		this.ior = 1.5;

  		Object.defineProperty( this, 'reflectivity', {
  			get: function () {

  				return ( clamp$1( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );

  			},
  			set: function ( reflectivity ) {

  				this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );

  			}
  		} );

  		this.iridescenceMap = null;
  		this.iridescenceIOR = 1.3;
  		this.iridescenceThicknessRange = [ 100, 400 ];
  		this.iridescenceThicknessMap = null;

  		this.sheenColor = new Color( 0x000000 );
  		this.sheenColorMap = null;
  		this.sheenRoughness = 1.0;
  		this.sheenRoughnessMap = null;

  		this.transmissionMap = null;

  		this.thickness = 0;
  		this.thicknessMap = null;
  		this.attenuationDistance = Infinity;
  		this.attenuationColor = new Color( 1, 1, 1 );

  		this.specularIntensity = 1.0;
  		this.specularIntensityMap = null;
  		this.specularColor = new Color( 1, 1, 1 );
  		this.specularColorMap = null;

  		this._anisotropy = 0;
  		this._clearcoat = 0;
  		this._dispersion = 0;
  		this._iridescence = 0;
  		this._sheen = 0.0;
  		this._transmission = 0;

  		this.setValues( parameters );

  	}

  	get anisotropy() {

  		return this._anisotropy;

  	}

  	set anisotropy( value ) {

  		if ( this._anisotropy > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._anisotropy = value;

  	}

  	get clearcoat() {

  		return this._clearcoat;

  	}

  	set clearcoat( value ) {

  		if ( this._clearcoat > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._clearcoat = value;

  	}

  	get iridescence() {

  		return this._iridescence;

  	}

  	set iridescence( value ) {

  		if ( this._iridescence > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._iridescence = value;

  	}

  	get dispersion() {

  		return this._dispersion;

  	}

  	set dispersion( value ) {

  		if ( this._dispersion > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._dispersion = value;

  	}

  	get sheen() {

  		return this._sheen;

  	}

  	set sheen( value ) {

  		if ( this._sheen > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._sheen = value;

  	}

  	get transmission() {

  		return this._transmission;

  	}

  	set transmission( value ) {

  		if ( this._transmission > 0 !== value > 0 ) {

  			this.version ++;

  		}

  		this._transmission = value;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.defines = {

  			'STANDARD': '',
  			'PHYSICAL': ''

  		};

  		this.anisotropy = source.anisotropy;
  		this.anisotropyRotation = source.anisotropyRotation;
  		this.anisotropyMap = source.anisotropyMap;

  		this.clearcoat = source.clearcoat;
  		this.clearcoatMap = source.clearcoatMap;
  		this.clearcoatRoughness = source.clearcoatRoughness;
  		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
  		this.clearcoatNormalMap = source.clearcoatNormalMap;
  		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

  		this.dispersion = source.dispersion;
  		this.ior = source.ior;

  		this.iridescence = source.iridescence;
  		this.iridescenceMap = source.iridescenceMap;
  		this.iridescenceIOR = source.iridescenceIOR;
  		this.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];
  		this.iridescenceThicknessMap = source.iridescenceThicknessMap;

  		this.sheen = source.sheen;
  		this.sheenColor.copy( source.sheenColor );
  		this.sheenColorMap = source.sheenColorMap;
  		this.sheenRoughness = source.sheenRoughness;
  		this.sheenRoughnessMap = source.sheenRoughnessMap;

  		this.transmission = source.transmission;
  		this.transmissionMap = source.transmissionMap;

  		this.thickness = source.thickness;
  		this.thicknessMap = source.thicknessMap;
  		this.attenuationDistance = source.attenuationDistance;
  		this.attenuationColor.copy( source.attenuationColor );

  		this.specularIntensity = source.specularIntensity;
  		this.specularIntensityMap = source.specularIntensityMap;
  		this.specularColor.copy( source.specularColor );
  		this.specularColorMap = source.specularColorMap;

  		return this;

  	}

  }

  class MeshPhongMaterial extends Material {

  	static get type() {

  		return 'MeshPhongMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshPhongMaterial = true;

  		this.color = new Color( 0xffffff ); // diffuse
  		this.specular = new Color( 0x111111 );
  		this.shininess = 30;

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.emissive = new Color( 0x000000 );
  		this.emissiveIntensity = 1.0;
  		this.emissiveMap = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.specularMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler();
  		this.combine = MultiplyOperation;
  		this.reflectivity = 1;
  		this.refractionRatio = 0.98;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.flatShading = false;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );
  		this.specular.copy( source.specular );
  		this.shininess = source.shininess;

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.emissive.copy( source.emissive );
  		this.emissiveMap = source.emissiveMap;
  		this.emissiveIntensity = source.emissiveIntensity;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.specularMap = source.specularMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.combine = source.combine;
  		this.reflectivity = source.reflectivity;
  		this.refractionRatio = source.refractionRatio;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.flatShading = source.flatShading;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class MeshToonMaterial extends Material {

  	static get type() {

  		return 'MeshToonMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshToonMaterial = true;

  		this.defines = { 'TOON': '' };

  		this.color = new Color( 0xffffff );

  		this.map = null;
  		this.gradientMap = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.emissive = new Color( 0x000000 );
  		this.emissiveIntensity = 1.0;
  		this.emissiveMap = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.alphaMap = null;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;
  		this.gradientMap = source.gradientMap;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.emissive.copy( source.emissive );
  		this.emissiveMap = source.emissiveMap;
  		this.emissiveIntensity = source.emissiveIntensity;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.alphaMap = source.alphaMap;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class MeshNormalMaterial extends Material {

  	static get type() {

  		return 'MeshNormalMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshNormalMaterial = true;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;

  		this.flatShading = false;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;

  		this.flatShading = source.flatShading;

  		return this;

  	}

  }

  class MeshLambertMaterial extends Material {

  	static get type() {

  		return 'MeshLambertMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshLambertMaterial = true;

  		this.color = new Color( 0xffffff ); // diffuse

  		this.map = null;

  		this.lightMap = null;
  		this.lightMapIntensity = 1.0;

  		this.aoMap = null;
  		this.aoMapIntensity = 1.0;

  		this.emissive = new Color( 0x000000 );
  		this.emissiveIntensity = 1.0;
  		this.emissiveMap = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.specularMap = null;

  		this.alphaMap = null;

  		this.envMap = null;
  		this.envMapRotation = new Euler();
  		this.combine = MultiplyOperation;
  		this.reflectivity = 1;
  		this.refractionRatio = 0.98;

  		this.wireframe = false;
  		this.wireframeLinewidth = 1;
  		this.wireframeLinecap = 'round';
  		this.wireframeLinejoin = 'round';

  		this.flatShading = false;

  		this.fog = true;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.color.copy( source.color );

  		this.map = source.map;

  		this.lightMap = source.lightMap;
  		this.lightMapIntensity = source.lightMapIntensity;

  		this.aoMap = source.aoMap;
  		this.aoMapIntensity = source.aoMapIntensity;

  		this.emissive.copy( source.emissive );
  		this.emissiveMap = source.emissiveMap;
  		this.emissiveIntensity = source.emissiveIntensity;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.specularMap = source.specularMap;

  		this.alphaMap = source.alphaMap;

  		this.envMap = source.envMap;
  		this.envMapRotation.copy( source.envMapRotation );
  		this.combine = source.combine;
  		this.reflectivity = source.reflectivity;
  		this.refractionRatio = source.refractionRatio;

  		this.wireframe = source.wireframe;
  		this.wireframeLinewidth = source.wireframeLinewidth;
  		this.wireframeLinecap = source.wireframeLinecap;
  		this.wireframeLinejoin = source.wireframeLinejoin;

  		this.flatShading = source.flatShading;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class MeshMatcapMaterial extends Material {

  	static get type() {

  		return 'MeshMatcapMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshMatcapMaterial = true;

  		this.defines = { 'MATCAP': '' };

  		this.color = new Color( 0xffffff ); // diffuse

  		this.matcap = null;

  		this.map = null;

  		this.bumpMap = null;
  		this.bumpScale = 1;

  		this.normalMap = null;
  		this.normalMapType = TangentSpaceNormalMap;
  		this.normalScale = new Vector2( 1, 1 );

  		this.displacementMap = null;
  		this.displacementScale = 1;
  		this.displacementBias = 0;

  		this.alphaMap = null;

  		this.flatShading = false;

  		this.fog = true;

  		this.setValues( parameters );

  	}


  	copy( source ) {

  		super.copy( source );

  		this.defines = { 'MATCAP': '' };

  		this.color.copy( source.color );

  		this.matcap = source.matcap;

  		this.map = source.map;

  		this.bumpMap = source.bumpMap;
  		this.bumpScale = source.bumpScale;

  		this.normalMap = source.normalMap;
  		this.normalMapType = source.normalMapType;
  		this.normalScale.copy( source.normalScale );

  		this.displacementMap = source.displacementMap;
  		this.displacementScale = source.displacementScale;
  		this.displacementBias = source.displacementBias;

  		this.alphaMap = source.alphaMap;

  		this.flatShading = source.flatShading;

  		this.fog = source.fog;

  		return this;

  	}

  }

  class LineDashedMaterial extends LineBasicMaterial {

  	static get type() {

  		return 'LineDashedMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isLineDashedMaterial = true;

  		this.scale = 1;
  		this.dashSize = 3;
  		this.gapSize = 1;

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.scale = source.scale;
  		this.dashSize = source.dashSize;
  		this.gapSize = source.gapSize;

  		return this;

  	}

  }

  class Light extends Object3D {

  	constructor( color, intensity = 1 ) {

  		super();

  		this.isLight = true;

  		this.type = 'Light';

  		this.color = new Color( color );
  		this.intensity = intensity;

  	}

  	dispose() {

  		// Empty here in base class; some subclasses override.

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.color.copy( source.color );
  		this.intensity = source.intensity;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.color = this.color.getHex();
  		data.object.intensity = this.intensity;

  		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

  		if ( this.distance !== undefined ) data.object.distance = this.distance;
  		if ( this.angle !== undefined ) data.object.angle = this.angle;
  		if ( this.decay !== undefined ) data.object.decay = this.decay;
  		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

  		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
  		if ( this.target !== undefined ) data.object.target = this.target.uuid;

  		return data;

  	}

  }

  class HemisphereLight extends Light {

  	constructor( skyColor, groundColor, intensity ) {

  		super( skyColor, intensity );

  		this.isHemisphereLight = true;

  		this.type = 'HemisphereLight';

  		this.position.copy( Object3D.DEFAULT_UP );
  		this.updateMatrix();

  		this.groundColor = new Color( groundColor );

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.groundColor.copy( source.groundColor );

  		return this;

  	}

  }

  const _projScreenMatrix$2 = /*@__PURE__*/ new Matrix4();
  const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
  const _lookTarget$1 = /*@__PURE__*/ new Vector3();

  class LightShadow {

  	constructor( camera ) {

  		this.camera = camera;

  		this.intensity = 1;

  		this.bias = 0;
  		this.normalBias = 0;
  		this.radius = 1;
  		this.blurSamples = 8;

  		this.mapSize = new Vector2( 512, 512 );

  		this.map = null;
  		this.mapPass = null;
  		this.matrix = new Matrix4();

  		this.autoUpdate = true;
  		this.needsUpdate = false;

  		this._frustum = new Frustum();
  		this._frameExtents = new Vector2( 1, 1 );

  		this._viewportCount = 1;

  		this._viewports = [

  			new Vector4( 0, 0, 1, 1 )

  		];

  	}

  	getViewportCount() {

  		return this._viewportCount;

  	}

  	getFrustum() {

  		return this._frustum;

  	}

  	updateMatrices( light ) {

  		const shadowCamera = this.camera;
  		const shadowMatrix = this.matrix;

  		_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );
  		shadowCamera.position.copy( _lightPositionWorld$1 );

  		_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );
  		shadowCamera.lookAt( _lookTarget$1 );
  		shadowCamera.updateMatrixWorld();

  		_projScreenMatrix$2.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( _projScreenMatrix$2 );

  		shadowMatrix.set(
  			0.5, 0.0, 0.0, 0.5,
  			0.0, 0.5, 0.0, 0.5,
  			0.0, 0.0, 0.5, 0.5,
  			0.0, 0.0, 0.0, 1.0
  		);

  		shadowMatrix.multiply( _projScreenMatrix$2 );

  	}

  	getViewport( viewportIndex ) {

  		return this._viewports[ viewportIndex ];

  	}

  	getFrameExtents() {

  		return this._frameExtents;

  	}

  	dispose() {

  		if ( this.map ) {

  			this.map.dispose();

  		}

  		if ( this.mapPass ) {

  			this.mapPass.dispose();

  		}

  	}

  	copy( source ) {

  		this.camera = source.camera.clone();

  		this.intensity = source.intensity;

  		this.bias = source.bias;
  		this.radius = source.radius;

  		this.mapSize.copy( source.mapSize );

  		return this;

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	toJSON() {

  		const object = {};

  		if ( this.intensity !== 1 ) object.intensity = this.intensity;
  		if ( this.bias !== 0 ) object.bias = this.bias;
  		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
  		if ( this.radius !== 1 ) object.radius = this.radius;
  		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

  		object.camera = this.camera.toJSON( false ).object;
  		delete object.camera.matrix;

  		return object;

  	}

  }

  class SpotLightShadow extends LightShadow {

  	constructor() {

  		super( new PerspectiveCamera( 50, 1, 0.5, 500 ) );

  		this.isSpotLightShadow = true;

  		this.focus = 1;

  	}

  	updateMatrices( light ) {

  		const camera = this.camera;

  		const fov = RAD2DEG * 2 * light.angle * this.focus;
  		const aspect = this.mapSize.width / this.mapSize.height;
  		const far = light.distance || camera.far;

  		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

  			camera.fov = fov;
  			camera.aspect = aspect;
  			camera.far = far;
  			camera.updateProjectionMatrix();

  		}

  		super.updateMatrices( light );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.focus = source.focus;

  		return this;

  	}

  }

  class SpotLight extends Light {

  	constructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {

  		super( color, intensity );

  		this.isSpotLight = true;

  		this.type = 'SpotLight';

  		this.position.copy( Object3D.DEFAULT_UP );
  		this.updateMatrix();

  		this.target = new Object3D();

  		this.distance = distance;
  		this.angle = angle;
  		this.penumbra = penumbra;
  		this.decay = decay;

  		this.map = null;

  		this.shadow = new SpotLightShadow();

  	}

  	get power() {

  		// compute the light's luminous power (in lumens) from its intensity (in candela)
  		// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
  		return this.intensity * Math.PI;

  	}

  	set power( power ) {

  		// set the light's intensity (in candela) from the desired luminous power (in lumens)
  		this.intensity = power / Math.PI;

  	}

  	dispose() {

  		this.shadow.dispose();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.distance = source.distance;
  		this.angle = source.angle;
  		this.penumbra = source.penumbra;
  		this.decay = source.decay;

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  }

  const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
  const _lightPositionWorld = /*@__PURE__*/ new Vector3();
  const _lookTarget = /*@__PURE__*/ new Vector3();

  class PointLightShadow extends LightShadow {

  	constructor() {

  		super( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

  		this.isPointLightShadow = true;

  		this._frameExtents = new Vector2( 4, 2 );

  		this._viewportCount = 6;

  		this._viewports = [
  			// These viewports map a cube-map onto a 2D texture with the
  			// following orientation:
  			//
  			//  xzXZ
  			//   y Y
  			//
  			// X - Positive x direction
  			// x - Negative x direction
  			// Y - Positive y direction
  			// y - Negative y direction
  			// Z - Positive z direction
  			// z - Negative z direction

  			// positive X
  			new Vector4( 2, 1, 1, 1 ),
  			// negative X
  			new Vector4( 0, 1, 1, 1 ),
  			// positive Z
  			new Vector4( 3, 1, 1, 1 ),
  			// negative Z
  			new Vector4( 1, 1, 1, 1 ),
  			// positive Y
  			new Vector4( 3, 0, 1, 1 ),
  			// negative Y
  			new Vector4( 1, 0, 1, 1 )
  		];

  		this._cubeDirections = [
  			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
  			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
  		];

  		this._cubeUps = [
  			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
  			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
  		];

  	}

  	updateMatrices( light, viewportIndex = 0 ) {

  		const camera = this.camera;
  		const shadowMatrix = this.matrix;

  		const far = light.distance || camera.far;

  		if ( far !== camera.far ) {

  			camera.far = far;
  			camera.updateProjectionMatrix();

  		}

  		_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  		camera.position.copy( _lightPositionWorld );

  		_lookTarget.copy( camera.position );
  		_lookTarget.add( this._cubeDirections[ viewportIndex ] );
  		camera.up.copy( this._cubeUps[ viewportIndex ] );
  		camera.lookAt( _lookTarget );
  		camera.updateMatrixWorld();

  		shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

  		_projScreenMatrix$1.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );

  	}

  }

  class PointLight extends Light {

  	constructor( color, intensity, distance = 0, decay = 2 ) {

  		super( color, intensity );

  		this.isPointLight = true;

  		this.type = 'PointLight';

  		this.distance = distance;
  		this.decay = decay;

  		this.shadow = new PointLightShadow();

  	}

  	get power() {

  		// compute the light's luminous power (in lumens) from its intensity (in candela)
  		// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
  		return this.intensity * 4 * Math.PI;

  	}

  	set power( power ) {

  		// set the light's intensity (in candela) from the desired luminous power (in lumens)
  		this.intensity = power / ( 4 * Math.PI );

  	}

  	dispose() {

  		this.shadow.dispose();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.distance = source.distance;
  		this.decay = source.decay;

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  }

  class OrthographicCamera extends Camera {

  	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

  		super();

  		this.isOrthographicCamera = true;

  		this.type = 'OrthographicCamera';

  		this.zoom = 1;
  		this.view = null;

  		this.left = left;
  		this.right = right;
  		this.top = top;
  		this.bottom = bottom;

  		this.near = near;
  		this.far = far;

  		this.updateProjectionMatrix();

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.left = source.left;
  		this.right = source.right;
  		this.top = source.top;
  		this.bottom = source.bottom;
  		this.near = source.near;
  		this.far = source.far;

  		this.zoom = source.zoom;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		return this;

  	}

  	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	}

  	clearViewOffset() {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	}

  	updateProjectionMatrix() {

  		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
  		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
  		const cx = ( this.right + this.left ) / 2;
  		const cy = ( this.top + this.bottom ) / 2;

  		let left = cx - dx;
  		let right = cx + dx;
  		let top = cy + dy;
  		let bottom = cy - dy;

  		if ( this.view !== null && this.view.enabled ) {

  			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
  			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

  			left += scaleW * this.view.offsetX;
  			right = left + scaleW * this.view.width;
  			top -= scaleH * this.view.offsetY;
  			bottom = top - scaleH * this.view.height;

  		}

  		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

  		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.zoom = this.zoom;
  		data.object.left = this.left;
  		data.object.right = this.right;
  		data.object.top = this.top;
  		data.object.bottom = this.bottom;
  		data.object.near = this.near;
  		data.object.far = this.far;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		return data;

  	}

  }

  class DirectionalLightShadow extends LightShadow {

  	constructor() {

  		super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

  		this.isDirectionalLightShadow = true;

  	}

  }

  class DirectionalLight extends Light {

  	constructor( color, intensity ) {

  		super( color, intensity );

  		this.isDirectionalLight = true;

  		this.type = 'DirectionalLight';

  		this.position.copy( Object3D.DEFAULT_UP );
  		this.updateMatrix();

  		this.target = new Object3D();

  		this.shadow = new DirectionalLightShadow();

  	}

  	dispose() {

  		this.shadow.dispose();

  	}

  	copy( source ) {

  		super.copy( source );

  		this.target = source.target.clone();
  		this.shadow = source.shadow.clone();

  		return this;

  	}

  }

  class AmbientLight extends Light {

  	constructor( color, intensity ) {

  		super( color, intensity );

  		this.isAmbientLight = true;

  		this.type = 'AmbientLight';

  	}

  }

  class RectAreaLight extends Light {

  	constructor( color, intensity, width = 10, height = 10 ) {

  		super( color, intensity );

  		this.isRectAreaLight = true;

  		this.type = 'RectAreaLight';

  		this.width = width;
  		this.height = height;

  	}

  	get power() {

  		// compute the light's luminous power (in lumens) from its intensity (in nits)
  		return this.intensity * this.width * this.height * Math.PI;

  	}

  	set power( power ) {

  		// set the light's intensity (in nits) from the desired luminous power (in lumens)
  		this.intensity = power / ( this.width * this.height * Math.PI );

  	}

  	copy( source ) {

  		super.copy( source );

  		this.width = source.width;
  		this.height = source.height;

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.width = this.width;
  		data.object.height = this.height;

  		return data;

  	}

  }

  /**
   * Primary reference:
   *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
   *
   * Secondary reference:
   *   https://www.ppsloan.org/publications/StupidSH36.pdf
   */

  // 3-band SH defined by 9 coefficients

  class SphericalHarmonics3 {

  	constructor() {

  		this.isSphericalHarmonics3 = true;

  		this.coefficients = [];

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients.push( new Vector3() );

  		}

  	}

  	set( coefficients ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].copy( coefficients[ i ] );

  		}

  		return this;

  	}

  	zero() {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].set( 0, 0, 0 );

  		}

  		return this;

  	}

  	// get the radiance in the direction of the normal
  	// target is a Vector3
  	getAt( normal, target ) {

  		// normal is assumed to be unit length

  		const x = normal.x, y = normal.y, z = normal.z;

  		const coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
  		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
  		target.addScaledVector( coeff[ 3 ], 0.488603 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
  		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
  		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
  		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
  		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

  		return target;

  	}

  	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  	// target is a Vector3
  	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
  	getIrradianceAt( normal, target ) {

  		// normal is assumed to be unit length

  		const x = normal.x, y = normal.y, z = normal.z;

  		const coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
  		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
  		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
  		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
  		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
  		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
  		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

  		return target;

  	}

  	add( sh ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].add( sh.coefficients[ i ] );

  		}

  		return this;

  	}

  	addScaledSH( sh, s ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );

  		}

  		return this;

  	}

  	scale( s ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].multiplyScalar( s );

  		}

  		return this;

  	}

  	lerp( sh, alpha ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

  		}

  		return this;

  	}

  	equals( sh ) {

  		for ( let i = 0; i < 9; i ++ ) {

  			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	copy( sh ) {

  		return this.set( sh.coefficients );

  	}

  	clone() {

  		return new this.constructor().copy( this );

  	}

  	fromArray( array, offset = 0 ) {

  		const coefficients = this.coefficients;

  		for ( let i = 0; i < 9; i ++ ) {

  			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

  		}

  		return this;

  	}

  	toArray( array = [], offset = 0 ) {

  		const coefficients = this.coefficients;

  		for ( let i = 0; i < 9; i ++ ) {

  			coefficients[ i ].toArray( array, offset + ( i * 3 ) );

  		}

  		return array;

  	}

  	// evaluate the basis functions
  	// shBasis is an Array[ 9 ]
  	static getBasisAt( normal, shBasis ) {

  		// normal is assumed to be unit length

  		const x = normal.x, y = normal.y, z = normal.z;

  		// band 0
  		shBasis[ 0 ] = 0.282095;

  		// band 1
  		shBasis[ 1 ] = 0.488603 * y;
  		shBasis[ 2 ] = 0.488603 * z;
  		shBasis[ 3 ] = 0.488603 * x;

  		// band 2
  		shBasis[ 4 ] = 1.092548 * x * y;
  		shBasis[ 5 ] = 1.092548 * y * z;
  		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
  		shBasis[ 7 ] = 1.092548 * x * z;
  		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

  	}

  }

  class LightProbe extends Light {

  	constructor( sh = new SphericalHarmonics3(), intensity = 1 ) {

  		super( undefined, intensity );

  		this.isLightProbe = true;

  		this.sh = sh;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.sh.copy( source.sh );

  		return this;

  	}

  	fromJSON( json ) {

  		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
  		this.sh.fromArray( json.sh );

  		return this;

  	}

  	toJSON( meta ) {

  		const data = super.toJSON( meta );

  		data.object.sh = this.sh.toArray();

  		return data;

  	}

  }

  class InstancedInterleavedBuffer extends InterleavedBuffer {

  	constructor( array, stride, meshPerAttribute = 1 ) {

  		super( array, stride );

  		this.isInstancedInterleavedBuffer = true;

  		this.meshPerAttribute = meshPerAttribute;

  	}

  	copy( source ) {

  		super.copy( source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	}

  	clone( data ) {

  		const ib = super.clone( data );

  		ib.meshPerAttribute = this.meshPerAttribute;

  		return ib;

  	}

  	toJSON( data ) {

  		const json = super.toJSON( data );

  		json.isInstancedInterleavedBuffer = true;
  		json.meshPerAttribute = this.meshPerAttribute;

  		return json;

  	}

  }

  const refreshUniforms = [
  	'alphaMap',
  	'alphaTest',
  	'anisotropy',
  	'anisotropyMap',
  	'anisotropyRotation',
  	'aoMap',
  	'attenuationColor',
  	'attenuationDistance',
  	'bumpMap',
  	'clearcoat',
  	'clearcoatMap',
  	'clearcoatNormalMap',
  	'clearcoatNormalScale',
  	'clearcoatRoughness',
  	'color',
  	'dispersion',
  	'displacementMap',
  	'emissive',
  	'emissiveMap',
  	'envMap',
  	'gradientMap',
  	'ior',
  	'iridescence',
  	'iridescenceIOR',
  	'iridescenceMap',
  	'iridescenceThicknessMap',
  	'lightMap',
  	'map',
  	'matcap',
  	'metalness',
  	'metalnessMap',
  	'normalMap',
  	'normalScale',
  	'opacity',
  	'roughness',
  	'roughnessMap',
  	'sheen',
  	'sheenColor',
  	'sheenColorMap',
  	'sheenRoughnessMap',
  	'shininess',
  	'specular',
  	'specularColor',
  	'specularColorMap',
  	'specularIntensity',
  	'specularIntensityMap',
  	'specularMap',
  	'thickness',
  	'transmission',
  	'transmissionMap'
  ];

  class NodeMaterialObserver {

  	constructor( builder ) {

  		this.renderObjects = new WeakMap();
  		this.hasNode = this.containsNode( builder );
  		this.hasAnimation = builder.object.isSkinnedMesh === true;
  		this.refreshUniforms = refreshUniforms;
  		this.renderId = 0;

  	}

  	firstInitialization( renderObject ) {

  		const hasInitialized = this.renderObjects.has( renderObject );

  		if ( hasInitialized === false ) {

  			this.getRenderObjectData( renderObject );

  			return true;

  		}

  		return false;

  	}

  	getRenderObjectData( renderObject ) {

  		let data = this.renderObjects.get( renderObject );

  		if ( data === undefined ) {

  			const { geometry, material } = renderObject;

  			data = {
  				material: this.getMaterialData( material ),
  				geometry: {
  					attributes: this.getAttributesData( geometry.attributes ),
  					indexVersion: geometry.index ? geometry.index.version : null,
  					drawRange: { start: geometry.drawRange.start, count: geometry.drawRange.count }
  				},
  				worldMatrix: renderObject.object.matrixWorld.clone()
  			};

  			if ( renderObject.object.center ) {

  				data.center = renderObject.object.center.clone();

  			}

  			if ( renderObject.object.morphTargetInfluences ) {

  				data.morphTargetInfluences = renderObject.object.morphTargetInfluences.slice();

  			}

  			if ( renderObject.bundle !== null ) {

  				data.version = renderObject.bundle.version;

  			}

  			if ( data.material.transmission > 0 ) {

  				const { width, height } = renderObject.context;

  				data.bufferWidth = width;
  				data.bufferHeight = height;

  			}

  			this.renderObjects.set( renderObject, data );

  		}

  		return data;

  	}

  	getAttributesData( attributes ) {

  		const attributesData = {};

  		for ( const name in attributes ) {

  			const attribute = attributes[ name ];

  			attributesData[ name ] = {
  				version: attribute.version
  			};

  		}

  		return attributesData;

  	}

  	containsNode( builder ) {

  		const material = builder.material;

  		for ( const property in material ) {

  			if ( material[ property ] && material[ property ].isNode )
  				return true;

  		}

  		if ( builder.renderer.nodes.modelViewMatrix !== null || builder.renderer.nodes.modelNormalViewMatrix !== null )
  			return true;

  		return false;

  	}

  	getMaterialData( material ) {

  		const data = {};

  		for ( const property of this.refreshUniforms ) {

  			const value = material[ property ];

  			if ( value === null || value === undefined ) continue;

  			if ( typeof value === 'object' && value.clone !== undefined ) {

  				if ( value.isTexture === true ) {

  					data[ property ] = { id: value.id, version: value.version };

  				} else {

  					data[ property ] = value.clone();

  				}

  			} else {

  				data[ property ] = value;

  			}

  		}

  		return data;

  	}

  	equals( renderObject ) {

  		const { object, material, geometry } = renderObject;

  		const renderObjectData = this.getRenderObjectData( renderObject );

  		// world matrix

  		if ( renderObjectData.worldMatrix.equals( object.matrixWorld ) !== true ) {

  			renderObjectData.worldMatrix.copy( object.matrixWorld );

  			return false;

  		}

  		// material

  		const materialData = renderObjectData.material;

  		for ( const property in materialData ) {

  			const value = materialData[ property ];
  			const mtlValue = material[ property ];

  			if ( value.equals !== undefined ) {

  				if ( value.equals( mtlValue ) === false ) {

  					value.copy( mtlValue );

  					return false;

  				}

  			} else if ( mtlValue.isTexture === true ) {

  				if ( value.id !== mtlValue.id || value.version !== mtlValue.version ) {

  					value.id = mtlValue.id;
  					value.version = mtlValue.version;

  					return false;

  				}

  			} else if ( value !== mtlValue ) {

  				materialData[ property ] = mtlValue;

  				return false;

  			}

  		}

  		if ( materialData.transmission > 0 ) {

  			const { width, height } = renderObject.context;

  			if ( renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height ) {

  				renderObjectData.bufferWidth = width;
  				renderObjectData.bufferHeight = height;

  				return false;

  			}

  		}

  		// geometry

  		const storedGeometryData = renderObjectData.geometry;
  		const attributes = geometry.attributes;
  		const storedAttributes = storedGeometryData.attributes;

  		const storedAttributeNames = Object.keys( storedAttributes );
  		const currentAttributeNames = Object.keys( attributes );

  		if ( storedAttributeNames.length !== currentAttributeNames.length ) {

  			renderObjectData.geometry.attributes = this.getAttributesData( attributes );
  			return false;

  		}

  		// Compare each attribute
  		for ( const name of storedAttributeNames ) {

  			const storedAttributeData = storedAttributes[ name ];
  			const attribute = attributes[ name ];

  			if ( attribute === undefined ) {

  				// Attribute was removed
  				delete storedAttributes[ name ];
  				return false;

  			}

  			if ( storedAttributeData.version !== attribute.version ) {

  				storedAttributeData.version = attribute.version;
  				return false;

  			}

  		}

  		// Check index
  		const index = geometry.index;
  		const storedIndexVersion = storedGeometryData.indexVersion;
  		const currentIndexVersion = index ? index.version : null;

  		if ( storedIndexVersion !== currentIndexVersion ) {

  			storedGeometryData.indexVersion = currentIndexVersion;
  			return false;

  		}

  		// Check drawRange
  		if ( storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count ) {

  			storedGeometryData.drawRange.start = geometry.drawRange.start;
  			storedGeometryData.drawRange.count = geometry.drawRange.count;
  			return false;

  		}

  		// morph targets

  		if ( renderObjectData.morphTargetInfluences ) {

  			let morphChanged = false;

  			for ( let i = 0; i < renderObjectData.morphTargetInfluences.length; i ++ ) {

  				if ( renderObjectData.morphTargetInfluences[ i ] !== object.morphTargetInfluences[ i ] ) {

  					morphChanged = true;

  				}

  			}

  			if ( morphChanged ) return true;

  		}

  		// center

  		if ( renderObjectData.center ) {

  			if ( renderObjectData.center.equals( object.center ) === false ) {

  				renderObjectData.center.copy( object.center );

  				return true;

  			}

  		}

  		// bundle

  		if ( renderObject.bundle !== null ) {

  			renderObjectData.version = renderObject.bundle.version;

  		}

  		return true;

  	}

  	needsRefresh( renderObject, nodeFrame ) {

  		if ( this.hasNode || this.hasAnimation || this.firstInitialization( renderObject ) )
  			return true;

  		const { renderId } = nodeFrame;

  		if ( this.renderId !== renderId ) {

  			this.renderId = renderId;

  			return true;

  		}

  		const isStatic = renderObject.object.static === true;
  		const isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData( renderObject ).version === renderObject.bundle.version;

  		if ( isStatic || isBundle )
  			return false;

  		const notEqual = this.equals( renderObject ) !== true;

  		return notEqual;

  	}

  }

  // cyrb53 (c) 2018 bryc (github.com/bryc). License: Public domain. Attribution appreciated.
  // A fast and simple 64-bit (or 53-bit) string hash function with decent collision resistance.
  // Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.
  // See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480
  // https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js
  function cyrb53( value, seed = 0 ) {

  	let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;

  	if ( value instanceof Array ) {

  		for ( let i = 0, val; i < value.length; i ++ ) {

  			val = value[ i ];
  			h1 = Math.imul( h1 ^ val, 2654435761 );
  			h2 = Math.imul( h2 ^ val, 1597334677 );

  		}

  	} else {

  		for ( let i = 0, ch; i < value.length; i ++ ) {

  			ch = value.charCodeAt( i );
  			h1 = Math.imul( h1 ^ ch, 2654435761 );
  			h2 = Math.imul( h2 ^ ch, 1597334677 );

  		}

  	}

  	h1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 );
  	h1 ^= Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );
  	h2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 );
  	h2 ^= Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );

  	return 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );

  }

  const hashString = ( str ) => cyrb53( str );
  const hashArray = ( array ) => cyrb53( array );
  const hash$1 = ( ...params ) => cyrb53( params );

  function getCacheKey$1( object, force = false ) {

  	const values = [];

  	if ( object.isNode === true ) {

  		values.push( object.id );
  		object = object.getSelf();

  	}

  	for ( const { property, childNode } of getNodeChildren( object ) ) {

  		values.push( values, cyrb53( property.slice( 0, - 4 ) ), childNode.getCacheKey( force ) );

  	}

  	return cyrb53( values );

  }

  function* getNodeChildren( node, toJSON = false ) {

  	for ( const property in node ) {

  		// Ignore private properties.
  		if ( property.startsWith( '_' ) === true ) continue;

  		const object = node[ property ];

  		if ( Array.isArray( object ) === true ) {

  			for ( let i = 0; i < object.length; i ++ ) {

  				const child = object[ i ];

  				if ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {

  					yield { property, index: i, childNode: child };

  				}

  			}

  		} else if ( object && object.isNode === true ) {

  			yield { property, childNode: object };

  		} else if ( typeof object === 'object' ) {

  			for ( const subProperty in object ) {

  				const child = object[ subProperty ];

  				if ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {

  					yield { property, index: subProperty, childNode: child };

  				}

  			}

  		}

  	}

  }

  function getValueType( value ) {

  	if ( value === undefined || value === null ) return null;

  	const typeOf = typeof value;

  	if ( value.isNode === true ) {

  		return 'node';

  	} else if ( typeOf === 'number' ) {

  		return 'float';

  	} else if ( typeOf === 'boolean' ) {

  		return 'bool';

  	} else if ( typeOf === 'string' ) {

  		return 'string';

  	} else if ( typeOf === 'function' ) {

  		return 'shader';

  	} else if ( value.isVector2 === true ) {

  		return 'vec2';

  	} else if ( value.isVector3 === true ) {

  		return 'vec3';

  	} else if ( value.isVector4 === true ) {

  		return 'vec4';

  	} else if ( value.isMatrix3 === true ) {

  		return 'mat3';

  	} else if ( value.isMatrix4 === true ) {

  		return 'mat4';

  	} else if ( value.isColor === true ) {

  		return 'color';

  	} else if ( value instanceof ArrayBuffer ) {

  		return 'ArrayBuffer';

  	}

  	return null;

  }

  function getValueFromType( type, ...params ) {

  	const last4 = type ? type.slice( - 4 ) : undefined;

  	if ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()

  		if ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];
  		else if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];
  		else if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];

  	}

  	if ( type === 'color' ) {

  		return new Color( ...params );

  	} else if ( last4 === 'vec2' ) {

  		return new Vector2( ...params );

  	} else if ( last4 === 'vec3' ) {

  		return new Vector3( ...params );

  	} else if ( last4 === 'vec4' ) {

  		return new Vector4( ...params );

  	} else if ( last4 === 'mat3' ) {

  		return new Matrix3( ...params );

  	} else if ( last4 === 'mat4' ) {

  		return new Matrix4( ...params );

  	} else if ( type === 'bool' ) {

  		return params[ 0 ] || false;

  	} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {

  		return params[ 0 ] || 0;

  	} else if ( type === 'string' ) {

  		return params[ 0 ] || '';

  	} else if ( type === 'ArrayBuffer' ) {

  		return base64ToArrayBuffer( params[ 0 ] );

  	}

  	return null;

  }

  function arrayBufferToBase64( arrayBuffer ) {

  	let chars = '';

  	const array = new Uint8Array( arrayBuffer );

  	for ( let i = 0; i < array.length; i ++ ) {

  		chars += String.fromCharCode( array[ i ] );

  	}

  	return btoa( chars );

  }

  function base64ToArrayBuffer( base64 ) {

  	return Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;

  }

  const NodeShaderStage = {
  	VERTEX: 'vertex',
  	FRAGMENT: 'fragment'
  };

  const NodeUpdateType = {
  	NONE: 'none',
  	FRAME: 'frame',
  	RENDER: 'render',
  	OBJECT: 'object'
  };

  const defaultShaderStages = [ 'fragment', 'vertex' ];
  const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];
  const shaderStages = [ ...defaultShaderStages, 'compute' ];
  const vectorComponents = [ 'x', 'y', 'z', 'w' ];

  let _nodeId = 0;

  class Node extends EventDispatcher {

  	static get type() {

  		return 'Node';

  	}

  	constructor( nodeType = null ) {

  		super();

  		this.nodeType = nodeType;

  		this.updateType = NodeUpdateType.NONE;
  		this.updateBeforeType = NodeUpdateType.NONE;
  		this.updateAfterType = NodeUpdateType.NONE;

  		this.uuid = MathUtils.generateUUID();

  		this.version = 0;

  		this._cacheKey = null;
  		this._cacheKeyVersion = 0;

  		this.global = false;

  		this.isNode = true;

  		Object.defineProperty( this, 'id', { value: _nodeId ++ } );

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) {

  			this.version ++;

  		}

  	}

  	get type() {

  		return this.constructor.type;

  	}

  	onUpdate( callback, updateType ) {

  		this.updateType = updateType;
  		this.update = callback.bind( this.getSelf() );

  		return this;

  	}

  	onFrameUpdate( callback ) {

  		return this.onUpdate( callback, NodeUpdateType.FRAME );

  	}

  	onRenderUpdate( callback ) {

  		return this.onUpdate( callback, NodeUpdateType.RENDER );

  	}

  	onObjectUpdate( callback ) {

  		return this.onUpdate( callback, NodeUpdateType.OBJECT );

  	}

  	onReference( callback ) {

  		this.updateReference = callback.bind( this.getSelf() );

  		return this;

  	}

  	getSelf() {

  		// Returns non-node object.

  		return this.self || this;

  	}

  	updateReference( /*state*/ ) {

  		return this;

  	}

  	isGlobal( /*builder*/ ) {

  		return this.global;

  	}

  	* getChildren() {

  		for ( const { childNode } of getNodeChildren( this ) ) {

  			yield childNode;

  		}

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	traverse( callback ) {

  		callback( this );

  		for ( const childNode of this.getChildren() ) {

  			childNode.traverse( callback );

  		}

  	}

  	getCacheKey( force = false ) {

  		force = force || this.version !== this._cacheKeyVersion;

  		if ( force === true || this._cacheKey === null ) {

  			this._cacheKey = getCacheKey$1( this, force );
  			this._cacheKeyVersion = this.version;

  		}

  		return this._cacheKey;

  	}

  	getScope() {

  		return this;

  	}

  	getHash( /*builder*/ ) {

  		return this.uuid;

  	}

  	getUpdateType() {

  		return this.updateType;

  	}

  	getUpdateBeforeType() {

  		return this.updateBeforeType;

  	}

  	getUpdateAfterType() {

  		return this.updateAfterType;

  	}

  	getElementType( builder ) {

  		const type = this.getNodeType( builder );
  		const elementType = builder.getElementType( type );

  		return elementType;

  	}

  	getNodeType( builder ) {

  		const nodeProperties = builder.getNodeProperties( this );

  		if ( nodeProperties.outputNode ) {

  			return nodeProperties.outputNode.getNodeType( builder );

  		}

  		return this.nodeType;

  	}

  	getShared( builder ) {

  		const hash = this.getHash( builder );
  		const nodeFromHash = builder.getNodeFromHash( hash );

  		return nodeFromHash || this;

  	}

  	setup( builder ) {

  		const nodeProperties = builder.getNodeProperties( this );

  		let index = 0;

  		for ( const childNode of this.getChildren() ) {

  			nodeProperties[ 'node' + index ++ ] = childNode;

  		}

  		// return a outputNode if exists
  		return null;

  	}

  	analyze( builder ) {

  		const usageCount = builder.increaseUsage( this );

  		if ( usageCount === 1 ) {

  			// node flow children

  			const nodeProperties = builder.getNodeProperties( this );

  			for ( const childNode of Object.values( nodeProperties ) ) {

  				if ( childNode && childNode.isNode === true ) {

  					childNode.build( builder );

  				}

  			}

  		}

  	}

  	generate( builder, output ) {

  		const { outputNode } = builder.getNodeProperties( this );

  		if ( outputNode && outputNode.isNode === true ) {

  			return outputNode.build( builder, output );

  		}

  	}

  	updateBefore( /*frame*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	updateAfter( /*frame*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	update( /*frame*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	build( builder, output = null ) {

  		const refNode = this.getShared( builder );

  		if ( this !== refNode ) {

  			return refNode.build( builder, output );

  		}

  		builder.addNode( this );
  		builder.addChain( this );

  		/* Build stages expected results:
  			- "setup"		-> Node
  			- "analyze"		-> null
  			- "generate"	-> String
  		*/
  		let result = null;

  		const buildStage = builder.getBuildStage();

  		if ( buildStage === 'setup' ) {

  			this.updateReference( builder );

  			const properties = builder.getNodeProperties( this );

  			if ( properties.initialized !== true ) {

  				const stackNodesBeforeSetup = builder.stack.nodes.length;

  				properties.initialized = true;
  				properties.outputNode = this.setup( builder );

  				if ( properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup ) ;

  				for ( const childNode of Object.values( properties ) ) {

  					if ( childNode && childNode.isNode === true ) {

  						childNode.build( builder );

  					}

  				}

  			}

  		} else if ( buildStage === 'analyze' ) {

  			this.analyze( builder );

  		} else if ( buildStage === 'generate' ) {

  			const isGenerateOnce = this.generate.length === 1;

  			if ( isGenerateOnce ) {

  				const type = this.getNodeType( builder );
  				const nodeData = builder.getDataFromNode( this );

  				result = nodeData.snippet;

  				if ( result === undefined ) {

  					result = this.generate( builder ) || '';

  					nodeData.snippet = result;

  				} else if ( nodeData.flowCodes !== undefined && builder.context.nodeBlock !== undefined ) {

  					builder.addFlowCodeHierarchy( this, builder.context.nodeBlock );

  				}

  				result = builder.format( result, type, output );

  			} else {

  				result = this.generate( builder, output ) || '';

  			}

  		}

  		builder.removeChain( this );
  		builder.addSequentialNode( this );

  		return result;

  	}

  	getSerializeChildren() {

  		return getNodeChildren( this );

  	}

  	serialize( json ) {

  		const nodeChildren = this.getSerializeChildren();

  		const inputNodes = {};

  		for ( const { property, index, childNode } of nodeChildren ) {

  			if ( index !== undefined ) {

  				if ( inputNodes[ property ] === undefined ) {

  					inputNodes[ property ] = Number.isInteger( index ) ? [] : {};

  				}

  				inputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;

  			} else {

  				inputNodes[ property ] = childNode.toJSON( json.meta ).uuid;

  			}

  		}

  		if ( Object.keys( inputNodes ).length > 0 ) {

  			json.inputNodes = inputNodes;

  		}

  	}

  	deserialize( json ) {

  		if ( json.inputNodes !== undefined ) {

  			const nodes = json.meta.nodes;

  			for ( const property in json.inputNodes ) {

  				if ( Array.isArray( json.inputNodes[ property ] ) ) {

  					const inputArray = [];

  					for ( const uuid of json.inputNodes[ property ] ) {

  						inputArray.push( nodes[ uuid ] );

  					}

  					this[ property ] = inputArray;

  				} else if ( typeof json.inputNodes[ property ] === 'object' ) {

  					const inputObject = {};

  					for ( const subProperty in json.inputNodes[ property ] ) {

  						const uuid = json.inputNodes[ property ][ subProperty ];

  						inputObject[ subProperty ] = nodes[ uuid ];

  					}

  					this[ property ] = inputObject;

  				} else {

  					const uuid = json.inputNodes[ property ];

  					this[ property ] = nodes[ uuid ];

  				}

  			}

  		}

  	}

  	toJSON( meta ) {

  		const { uuid, type } = this;
  		const isRoot = ( meta === undefined || typeof meta === 'string' );

  		if ( isRoot ) {

  			meta = {
  				textures: {},
  				images: {},
  				nodes: {}
  			};

  		}

  		// serialize

  		let data = meta.nodes[ uuid ];

  		if ( data === undefined ) {

  			data = {
  				uuid,
  				type,
  				meta,
  				metadata: {
  					version: 4.6,
  					type: 'Node',
  					generator: 'Node.toJSON'
  				}
  			};

  			if ( isRoot !== true ) meta.nodes[ data.uuid ] = data;

  			this.serialize( data );

  			delete data.meta;

  		}

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			const values = [];

  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRoot ) {

  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );
  			const nodes = extractFromCache( meta.nodes );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;
  			if ( nodes.length > 0 ) data.nodes = nodes;

  		}

  		return data;

  	}

  }

  class ArrayElementNode extends Node {

  	static get type() {

  		return 'ArrayElementNode';

  	} // @TODO: If extending from TempNode it breaks webgpu_compute

  	constructor( node, indexNode ) {

  		super();

  		this.node = node;
  		this.indexNode = indexNode;

  		this.isArrayElementNode = true;

  	}

  	getNodeType( builder ) {

  		return this.node.getElementType( builder );

  	}

  	generate( builder ) {

  		const nodeSnippet = this.node.build( builder );
  		const indexSnippet = this.indexNode.build( builder, 'uint' );

  		return `${nodeSnippet}[ ${indexSnippet} ]`;

  	}

  }

  class ConvertNode extends Node {

  	static get type() {

  		return 'ConvertNode';

  	}

  	constructor( node, convertTo ) {

  		super();

  		this.node = node;
  		this.convertTo = convertTo;

  	}

  	getNodeType( builder ) {

  		const requestType = this.node.getNodeType( builder );

  		let convertTo = null;

  		for ( const overloadingType of this.convertTo.split( '|' ) ) {

  			if ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {

  				convertTo = overloadingType;

  			}

  		}

  		return convertTo;

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.convertTo = this.convertTo;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.convertTo = data.convertTo;

  	}

  	generate( builder, output ) {

  		const node = this.node;
  		const type = this.getNodeType( builder );

  		const snippet = node.build( builder, type );

  		return builder.format( snippet, type, output );

  	}

  }

  class TempNode extends Node {

  	static get type() {

  		return 'TempNode';

  	}

  	constructor( type ) {

  		super( type );

  		this.isTempNode = true;

  	}

  	hasDependencies( builder ) {

  		return builder.getDataFromNode( this ).usageCount > 1;

  	}

  	build( builder, output ) {

  		const buildStage = builder.getBuildStage();

  		if ( buildStage === 'generate' ) {

  			const type = builder.getVectorType( this.getNodeType( builder, output ) );
  			const nodeData = builder.getDataFromNode( this );

  			if ( nodeData.propertyName !== undefined ) {

  				return builder.format( nodeData.propertyName, type, output );

  			} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {

  				const snippet = super.build( builder, type );

  				const nodeVar = builder.getVarFromNode( this, null, type );
  				const propertyName = builder.getPropertyName( nodeVar );

  				builder.addLineFlowCode( `${propertyName} = ${snippet}`, this );

  				nodeData.snippet = snippet;
  				nodeData.propertyName = propertyName;

  				return builder.format( nodeData.propertyName, type, output );

  			}

  		}

  		return super.build( builder, output );

  	}

  }

  class JoinNode extends TempNode {

  	static get type() {

  		return 'JoinNode';

  	}

  	constructor( nodes = [], nodeType = null ) {

  		super( nodeType );

  		this.nodes = nodes;

  	}

  	getNodeType( builder ) {

  		if ( this.nodeType !== null ) {

  			return builder.getVectorType( this.nodeType );

  		}

  		return builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );

  	}

  	generate( builder, output ) {

  		const type = this.getNodeType( builder );
  		const nodes = this.nodes;

  		const primitiveType = builder.getComponentType( type );

  		const snippetValues = [];

  		for ( const input of nodes ) {

  			let inputSnippet = input.build( builder );

  			const inputPrimitiveType = builder.getComponentType( input.getNodeType( builder ) );

  			if ( inputPrimitiveType !== primitiveType ) {

  				inputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );

  			}

  			snippetValues.push( inputSnippet );

  		}

  		const snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;

  		return builder.format( snippet, type, output );

  	}

  }

  const stringVectorComponents = vectorComponents.join( '' );

  class SplitNode extends Node {

  	static get type() {

  		return 'SplitNode';

  	}

  	constructor( node, components = 'x' ) {

  		super();

  		this.node = node;
  		this.components = components;

  		this.isSplitNode = true;

  	}

  	getVectorLength() {

  		let vectorLength = this.components.length;

  		for ( const c of this.components ) {

  			vectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );

  		}

  		return vectorLength;

  	}

  	getComponentType( builder ) {

  		return builder.getComponentType( this.node.getNodeType( builder ) );

  	}

  	getNodeType( builder ) {

  		return builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );

  	}

  	generate( builder, output ) {

  		const node = this.node;
  		const nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );

  		let snippet = null;

  		if ( nodeTypeLength > 1 ) {

  			let type = null;

  			const componentsLength = this.getVectorLength();

  			if ( componentsLength >= nodeTypeLength ) {

  				// needed expand the input node

  				type = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );

  			}

  			const nodeSnippet = node.build( builder, type );

  			if ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {

  				// unnecessary swizzle

  				snippet = builder.format( nodeSnippet, type, output );

  			} else {

  				snippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );

  			}

  		} else {

  			// ignore .components if .node returns float/integer

  			snippet = node.build( builder, output );

  		}

  		return snippet;

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.components = this.components;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.components = data.components;

  	}

  }

  class SetNode extends TempNode {

  	static get type() {

  		return 'SetNode';

  	}

  	constructor( sourceNode, components, targetNode ) {

  		super();

  		this.sourceNode = sourceNode;
  		this.components = components;
  		this.targetNode = targetNode;

  	}

  	getNodeType( builder ) {

  		return this.sourceNode.getNodeType( builder );

  	}

  	generate( builder ) {

  		const { sourceNode, components, targetNode } = this;

  		const sourceType = this.getNodeType( builder );
  		const targetType = builder.getTypeFromLength( components.length, targetNode.getNodeType( builder ) );

  		const targetSnippet = targetNode.build( builder, targetType );
  		const sourceSnippet = sourceNode.build( builder, sourceType );

  		const length = builder.getTypeLength( sourceType );
  		const snippetValues = [];

  		for ( let i = 0; i < length; i ++ ) {

  			const component = vectorComponents[ i ];

  			if ( component === components[ 0 ] ) {

  				snippetValues.push( targetSnippet );

  				i += components.length - 1;

  			} else {

  				snippetValues.push( sourceSnippet + '.' + component );

  			}

  		}

  		return `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;

  	}

  }

  class FlipNode extends TempNode {

  	static get type() {

  		return 'FlipNode';

  	}

  	constructor( sourceNode, components ) {

  		super();

  		this.sourceNode = sourceNode;
  		this.components = components;

  	}

  	getNodeType( builder ) {

  		return this.sourceNode.getNodeType( builder );

  	}

  	generate( builder ) {

  		const { components, sourceNode } = this;

  		const sourceType = this.getNodeType( builder );
  		const sourceSnippet = sourceNode.build( builder );

  		const sourceCache = builder.getVarFromNode( this );
  		const sourceProperty = builder.getPropertyName( sourceCache );

  		builder.addLineFlowCode( sourceProperty + ' = ' + sourceSnippet, this );

  		const length = builder.getTypeLength( sourceType );
  		const snippetValues = [];

  		let componentIndex = 0;

  		for ( let i = 0; i < length; i ++ ) {

  			const component = vectorComponents[ i ];

  			if ( component === components[ componentIndex ] ) {

  				snippetValues.push( '1.0 - ' + ( sourceProperty + '.' + component ) );

  				componentIndex ++;

  			} else {

  				snippetValues.push( sourceProperty + '.' + component );

  			}

  		}

  		return `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;

  	}

  }

  class InputNode extends Node {

  	static get type() {

  		return 'InputNode';

  	}

  	constructor( value, nodeType = null ) {

  		super( nodeType );

  		this.isInputNode = true;

  		this.value = value;
  		this.precision = null;

  	}

  	getNodeType( /*builder*/ ) {

  		if ( this.nodeType === null ) {

  			return getValueType( this.value );

  		}

  		return this.nodeType;

  	}

  	getInputType( builder ) {

  		return this.getNodeType( builder );

  	}

  	setPrecision( precision ) {

  		this.precision = precision;

  		return this;

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.value = this.value;

  		if ( this.value && this.value.toArray ) data.value = this.value.toArray();

  		data.valueType = getValueType( this.value );
  		data.nodeType = this.nodeType;

  		if ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );

  		data.precision = this.precision;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.nodeType = data.nodeType;
  		this.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;

  		this.precision = data.precision || null;

  		if ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );

  	}

  	generate( /*builder, output*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  }

  class ConstNode extends InputNode {

  	static get type() {

  		return 'ConstNode';

  	}

  	constructor( value, nodeType = null ) {

  		super( value, nodeType );

  		this.isConstNode = true;

  	}

  	generateConst( builder ) {

  		return builder.generateConst( this.getNodeType( builder ), this.value );

  	}

  	generate( builder, output ) {

  		const type = this.getNodeType( builder );

  		return builder.format( this.generateConst( builder ), type, output );

  	}

  }

  //

  let currentStack = null;

  const NodeElements = new Map();

  function addMethodChaining( name, nodeElement ) {

  	if ( NodeElements.has( name ) ) {

  		console.warn( `Redefinition of method chaining ${ name }` );
  		return;

  	}

  	if ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );

  	NodeElements.set( name, nodeElement );

  }

  const parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );
  const parseSwizzleAndSort = ( props ) => parseSwizzle( props ).split( '' ).sort().join( '' );

  const shaderNodeHandler = {

  	setup( NodeClosure, params ) {

  		const inputs = params.shift();

  		return NodeClosure( nodeObjects( inputs ), ...params );

  	},

  	get( node, prop, nodeObj ) {

  		if ( typeof prop === 'string' && node[ prop ] === undefined ) {

  			if ( node.isStackNode !== true && prop === 'assign' ) {

  				return ( ...params ) => {

  					currentStack.assign( nodeObj, ...params );

  					return nodeObj;

  				};

  			} else if ( NodeElements.has( prop ) ) {

  				const nodeElement = NodeElements.get( prop );

  				return node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );

  			} else if ( prop === 'self' ) {

  				return node;

  			} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {

  				const nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );

  				return node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );

  			} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {

  				// accessing properties ( swizzle )

  				prop = parseSwizzle( prop );

  				return nodeObject( new SplitNode( nodeObj, prop ) );

  			} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {

  				// set properties ( swizzle ) and sort to xyzw sequence

  				prop = parseSwizzleAndSort( prop.slice( 3 ).toLowerCase() );

  				return ( value ) => nodeObject( new SetNode( node, prop, value ) );

  			} else if ( /^flip[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {

  				// set properties ( swizzle ) and sort to xyzw sequence

  				prop = parseSwizzleAndSort( prop.slice( 4 ).toLowerCase() );

  				return () => nodeObject( new FlipNode( nodeObject( node ), prop ) );

  			} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {

  				// accessing property

  				if ( prop === 'width' ) prop = 'x';
  				else if ( prop === 'height' ) prop = 'y';
  				else if ( prop === 'depth' ) prop = 'z';

  				return nodeObject( new SplitNode( node, prop ) );

  			} else if ( /^\d+$/.test( prop ) === true ) {

  				// accessing array

  				return nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );

  			}

  		}

  		return Reflect.get( node, prop, nodeObj );

  	},

  	set( node, prop, value, nodeObj ) {

  		if ( typeof prop === 'string' && node[ prop ] === undefined ) {

  			// setting properties

  			if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\d+$/.test( prop ) === true ) {

  				nodeObj[ prop ].assign( value );

  				return true;

  			}

  		}

  		return Reflect.set( node, prop, value, nodeObj );

  	}

  };

  const nodeObjectsCacheMap = new WeakMap();
  const nodeBuilderFunctionsCacheMap = new WeakMap();

  const ShaderNodeObject = function ( obj, altType = null ) {

  	const type = getValueType( obj );

  	if ( type === 'node' ) {

  		let nodeObject = nodeObjectsCacheMap.get( obj );

  		if ( nodeObject === undefined ) {

  			nodeObject = new Proxy( obj, shaderNodeHandler );

  			nodeObjectsCacheMap.set( obj, nodeObject );
  			nodeObjectsCacheMap.set( nodeObject, nodeObject );

  		}

  		return nodeObject;

  	} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {

  		return nodeObject( getConstNode( obj, altType ) );

  	} else if ( type === 'shader' ) {

  		return Fn( obj );

  	}

  	return obj;

  };

  const ShaderNodeObjects = function ( objects, altType = null ) {

  	for ( const name in objects ) {

  		objects[ name ] = nodeObject( objects[ name ], altType );

  	}

  	return objects;

  };

  const ShaderNodeArray = function ( array, altType = null ) {

  	const len = array.length;

  	for ( let i = 0; i < len; i ++ ) {

  		array[ i ] = nodeObject( array[ i ], altType );

  	}

  	return array;

  };

  const ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {

  	const assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );

  	if ( scope === null ) {

  		return ( ...params ) => {

  			return assignNode( new NodeClass( ...nodeArray( params ) ) );

  		};

  	} else if ( factor !== null ) {

  		factor = nodeObject( factor );

  		return ( ...params ) => {

  			return assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );

  		};

  	} else {

  		return ( ...params ) => {

  			return assignNode( new NodeClass( scope, ...nodeArray( params ) ) );

  		};

  	}

  };

  const ShaderNodeImmutable = function ( NodeClass, ...params ) {

  	return nodeObject( new NodeClass( ...nodeArray( params ) ) );

  };

  class ShaderCallNodeInternal extends Node {

  	constructor( shaderNode, inputNodes ) {

  		super();

  		this.shaderNode = shaderNode;
  		this.inputNodes = inputNodes;

  	}

  	getNodeType( builder ) {

  		return this.shaderNode.nodeType || this.getOutputNode( builder ).getNodeType( builder );

  	}

  	call( builder ) {

  		const { shaderNode, inputNodes } = this;

  		const properties = builder.getNodeProperties( shaderNode );
  		if ( properties.onceOutput ) return properties.onceOutput;

  		//

  		let result = null;

  		if ( shaderNode.layout ) {

  			let functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );

  			if ( functionNodesCacheMap === undefined ) {

  				functionNodesCacheMap = new WeakMap();

  				nodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );

  			}

  			let functionNode = functionNodesCacheMap.get( shaderNode );

  			if ( functionNode === undefined ) {

  				functionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );

  				functionNodesCacheMap.set( shaderNode, functionNode );

  			}

  			if ( builder.currentFunctionNode !== null ) {

  				builder.currentFunctionNode.includes.push( functionNode );

  			}

  			result = nodeObject( functionNode.call( inputNodes ) );

  		} else {

  			const jsFunc = shaderNode.jsFunc;
  			const outputNode = inputNodes !== null ? jsFunc( inputNodes, builder ) : jsFunc( builder );

  			result = nodeObject( outputNode );

  		}

  		if ( shaderNode.once ) {

  			properties.onceOutput = result;

  		}

  		return result;

  	}

  	getOutputNode( builder ) {

  		const properties = builder.getNodeProperties( this );

  		if ( properties.outputNode === null ) {

  			properties.outputNode = this.setupOutput( builder );

  		}

  		return properties.outputNode;

  	}

  	setup( builder ) {

  		return this.getOutputNode( builder );

  	}

  	setupOutput( builder ) {

  		builder.addStack();

  		builder.stack.outputNode = this.call( builder );

  		return builder.removeStack();

  	}

  	generate( builder, output ) {

  		const outputNode = this.getOutputNode( builder );

  		return outputNode.build( builder, output );

  	}

  }

  class ShaderNodeInternal extends Node {

  	constructor( jsFunc, nodeType ) {

  		super( nodeType );

  		this.jsFunc = jsFunc;
  		this.layout = null;

  		this.global = true;

  		this.once = false;

  	}

  	setLayout( layout ) {

  		this.layout = layout;

  		return this;

  	}

  	call( inputs = null ) {

  		nodeObjects( inputs );

  		return nodeObject( new ShaderCallNodeInternal( this, inputs ) );

  	}

  	setup() {

  		return this.call();

  	}

  }

  const bools = [ false, true ];
  const uints = [ 0, 1, 2, 3 ];
  const ints = [ - 1, - 2 ];
  const floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];

  const boolsCacheMap = new Map();
  for ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );

  const uintsCacheMap = new Map();
  for ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );

  const intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );
  for ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );

  const floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );
  for ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );
  for ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );

  const cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };

  const constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );

  const getConstNode = ( value, type ) => {

  	if ( constNodesCacheMap.has( value ) ) {

  		return constNodesCacheMap.get( value );

  	} else if ( value.isNode === true ) {

  		return value;

  	} else {

  		return new ConstNode( value, type );

  	}

  };

  const safeGetNodeType = ( node ) => {

  	try {

  		return node.getNodeType();

  	} catch ( _ ) {

  		return undefined;

  	}

  };

  const ConvertType = function ( type, cacheMap = null ) {

  	return ( ...params ) => {

  		if ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {

  			params = [ getValueFromType( type, ...params ) ];

  		}

  		if ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {

  			return nodeObject( cacheMap.get( params[ 0 ] ) );

  		}

  		if ( params.length === 1 ) {

  			const node = getConstNode( params[ 0 ], type );
  			if ( safeGetNodeType( node ) === type ) return nodeObject( node );
  			return nodeObject( new ConvertNode( node, type ) );

  		}

  		const nodes = params.map( param => getConstNode( param ) );
  		return nodeObject( new JoinNode( nodes, type ) );

  	};

  };

  // exports

  const defined = ( v ) => typeof v === 'object' && v !== null ? v.value : v; // TODO: remove boolean conversion and defined function

  // utils

  const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;

  // shader node base

  function ShaderNode( jsFunc, nodeType ) {

  	return new Proxy( new ShaderNodeInternal( jsFunc, nodeType ), shaderNodeHandler );

  }

  const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );
  const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );
  const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );
  const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );
  const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );

  const Fn = ( jsFunc, nodeType ) => {

  	const shaderNode = new ShaderNode( jsFunc, nodeType );

  	const fn = ( ...params ) => {

  		let inputs;

  		nodeObjects( params );

  		if ( params[ 0 ] && params[ 0 ].isNode ) {

  			inputs = [ ...params ];

  		} else {

  			inputs = params[ 0 ];

  		}

  		return shaderNode.call( inputs );

  	};

  	fn.shaderNode = shaderNode;

  	fn.setLayout = ( layout ) => {

  		shaderNode.setLayout( layout );

  		return fn;

  	};

  	fn.once = () => {

  		shaderNode.once = true;

  		return fn;

  	};

  	return fn;

  };

  //

  addMethodChaining( 'toGlobal', ( node ) => {

  	node.global = true;

  	return node;

  } );

  //

  const setCurrentStack = ( stack ) => {

  	currentStack = stack;

  };

  const getCurrentStack = () => currentStack;

  const If = ( ...params ) => currentStack.If( ...params );

  function append( node ) {

  	if ( currentStack ) currentStack.add( node );

  	return node;

  }

  addMethodChaining( 'append', append );

  // types

  const color = new ConvertType( 'color' );

  const float = new ConvertType( 'float', cacheMaps.float );
  const int = new ConvertType( 'int', cacheMaps.ints );
  const uint = new ConvertType( 'uint', cacheMaps.uint );
  const bool = new ConvertType( 'bool', cacheMaps.bool );

  const vec2 = new ConvertType( 'vec2' );
  const ivec2 = new ConvertType( 'ivec2' );
  const uvec2 = new ConvertType( 'uvec2' );
  const bvec2 = new ConvertType( 'bvec2' );

  const vec3 = new ConvertType( 'vec3' );
  const ivec3 = new ConvertType( 'ivec3' );
  const uvec3 = new ConvertType( 'uvec3' );
  const bvec3 = new ConvertType( 'bvec3' );

  const vec4 = new ConvertType( 'vec4' );
  const ivec4 = new ConvertType( 'ivec4' );
  const uvec4 = new ConvertType( 'uvec4' );
  const bvec4 = new ConvertType( 'bvec4' );

  const mat2 = new ConvertType( 'mat2' );
  const mat3 = new ConvertType( 'mat3' );
  const mat4 = new ConvertType( 'mat4' );

  addMethodChaining( 'toColor', color );
  addMethodChaining( 'toFloat', float );
  addMethodChaining( 'toInt', int );
  addMethodChaining( 'toUint', uint );
  addMethodChaining( 'toBool', bool );
  addMethodChaining( 'toVec2', vec2 );
  addMethodChaining( 'toIVec2', ivec2 );
  addMethodChaining( 'toUVec2', uvec2 );
  addMethodChaining( 'toBVec2', bvec2 );
  addMethodChaining( 'toVec3', vec3 );
  addMethodChaining( 'toIVec3', ivec3 );
  addMethodChaining( 'toUVec3', uvec3 );
  addMethodChaining( 'toBVec3', bvec3 );
  addMethodChaining( 'toVec4', vec4 );
  addMethodChaining( 'toIVec4', ivec4 );
  addMethodChaining( 'toUVec4', uvec4 );
  addMethodChaining( 'toBVec4', bvec4 );
  addMethodChaining( 'toMat2', mat2 );
  addMethodChaining( 'toMat3', mat3 );
  addMethodChaining( 'toMat4', mat4 );

  // basic nodes

  const element = /*@__PURE__*/ nodeProxy( ArrayElementNode );
  const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );

  addMethodChaining( 'element', element );
  addMethodChaining( 'convert', convert );

  class UniformGroupNode extends Node {

  	static get type() {

  		return 'UniformGroupNode';

  	}

  	constructor( name, shared = false, order = 1 ) {

  		super( 'string' );

  		this.name = name;
  		this.version = 0;

  		this.shared = shared;
  		this.order = order;
  		this.isUniformGroup = true;

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.name = this.name;
  		data.version = this.version;
  		data.shared = this.shared;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.name = data.name;
  		this.version = data.version;
  		this.shared = data.shared;

  	}

  }

  const uniformGroup = ( name ) => new UniformGroupNode( name );
  const sharedUniformGroup = ( name, order = 0 ) => new UniformGroupNode( name, true, order );

  const frameGroup = /*@__PURE__*/ sharedUniformGroup( 'frame' );
  const renderGroup = /*@__PURE__*/ sharedUniformGroup( 'render' );
  const objectGroup = /*@__PURE__*/ uniformGroup( 'object' );

  class UniformNode extends InputNode {

  	static get type() {

  		return 'UniformNode';

  	}

  	constructor( value, nodeType = null ) {

  		super( value, nodeType );

  		this.isUniformNode = true;

  		this.name = '';
  		this.groupNode = objectGroup;

  	}

  	label( name ) {

  		this.name = name;

  		return this;

  	}

  	setGroup( group ) {

  		this.groupNode = group;

  		return this;

  	}

  	getGroup() {

  		return this.groupNode;

  	}

  	getUniformHash( builder ) {

  		return this.getHash( builder );

  	}

  	onUpdate( callback, updateType ) {

  		const self = this.getSelf();

  		callback = callback.bind( self );

  		return super.onUpdate( ( frame ) => {

  			const value = callback( frame, self );

  			if ( value !== undefined ) {

  				this.value = value;

  			}

  	 	}, updateType );

  	}

  	generate( builder, output ) {

  		const type = this.getNodeType( builder );

  		const hash = this.getUniformHash( builder );

  		let sharedNode = builder.getNodeFromHash( hash );

  		if ( sharedNode === undefined ) {

  			builder.setHashNode( this, hash );

  			sharedNode = this;

  		}

  		const sharedNodeType = sharedNode.getInputType( builder );

  		const nodeUniform = builder.getUniformFromNode( sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label );
  		const propertyName = builder.getPropertyName( nodeUniform );

  		if ( builder.context.label !== undefined ) delete builder.context.label;

  		return builder.format( propertyName, type, output );

  	}

  }

  const uniform = ( arg1, arg2 ) => {

  	const nodeType = getConstNodeType( arg2 || arg1 );

  	// @TODO: get ConstNode from .traverse() in the future
  	const value = ( arg1 && arg1.isNode === true ) ? ( arg1.node && arg1.node.value ) || arg1.value : arg1;

  	return nodeObject( new UniformNode( value, nodeType ) );

  };

  class PropertyNode extends Node {

  	static get type() {

  		return 'PropertyNode';

  	}

  	constructor( nodeType, name = null, varying = false ) {

  		super( nodeType );

  		this.name = name;
  		this.varying = varying;

  		this.isPropertyNode = true;

  	}

  	getHash( builder ) {

  		return this.name || super.getHash( builder );

  	}

  	isGlobal( /*builder*/ ) {

  		return true;

  	}

  	generate( builder ) {

  		let nodeVar;

  		if ( this.varying === true ) {

  			nodeVar = builder.getVaryingFromNode( this, this.name );
  			nodeVar.needsInterpolation = true;

  		} else {

  			nodeVar = builder.getVarFromNode( this, this.name );

  		}

  		return builder.getPropertyName( nodeVar );

  	}

  }

  const property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );
  const varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );

  const diffuseColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );
  const emissive = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'EmissiveColor' );
  const roughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Roughness' );
  const metalness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Metalness' );
  const clearcoat = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Clearcoat' );
  const clearcoatRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );
  const sheen = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'Sheen' );
  const sheenRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );
  const iridescence = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Iridescence' );
  const iridescenceIOR = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );
  const iridescenceThickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );
  const alphaT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AlphaT' );
  const anisotropy = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Anisotropy' );
  const anisotropyT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyT' );
  const anisotropyB = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyB' );
  const specularColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'SpecularColor' );
  const specularF90 = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SpecularF90' );
  const shininess = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Shininess' );
  const output = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'Output' );
  const dashSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'dashSize' );
  const gapSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'gapSize' );
  const ior = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IOR' );
  const transmission = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Transmission' );
  const thickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Thickness' );
  const attenuationDistance = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AttenuationDistance' );
  const attenuationColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'AttenuationColor' );
  const dispersion = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Dispersion' );

  class AssignNode extends TempNode {

  	static get type() {

  		return 'AssignNode';

  	}

  	constructor( targetNode, sourceNode ) {

  		super();

  		this.targetNode = targetNode;
  		this.sourceNode = sourceNode;

  	}

  	hasDependencies() {

  		return false;

  	}

  	getNodeType( builder, output ) {

  		return output !== 'void' ? this.targetNode.getNodeType( builder ) : 'void';

  	}

  	needsSplitAssign( builder ) {

  		const { targetNode } = this;

  		if ( builder.isAvailable( 'swizzleAssign' ) === false && targetNode.isSplitNode && targetNode.components.length > 1 ) {

  			const targetLength = builder.getTypeLength( targetNode.node.getNodeType( builder ) );
  			const assignDiferentVector = vectorComponents.join( '' ).slice( 0, targetLength ) !== targetNode.components;

  			return assignDiferentVector;

  		}

  		return false;

  	}

  	generate( builder, output ) {

  		const { targetNode, sourceNode } = this;

  		const needsSplitAssign = this.needsSplitAssign( builder );

  		const targetType = targetNode.getNodeType( builder );

  		const target = targetNode.context( { assign: true } ).build( builder );
  		const source = sourceNode.build( builder, targetType );

  		const sourceType = sourceNode.getNodeType( builder );

  		const nodeData = builder.getDataFromNode( this );

  		//

  		let snippet;

  		if ( nodeData.initialized === true ) {

  			if ( output !== 'void' ) {

  				snippet = target;

  			}

  		} else if ( needsSplitAssign ) {

  			const sourceVar = builder.getVarFromNode( this, null, targetType );
  			const sourceProperty = builder.getPropertyName( sourceVar );

  			builder.addLineFlowCode( `${ sourceProperty } = ${ source }`, this );

  			const targetRoot = targetNode.node.context( { assign: true } ).build( builder );

  			for ( let i = 0; i < targetNode.components.length; i ++ ) {

  				const component = targetNode.components[ i ];

  				builder.addLineFlowCode( `${ targetRoot }.${ component } = ${ sourceProperty }[ ${ i } ]`, this );

  			}

  			if ( output !== 'void' ) {

  				snippet = target;

  			}

  		} else {

  			snippet = `${ target } = ${ source }`;

  			if ( output === 'void' || sourceType === 'void' ) {

  				builder.addLineFlowCode( snippet, this );

  				if ( output !== 'void' ) {

  					snippet = target;

  				}

  			}

  		}

  		nodeData.initialized = true;

  		return builder.format( snippet, targetType, output );

  	}

  }

  const assign = /*@__PURE__*/ nodeProxy( AssignNode );

  addMethodChaining( 'assign', assign );

  class FunctionCallNode extends TempNode {

  	static get type() {

  		return 'FunctionCallNode';

  	}

  	constructor( functionNode = null, parameters = {} ) {

  		super();

  		this.functionNode = functionNode;
  		this.parameters = parameters;

  	}

  	setParameters( parameters ) {

  		this.parameters = parameters;

  		return this;

  	}

  	getParameters() {

  		return this.parameters;

  	}

  	getNodeType( builder ) {

  		return this.functionNode.getNodeType( builder );

  	}

  	generate( builder ) {

  		const params = [];

  		const functionNode = this.functionNode;

  		const inputs = functionNode.getInputs( builder );
  		const parameters = this.parameters;

  		const generateInput = ( node, inputNode ) => {

  			const type = inputNode.type;
  			const pointer = type === 'pointer';

  			let output;

  			if ( pointer ) output = '&' + node.build( builder );
  			else output = node.build( builder, type );

  			return output;

  		};

  		if ( Array.isArray( parameters ) ) {

  			for ( let i = 0; i < parameters.length; i ++ ) {

  				params.push( generateInput( parameters[ i ], inputs[ i ] ) );

  			}

  		} else {

  			for ( const inputNode of inputs ) {

  				const node = parameters[ inputNode.name ];

  				if ( node !== undefined ) {

  					params.push( generateInput( node, inputNode ) );

  				} else {

  					throw new Error( `FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.` );

  				}

  			}

  		}

  		const functionName = functionNode.build( builder, 'property' );

  		return `${functionName}( ${params.join( ', ' )} )`;

  	}

  }

  const call = ( func, ...params ) => {

  	params = params.length > 1 || ( params[ 0 ] && params[ 0 ].isNode === true ) ? nodeArray( params ) : nodeObjects( params[ 0 ] );

  	return nodeObject( new FunctionCallNode( nodeObject( func ), params ) );

  };

  addMethodChaining( 'call', call );

  class OperatorNode extends TempNode {

  	static get type() {

  		return 'OperatorNode';

  	}

  	constructor( op, aNode, bNode, ...params ) {

  		super();

  		if ( params.length > 0 ) {

  			let finalOp = new OperatorNode( op, aNode, bNode );

  			for ( let i = 0; i < params.length - 1; i ++ ) {

  				finalOp = new OperatorNode( op, finalOp, params[ i ] );

  			}

  			aNode = finalOp;
  			bNode = params[ params.length - 1 ];

  		}

  		this.op = op;
  		this.aNode = aNode;
  		this.bNode = bNode;

  	}

  	getNodeType( builder, output ) {

  		const op = this.op;

  		const aNode = this.aNode;
  		const bNode = this.bNode;

  		const typeA = aNode.getNodeType( builder );
  		const typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;

  		if ( typeA === 'void' || typeB === 'void' ) {

  			return 'void';

  		} else if ( op === '%' ) {

  			return typeA;

  		} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {

  			return builder.getIntegerType( typeA );

  		} else if ( op === '!' || op === '==' || op === '&&' || op === '||' || op === '^^' ) {

  			return 'bool';

  		} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {

  			const typeLength = output ? builder.getTypeLength( output ) : Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );

  			return typeLength > 1 ? `bvec${ typeLength }` : 'bool';

  		} else {

  			if ( typeA === 'float' && builder.isMatrix( typeB ) ) {

  				return typeB;

  			} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {

  				// matrix x vector

  				return builder.getVectorFromMatrix( typeA );

  			} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {

  				// vector x matrix

  				return builder.getVectorFromMatrix( typeB );

  			} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {

  				// anytype x anytype: use the greater length vector

  				return typeB;

  			}

  			return typeA;

  		}

  	}

  	generate( builder, output ) {

  		const op = this.op;

  		const aNode = this.aNode;
  		const bNode = this.bNode;

  		const type = this.getNodeType( builder, output );

  		let typeA = null;
  		let typeB = null;

  		if ( type !== 'void' ) {

  			typeA = aNode.getNodeType( builder );
  			typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;

  			if ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' ) {

  				if ( builder.isVector( typeA ) ) {

  					typeB = typeA;

  				} else if ( typeA !== typeB ) {

  					typeA = typeB = 'float';

  				}

  			} else if ( op === '>>' || op === '<<' ) {

  				typeA = type;
  				typeB = builder.changeComponentType( typeB, 'uint' );

  			} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {

  				// matrix x vector

  				typeB = builder.getVectorFromMatrix( typeA );

  			} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {

  				// vector x matrix

  				typeA = builder.getVectorFromMatrix( typeB );

  			} else {

  				// anytype x anytype

  				typeA = typeB = type;

  			}

  		} else {

  			typeA = typeB = type;

  		}

  		const a = aNode.build( builder, typeA );
  		const b = typeof bNode !== 'undefined' ? bNode.build( builder, typeB ) : null;

  		const outputLength = builder.getTypeLength( output );
  		const fnOpSnippet = builder.getFunctionOperator( op );

  		if ( output !== 'void' ) {

  			if ( op === '<' && outputLength > 1 ) {

  				if ( builder.useComparisonMethod ) {

  					return builder.format( `${ builder.getMethod( 'lessThan', output ) }( ${ a }, ${ b } )`, type, output );

  				} else {

  					return builder.format( `( ${ a } < ${ b } )`, type, output );

  				}

  			} else if ( op === '<=' && outputLength > 1 ) {

  				if ( builder.useComparisonMethod ) {

  					return builder.format( `${ builder.getMethod( 'lessThanEqual', output ) }( ${ a }, ${ b } )`, type, output );

  				} else {

  					return builder.format( `( ${ a } <= ${ b } )`, type, output );

  				}

  			} else if ( op === '>' && outputLength > 1 ) {

  				if ( builder.useComparisonMethod ) {

  					return builder.format( `${ builder.getMethod( 'greaterThan', output ) }( ${ a }, ${ b } )`, type, output );

  				} else {

  					return builder.format( `( ${ a } > ${ b } )`, type, output );

  				}

  			} else if ( op === '>=' && outputLength > 1 ) {

  				if ( builder.useComparisonMethod ) {

  					return builder.format( `${ builder.getMethod( 'greaterThanEqual', output ) }( ${ a }, ${ b } )`, type, output );

  				} else {

  					return builder.format( `( ${ a } >= ${ b } )`, type, output );

  				}

  			} else if ( op === '!' || op === '~' ) {

  				return builder.format( `(${op}${a})`, typeA, output );

  			} else if ( fnOpSnippet ) {

  				return builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );

  			} else {

  				return builder.format( `( ${ a } ${ op } ${ b } )`, type, output );

  			}

  		} else if ( typeA !== 'void' ) {

  			if ( fnOpSnippet ) {

  				return builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );

  			} else {

  				return builder.format( `${ a } ${ op } ${ b }`, type, output );

  			}

  		}

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.op = this.op;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.op = data.op;

  	}

  }

  const add = /*@__PURE__*/ nodeProxy( OperatorNode, '+' );
  const sub = /*@__PURE__*/ nodeProxy( OperatorNode, '-' );
  const mul = /*@__PURE__*/ nodeProxy( OperatorNode, '*' );
  const div = /*@__PURE__*/ nodeProxy( OperatorNode, '/' );
  const modInt = /*@__PURE__*/ nodeProxy( OperatorNode, '%' );
  const equal = /*@__PURE__*/ nodeProxy( OperatorNode, '==' );
  const notEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '!=' );
  const lessThan = /*@__PURE__*/ nodeProxy( OperatorNode, '<' );
  const greaterThan = /*@__PURE__*/ nodeProxy( OperatorNode, '>' );
  const lessThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '<=' );
  const greaterThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '>=' );
  const and = /*@__PURE__*/ nodeProxy( OperatorNode, '&&' );
  const or = /*@__PURE__*/ nodeProxy( OperatorNode, '||' );
  const not = /*@__PURE__*/ nodeProxy( OperatorNode, '!' );
  const xor = /*@__PURE__*/ nodeProxy( OperatorNode, '^^' );
  const bitAnd = /*@__PURE__*/ nodeProxy( OperatorNode, '&' );
  const bitNot = /*@__PURE__*/ nodeProxy( OperatorNode, '~' );
  const bitOr = /*@__PURE__*/ nodeProxy( OperatorNode, '|' );
  const bitXor = /*@__PURE__*/ nodeProxy( OperatorNode, '^' );
  const shiftLeft = /*@__PURE__*/ nodeProxy( OperatorNode, '<<' );
  const shiftRight = /*@__PURE__*/ nodeProxy( OperatorNode, '>>' );

  addMethodChaining( 'add', add );
  addMethodChaining( 'sub', sub );
  addMethodChaining( 'mul', mul );
  addMethodChaining( 'div', div );
  addMethodChaining( 'modInt', modInt );
  addMethodChaining( 'equal', equal );
  addMethodChaining( 'notEqual', notEqual );
  addMethodChaining( 'lessThan', lessThan );
  addMethodChaining( 'greaterThan', greaterThan );
  addMethodChaining( 'lessThanEqual', lessThanEqual );
  addMethodChaining( 'greaterThanEqual', greaterThanEqual );
  addMethodChaining( 'and', and );
  addMethodChaining( 'or', or );
  addMethodChaining( 'not', not );
  addMethodChaining( 'xor', xor );
  addMethodChaining( 'bitAnd', bitAnd );
  addMethodChaining( 'bitNot', bitNot );
  addMethodChaining( 'bitOr', bitOr );
  addMethodChaining( 'bitXor', bitXor );
  addMethodChaining( 'shiftLeft', shiftLeft );
  addMethodChaining( 'shiftRight', shiftRight );


  const remainder = ( ...params ) => { // @deprecated, r168

  	console.warn( 'TSL.OperatorNode: .remainder() has been renamed to .modInt().' );
  	return modInt( ...params );

  };

  addMethodChaining( 'remainder', remainder );

  class MathNode extends TempNode {

  	static get type() {

  		return 'MathNode';

  	}

  	constructor( method, aNode, bNode = null, cNode = null ) {

  		super();

  		this.method = method;

  		this.aNode = aNode;
  		this.bNode = bNode;
  		this.cNode = cNode;

  	}

  	getInputType( builder ) {

  		const aType = this.aNode.getNodeType( builder );
  		const bType = this.bNode ? this.bNode.getNodeType( builder ) : null;
  		const cType = this.cNode ? this.cNode.getNodeType( builder ) : null;

  		const aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );
  		const bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );
  		const cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );

  		if ( aLen > bLen && aLen > cLen ) {

  			return aType;

  		} else if ( bLen > cLen ) {

  			return bType;

  		} else if ( cLen > aLen ) {

  			return cType;

  		}

  		return aType;

  	}

  	getNodeType( builder ) {

  		const method = this.method;

  		if ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {

  			return 'float';

  		} else if ( method === MathNode.CROSS ) {

  			return 'vec3';

  		} else if ( method === MathNode.ALL ) {

  			return 'bool';

  		} else if ( method === MathNode.EQUALS ) {

  			return builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );

  		} else if ( method === MathNode.MOD ) {

  			return this.aNode.getNodeType( builder );

  		} else {

  			return this.getInputType( builder );

  		}

  	}

  	generate( builder, output ) {

  		const method = this.method;

  		const type = this.getNodeType( builder );
  		const inputType = this.getInputType( builder );

  		const a = this.aNode;
  		const b = this.bNode;
  		const c = this.cNode;

  		const isWebGL = builder.renderer.isWebGLRenderer === true;

  		if ( method === MathNode.TRANSFORM_DIRECTION ) {

  			// dir can be either a direction vector or a normal vector
  			// upper-left 3x3 of matrix is assumed to be orthogonal

  			let tA = a;
  			let tB = b;

  			if ( builder.isMatrix( tA.getNodeType( builder ) ) ) {

  				tB = vec4( vec3( tB ), 0.0 );

  			} else {

  				tA = vec4( vec3( tA ), 0.0 );

  			}

  			const mulNode = mul( tA, tB ).xyz;

  			return normalize( mulNode ).build( builder, output );

  		} else if ( method === MathNode.NEGATE ) {

  			return builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );

  		} else if ( method === MathNode.ONE_MINUS ) {

  			return sub( 1.0, a ).build( builder, output );

  		} else if ( method === MathNode.RECIPROCAL ) {

  			return div( 1.0, a ).build( builder, output );

  		} else if ( method === MathNode.DIFFERENCE ) {

  			return abs( sub( a, b ) ).build( builder, output );

  		} else {

  			const params = [];

  			if ( method === MathNode.CROSS || method === MathNode.MOD ) {

  				params.push(
  					a.build( builder, type ),
  					b.build( builder, type )
  				);

  			} else if ( isWebGL && method === MathNode.STEP ) {

  				params.push(
  					a.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),
  					b.build( builder, inputType )
  				);

  			} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {

  				params.push(
  					a.build( builder, inputType ),
  					b.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )
  				);

  			} else if ( method === MathNode.REFRACT ) {

  				params.push(
  					a.build( builder, inputType ),
  					b.build( builder, inputType ),
  					c.build( builder, 'float' )
  				);

  			} else if ( method === MathNode.MIX ) {

  				params.push(
  					a.build( builder, inputType ),
  					b.build( builder, inputType ),
  					c.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )
  				);

  			} else {

  				params.push( a.build( builder, inputType ) );
  				if ( b !== null ) params.push( b.build( builder, inputType ) );
  				if ( c !== null ) params.push( c.build( builder, inputType ) );

  			}

  			return builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );

  		}

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.method = this.method;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.method = data.method;

  	}

  }

  // 1 input

  MathNode.ALL = 'all';
  MathNode.ANY = 'any';
  MathNode.EQUALS = 'equals';

  MathNode.RADIANS = 'radians';
  MathNode.DEGREES = 'degrees';
  MathNode.EXP = 'exp';
  MathNode.EXP2 = 'exp2';
  MathNode.LOG = 'log';
  MathNode.LOG2 = 'log2';
  MathNode.SQRT = 'sqrt';
  MathNode.INVERSE_SQRT = 'inversesqrt';
  MathNode.FLOOR = 'floor';
  MathNode.CEIL = 'ceil';
  MathNode.NORMALIZE = 'normalize';
  MathNode.FRACT = 'fract';
  MathNode.SIN = 'sin';
  MathNode.COS = 'cos';
  MathNode.TAN = 'tan';
  MathNode.ASIN = 'asin';
  MathNode.ACOS = 'acos';
  MathNode.ATAN = 'atan';
  MathNode.ABS = 'abs';
  MathNode.SIGN = 'sign';
  MathNode.LENGTH = 'length';
  MathNode.NEGATE = 'negate';
  MathNode.ONE_MINUS = 'oneMinus';
  MathNode.DFDX = 'dFdx';
  MathNode.DFDY = 'dFdy';
  MathNode.ROUND = 'round';
  MathNode.RECIPROCAL = 'reciprocal';
  MathNode.TRUNC = 'trunc';
  MathNode.FWIDTH = 'fwidth';
  MathNode.BITCAST = 'bitcast';
  MathNode.TRANSPOSE = 'transpose';

  // 2 inputs

  MathNode.ATAN2 = 'atan2';
  MathNode.MIN = 'min';
  MathNode.MAX = 'max';
  MathNode.MOD = 'mod';
  MathNode.STEP = 'step';
  MathNode.REFLECT = 'reflect';
  MathNode.DISTANCE = 'distance';
  MathNode.DIFFERENCE = 'difference';
  MathNode.DOT = 'dot';
  MathNode.CROSS = 'cross';
  MathNode.POW = 'pow';
  MathNode.TRANSFORM_DIRECTION = 'transformDirection';

  // 3 inputs

  MathNode.MIX = 'mix';
  MathNode.CLAMP = 'clamp';
  MathNode.REFRACT = 'refract';
  MathNode.SMOOTHSTEP = 'smoothstep';
  MathNode.FACEFORWARD = 'faceforward';

  const EPSILON = /*@__PURE__*/ float( 1e-6 );
  const PI = /*@__PURE__*/ float( Math.PI );

  const all = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ALL );
  const any = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ANY );
  const equals = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EQUALS );

  const radians = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RADIANS );
  const degrees = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DEGREES );
  const exp = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP );
  const exp2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP2 );
  const log = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG );
  const log2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG2 );
  const sqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SQRT );
  const inverseSqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.INVERSE_SQRT );
  const floor = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FLOOR );
  const ceil = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CEIL );
  const normalize = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NORMALIZE );
  const fract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FRACT );
  const sin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIN );
  const cos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.COS );
  const tan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TAN );
  const asin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ASIN );
  const acos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ACOS );
  const atan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN );
  const abs = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ABS );
  const sign = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIGN );
  const length = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LENGTH );
  const negate = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NEGATE );
  const oneMinus = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ONE_MINUS );
  const dFdx = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDX );
  const dFdy = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDY );
  const round = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ROUND );
  const reciprocal = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RECIPROCAL );
  const trunc = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRUNC );
  const fwidth = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FWIDTH );
  /*@__PURE__*/ nodeProxy( MathNode, MathNode.BITCAST );
  const transpose = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSPOSE );

  const atan2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN2 );
  const min$1 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIN );
  const max$1 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MAX );
  const mod = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MOD );
  const step = /*@__PURE__*/ nodeProxy( MathNode, MathNode.STEP );
  const reflect = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFLECT );
  const distance = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DISTANCE );
  const difference = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DIFFERENCE );
  const dot = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DOT );
  const cross = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CROSS );
  const pow = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW );
  const pow2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 2 );
  const pow3 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 3 );
  const pow4 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 4 );
  const transformDirection = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );

  const cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );
  const lengthSq = ( a ) => dot( a, a );
  const mix$2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIX );
  const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );
  const saturate$1 = ( value ) => clamp( value );
  const refract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFRACT );
  const smoothstep = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SMOOTHSTEP );
  const faceForward = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FACEFORWARD );

  const rand = /*@__PURE__*/ Fn( ( [ uv ] ) => {

  	const a = 12.9898, b = 78.233, c = 43758.5453;
  	const dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );

  	return fract( sin( sn ).mul( c ) );

  } );

  const mixElement = ( t, e1, e2 ) => mix$2( e1, e2, t );
  const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );

  addMethodChaining( 'all', all );
  addMethodChaining( 'any', any );
  addMethodChaining( 'equals', equals );

  addMethodChaining( 'radians', radians );
  addMethodChaining( 'degrees', degrees );
  addMethodChaining( 'exp', exp );
  addMethodChaining( 'exp2', exp2 );
  addMethodChaining( 'log', log );
  addMethodChaining( 'log2', log2 );
  addMethodChaining( 'sqrt', sqrt );
  addMethodChaining( 'inverseSqrt', inverseSqrt );
  addMethodChaining( 'floor', floor );
  addMethodChaining( 'ceil', ceil );
  addMethodChaining( 'normalize', normalize );
  addMethodChaining( 'fract', fract );
  addMethodChaining( 'sin', sin );
  addMethodChaining( 'cos', cos );
  addMethodChaining( 'tan', tan );
  addMethodChaining( 'asin', asin );
  addMethodChaining( 'acos', acos );
  addMethodChaining( 'atan', atan );
  addMethodChaining( 'abs', abs );
  addMethodChaining( 'sign', sign );
  addMethodChaining( 'length', length );
  addMethodChaining( 'lengthSq', lengthSq );
  addMethodChaining( 'negate', negate );
  addMethodChaining( 'oneMinus', oneMinus );
  addMethodChaining( 'dFdx', dFdx );
  addMethodChaining( 'dFdy', dFdy );
  addMethodChaining( 'round', round );
  addMethodChaining( 'reciprocal', reciprocal );
  addMethodChaining( 'trunc', trunc );
  addMethodChaining( 'fwidth', fwidth );
  addMethodChaining( 'atan2', atan2 );
  addMethodChaining( 'min', min$1 );
  addMethodChaining( 'max', max$1 );
  addMethodChaining( 'mod', mod );
  addMethodChaining( 'step', step );
  addMethodChaining( 'reflect', reflect );
  addMethodChaining( 'distance', distance );
  addMethodChaining( 'dot', dot );
  addMethodChaining( 'cross', cross );
  addMethodChaining( 'pow', pow );
  addMethodChaining( 'pow2', pow2 );
  addMethodChaining( 'pow3', pow3 );
  addMethodChaining( 'pow4', pow4 );
  addMethodChaining( 'transformDirection', transformDirection );
  addMethodChaining( 'mix', mixElement );
  addMethodChaining( 'clamp', clamp );
  addMethodChaining( 'refract', refract );
  addMethodChaining( 'smoothstep', smoothstepElement );
  addMethodChaining( 'faceForward', faceForward );
  addMethodChaining( 'difference', difference );
  addMethodChaining( 'saturate', saturate$1 );
  addMethodChaining( 'cbrt', cbrt );
  addMethodChaining( 'transpose', transpose );
  addMethodChaining( 'rand', rand );

  class ConditionalNode extends Node {

  	static get type() {

  		return 'ConditionalNode';

  	}

  	constructor( condNode, ifNode, elseNode = null ) {

  		super();

  		this.condNode = condNode;

  		this.ifNode = ifNode;
  		this.elseNode = elseNode;

  	}

  	getNodeType( builder ) {

  		const ifType = this.ifNode.getNodeType( builder );

  		if ( this.elseNode !== null ) {

  			const elseType = this.elseNode.getNodeType( builder );

  			if ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {

  				return elseType;

  			}

  		}

  		return ifType;

  	}

  	setup( builder ) {

  		const condNode = this.condNode.cache();
  		const ifNode = this.ifNode.cache();
  		const elseNode = this.elseNode ? this.elseNode.cache() : null;

  		//

  		const currentNodeBlock = builder.context.nodeBlock;

  		builder.getDataFromNode( ifNode ).parentNodeBlock = currentNodeBlock;
  		if ( elseNode !== null ) builder.getDataFromNode( elseNode ).parentNodeBlock = currentNodeBlock;

  		//

  		const properties = builder.getNodeProperties( this );
  		properties.condNode = condNode;
  		properties.ifNode = ifNode.context( { nodeBlock: ifNode } );
  		properties.elseNode = elseNode ? elseNode.context( { nodeBlock: elseNode } ) : null;

  	}

  	generate( builder, output ) {

  		const type = this.getNodeType( builder );

  		const nodeData = builder.getDataFromNode( this );

  		if ( nodeData.nodeProperty !== undefined ) {

  			return nodeData.nodeProperty;

  		}

  		const { condNode, ifNode, elseNode } = builder.getNodeProperties( this );

  		const needsOutput = output !== 'void';
  		const nodeProperty = needsOutput ? property( type ).build( builder ) : '';

  		nodeData.nodeProperty = nodeProperty;

  		const nodeSnippet = condNode.build( builder, 'bool' );

  		builder.addFlowCode( `\n${ builder.tab }if ( ${ nodeSnippet } ) {\n\n` ).addFlowTab();

  		let ifSnippet = ifNode.build( builder, type );

  		if ( ifSnippet ) {

  			if ( needsOutput ) {

  				ifSnippet = nodeProperty + ' = ' + ifSnippet + ';';

  			} else {

  				ifSnippet = 'return ' + ifSnippet + ';';

  			}

  		}

  		builder.removeFlowTab().addFlowCode( builder.tab + '\t' + ifSnippet + '\n\n' + builder.tab + '}' );

  		if ( elseNode !== null ) {

  			builder.addFlowCode( ' else {\n\n' ).addFlowTab();

  			let elseSnippet = elseNode.build( builder, type );

  			if ( elseSnippet ) {

  				if ( needsOutput ) {

  					elseSnippet = nodeProperty + ' = ' + elseSnippet + ';';

  				} else {

  					elseSnippet = 'return ' + elseSnippet + ';';

  				}

  			}

  			builder.removeFlowTab().addFlowCode( builder.tab + '\t' + elseSnippet + '\n\n' + builder.tab + '}\n\n' );

  		} else {

  			builder.addFlowCode( '\n\n' );

  		}

  		return builder.format( nodeProperty, type, output );

  	}

  }

  const select = /*@__PURE__*/ nodeProxy( ConditionalNode );

  addMethodChaining( 'select', select );

  //

  const cond = ( ...params ) => { // @deprecated, r168

  	console.warn( 'TSL.ConditionalNode: cond() has been renamed to select().' );
  	return select( ...params );

  };

  addMethodChaining( 'cond', cond );

  class ContextNode extends Node {

  	static get type() {

  		return 'ContextNode';

  	}

  	constructor( node, value = {} ) {

  		super();

  		this.isContextNode = true;

  		this.node = node;
  		this.value = value;

  	}

  	getScope() {

  		return this.node.getScope();

  	}

  	getNodeType( builder ) {

  		return this.node.getNodeType( builder );

  	}

  	analyze( builder ) {

  		this.node.build( builder );

  	}

  	setup( builder ) {

  		const previousContext = builder.getContext();

  		builder.setContext( { ...builder.context, ...this.value } );

  		const node = this.node.build( builder );

  		builder.setContext( previousContext );

  		return node;

  	}

  	generate( builder, output ) {

  		const previousContext = builder.getContext();

  		builder.setContext( { ...builder.context, ...this.value } );

  		const snippet = this.node.build( builder, output );

  		builder.setContext( previousContext );

  		return snippet;

  	}

  }

  const context = /*@__PURE__*/ nodeProxy( ContextNode );
  const label = ( node, name ) => context( node, { label: name } );

  addMethodChaining( 'context', context );
  addMethodChaining( 'label', label );

  class VarNode extends Node {

  	static get type() {

  		return 'VarNode';

  	}

  	constructor( node, name = null ) {

  		super();

  		this.node = node;
  		this.name = name;

  		this.global = true;

  		this.isVarNode = true;

  	}

  	getHash( builder ) {

  		return this.name || super.getHash( builder );

  	}

  	getNodeType( builder ) {

  		return this.node.getNodeType( builder );

  	}

  	generate( builder ) {

  		const { node, name } = this;

  		const nodeVar = builder.getVarFromNode( this, name, builder.getVectorType( this.getNodeType( builder ) ) );

  		const propertyName = builder.getPropertyName( nodeVar );

  		const snippet = node.build( builder, nodeVar.type );

  		builder.addLineFlowCode( `${propertyName} = ${snippet}`, this );

  		return propertyName;

  	}

  }

  const createVar = /*@__PURE__*/ nodeProxy( VarNode );

  addMethodChaining( 'toVar', ( ...params ) => createVar( ...params ).append() );

  // Deprecated

  const temp = ( node ) => { // @deprecated, r170

  	console.warn( 'TSL: "temp" is deprecated. Use ".toVar()" instead.' );

  	return createVar( node );

  };

  addMethodChaining( 'temp', temp );

  class VaryingNode extends Node {

  	static get type() {

  		return 'VaryingNode';

  	}

  	constructor( node, name = null ) {

  		super();

  		this.node = node;
  		this.name = name;

  		this.isVaryingNode = true;

  	}

  	isGlobal() {

  		return true;

  	}

  	getHash( builder ) {

  		return this.name || super.getHash( builder );

  	}

  	getNodeType( builder ) {

  		// VaryingNode is auto type

  		return this.node.getNodeType( builder );

  	}

  	setupVarying( builder ) {

  		const properties = builder.getNodeProperties( this );

  		let varying = properties.varying;

  		if ( varying === undefined ) {

  			const name = this.name;
  			const type = this.getNodeType( builder );

  			properties.varying = varying = builder.getVaryingFromNode( this, name, type );
  			properties.node = this.node;

  		}

  		// this property can be used to check if the varying can be optimized for a variable
  		varying.needsInterpolation || ( varying.needsInterpolation = ( builder.shaderStage === 'fragment' ) );

  		return varying;

  	}

  	setup( builder ) {

  		this.setupVarying( builder );

  	}

  	analyze( builder ) {

  		this.setupVarying( builder );

  		return this.node.analyze( builder );

  	}

  	generate( builder ) {

  		const properties = builder.getNodeProperties( this );
  		const varying = this.setupVarying( builder );

  		if ( properties.propertyName === undefined ) {

  			const type = this.getNodeType( builder );
  			const propertyName = builder.getPropertyName( varying, NodeShaderStage.VERTEX );

  			// force node run in vertex stage
  			builder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node, type, propertyName );

  			properties.propertyName = propertyName;

  		}

  		return builder.getPropertyName( varying );

  	}

  }

  const varying = /*@__PURE__*/ nodeProxy( VaryingNode );

  addMethodChaining( 'varying', varying );

  const sRGBTransferEOTF = /*@__PURE__*/ Fn( ( [ color ] ) => {

  	const a = color.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );
  	const b = color.mul( 0.0773993808 );
  	const factor = color.lessThanEqual( 0.04045 );

  	const rgbResult = mix$2( a, b, factor );

  	return rgbResult;

  } ).setLayout( {
  	name: 'sRGBTransferEOTF',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' }
  	]
  } );

  const sRGBTransferOETF = /*@__PURE__*/ Fn( ( [ color ] ) => {

  	const a = color.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );
  	const b = color.mul( 12.92 );
  	const factor = color.lessThanEqual( 0.0031308 );

  	const rgbResult = mix$2( a, b, factor );

  	return rgbResult;

  } ).setLayout( {
  	name: 'sRGBTransferOETF',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' }
  	]
  } );

  const WORKING_COLOR_SPACE = 'WorkingColorSpace';
  const OUTPUT_COLOR_SPACE = 'OutputColorSpace';

  class ColorSpaceNode extends TempNode {

  	static get type() {

  		return 'ColorSpaceNode';

  	}

  	constructor( colorNode, source, target ) {

  		super( 'vec4' );

  		this.colorNode = colorNode;
  		this.source = source;
  		this.target = target;

  	}

  	resolveColorSpace( builder, colorSpace ) {

  		if ( colorSpace === WORKING_COLOR_SPACE ) {

  			return ColorManagement.workingColorSpace;

  		} else if ( colorSpace === OUTPUT_COLOR_SPACE ) {

  			return builder.context.outputColorSpace || builder.renderer.outputColorSpace;

  		}

  		return colorSpace;

  	}

  	setup( builder ) {

  		const { colorNode } = this;

  		const source = this.resolveColorSpace( builder, this.source );
  		const target = this.resolveColorSpace( builder, this.target );

  		let outputNode = colorNode;

  		if ( ColorManagement.enabled === false || source === target || ! source || ! target ) {

  			return outputNode;

  		}

  		if ( ColorManagement.getTransfer( source ) === SRGBTransfer ) {

  			outputNode = vec4( sRGBTransferEOTF( outputNode.rgb ), outputNode.a );

  		}

  		if ( ColorManagement.getPrimaries( source ) !== ColorManagement.getPrimaries( target ) ) {

  			outputNode = vec4(
  				mat3( ColorManagement._getMatrix( new Matrix3(), source, target ) ).mul( outputNode.rgb ),
  				outputNode.a
  			);

  		}

  		if ( ColorManagement.getTransfer( target ) === SRGBTransfer ) {

  			outputNode = vec4( sRGBTransferOETF( outputNode.rgb ), outputNode.a );

  		}

  		return outputNode;

  	}

  }

  const toOutputColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, OUTPUT_COLOR_SPACE ) );
  const toWorkingColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), OUTPUT_COLOR_SPACE, WORKING_COLOR_SPACE ) );

  const workingToColorSpace = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, colorSpace ) );
  const colorSpaceToWorking = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), colorSpace, WORKING_COLOR_SPACE ) );

  addMethodChaining( 'toOutputColorSpace', toOutputColorSpace );
  addMethodChaining( 'toWorkingColorSpace', toWorkingColorSpace );

  addMethodChaining( 'workingToColorSpace', workingToColorSpace );
  addMethodChaining( 'colorSpaceToWorking', colorSpaceToWorking );

  let ReferenceElementNode$1 = class ReferenceElementNode extends ArrayElementNode {

  	static get type() {

  		return 'ReferenceElementNode';

  	}

  	constructor( referenceNode, indexNode ) {

  		super( referenceNode, indexNode );

  		this.referenceNode = referenceNode;

  		this.isReferenceElementNode = true;

  	}

  	getNodeType() {

  		return this.referenceNode.uniformType;

  	}

  	generate( builder ) {

  		const snippet = super.generate( builder );
  		const arrayType = this.referenceNode.getNodeType();
  		const elementType = this.getNodeType();

  		return builder.format( snippet, arrayType, elementType );

  	}

  };

  class ReferenceBaseNode extends Node {

  	static get type() {

  		return 'ReferenceBaseNode';

  	}

  	constructor( property, uniformType, object = null, count = null ) {

  		super();

  		this.property = property;
  		this.uniformType = uniformType;
  		this.object = object;
  		this.count = count;

  		this.properties = property.split( '.' );
  		this.reference = object;
  		this.node = null;
  		this.group = null;

  		this.updateType = NodeUpdateType.OBJECT;

  	}

  	setGroup( group ) {

  		this.group = group;

  		return this;

  	}

  	element( indexNode ) {

  		return nodeObject( new ReferenceElementNode$1( this, nodeObject( indexNode ) ) );

  	}

  	setNodeType( uniformType ) {

  		const node = uniform( null, uniformType ).getSelf();

  		if ( this.group !== null ) {

  			node.setGroup( this.group );

  		}

  		this.node = node;

  	}

  	getNodeType( builder ) {

  		if ( this.node === null ) {

  			this.updateReference( builder );
  			this.updateValue();

  		}

  		return this.node.getNodeType( builder );

  	}

  	getValueFromReference( object = this.reference ) {

  		const { properties } = this;

  		let value = object[ properties[ 0 ] ];

  		for ( let i = 1; i < properties.length; i ++ ) {

  			value = value[ properties[ i ] ];

  		}

  		return value;

  	}

  	updateReference( state ) {

  		this.reference = this.object !== null ? this.object : state.object;

  		return this.reference;

  	}

  	setup() {

  		this.updateValue();

  		return this.node;

  	}

  	update( /*frame*/ ) {

  		this.updateValue();

  	}

  	updateValue() {

  		if ( this.node === null ) this.setNodeType( this.uniformType );

  		const value = this.getValueFromReference();

  		if ( Array.isArray( value ) ) {

  			this.node.array = value;

  		} else {

  			this.node.value = value;

  		}

  	}

  }

  const reference$1 = ( name, type, object ) => nodeObject( new ReferenceBaseNode( name, type, object ) );

  class RendererReferenceNode extends ReferenceBaseNode {

  	static get type() {

  		return 'RendererReferenceNode';

  	}

  	constructor( property, inputType, renderer = null ) {

  		super( property, inputType, renderer );

  		this.renderer = renderer;

  		this.setGroup( renderGroup );

  	}

  	updateReference( state ) {

  		this.reference = this.renderer !== null ? this.renderer : state.renderer;

  		return this.reference;

  	}

  }

  const rendererReference = ( name, type, renderer ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );

  class ToneMappingNode extends TempNode {

  	static get type() {

  		return 'ToneMappingNode';

  	}

  	constructor( toneMapping, exposureNode = toneMappingExposure, colorNode = null ) {

  		super( 'vec3' );

  		this.toneMapping = toneMapping;

  		this.exposureNode = exposureNode;
  		this.colorNode = colorNode;

  	}

  	getCacheKey() {

  		return hash$1( super.getCacheKey(), this.toneMapping );

  	}

  	setup( builder ) {

  		const colorNode = this.colorNode || builder.context.color;
  		const toneMapping = this.toneMapping;

  		if ( toneMapping === NoToneMapping ) return colorNode;

  		let outputNode = null;

  		const toneMappingFn = builder.renderer.library.getToneMappingFunction( toneMapping );

  		if ( toneMappingFn !== null ) {

  			outputNode = vec4( toneMappingFn( colorNode.rgb, this.exposureNode ), colorNode.a );

  		} else {

  			console.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );

  			outputNode = colorNode;

  		}

  		return outputNode;

  	}

  }

  const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );
  const toneMappingExposure = /*@__PURE__*/ rendererReference( 'toneMappingExposure', 'float' );

  addMethodChaining( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );

  class BufferAttributeNode extends InputNode {

  	static get type() {

  		return 'BufferAttributeNode';

  	}

  	constructor( value, bufferType = null, bufferStride = 0, bufferOffset = 0 ) {

  		super( value, bufferType );

  		this.isBufferNode = true;

  		this.bufferType = bufferType;
  		this.bufferStride = bufferStride;
  		this.bufferOffset = bufferOffset;

  		this.usage = StaticDrawUsage;
  		this.instanced = false;

  		this.attribute = null;

  		this.global = true;

  		if ( value && value.isBufferAttribute === true ) {

  			this.attribute = value;
  			this.usage = value.usage;
  			this.instanced = value.isInstancedBufferAttribute;

  		}

  	}

  	getHash( builder ) {

  		if ( this.bufferStride === 0 && this.bufferOffset === 0 ) {

  			let bufferData = builder.globalCache.getData( this.value );

  			if ( bufferData === undefined ) {

  				bufferData = {
  					node: this
  				};

  				builder.globalCache.setData( this.value, bufferData );

  			}

  			return bufferData.node.uuid;

  		}

  		return this.uuid;

  	}

  	getNodeType( builder ) {

  		if ( this.bufferType === null ) {

  			this.bufferType = builder.getTypeFromAttribute( this.attribute );

  		}

  		return this.bufferType;

  	}

  	setup( builder ) {

  		if ( this.attribute !== null ) return;

  		const type = this.getNodeType( builder );
  		const array = this.value;
  		const itemSize = builder.getTypeLength( type );
  		const stride = this.bufferStride || itemSize;
  		const offset = this.bufferOffset;

  		const buffer = array.isInterleavedBuffer === true ? array : new InterleavedBuffer( array, stride );
  		const bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );

  		buffer.setUsage( this.usage );

  		this.attribute = bufferAttribute;
  		this.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute

  	}

  	generate( builder ) {

  		const nodeType = this.getNodeType( builder );

  		const nodeAttribute = builder.getBufferAttributeFromNode( this, nodeType );
  		const propertyName = builder.getPropertyName( nodeAttribute );

  		let output = null;

  		if ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {

  			this.name = propertyName;

  			output = propertyName;

  		} else {

  			const nodeVarying = varying( this );

  			output = nodeVarying.build( builder, nodeType );

  		}

  		return output;

  	}

  	getInputType( /*builder*/ ) {

  		return 'bufferAttribute';

  	}

  	setUsage( value ) {

  		this.usage = value;

  		if ( this.attribute && this.attribute.isBufferAttribute === true ) {

  			this.attribute.usage = value;

  		}

  		return this;

  	}

  	setInstanced( value ) {

  		this.instanced = value;

  		return this;

  	}

  }

  const bufferAttribute = ( array, type, stride, offset ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );
  const dynamicBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setUsage( DynamicDrawUsage );

  const instancedBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setInstanced( true );
  const instancedDynamicBufferAttribute = ( array, type, stride, offset ) => dynamicBufferAttribute( array, type, stride, offset ).setInstanced( true );

  addMethodChaining( 'toAttribute', ( bufferNode ) => bufferAttribute( bufferNode.value ) );

  class ComputeNode extends Node {

  	static get type() {

  		return 'ComputeNode';

  	}

  	constructor( computeNode, count, workgroupSize = [ 64 ] ) {

  		super( 'void' );

  		this.isComputeNode = true;

  		this.computeNode = computeNode;

  		this.count = count;
  		this.workgroupSize = workgroupSize;
  		this.dispatchCount = 0;

  		this.version = 1;
  		this.updateBeforeType = NodeUpdateType.OBJECT;

  		this.onInitFunction = null;

  		this.updateDispatchCount();

  	}

  	dispose() {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  	set needsUpdate( value ) {

  		if ( value === true ) this.version ++;

  	}

  	updateDispatchCount() {

  		const { count, workgroupSize } = this;

  		let size = workgroupSize[ 0 ];

  		for ( let i = 1; i < workgroupSize.length; i ++ )
  			size *= workgroupSize[ i ];

  		this.dispatchCount = Math.ceil( count / size );

  	}

  	onInit( callback ) {

  		this.onInitFunction = callback;

  		return this;

  	}

  	updateBefore( { renderer } ) {

  		renderer.compute( this );

  	}

  	generate( builder ) {

  		const { shaderStage } = builder;

  		if ( shaderStage === 'compute' ) {

  			const snippet = this.computeNode.build( builder, 'void' );

  			if ( snippet !== '' ) {

  				builder.addLineFlowCode( snippet, this );

  			}

  		}

  	}

  }

  const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );

  addMethodChaining( 'compute', compute );

  class CacheNode extends Node {

  	static get type() {

  		return 'CacheNode';

  	}

  	constructor( node, parent = true ) {

  		super();

  		this.node = node;
  		this.parent = parent;

  		this.isCacheNode = true;

  	}

  	getNodeType( builder ) {

  		return this.node.getNodeType( builder );

  	}

  	build( builder, ...params ) {

  		const previousCache = builder.getCache();
  		const cache = builder.getCacheFromNode( this, this.parent );

  		builder.setCache( cache );

  		const data = this.node.build( builder, ...params );

  		builder.setCache( previousCache );

  		return data;

  	}

  }

  const cache = ( node, ...params ) => nodeObject( new CacheNode( nodeObject( node ), ...params ) );

  addMethodChaining( 'cache', cache );

  class BypassNode extends Node {

  	static get type() {

  		return 'BypassNode';

  	}

  	constructor( returnNode, callNode ) {

  		super();

  		this.isBypassNode = true;

  		this.outputNode = returnNode;
  		this.callNode = callNode;

  	}

  	getNodeType( builder ) {

  		return this.outputNode.getNodeType( builder );

  	}

  	generate( builder ) {

  		const snippet = this.callNode.build( builder, 'void' );

  		if ( snippet !== '' ) {

  			builder.addLineFlowCode( snippet, this );

  		}

  		return this.outputNode.build( builder );

  	}

  }

  const bypass = /*@__PURE__*/ nodeProxy( BypassNode );

  addMethodChaining( 'bypass', bypass );

  class RemapNode extends Node {

  	static get type() {

  		return 'RemapNode';

  	}

  	constructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {

  		super();

  		this.node = node;
  		this.inLowNode = inLowNode;
  		this.inHighNode = inHighNode;
  		this.outLowNode = outLowNode;
  		this.outHighNode = outHighNode;

  		this.doClamp = true;

  	}

  	setup() {

  		const { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;

  		let t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );

  		if ( doClamp === true ) t = t.clamp();

  		return t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );

  	}

  }

  const remap = /*@__PURE__*/ nodeProxy( RemapNode, null, null, { doClamp: false } );
  const remapClamp = /*@__PURE__*/ nodeProxy( RemapNode );

  addMethodChaining( 'remap', remap );
  addMethodChaining( 'remapClamp', remapClamp );

  class ExpressionNode extends Node {

  	static get type() {

  		return 'ExpressionNode';

  	}

  	constructor( snippet = '', nodeType = 'void' ) {

  		super( nodeType );

  		this.snippet = snippet;

  	}

  	generate( builder, output ) {

  		const type = this.getNodeType( builder );
  		const snippet = this.snippet;

  		if ( type === 'void' ) {

  			builder.addLineFlowCode( snippet, this );

  		} else {

  			return builder.format( `( ${ snippet } )`, type, output );

  		}

  	}

  }

  const expression = /*@__PURE__*/ nodeProxy( ExpressionNode );

  const Discard = ( conditional ) => ( conditional ? select( conditional, expression( 'discard' ) ) : expression( 'discard' ) ).append();

  addMethodChaining( 'discard', Discard );

  class RenderOutputNode extends TempNode {

  	static get type() {

  		return 'RenderOutputNode';

  	}

  	constructor( colorNode, toneMapping, outputColorSpace ) {

  		super( 'vec4' );

  		this.colorNode = colorNode;
  		this.toneMapping = toneMapping;
  		this.outputColorSpace = outputColorSpace;

  		this.isRenderOutput = true;

  	}

  	setup( { context } ) {

  		let outputNode = this.colorNode || context.color;

  		// tone mapping

  		const toneMapping = ( this.toneMapping !== null ? this.toneMapping : context.toneMapping ) || NoToneMapping;
  		const outputColorSpace = ( this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace ) || NoColorSpace;

  		if ( toneMapping !== NoToneMapping ) {

  			outputNode = outputNode.toneMapping( toneMapping );

  		}

  		// working to output color space

  		if ( outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace ) {

  			outputNode = outputNode.workingToColorSpace( outputColorSpace );

  		}

  		return outputNode;

  	}

  }

  const renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );

  addMethodChaining( 'renderOutput', renderOutput );

  class AttributeNode extends Node {

  	static get type() {

  		return 'AttributeNode';

  	}

  	constructor( attributeName, nodeType = null ) {

  		super( nodeType );

  		this.global = true;

  		this._attributeName = attributeName;

  	}

  	getHash( builder ) {

  		return this.getAttributeName( builder );

  	}

  	getNodeType( builder ) {

  		let nodeType = this.nodeType;

  		if ( nodeType === null ) {

  			const attributeName = this.getAttributeName( builder );

  			if ( builder.hasGeometryAttribute( attributeName ) ) {

  				const attribute = builder.geometry.getAttribute( attributeName );

  				nodeType = builder.getTypeFromAttribute( attribute );

  			} else {

  				nodeType = 'float';

  			}

  		}

  		return nodeType;

  	}

  	setAttributeName( attributeName ) {

  		this._attributeName = attributeName;

  		return this;

  	}

  	getAttributeName( /*builder*/ ) {

  		return this._attributeName;

  	}

  	generate( builder ) {

  		const attributeName = this.getAttributeName( builder );
  		const nodeType = this.getNodeType( builder );
  		const geometryAttribute = builder.hasGeometryAttribute( attributeName );

  		if ( geometryAttribute === true ) {

  			const attribute = builder.geometry.getAttribute( attributeName );
  			const attributeType = builder.getTypeFromAttribute( attribute );

  			const nodeAttribute = builder.getAttribute( attributeName, attributeType );

  			if ( builder.shaderStage === 'vertex' ) {

  				return builder.format( nodeAttribute.name, attributeType, nodeType );

  			} else {

  				const nodeVarying = varying( this );

  				return nodeVarying.build( builder, nodeType );

  			}

  		} else {

  			console.warn( `AttributeNode: Vertex attribute "${ attributeName }" not found on geometry.` );

  			return builder.generateConst( nodeType );

  		}

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.global = this.global;
  		data._attributeName = this._attributeName;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.global = data.global;
  		this._attributeName = data._attributeName;

  	}

  }

  const attribute = ( name, nodeType ) => nodeObject( new AttributeNode( name, nodeType ) );

  const uv = ( index ) => attribute( 'uv' + ( index > 0 ? index : '' ), 'vec2' );

  class TextureSizeNode extends Node {

  	static get type() {

  		return 'TextureSizeNode';

  	}

  	constructor( textureNode, levelNode = null ) {

  		super( 'uvec2' );

  		this.isTextureSizeNode = true;

  		this.textureNode = textureNode;
  		this.levelNode = levelNode;

  	}

  	generate( builder, output ) {

  		const textureProperty = this.textureNode.build( builder, 'property' );
  		const level = this.levelNode === null ? '0' : this.levelNode.build( builder, 'int' );

  		return builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ level } )`, this.getNodeType( builder ), output );

  	}

  }

  const textureSize = /*@__PURE__*/ nodeProxy( TextureSizeNode );

  class MaxMipLevelNode extends UniformNode {

  	static get type() {

  		return 'MaxMipLevelNode';

  	}

  	constructor( textureNode ) {

  		super( 0 );

  		this._textureNode = textureNode;

  		this.updateType = NodeUpdateType.FRAME;

  	}

  	get textureNode() {

  		return this._textureNode;

  	}

  	get texture() {

  		return this._textureNode.value;

  	}

  	update() {

  		const texture = this.texture;
  		const images = texture.images;
  		const image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;

  		if ( image && image.width !== undefined ) {

  			const { width, height } = image;

  			this.value = Math.log2( Math.max( width, height ) );

  		}

  	}

  }

  const maxMipLevel = /*@__PURE__*/ nodeProxy( MaxMipLevelNode );

  class TextureNode extends UniformNode {

  	static get type() {

  		return 'TextureNode';

  	}

  	constructor( value, uvNode = null, levelNode = null, biasNode = null ) {

  		super( value );

  		this.isTextureNode = true;

  		this.uvNode = uvNode;
  		this.levelNode = levelNode;
  		this.biasNode = biasNode;
  		this.compareNode = null;
  		this.depthNode = null;
  		this.gradNode = null;

  		this.sampler = true;
  		this.updateMatrix = false;
  		this.updateType = NodeUpdateType.NONE;

  		this.referenceNode = null;

  		this._value = value;
  		this._matrixUniform = null;

  		this.setUpdateMatrix( uvNode === null );

  	}

  	set value( value ) {

  		if ( this.referenceNode ) {

  			this.referenceNode.value = value;

  		} else {

  			this._value = value;

  		}

  	}

  	get value() {

  		return this.referenceNode ? this.referenceNode.value : this._value;

  	}

  	getUniformHash( /*builder*/ ) {

  		return this.value.uuid;

  	}

  	getNodeType( /*builder*/ ) {

  		if ( this.value.isDepthTexture === true ) return 'float';

  		if ( this.value.type === UnsignedIntType ) {

  			return 'uvec4';

  		} else if ( this.value.type === IntType ) {

  			return 'ivec4';

  		}

  		return 'vec4';

  	}

  	getInputType( /*builder*/ ) {

  		return 'texture';

  	}

  	getDefaultUV() {

  		return uv( this.value.channel );

  	}

  	updateReference( /*state*/ ) {

  		return this.value;

  	}

  	getTransformedUV( uvNode ) {

  		if ( this._matrixUniform === null ) this._matrixUniform = uniform( this.value.matrix );

  		return this._matrixUniform.mul( vec3( uvNode, 1 ) ).xy;

  	}

  	setUpdateMatrix( value ) {

  		this.updateMatrix = value;
  		this.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;

  		return this;

  	}

  	setupUV( builder, uvNode ) {

  		const texture = this.value;

  		if ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true ) ) {

  			if ( this.sampler ) {

  				uvNode = uvNode.flipY();

  			} else {

  				uvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );

  			}

  		}

  		return uvNode;

  	}

  	setup( builder ) {

  		const properties = builder.getNodeProperties( this );
  		properties.referenceNode = this.referenceNode;

  		//

  		let uvNode = this.uvNode;

  		if ( ( uvNode === null || builder.context.forceUVContext === true ) && builder.context.getUV ) {

  			uvNode = builder.context.getUV( this );

  		}

  		if ( ! uvNode ) uvNode = this.getDefaultUV();

  		if ( this.updateMatrix === true ) {

  			uvNode = this.getTransformedUV( uvNode );

  		}

  		uvNode = this.setupUV( builder, uvNode );

  		//

  		let levelNode = this.levelNode;

  		if ( levelNode === null && builder.context.getTextureLevel ) {

  			levelNode = builder.context.getTextureLevel( this );

  		}

  		//

  		properties.uvNode = uvNode;
  		properties.levelNode = levelNode;
  		properties.biasNode = this.biasNode;
  		properties.compareNode = this.compareNode;
  		properties.gradNode = this.gradNode;
  		properties.depthNode = this.depthNode;

  	}

  	generateUV( builder, uvNode ) {

  		return uvNode.build( builder, this.sampler === true ? 'vec2' : 'ivec2' );

  	}

  	generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet ) {

  		const texture = this.value;

  		let snippet;

  		if ( levelSnippet ) {

  			snippet = builder.generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet );

  		} else if ( biasSnippet ) {

  			snippet = builder.generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet );

  		} else if ( gradSnippet ) {

  			snippet = builder.generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet );

  		} else if ( compareSnippet ) {

  			snippet = builder.generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet );

  		} else if ( this.sampler === false ) {

  			snippet = builder.generateTextureLoad( texture, textureProperty, uvSnippet, depthSnippet );

  		} else {

  			snippet = builder.generateTexture( texture, textureProperty, uvSnippet, depthSnippet );

  		}

  		return snippet;

  	}

  	generate( builder, output ) {

  		const properties = builder.getNodeProperties( this );

  		const texture = this.value;

  		if ( ! texture || texture.isTexture !== true ) {

  			throw new Error( 'TextureNode: Need a three.js texture.' );

  		}

  		const textureProperty = super.generate( builder, 'property' );

  		if ( output === 'sampler' ) {

  			return textureProperty + '_sampler';

  		} else if ( builder.isReference( output ) ) {

  			return textureProperty;

  		} else {

  			const nodeData = builder.getDataFromNode( this );

  			let propertyName = nodeData.propertyName;

  			if ( propertyName === undefined ) {

  				const { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;

  				const uvSnippet = this.generateUV( builder, uvNode );
  				const levelSnippet = levelNode ? levelNode.build( builder, 'float' ) : null;
  				const biasSnippet = biasNode ? biasNode.build( builder, 'float' ) : null;
  				const depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;
  				const compareSnippet = compareNode ? compareNode.build( builder, 'float' ) : null;
  				const gradSnippet = gradNode ? [ gradNode[ 0 ].build( builder, 'vec2' ), gradNode[ 1 ].build( builder, 'vec2' ) ] : null;

  				const nodeVar = builder.getVarFromNode( this );

  				propertyName = builder.getPropertyName( nodeVar );

  				const snippet = this.generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet );

  				builder.addLineFlowCode( `${propertyName} = ${snippet}`, this );

  				nodeData.snippet = snippet;
  				nodeData.propertyName = propertyName;

  			}

  			let snippet = propertyName;
  			const nodeType = this.getNodeType( builder );

  			if ( builder.needsToWorkingColorSpace( texture ) ) {

  				snippet = colorSpaceToWorking( expression( snippet, nodeType ), texture.colorSpace ).setup( builder ).build( builder, nodeType );

  			}

  			return builder.format( snippet, nodeType, output );

  		}

  	}

  	setSampler( value ) {

  		this.sampler = value;

  		return this;

  	}

  	getSampler() {

  		return this.sampler;

  	}

  	// @TODO: Move to TSL

  	uv( uvNode ) {

  		const textureNode = this.clone();
  		textureNode.uvNode = nodeObject( uvNode );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	blur( amountNode ) {

  		const textureNode = this.clone();
  		textureNode.biasNode = nodeObject( amountNode ).mul( maxMipLevel( textureNode ) );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	level( levelNode ) {

  		const textureNode = this.clone();
  		textureNode.levelNode = nodeObject( levelNode );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	size( levelNode ) {

  		return textureSize( this, levelNode );

  	}

  	bias( biasNode ) {

  		const textureNode = this.clone();
  		textureNode.biasNode = nodeObject( biasNode );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	compare( compareNode ) {

  		const textureNode = this.clone();
  		textureNode.compareNode = nodeObject( compareNode );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	grad( gradNodeX, gradNodeY ) {

  		const textureNode = this.clone();
  		textureNode.gradNode = [ nodeObject( gradNodeX ), nodeObject( gradNodeY ) ];
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	depth( depthNode ) {

  		const textureNode = this.clone();
  		textureNode.depthNode = nodeObject( depthNode );
  		textureNode.referenceNode = this.getSelf();

  		return nodeObject( textureNode );

  	}

  	// --

  	serialize( data ) {

  		super.serialize( data );

  		data.value = this.value.toJSON( data.meta ).uuid;
  		data.sampler = this.sampler;
  		data.updateMatrix = this.updateMatrix;
  		data.updateType = this.updateType;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.value = data.meta.textures[ data.value ];
  		this.sampler = data.sampler;
  		this.updateMatrix = data.updateMatrix;
  		this.updateType = data.updateType;

  	}

  	update() {

  		const texture = this.value;
  		const matrixUniform = this._matrixUniform;

  		if ( matrixUniform !== null ) matrixUniform.value = texture.matrix;

  		if ( texture.matrixAutoUpdate === true ) {

  			texture.updateMatrix();

  		}

  	}

  	clone() {

  		const newNode = new this.constructor( this.value, this.uvNode, this.levelNode, this.biasNode );
  		newNode.sampler = this.sampler;

  		return newNode;

  	}

  }

  const texture = /*@__PURE__*/ nodeProxy( TextureNode );
  const textureLoad = ( ...params ) => texture( ...params ).setSampler( false );

  const cameraNear = /*@__PURE__*/ uniform( 'float' ).label( 'cameraNear' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.near );
  const cameraFar = /*@__PURE__*/ uniform( 'float' ).label( 'cameraFar' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.far );
  const cameraProjectionMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraProjectionMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrix );
  const cameraViewMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraViewMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorldInverse );
  const cameraPosition = /*@__PURE__*/ uniform( new Vector3() ).label( 'cameraPosition' ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => self.value.setFromMatrixPosition( camera.matrixWorld ) );

  class Object3DNode extends Node {

  	static get type() {

  		return 'Object3DNode';

  	}

  	constructor( scope, object3d = null ) {

  		super();

  		this.scope = scope;
  		this.object3d = object3d;

  		this.updateType = NodeUpdateType.OBJECT;

  		this._uniformNode = new UniformNode( null );

  	}

  	getNodeType() {

  		const scope = this.scope;

  		if ( scope === Object3DNode.WORLD_MATRIX ) {

  			return 'mat4';

  		} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {

  			return 'vec3';

  		}

  	}

  	update( frame ) {

  		const object = this.object3d;
  		const uniformNode = this._uniformNode;
  		const scope = this.scope;

  		if ( scope === Object3DNode.WORLD_MATRIX ) {

  			uniformNode.value = object.matrixWorld;

  		} else if ( scope === Object3DNode.POSITION ) {

  			uniformNode.value = uniformNode.value || new Vector3();

  			uniformNode.value.setFromMatrixPosition( object.matrixWorld );

  		} else if ( scope === Object3DNode.SCALE ) {

  			uniformNode.value = uniformNode.value || new Vector3();

  			uniformNode.value.setFromMatrixScale( object.matrixWorld );

  		} else if ( scope === Object3DNode.DIRECTION ) {

  			uniformNode.value = uniformNode.value || new Vector3();

  			object.getWorldDirection( uniformNode.value );

  		} else if ( scope === Object3DNode.VIEW_POSITION ) {

  			const camera = frame.camera;

  			uniformNode.value = uniformNode.value || new Vector3();
  			uniformNode.value.setFromMatrixPosition( object.matrixWorld );

  			uniformNode.value.applyMatrix4( camera.matrixWorldInverse );

  		}

  	}

  	generate( builder ) {

  		const scope = this.scope;

  		if ( scope === Object3DNode.WORLD_MATRIX ) {

  			this._uniformNode.nodeType = 'mat4';

  		} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {

  			this._uniformNode.nodeType = 'vec3';

  		}

  		return this._uniformNode.build( builder );

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.scope = this.scope;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.scope = data.scope;

  	}

  }

  Object3DNode.WORLD_MATRIX = 'worldMatrix';
  Object3DNode.POSITION = 'position';
  Object3DNode.SCALE = 'scale';
  Object3DNode.VIEW_POSITION = 'viewPosition';
  Object3DNode.DIRECTION = 'direction';

  /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.DIRECTION );
  /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX );
  /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.POSITION );
  /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.SCALE );
  /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION );

  class ModelNode extends Object3DNode {

  	static get type() {

  		return 'ModelNode';

  	}

  	constructor( scope ) {

  		super( scope );

  	}

  	update( frame ) {

  		this.object3d = frame.object;

  		super.update( frame );

  	}

  }

  /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.DIRECTION );
  const modelWorldMatrix = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );
  /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.POSITION );
  /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.SCALE );
  /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );
  const modelNormalMatrix = /*@__PURE__*/ uniform( new Matrix3() ).onObjectUpdate( ( { object }, self ) => self.value.getNormalMatrix( object.matrixWorld ) );
  const modelViewMatrix = /*@__PURE__*/ cameraViewMatrix.mul( modelWorldMatrix ).toVar( 'modelViewMatrix' );

  const positionGeometry = /*@__PURE__*/ attribute( 'position', 'vec3' );
  const positionLocal = /*@__PURE__*/ positionGeometry.varying( 'positionLocal' );
  const positionPrevious = /*@__PURE__*/ positionGeometry.varying( 'positionPrevious' );
  const positionWorld = /*@__PURE__*/ modelWorldMatrix.mul( positionLocal ).xyz.varying( 'v_positionWorld' );
  const positionWorldDirection = /*@__PURE__*/ positionLocal.transformDirection( modelWorldMatrix ).varying( 'v_positionWorldDirection' ).normalize().toVar( 'positionWorldDirection' );
  const positionView = /*@__PURE__*/ modelViewMatrix.mul( positionLocal ).xyz.varying( 'v_positionView' );
  const positionViewDirection = /*@__PURE__*/ positionView.negate().varying( 'v_positionViewDirection' ).normalize().toVar( 'positionViewDirection' );

  class FrontFacingNode extends Node {

  	static get type() {

  		return 'FrontFacingNode';

  	}

  	constructor() {

  		super( 'bool' );

  		this.isFrontFacingNode = true;

  	}

  	generate( builder ) {

  		const { renderer, material } = builder;

  		if ( renderer.coordinateSystem === WebGLCoordinateSystem ) {

  			if ( material.side === BackSide ) {

  				return 'false';

  			}

  		}

  		return builder.getFrontFacing();

  	}

  }

  const frontFacing = /*@__PURE__*/ nodeImmutable( FrontFacingNode );
  const faceDirection = /*@__PURE__*/ float( frontFacing ).mul( 2.0 ).sub( 1.0 );

  const normalGeometry = /*@__PURE__*/ attribute( 'normal', 'vec3' );

  const normalLocal = /*@__PURE__*/ ( Fn( ( builder ) => {

  	if ( builder.geometry.hasAttribute( 'normal' ) === false ) {

  		console.warn( 'TSL.NormalNode: Vertex attribute "normal" not found on geometry.' );

  		return vec3( 0, 1, 0 );

  	}

  	return normalGeometry;

  }, 'vec3' ).once() )().toVar( 'normalLocal' );

  const normalFlat = /*@__PURE__*/ positionView.dFdx().cross( positionView.dFdy() ).normalize().toVar( 'normalFlat' );

  const normalView = /*@__PURE__*/ ( Fn( ( builder ) => {

  	let node;

  	if ( builder.material.flatShading === true ) {

  		node = normalFlat;

  	} else {

  		node = varying( transformNormalToView( normalLocal ), 'v_normalView' ).normalize();

  	}

  	return node;

  }, 'vec3' ).once() )().toVar( 'normalView' );

  const normalWorld = /*@__PURE__*/ varying( normalView.transformDirection( cameraViewMatrix ), 'v_normalWorld' ).normalize().toVar( 'normalWorld' );

  const transformedNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {

  	return builder.context.setupNormal();

  }, 'vec3' ).once() )().mul( faceDirection ).toVar( 'transformedNormalView' );


  const transformedNormalWorld = /*@__PURE__*/ transformedNormalView.transformDirection( cameraViewMatrix ).toVar( 'transformedNormalWorld' );

  const transformedClearcoatNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {

  	return builder.context.setupClearcoatNormal();

  }, 'vec3' ).once() )().mul( faceDirection ).toVar( 'transformedClearcoatNormalView' );

  const transformNormal = /*@__PURE__*/ Fn( ( [ normal, matrix = modelWorldMatrix ] ) => {

  	const m = mat3( matrix );

  	const transformedNormal = normal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );

  	return m.mul( transformedNormal ).xyz;

  } );

  const transformNormalToView = /*@__PURE__*/ Fn( ( [ normal ], builder ) => {

  	const modelNormalViewMatrix = builder.renderer.nodes.modelNormalViewMatrix;

  	if ( modelNormalViewMatrix !== null ) {

  		return modelNormalViewMatrix.transformDirection( normal );

  	}

  	//

  	const transformedNormal = modelNormalMatrix.mul( normal );

  	return cameraViewMatrix.transformDirection( transformedNormal );

  } );

  const materialRefractionRatio = /*@__PURE__*/ uniform( 0 ).onReference( ( { material } ) => material ).onRenderUpdate( ( { material } ) => material.refractionRatio );

  const reflectView = /*@__PURE__*/ positionViewDirection.negate().reflect( transformedNormalView );
  const refractView = /*@__PURE__*/ positionViewDirection.negate().refract( transformedNormalView, materialRefractionRatio );

  const reflectVector = /*@__PURE__*/ reflectView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );
  const refractVector = /*@__PURE__*/ refractView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );

  class CubeTextureNode extends TextureNode {

  	static get type() {

  		return 'CubeTextureNode';

  	}

  	constructor( value, uvNode = null, levelNode = null, biasNode = null ) {

  		super( value, uvNode, levelNode, biasNode );

  		this.isCubeTextureNode = true;

  	}

  	getInputType( /*builder*/ ) {

  		return 'cubeTexture';

  	}

  	getDefaultUV() {

  		const texture = this.value;

  		if ( texture.mapping === CubeReflectionMapping ) {

  			return reflectVector;

  		} else if ( texture.mapping === CubeRefractionMapping ) {

  			return refractVector;

  		} else {

  			console.error( 'THREE.CubeTextureNode: Mapping "%s" not supported.', texture.mapping );

  			return vec3( 0, 0, 0 );

  		}

  	}

  	setUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode

  	setupUV( builder, uvNode ) {

  		const texture = this.value;

  		if ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {

  			return vec3( uvNode.x.negate(), uvNode.yz );

  		} else {

  			return uvNode;

  		}

  	}

  	generateUV( builder, cubeUV ) {

  		return cubeUV.build( builder, 'vec3' );

  	}

  }

  const cubeTexture = /*@__PURE__*/ nodeProxy( CubeTextureNode );

  class BufferNode extends UniformNode {

  	static get type() {

  		return 'BufferNode';

  	}

  	constructor( value, bufferType, bufferCount = 0 ) {

  		super( value, bufferType );

  		this.isBufferNode = true;

  		this.bufferType = bufferType;
  		this.bufferCount = bufferCount;

  	}

  	getElementType( builder ) {

  		return this.getNodeType( builder );

  	}

  	getInputType( /*builder*/ ) {

  		return 'buffer';

  	}

  }

  const buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );

  class UniformArrayElementNode extends ArrayElementNode {

  	static get type() {

  		return 'UniformArrayElementNode';

  	}

  	constructor( arrayBuffer, indexNode ) {

  		super( arrayBuffer, indexNode );

  		this.isArrayBufferElementNode = true;

  	}

  	generate( builder ) {

  		const snippet = super.generate( builder );
  		const type = this.getNodeType();

  		return builder.format( snippet, 'vec4', type );

  	}

  }

  class UniformArrayNode extends BufferNode {

  	static get type() {

  		return 'UniformArrayNode';

  	}

  	constructor( value, elementType = null ) {

  		super( null, 'vec4' );

  		this.array = value;
  		this.elementType = elementType;

  		this._elementType = null;
  		this._elementLength = 0;

  		this.updateType = NodeUpdateType.RENDER;

  		this.isArrayBufferNode = true;

  	}

  	getElementType() {

  		return this.elementType || this._elementType;

  	}

  	getElementLength() {

  		return this._elementLength;

  	}

  	update( /*frame*/ ) {

  		const { array, value } = this;

  		const elementLength = this.getElementLength();
  		const elementType = this.getElementType();

  		if ( elementLength === 1 ) {

  			for ( let i = 0; i < array.length; i ++ ) {

  				const index = i * 4;

  				value[ index ] = array[ i ];

  			}

  		} else if ( elementType === 'color' ) {

  			for ( let i = 0; i < array.length; i ++ ) {

  				const index = i * 4;
  				const vector = array[ i ];

  				value[ index ] = vector.r;
  				value[ index + 1 ] = vector.g;
  				value[ index + 2 ] = vector.b || 0;
  				//value[ index + 3 ] = vector.a || 0;

  			}

  		} else {

  			for ( let i = 0; i < array.length; i ++ ) {

  				const index = i * 4;
  				const vector = array[ i ];

  				value[ index ] = vector.x;
  				value[ index + 1 ] = vector.y;
  				value[ index + 2 ] = vector.z || 0;
  				value[ index + 3 ] = vector.w || 0;

  			}

  		}

  	}

  	setup( builder ) {

  		const length = this.array.length;

  		this._elementType = this.elementType === null ? getValueType( this.array[ 0 ] ) : this.elementType;
  		this._elementLength = builder.getTypeLength( this._elementType );

  		let arrayType = Float32Array;

  		if ( this._elementType.charAt( 0 ) === 'i' ) arrayType = Int32Array;
  		else if ( this._elementType.charAt( 0 ) === 'u' ) arrayType = Uint32Array;

  		this.value = new arrayType( length * 4 );
  		this.bufferCount = length;
  		this.bufferType = builder.changeComponentType( 'vec4', builder.getComponentType( this._elementType ) );

  		return super.setup( builder );

  	}

  	element( indexNode ) {

  		return nodeObject( new UniformArrayElementNode( this, nodeObject( indexNode ) ) );

  	}

  }

  const uniformArray = ( values, nodeType ) => nodeObject( new UniformArrayNode( values, nodeType ) );

  class ReferenceElementNode extends ArrayElementNode {

  	static get type() {

  		return 'ReferenceElementNode';

  	}

  	constructor( referenceNode, indexNode ) {

  		super( referenceNode, indexNode );

  		this.referenceNode = referenceNode;

  		this.isReferenceElementNode = true;

  	}

  	getNodeType() {

  		return this.referenceNode.uniformType;

  	}

  	generate( builder ) {

  		const snippet = super.generate( builder );
  		const arrayType = this.referenceNode.getNodeType();
  		const elementType = this.getNodeType();

  		return builder.format( snippet, arrayType, elementType );

  	}

  }

  // TODO: Extends this from ReferenceBaseNode
  class ReferenceNode extends Node {

  	static get type() {

  		return 'ReferenceNode';

  	}

  	constructor( property, uniformType, object = null, count = null ) {

  		super();

  		this.property = property;
  		this.uniformType = uniformType;
  		this.object = object;
  		this.count = count;

  		this.properties = property.split( '.' );
  		this.reference = object;
  		this.node = null;
  		this.group = null;
  		this.name = null;

  		this.updateType = NodeUpdateType.OBJECT;

  	}

  	element( indexNode ) {

  		return nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );

  	}

  	setGroup( group ) {

  		this.group = group;

  		return this;

  	}

  	label( name ) {

  		this.name = name;

  		return this;

  	}

  	setNodeType( uniformType ) {

  		let node = null;

  		if ( this.count !== null ) {

  			node = buffer( null, uniformType, this.count );

  		} else if ( Array.isArray( this.getValueFromReference() ) ) {

  			node = uniformArray( null, uniformType );

  		} else if ( uniformType === 'texture' ) {

  			node = texture( null );

  		} else if ( uniformType === 'cubeTexture' ) {

  			node = cubeTexture( null );

  		} else {

  			node = uniform( null, uniformType );

  		}

  		if ( this.group !== null ) {

  			node.setGroup( this.group );

  		}

  		if ( this.name !== null ) node.label( this.name );

  		this.node = node.getSelf();

  	}

  	getNodeType( builder ) {

  		if ( this.node === null ) {

  			this.updateReference( builder );
  			this.updateValue();

  		}

  		return this.node.getNodeType( builder );

  	}

  	getValueFromReference( object = this.reference ) {

  		const { properties } = this;

  		let value = object[ properties[ 0 ] ];

  		for ( let i = 1; i < properties.length; i ++ ) {

  			value = value[ properties[ i ] ];

  		}

  		return value;

  	}

  	updateReference( state ) {

  		this.reference = this.object !== null ? this.object : state.object;

  		return this.reference;

  	}

  	setup() {

  		this.updateValue();

  		return this.node;

  	}

  	update( /*frame*/ ) {

  		this.updateValue();

  	}

  	updateValue() {

  		if ( this.node === null ) this.setNodeType( this.uniformType );

  		const value = this.getValueFromReference();

  		if ( Array.isArray( value ) ) {

  			this.node.array = value;

  		} else {

  			this.node.value = value;

  		}

  	}

  }

  const reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );
  const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );

  class MaterialReferenceNode extends ReferenceNode {

  	static get type() {

  		return 'MaterialReferenceNode';

  	}

  	constructor( property, inputType, material = null ) {

  		super( property, inputType, material );

  		this.material = material;

  		//this.updateType = NodeUpdateType.RENDER;

  		this.isMaterialReferenceNode = true;

  	}

  	/*setNodeType( node ) {

  		super.setNodeType( node );

  		this.node.groupNode = renderGroup;

  	}*/

  	updateReference( state ) {

  		this.reference = this.material !== null ? this.material : state.material;

  		return this.reference;

  	}

  }

  const materialReference = ( name, type, material ) => nodeObject( new MaterialReferenceNode( name, type, material ) );

  const tangentGeometry = /*@__PURE__*/ Fn( ( builder ) => {

  	if ( builder.geometry.hasAttribute( 'tangent' ) === false ) {

  		builder.geometry.computeTangents();

  	}

  	return attribute( 'tangent', 'vec4' );

  } )();

  const tangentLocal = /*@__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );
  const tangentView = /*@__PURE__*/ modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz.varying( 'v_tangentView' ).normalize().toVar( 'tangentView' );

  const getBitangent = ( crossNormalTangent ) => crossNormalTangent.mul( tangentGeometry.w ).xyz;
  const bitangentView = /*@__PURE__*/ varying( getBitangent( normalView.cross( tangentView ) ), 'v_bitangentView' ).normalize().toVar( 'bitangentView' );

  const TBNViewMatrix = /*@__PURE__*/ mat3( tangentView, bitangentView, normalView );

  const transformedBentNormalView = /*@__PURE__*/ ( () => {

  	// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy

  	let bentNormal = anisotropyB.cross( positionViewDirection );
  	bentNormal = bentNormal.cross( anisotropyB ).normalize();
  	bentNormal = mix$2( bentNormal, transformedNormalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();

  	return bentNormal;


  } )();

  // Normal Mapping Without Precomputed Tangents
  // http://www.thetenthplanet.de/archives/1180

  const perturbNormal2Arb = /*@__PURE__*/ Fn( ( inputs ) => {

  	const { eye_pos, surf_norm, mapN, uv } = inputs;

  	const q0 = eye_pos.dFdx();
  	const q1 = eye_pos.dFdy();
  	const st0 = uv.dFdx();
  	const st1 = uv.dFdy();

  	const N = surf_norm; // normalized

  	const q1perp = q1.cross( N );
  	const q0perp = N.cross( q0 );

  	const T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );
  	const B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );

  	const det = T.dot( T ).max( B.dot( B ) );
  	const scale = faceDirection.mul( det.inverseSqrt() );

  	return add( T.mul( mapN.x, scale ), B.mul( mapN.y, scale ), N.mul( mapN.z ) ).normalize();

  } );

  class NormalMapNode extends TempNode {

  	static get type() {

  		return 'NormalMapNode';

  	}

  	constructor( node, scaleNode = null ) {

  		super( 'vec3' );

  		this.node = node;
  		this.scaleNode = scaleNode;

  		this.normalMapType = TangentSpaceNormalMap;

  	}

  	setup( builder ) {

  		const { normalMapType, scaleNode } = this;

  		let normalMap = this.node.mul( 2.0 ).sub( 1.0 );

  		if ( scaleNode !== null ) {

  			normalMap = vec3( normalMap.xy.mul( scaleNode ), normalMap.z );

  		}

  		let outputNode = null;

  		if ( normalMapType === ObjectSpaceNormalMap ) {

  			outputNode = transformNormalToView( normalMap );

  		} else if ( normalMapType === TangentSpaceNormalMap ) {

  			const tangent = builder.hasGeometryAttribute( 'tangent' );

  			if ( tangent === true ) {

  				outputNode = TBNViewMatrix.mul( normalMap ).normalize();

  			} else {

  				outputNode = perturbNormal2Arb( {
  					eye_pos: positionView,
  					surf_norm: normalView,
  					mapN: normalMap,
  					uv: uv()
  				} );

  			}

  		}

  		return outputNode;

  	}

  }

  const normalMap = /*@__PURE__*/ nodeProxy( NormalMapNode );

  // Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen
  // https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf

  const dHdxy_fwd = Fn( ( { textureNode, bumpScale } ) => {

  	// It's used to preserve the same TextureNode instance
  	const sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );

  	const Hll = float( sampleTexture( ( uvNode ) => uvNode ) );

  	return vec2(
  		float( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),
  		float( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )
  	).mul( bumpScale );

  } );

  // Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

  const perturbNormalArb = Fn( ( inputs ) => {

  	const { surf_pos, surf_norm, dHdxy } = inputs;

  	// normalize is done to ensure that the bump map looks the same regardless of the texture's scale
  	const vSigmaX = surf_pos.dFdx().normalize();
  	const vSigmaY = surf_pos.dFdy().normalize();
  	const vN = surf_norm; // normalized

  	const R1 = vSigmaY.cross( vN );
  	const R2 = vN.cross( vSigmaX );

  	const fDet = vSigmaX.dot( R1 ).mul( faceDirection );

  	const vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );

  	return fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();

  } );

  class BumpMapNode extends TempNode {

  	static get type() {

  		return 'BumpMapNode';

  	}

  	constructor( textureNode, scaleNode = null ) {

  		super( 'vec3' );

  		this.textureNode = textureNode;
  		this.scaleNode = scaleNode;

  	}

  	setup() {

  		const bumpScale = this.scaleNode !== null ? this.scaleNode : 1;
  		const dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );

  		return perturbNormalArb( {
  			surf_pos: positionView,
  			surf_norm: normalView,
  			dHdxy
  		} );

  	}

  }

  const bumpMap = /*@__PURE__*/ nodeProxy( BumpMapNode );

  const _propertyCache = new Map();

  class MaterialNode extends Node {

  	static get type() {

  		return 'MaterialNode';

  	}

  	constructor( scope ) {

  		super();

  		this.scope = scope;

  	}

  	getCache( property, type ) {

  		let node = _propertyCache.get( property );

  		if ( node === undefined ) {

  			node = materialReference( property, type );

  			_propertyCache.set( property, node );

  		}

  		return node;

  	}

  	getFloat( property ) {

  		return this.getCache( property, 'float' );

  	}

  	getColor( property ) {

  		return this.getCache( property, 'color' );

  	}

  	getTexture( property ) {

  		return this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );

  	}

  	setup( builder ) {

  		const material = builder.context.material;
  		const scope = this.scope;

  		let node = null;

  		if ( scope === MaterialNode.COLOR ) {

  			const colorNode = material.color !== undefined ? this.getColor( scope ) : vec3();

  			if ( material.map && material.map.isTexture === true ) {

  				node = colorNode.mul( this.getTexture( 'map' ) );

  			} else {

  				node = colorNode;

  			}

  		} else if ( scope === MaterialNode.OPACITY ) {

  			const opacityNode = this.getFloat( scope );

  			if ( material.alphaMap && material.alphaMap.isTexture === true ) {

  				node = opacityNode.mul( this.getTexture( 'alpha' ) );

  			} else {

  				node = opacityNode;

  			}

  		} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {

  			if ( material.specularMap && material.specularMap.isTexture === true ) {

  				node = this.getTexture( 'specular' ).r;

  			} else {

  				node = float( 1 );

  			}

  		} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {

  			const specularIntensity = this.getFloat( scope );

  			if ( material.specularMap ) {

  				node = specularIntensity.mul( this.getTexture( scope ).a );

  			} else {

  				node = specularIntensity;

  			}

  		} else if ( scope === MaterialNode.SPECULAR_COLOR ) {

  			const specularColorNode = this.getColor( scope );

  			if ( material.specularColorMap && material.specularColorMap.isTexture === true ) {

  				node = specularColorNode.mul( this.getTexture( scope ).rgb );

  			} else {

  				node = specularColorNode;

  			}

  		} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches

  			const roughnessNode = this.getFloat( scope );

  			if ( material.roughnessMap && material.roughnessMap.isTexture === true ) {

  				node = roughnessNode.mul( this.getTexture( scope ).g );

  			} else {

  				node = roughnessNode;

  			}

  		} else if ( scope === MaterialNode.METALNESS ) {

  			const metalnessNode = this.getFloat( scope );

  			if ( material.metalnessMap && material.metalnessMap.isTexture === true ) {

  				node = metalnessNode.mul( this.getTexture( scope ).b );

  			} else {

  				node = metalnessNode;

  			}

  		} else if ( scope === MaterialNode.EMISSIVE ) {

  			const emissiveIntensityNode = this.getFloat( 'emissiveIntensity' );
  			const emissiveNode = this.getColor( scope ).mul( emissiveIntensityNode );

  			if ( material.emissiveMap && material.emissiveMap.isTexture === true ) {

  				node = emissiveNode.mul( this.getTexture( scope ) );

  			} else {

  				node = emissiveNode;

  			}

  		} else if ( scope === MaterialNode.NORMAL ) {

  			if ( material.normalMap ) {

  				node = normalMap( this.getTexture( 'normal' ), this.getCache( 'normalScale', 'vec2' ) );
  				node.normalMapType = material.normalMapType;

  			} else if ( material.bumpMap ) {

  				node = bumpMap( this.getTexture( 'bump' ).r, this.getFloat( 'bumpScale' ) );

  			} else {

  				node = normalView;

  			}

  		} else if ( scope === MaterialNode.CLEARCOAT ) {

  			const clearcoatNode = this.getFloat( scope );

  			if ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {

  				node = clearcoatNode.mul( this.getTexture( scope ).r );

  			} else {

  				node = clearcoatNode;

  			}

  		} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {

  			const clearcoatRoughnessNode = this.getFloat( scope );

  			if ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {

  				node = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );

  			} else {

  				node = clearcoatRoughnessNode;

  			}

  		} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {

  			if ( material.clearcoatNormalMap ) {

  				node = normalMap( this.getTexture( scope ), this.getCache( scope + 'Scale', 'vec2' ) );

  			} else {

  				node = normalView;

  			}

  		} else if ( scope === MaterialNode.SHEEN ) {

  			const sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU

  			if ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {

  				node = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );

  			} else {

  				node = sheenNode;

  			}

  		} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {

  			const sheenRoughnessNode = this.getFloat( scope );

  			if ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {

  				node = sheenRoughnessNode.mul( this.getTexture( scope ).a );

  			} else {

  				node = sheenRoughnessNode;

  			}

  			node = node.clamp( 0.07, 1.0 );

  		} else if ( scope === MaterialNode.ANISOTROPY ) {

  			if ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {

  				const anisotropyPolar = this.getTexture( scope );
  				const anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );

  				node = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );

  			} else {

  				node = materialAnisotropyVector;

  			}

  		} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {

  			const iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );

  			if ( material.iridescenceThicknessMap ) {

  				const iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );

  				node = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );

  			} else {

  				node = iridescenceThicknessMaximum;

  			}

  		} else if ( scope === MaterialNode.TRANSMISSION ) {

  			const transmissionNode = this.getFloat( scope );

  			if ( material.transmissionMap ) {

  				node = transmissionNode.mul( this.getTexture( scope ).r );

  			} else {

  				node = transmissionNode;

  			}

  		} else if ( scope === MaterialNode.THICKNESS ) {

  			const thicknessNode = this.getFloat( scope );

  			if ( material.thicknessMap ) {

  				node = thicknessNode.mul( this.getTexture( scope ).g );

  			} else {

  				node = thicknessNode;

  			}

  		} else if ( scope === MaterialNode.IOR ) {

  			node = this.getFloat( scope );

  		} else if ( scope === MaterialNode.LIGHT_MAP ) {

  			node = this.getTexture( scope ).rgb.mul( this.getFloat( 'lightMapIntensity' ) );

  		} else if ( scope === MaterialNode.AO_MAP ) {

  			node = this.getTexture( scope ).r.sub( 1.0 ).mul( this.getFloat( 'aoMapIntensity' ) ).add( 1.0 );

  		} else {

  			const outputType = this.getNodeType( builder );

  			node = this.getCache( scope, outputType );

  		}

  		return node;

  	}

  }

  MaterialNode.ALPHA_TEST = 'alphaTest';
  MaterialNode.COLOR = 'color';
  MaterialNode.OPACITY = 'opacity';
  MaterialNode.SHININESS = 'shininess';
  MaterialNode.SPECULAR = 'specular';
  MaterialNode.SPECULAR_STRENGTH = 'specularStrength';
  MaterialNode.SPECULAR_INTENSITY = 'specularIntensity';
  MaterialNode.SPECULAR_COLOR = 'specularColor';
  MaterialNode.REFLECTIVITY = 'reflectivity';
  MaterialNode.ROUGHNESS = 'roughness';
  MaterialNode.METALNESS = 'metalness';
  MaterialNode.NORMAL = 'normal';
  MaterialNode.CLEARCOAT = 'clearcoat';
  MaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';
  MaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';
  MaterialNode.EMISSIVE = 'emissive';
  MaterialNode.ROTATION = 'rotation';
  MaterialNode.SHEEN = 'sheen';
  MaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';
  MaterialNode.ANISOTROPY = 'anisotropy';
  MaterialNode.IRIDESCENCE = 'iridescence';
  MaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';
  MaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';
  MaterialNode.IOR = 'ior';
  MaterialNode.TRANSMISSION = 'transmission';
  MaterialNode.THICKNESS = 'thickness';
  MaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';
  MaterialNode.ATTENUATION_COLOR = 'attenuationColor';
  MaterialNode.LINE_SCALE = 'scale';
  MaterialNode.LINE_DASH_SIZE = 'dashSize';
  MaterialNode.LINE_GAP_SIZE = 'gapSize';
  MaterialNode.LINE_WIDTH = 'linewidth';
  MaterialNode.LINE_DASH_OFFSET = 'dashOffset';
  MaterialNode.POINT_WIDTH = 'pointWidth';
  MaterialNode.DISPERSION = 'dispersion';
  MaterialNode.LIGHT_MAP = 'light';
  MaterialNode.AO_MAP = 'ao';

  const materialAlphaTest = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );
  const materialColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.COLOR );
  const materialShininess = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHININESS );
  const materialEmissive = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );
  const materialOpacity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.OPACITY );
  const materialSpecular = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR );

  const materialSpecularIntensity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );
  const materialSpecularColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );

  const materialSpecularStrength = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );
  const materialReflectivity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );
  const materialRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );
  const materialMetalness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.METALNESS );
  const materialNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.NORMAL ).context( { getUV: null } );
  const materialClearcoat = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );
  const materialClearcoatRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );
  const materialClearcoatNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL ).context( { getUV: null } );
  const materialRotation = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROTATION );
  const materialSheen = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN );
  const materialSheenRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );
  const materialAnisotropy = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );
  const materialIridescence = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );
  const materialIridescenceIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );
  const materialIridescenceThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );
  const materialTransmission = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );
  const materialThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.THICKNESS );
  const materialIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IOR );
  const materialAttenuationDistance = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );
  const materialAttenuationColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );
  const materialLineScale = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );
  const materialLineDashSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );
  const materialLineGapSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );
  /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );
  /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );
  /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );
  const materialDispersion = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.DISPERSION );
  const materialLightMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LIGHT_MAP );
  const materialAOMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.AO_MAP );
  const materialAnisotropyVector = /*@__PURE__*/ uniform( new Vector2() ).onReference( function ( frame ) {

  	return frame.material;

  } ).onRenderUpdate( function ( { material } ) {

  	this.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

  } );

  class ModelViewProjectionNode extends TempNode {

  	static get type() {

  		return 'ModelViewProjectionNode';

  	}

  	constructor( positionNode = null ) {

  		super( 'vec4' );

  		this.positionNode = positionNode;

  	}

  	setup( builder ) {

  		if ( builder.shaderStage === 'fragment' ) {

  			return varying( builder.context.mvp );

  		}

  		const position = this.positionNode || positionLocal;
  		const viewMatrix = builder.renderer.nodes.modelViewMatrix || modelViewMatrix;

  		return cameraProjectionMatrix.mul( viewMatrix ).mul( position );

  	}

  }

  const modelViewProjection = /*@__PURE__*/ nodeProxy( ModelViewProjectionNode );

  class IndexNode extends Node {

  	static get type() {

  		return 'IndexNode';

  	}

  	constructor( scope ) {

  		super( 'uint' );

  		this.scope = scope;

  		this.isInstanceIndexNode = true;

  	}

  	generate( builder ) {

  		const nodeType = this.getNodeType( builder );
  		const scope = this.scope;

  		let propertyName;

  		if ( scope === IndexNode.VERTEX ) {

  			// The index of a vertex within a mesh.
  			propertyName = builder.getVertexIndex();

  		} else if ( scope === IndexNode.INSTANCE ) {

  			// The index of either a mesh instance or an invocation of a compute shader.
  			propertyName = builder.getInstanceIndex();

  		} else if ( scope === IndexNode.DRAW ) {

  			// The index of a draw call.
  			propertyName = builder.getDrawIndex();

  		} else if ( scope === IndexNode.INVOCATION_LOCAL ) {

  			// The index of a compute invocation within the scope of a workgroup load.
  			propertyName = builder.getInvocationLocalIndex();

  		} else if ( scope === IndexNode.INVOCATION_SUBGROUP ) {

  			// The index of a compute invocation within the scope of a subgroup.
  			propertyName = builder.getInvocationSubgroupIndex();

  		} else if ( scope === IndexNode.SUBGROUP ) {

  			// The index of the subgroup the current compute invocation belongs to.
  			propertyName = builder.getSubgroupIndex();

  		} else {

  			throw new Error( 'THREE.IndexNode: Unknown scope: ' + scope );

  		}

  		let output;

  		if ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {

  			output = propertyName;

  		} else {

  			const nodeVarying = varying( this );

  			output = nodeVarying.build( builder, nodeType );

  		}

  		return output;

  	}

  }

  IndexNode.VERTEX = 'vertex';
  IndexNode.INSTANCE = 'instance';
  IndexNode.SUBGROUP = 'subgroup';
  IndexNode.INVOCATION_LOCAL = 'invocationLocal';
  IndexNode.INVOCATION_SUBGROUP = 'invocationSubgroup';
  IndexNode.DRAW = 'draw';

  const vertexIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.VERTEX );
  const instanceIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INSTANCE );
  /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.SUBGROUP );
  /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_SUBGROUP );
  /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_LOCAL );
  const drawIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.DRAW );

  class InstanceNode extends Node {

  	static get type() {

  		return 'InstanceNode';

  	}

  	constructor( instanceMesh ) {

  		super( 'void' );

  		this.instanceMesh = instanceMesh;

  		this.instanceMatrixNode = null;

  		this.instanceColorNode = null;

  		this.updateType = NodeUpdateType.FRAME;

  		this.buffer = null;
  		this.bufferColor = null;

  	}

  	setup( builder ) {

  		let instanceMatrixNode = this.instanceMatrixNode;
  		let instanceColorNode = this.instanceColorNode;

  		const instanceMesh = this.instanceMesh;

  		if ( instanceMatrixNode === null ) {

  			const instanceAttribute = instanceMesh.instanceMatrix;

  			// Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.

  			if ( instanceMesh.count <= 1000 ) {

  				instanceMatrixNode = buffer( instanceAttribute.array, 'mat4', Math.max( instanceMesh.count, 1 ) ).element( instanceIndex );

  			} else {

  				const buffer = new InstancedInterleavedBuffer( instanceAttribute.array, 16, 1 );

  				this.buffer = buffer;

  				const bufferFn = instanceAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;

  				const instanceBuffers = [
  					// F.Signature -> bufferAttribute( array, type, stride, offset )
  					bufferFn( buffer, 'vec4', 16, 0 ),
  					bufferFn( buffer, 'vec4', 16, 4 ),
  					bufferFn( buffer, 'vec4', 16, 8 ),
  					bufferFn( buffer, 'vec4', 16, 12 )
  				];

  				instanceMatrixNode = mat4( ...instanceBuffers );

  			}

  			this.instanceMatrixNode = instanceMatrixNode;

  		}

  		const instanceColorAttribute = instanceMesh.instanceColor;

  		if ( instanceColorAttribute && instanceColorNode === null ) {

  			const buffer = new InstancedBufferAttribute( instanceColorAttribute.array, 3 );

  			const bufferFn = instanceColorAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;

  			this.bufferColor = buffer;

  			instanceColorNode = vec3( bufferFn( buffer, 'vec3', 3, 0 ) );

  			this.instanceColorNode = instanceColorNode;

  		}

  		// POSITION

  		const instancePosition = instanceMatrixNode.mul( positionLocal ).xyz;
  		positionLocal.assign( instancePosition );

  		// NORMAL

  		if ( builder.hasGeometryAttribute( 'normal' ) ) {

  			const instanceNormal = transformNormal( normalLocal, instanceMatrixNode );

  			// ASSIGNS

  			normalLocal.assign( instanceNormal );

  		}

  		// COLOR

  		if ( this.instanceColorNode !== null ) {

  			varyingProperty( 'vec3', 'vInstanceColor' ).assign( this.instanceColorNode );

  		}

  	}

  	update( /*frame*/ ) {

  		if ( this.instanceMesh.instanceMatrix.usage !== DynamicDrawUsage && this.buffer != null && this.instanceMesh.instanceMatrix.version !== this.buffer.version ) {

  			this.buffer.version = this.instanceMesh.instanceMatrix.version;

  		}

  		if ( this.instanceMesh.instanceColor && this.instanceMesh.instanceColor.usage !== DynamicDrawUsage && this.bufferColor != null && this.instanceMesh.instanceColor.version !== this.bufferColor.version ) {

  			this.bufferColor.version = this.instanceMesh.instanceColor.version;

  		}

  	}

  }

  const instance = /*@__PURE__*/ nodeProxy( InstanceNode );

  class BatchNode extends Node {

  	static get type() {

  		return 'BatchNode';

  	}

  	constructor( batchMesh ) {

  		super( 'void' );

  		this.batchMesh = batchMesh;


  		this.batchingIdNode = null;

  	}

  	setup( builder ) {

  		// POSITION

  		if ( this.batchingIdNode === null ) {

  			if ( builder.getDrawIndex() === null ) {

  				this.batchingIdNode = instanceIndex;

  			} else {

  				this.batchingIdNode = drawIndex;

  			}

  		}

  		const getIndirectIndex = Fn( ( [ id ] ) => {

  			const size = textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 );
  			const x = int( id ).modInt( int( size ) );
  			const y = int( id ).div( int( size ) );
  			return textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;

  		} ).setLayout( {
  			name: 'getIndirectIndex',
  			type: 'uint',
  			inputs: [
  				{ name: 'id', type: 'int' }
  			]
  		} );

  		const indirectId = getIndirectIndex( int( this.batchingIdNode ) );

  		const matricesTexture = this.batchMesh._matricesTexture;

  		const size = textureSize( textureLoad( matricesTexture ), 0 );
  		const j = float( indirectId ).mul( 4 ).toInt().toVar();

  		const x = j.modInt( size );
  		const y = j.div( int( size ) );
  		const batchingMatrix = mat4(
  			textureLoad( matricesTexture, ivec2( x, y ) ),
  			textureLoad( matricesTexture, ivec2( x.add( 1 ), y ) ),
  			textureLoad( matricesTexture, ivec2( x.add( 2 ), y ) ),
  			textureLoad( matricesTexture, ivec2( x.add( 3 ), y ) )
  		);


  		const colorsTexture = this.batchMesh._colorsTexture;

  		if ( colorsTexture !== null ) {

  			const getBatchingColor = Fn( ( [ id ] ) => {

  				const size = textureSize( textureLoad( colorsTexture ), 0 ).x;
  				const j = id;
  				const x = j.modInt( size );
  				const y = j.div( size );
  				return textureLoad( colorsTexture, ivec2( x, y ) ).rgb;

  			} ).setLayout( {
  				name: 'getBatchingColor',
  				type: 'vec3',
  				inputs: [
  					{ name: 'id', type: 'int' }
  				]
  			} );

  			const color = getBatchingColor( indirectId );

  			varyingProperty( 'vec3', 'vBatchColor' ).assign( color );

  		}

  		const bm = mat3( batchingMatrix );

  		positionLocal.assign( batchingMatrix.mul( positionLocal ) );

  		const transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );

  		const batchingNormal = bm.mul( transformedNormal ).xyz;

  		normalLocal.assign( batchingNormal );

  		if ( builder.hasGeometryAttribute( 'tangent' ) ) {

  			tangentLocal.mulAssign( bm );

  		}

  	}

  }

  const batch = /*@__PURE__*/ nodeProxy( BatchNode );

  const _frameId = new WeakMap();

  class SkinningNode extends Node {

  	static get type() {

  		return 'SkinningNode';

  	}

  	constructor( skinnedMesh, useReference = false ) {

  		super( 'void' );

  		this.skinnedMesh = skinnedMesh;
  		this.useReference = useReference;

  		this.updateType = NodeUpdateType.OBJECT;

  		//

  		this.skinIndexNode = attribute( 'skinIndex', 'uvec4' );
  		this.skinWeightNode = attribute( 'skinWeight', 'vec4' );

  		let bindMatrixNode, bindMatrixInverseNode, boneMatricesNode;

  		if ( useReference ) {

  			bindMatrixNode = reference( 'bindMatrix', 'mat4' );
  			bindMatrixInverseNode = reference( 'bindMatrixInverse', 'mat4' );
  			boneMatricesNode = referenceBuffer( 'skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );

  		} else {

  			bindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );
  			bindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );
  			boneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );

  		}

  		this.bindMatrixNode = bindMatrixNode;
  		this.bindMatrixInverseNode = bindMatrixInverseNode;
  		this.boneMatricesNode = boneMatricesNode;
  		this.previousBoneMatricesNode = null;

  	}

  	getSkinnedPosition( boneMatrices = this.boneMatricesNode, position = positionLocal ) {

  		const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;

  		const boneMatX = boneMatrices.element( skinIndexNode.x );
  		const boneMatY = boneMatrices.element( skinIndexNode.y );
  		const boneMatZ = boneMatrices.element( skinIndexNode.z );
  		const boneMatW = boneMatrices.element( skinIndexNode.w );

  		// POSITION

  		const skinVertex = bindMatrixNode.mul( position );

  		const skinned = add(
  			boneMatX.mul( skinWeightNode.x ).mul( skinVertex ),
  			boneMatY.mul( skinWeightNode.y ).mul( skinVertex ),
  			boneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),
  			boneMatW.mul( skinWeightNode.w ).mul( skinVertex )
  		);

  		return bindMatrixInverseNode.mul( skinned ).xyz;

  	}

  	getSkinnedNormal( boneMatrices = this.boneMatricesNode, normal = normalLocal ) {

  		const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;

  		const boneMatX = boneMatrices.element( skinIndexNode.x );
  		const boneMatY = boneMatrices.element( skinIndexNode.y );
  		const boneMatZ = boneMatrices.element( skinIndexNode.z );
  		const boneMatW = boneMatrices.element( skinIndexNode.w );

  		// NORMAL

  		let skinMatrix = add(
  			skinWeightNode.x.mul( boneMatX ),
  			skinWeightNode.y.mul( boneMatY ),
  			skinWeightNode.z.mul( boneMatZ ),
  			skinWeightNode.w.mul( boneMatW )
  		);

  		skinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );

  		return skinMatrix.transformDirection( normal ).xyz;

  	}

  	getPreviousSkinnedPosition( builder ) {

  		const skinnedMesh = builder.object;

  		if ( this.previousBoneMatricesNode === null ) {

  			skinnedMesh.skeleton.previousBoneMatrices = new Float32Array( skinnedMesh.skeleton.boneMatrices );

  			this.previousBoneMatricesNode = referenceBuffer( 'skeleton.previousBoneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );

  		}

  		return this.getSkinnedPosition( this.previousBoneMatricesNode, positionPrevious );

  	}

  	needsPreviousBoneMatrices( builder ) {

  		const mrt = builder.renderer.getMRT();

  		return mrt && mrt.has( 'velocity' );

  	}

  	setup( builder ) {

  		if ( this.needsPreviousBoneMatrices( builder ) ) {

  			positionPrevious.assign( this.getPreviousSkinnedPosition( builder ) );

  		}

  		const skinPosition = this.getSkinnedPosition();


  		positionLocal.assign( skinPosition );

  		if ( builder.hasGeometryAttribute( 'normal' ) ) {

  			const skinNormal = this.getSkinnedNormal();

  			normalLocal.assign( skinNormal );

  			if ( builder.hasGeometryAttribute( 'tangent' ) ) {

  				tangentLocal.assign( skinNormal );

  			}

  		}

  	}

  	generate( builder, output ) {

  		if ( output !== 'void' ) {

  			return positionLocal.build( builder, output );

  		}

  	}

  	update( frame ) {

  		const object = this.useReference ? frame.object : this.skinnedMesh;
  		const skeleton = object.skeleton;

  		if ( _frameId.get( skeleton ) === frame.frameId ) return;

  		_frameId.set( skeleton, frame.frameId );

  		if ( this.previousBoneMatricesNode !== null ) skeleton.previousBoneMatrices.set( skeleton.boneMatrices );

  		skeleton.update();

  	}

  }
  const skinningReference = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh, true ) );

  class LoopNode extends Node {

  	static get type() {

  		return 'LoopNode';

  	}

  	constructor( params = [] ) {

  		super();

  		this.params = params;

  	}

  	getVarName( index ) {

  		return String.fromCharCode( 'i'.charCodeAt() + index );

  	}

  	getProperties( builder ) {

  		const properties = builder.getNodeProperties( this );

  		if ( properties.stackNode !== undefined ) return properties;

  		//

  		const inputs = {};

  		for ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {

  			const param = this.params[ i ];

  			const name = ( param.isNode !== true && param.name ) || this.getVarName( i );
  			const type = ( param.isNode !== true && param.type ) || 'int';

  			inputs[ name ] = expression( name, type );

  		}

  		const stack = builder.addStack(); // TODO: cache() it

  		properties.returnsNode = this.params[ this.params.length - 1 ]( inputs, stack, builder );
  		properties.stackNode = stack;

  		builder.removeStack();

  		return properties;

  	}

  	getNodeType( builder ) {

  		const { returnsNode } = this.getProperties( builder );

  		return returnsNode ? returnsNode.getNodeType( builder ) : 'void';

  	}

  	setup( builder ) {

  		// setup properties

  		this.getProperties( builder );

  	}

  	generate( builder ) {

  		const properties = this.getProperties( builder );

  		const params = this.params;
  		const stackNode = properties.stackNode;

  		for ( let i = 0, l = params.length - 1; i < l; i ++ ) {

  			const param = params[ i ];

  			let start = null, end = null, name = null, type = null, condition = null, update = null;

  			if ( param.isNode ) {

  				type = 'int';
  				name = this.getVarName( i );
  				start = '0';
  				end = param.build( builder, type );
  				condition = '<';

  			} else {

  				type = param.type || 'int';
  				name = param.name || this.getVarName( i );
  				start = param.start;
  				end = param.end;
  				condition = param.condition;
  				update = param.update;

  				if ( typeof start === 'number' ) start = builder.generateConst( type, start );
  				else if ( start && start.isNode ) start = start.build( builder, type );

  				if ( typeof end === 'number' ) end = builder.generateConst( type, end );
  				else if ( end && end.isNode ) end = end.build( builder, type );

  				if ( start !== undefined && end === undefined ) {

  					start = start + ' - 1';
  					end = '0';
  					condition = '>=';

  				} else if ( end !== undefined && start === undefined ) {

  					start = '0';
  					condition = '<';

  				}

  				if ( condition === undefined ) {

  					if ( Number( start ) > Number( end ) ) {

  						condition = '>=';

  					} else {

  						condition = '<';

  					}

  				}

  			}

  			const internalParam = { start, end, condition };

  			//

  			const startSnippet = internalParam.start;
  			const endSnippet = internalParam.end;

  			let declarationSnippet = '';
  			let conditionalSnippet = '';
  			let updateSnippet = '';

  			if ( ! update ) {

  				if ( type === 'int' || type === 'uint' ) {

  					if ( condition.includes( '<' ) ) update = '++';
  					else update = '--';

  				} else {

  					if ( condition.includes( '<' ) ) update = '+= 1.';
  					else update = '-= 1.';

  				}

  			}

  			declarationSnippet += builder.getVar( type, name ) + ' = ' + startSnippet;

  			conditionalSnippet += name + ' ' + condition + ' ' + endSnippet;
  			updateSnippet += name + ' ' + update;

  			const forSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;

  			builder.addFlowCode( ( i === 0 ? '\n' : '' ) + builder.tab + forSnippet + ' {\n\n' ).addFlowTab();

  		}

  		const stackSnippet = stackNode.build( builder, 'void' );

  		const returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';

  		builder.removeFlowTab().addFlowCode( '\n' + builder.tab + stackSnippet );

  		for ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {

  			builder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\n\n' ).removeFlowTab();

  		}

  		builder.addFlowTab();

  		return returnsSnippet;

  	}

  }

  const Loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) ).append();
  const Break = () => expression( 'break' ).append();

  const _morphTextures = /*@__PURE__*/ new WeakMap();
  const _morphVec4 = /*@__PURE__*/ new Vector4();

  const getMorph = /*@__PURE__*/ Fn( ( { bufferMap, influence, stride, width, depth, offset } ) => {

  	const texelIndex = int( vertexIndex ).mul( stride ).add( offset );

  	const y = texelIndex.div( width );
  	const x = texelIndex.sub( y.mul( width ) );

  	const bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth );

  	return bufferAttrib.mul( influence );

  } );

  function getEntry( geometry ) {

  	const hasMorphPosition = geometry.morphAttributes.position !== undefined;
  	const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
  	const hasMorphColors = geometry.morphAttributes.color !== undefined;

  	// instead of using attributes, the WebGL 2 code path encodes morph targets
  	// into an array of data textures. Each layer represents a single morph target.

  	const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  	const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

  	let entry = _morphTextures.get( geometry );

  	if ( entry === undefined || entry.count !== morphTargetsCount ) {

  		if ( entry !== undefined ) entry.texture.dispose();

  		const morphTargets = geometry.morphAttributes.position || [];
  		const morphNormals = geometry.morphAttributes.normal || [];
  		const morphColors = geometry.morphAttributes.color || [];

  		let vertexDataCount = 0;

  		if ( hasMorphPosition === true ) vertexDataCount = 1;
  		if ( hasMorphNormals === true ) vertexDataCount = 2;
  		if ( hasMorphColors === true ) vertexDataCount = 3;

  		let width = geometry.attributes.position.count * vertexDataCount;
  		let height = 1;

  		const maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'

  		if ( width > maxTextureSize ) {

  			height = Math.ceil( width / maxTextureSize );
  			width = maxTextureSize;

  		}

  		const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

  		const bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
  		bufferTexture.type = FloatType;
  		bufferTexture.needsUpdate = true;

  		// fill buffer

  		const vertexDataStride = vertexDataCount * 4;

  		for ( let i = 0; i < morphTargetsCount; i ++ ) {

  			const morphTarget = morphTargets[ i ];
  			const morphNormal = morphNormals[ i ];
  			const morphColor = morphColors[ i ];

  			const offset = width * height * 4 * i;

  			for ( let j = 0; j < morphTarget.count; j ++ ) {

  				const stride = j * vertexDataStride;

  				if ( hasMorphPosition === true ) {

  					_morphVec4.fromBufferAttribute( morphTarget, j );

  					buffer[ offset + stride + 0 ] = _morphVec4.x;
  					buffer[ offset + stride + 1 ] = _morphVec4.y;
  					buffer[ offset + stride + 2 ] = _morphVec4.z;
  					buffer[ offset + stride + 3 ] = 0;

  				}

  				if ( hasMorphNormals === true ) {

  					_morphVec4.fromBufferAttribute( morphNormal, j );

  					buffer[ offset + stride + 4 ] = _morphVec4.x;
  					buffer[ offset + stride + 5 ] = _morphVec4.y;
  					buffer[ offset + stride + 6 ] = _morphVec4.z;
  					buffer[ offset + stride + 7 ] = 0;

  				}

  				if ( hasMorphColors === true ) {

  					_morphVec4.fromBufferAttribute( morphColor, j );

  					buffer[ offset + stride + 8 ] = _morphVec4.x;
  					buffer[ offset + stride + 9 ] = _morphVec4.y;
  					buffer[ offset + stride + 10 ] = _morphVec4.z;
  					buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? _morphVec4.w : 1;

  				}

  			}

  		}

  		entry = {
  			count: morphTargetsCount,
  			texture: bufferTexture,
  			stride: vertexDataCount,
  			size: new Vector2( width, height )
  		};

  		_morphTextures.set( geometry, entry );

  		function disposeTexture() {

  			bufferTexture.dispose();

  			_morphTextures.delete( geometry );

  			geometry.removeEventListener( 'dispose', disposeTexture );

  		}

  		geometry.addEventListener( 'dispose', disposeTexture );

  	}

  	return entry;

  }


  class MorphNode extends Node {

  	static get type() {

  		return 'MorphNode';

  	}

  	constructor( mesh ) {

  		super( 'void' );

  		this.mesh = mesh;
  		this.morphBaseInfluence = uniform( 1 );

  		this.updateType = NodeUpdateType.OBJECT;

  	}

  	setup( builder ) {

  		const { geometry } = builder;

  		const hasMorphPosition = geometry.morphAttributes.position !== undefined;
  		const hasMorphNormals = geometry.hasAttribute( 'normal' ) && geometry.morphAttributes.normal !== undefined;

  		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

  		// nodes

  		const { texture: bufferMap, stride, size } = getEntry( geometry );

  		if ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );
  		if ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );

  		const width = int( size.width );

  		Loop( morphTargetsCount, ( { i } ) => {

  			const influence = float( 0 ).toVar();

  			if ( this.mesh.count > 1 && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {

  				influence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );

  			} else {

  				influence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );

  			}

  			if ( hasMorphPosition === true ) {

  				positionLocal.addAssign( getMorph( {
  					bufferMap,
  					influence,
  					stride,
  					width,
  					depth: i,
  					offset: int( 0 )
  				} ) );

  			}

  			if ( hasMorphNormals === true ) {

  				normalLocal.addAssign( getMorph( {
  					bufferMap,
  					influence,
  					stride,
  					width,
  					depth: i,
  					offset: int( 1 )
  				} ) );

  			}

  		} );

  	}

  	update() {

  		const morphBaseInfluence = this.morphBaseInfluence;

  		if ( this.mesh.geometry.morphTargetsRelative ) {

  			morphBaseInfluence.value = 1;

  		} else {

  			morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );

  		}

  	}

  }

  const morphReference = /*@__PURE__*/ nodeProxy( MorphNode );

  class LightingNode extends Node {

  	static get type() {

  		return 'LightingNode';

  	}

  	constructor() {

  		super( 'vec3' );

  		this.isLightingNode = true;

  	}

  	generate( /*builder*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  }

  class AONode extends LightingNode {

  	static get type() {

  		return 'AONode';

  	}

  	constructor( aoNode = null ) {

  		super();

  		this.aoNode = aoNode;

  	}

  	setup( builder ) {

  		builder.context.ambientOcclusion.mulAssign( this.aoNode );

  	}

  }

  class LightingContextNode extends ContextNode {

  	static get type() {

  		return 'LightingContextNode';

  	}

  	constructor( node, lightingModel = null, backdropNode = null, backdropAlphaNode = null ) {

  		super( node );

  		this.lightingModel = lightingModel;
  		this.backdropNode = backdropNode;
  		this.backdropAlphaNode = backdropAlphaNode;

  		this._value = null;

  	}

  	getContext() {

  		const { backdropNode, backdropAlphaNode } = this;

  		const directDiffuse = vec3().toVar( 'directDiffuse' ),
  			directSpecular = vec3().toVar( 'directSpecular' ),
  			indirectDiffuse = vec3().toVar( 'indirectDiffuse' ),
  			indirectSpecular = vec3().toVar( 'indirectSpecular' );

  		const reflectedLight = {
  			directDiffuse,
  			directSpecular,
  			indirectDiffuse,
  			indirectSpecular
  		};

  		const context = {
  			radiance: vec3().toVar( 'radiance' ),
  			irradiance: vec3().toVar( 'irradiance' ),
  			iblIrradiance: vec3().toVar( 'iblIrradiance' ),
  			ambientOcclusion: float( 1 ).toVar( 'ambientOcclusion' ),
  			reflectedLight,
  			backdrop: backdropNode,
  			backdropAlpha: backdropAlphaNode
  		};

  		return context;

  	}

  	setup( builder ) {

  		this.value = this._value || ( this._value = this.getContext() );
  		this.value.lightingModel = this.lightingModel || builder.context.lightingModel;

  		return super.setup( builder );

  	}

  }

  const lightingContext = /*@__PURE__*/ nodeProxy( LightingContextNode );

  class IrradianceNode extends LightingNode {

  	static get type() {

  		return 'IrradianceNode';

  	}

  	constructor( node ) {

  		super();

  		this.node = node;

  	}

  	setup( builder ) {

  		builder.context.irradiance.addAssign( this.node );

  	}

  }

  let screenSizeVec, viewportVec;

  class ScreenNode extends Node {

  	static get type() {

  		return 'ScreenNode';

  	}

  	constructor( scope ) {

  		super();

  		this.scope = scope;

  		this.isViewportNode = true;

  	}

  	getNodeType() {

  		if ( this.scope === ScreenNode.VIEWPORT ) return 'vec4';
  		else return 'vec2';

  	}

  	getUpdateType() {

  		let updateType = NodeUpdateType.NONE;

  		if ( this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT ) {

  			updateType = NodeUpdateType.RENDER;

  		}

  		this.updateType = updateType;

  		return updateType;

  	}

  	update( { renderer } ) {

  		const renderTarget = renderer.getRenderTarget();

  		if ( this.scope === ScreenNode.VIEWPORT ) {

  			if ( renderTarget !== null ) {

  				viewportVec.copy( renderTarget.viewport );

  			} else {

  				renderer.getViewport( viewportVec );

  				viewportVec.multiplyScalar( renderer.getPixelRatio() );

  			}

  		} else {

  			if ( renderTarget !== null ) {

  				screenSizeVec.width = renderTarget.width;
  				screenSizeVec.height = renderTarget.height;

  			} else {

  				renderer.getDrawingBufferSize( screenSizeVec );

  			}

  		}

  	}

  	setup( /*builder*/ ) {

  		const scope = this.scope;

  		let output = null;

  		if ( scope === ScreenNode.SIZE ) {

  			output = uniform( screenSizeVec || ( screenSizeVec = new Vector2() ) );

  		} else if ( scope === ScreenNode.VIEWPORT ) {

  			output = uniform( viewportVec || ( viewportVec = new Vector4() ) );

  		} else {

  			output = vec2( screenCoordinate.div( screenSize ) );

  		}

  		return output;

  	}

  	generate( builder ) {

  		if ( this.scope === ScreenNode.COORDINATE ) {

  			let coord = builder.getFragCoord();

  			if ( builder.isFlipY() ) {

  				// follow webgpu standards

  				const size = builder.getNodeProperties( screenSize ).outputNode.build( builder );

  				coord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ size }.y - ${ coord }.y )`;

  			}

  			return coord;

  		}

  		return super.generate( builder );

  	}

  }

  ScreenNode.COORDINATE = 'coordinate';
  ScreenNode.VIEWPORT = 'viewport';
  ScreenNode.SIZE = 'size';
  ScreenNode.UV = 'uv';

  // Screen

  const screenUV = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.UV );
  const screenSize = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.SIZE );
  const screenCoordinate = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.COORDINATE );

  // Viewport

  const viewport = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.VIEWPORT );
  viewport.zw;
  /*@__PURE__*/ screenCoordinate.sub( viewport.xy );

  const _size$4 = /*@__PURE__*/ new Vector2();

  class ViewportTextureNode extends TextureNode {

  	static get type() {

  		return 'ViewportTextureNode';

  	}

  	constructor( uvNode = screenUV, levelNode = null, framebufferTexture = null ) {

  		if ( framebufferTexture === null ) {

  			framebufferTexture = new FramebufferTexture();
  			framebufferTexture.minFilter = LinearMipmapLinearFilter;

  		}

  		super( framebufferTexture, uvNode, levelNode );

  		this.generateMipmaps = false;

  		this.isOutputTextureNode = true;

  		this.updateBeforeType = NodeUpdateType.FRAME;

  	}

  	updateBefore( frame ) {

  		const renderer = frame.renderer;
  		renderer.getDrawingBufferSize( _size$4 );

  		//

  		const framebufferTexture = this.value;

  		if ( framebufferTexture.image.width !== _size$4.width || framebufferTexture.image.height !== _size$4.height ) {

  			framebufferTexture.image.width = _size$4.width;
  			framebufferTexture.image.height = _size$4.height;
  			framebufferTexture.needsUpdate = true;

  		}

  		//

  		const currentGenerateMipmaps = framebufferTexture.generateMipmaps;
  		framebufferTexture.generateMipmaps = this.generateMipmaps;

  		renderer.copyFramebufferToTexture( framebufferTexture );

  		framebufferTexture.generateMipmaps = currentGenerateMipmaps;

  	}

  	clone() {

  		const viewportTextureNode = new this.constructor( this.uvNode, this.levelNode, this.value );
  		viewportTextureNode.generateMipmaps = this.generateMipmaps;

  		return viewportTextureNode;

  	}

  }
  const viewportMipTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode, null, null, { generateMipmaps: true } );

  let sharedDepthbuffer = null;

  class ViewportDepthTextureNode extends ViewportTextureNode {

  	static get type() {

  		return 'ViewportDepthTextureNode';

  	}

  	constructor( uvNode = screenUV, levelNode = null ) {

  		if ( sharedDepthbuffer === null ) {

  			sharedDepthbuffer = new DepthTexture();

  		}

  		super( uvNode, levelNode, sharedDepthbuffer );

  	}

  }

  const viewportDepthTexture = /*@__PURE__*/ nodeProxy( ViewportDepthTextureNode );

  class ViewportDepthNode extends Node {

  	static get type() {

  		return 'ViewportDepthNode';

  	}

  	constructor( scope, valueNode = null ) {

  		super( 'float' );

  		this.scope = scope;
  		this.valueNode = valueNode;

  		this.isViewportDepthNode = true;

  	}

  	generate( builder ) {

  		const { scope } = this;

  		if ( scope === ViewportDepthNode.DEPTH_BASE ) {

  			return builder.getFragDepth();

  		}

  		return super.generate( builder );

  	}

  	setup( { camera } ) {

  		const { scope } = this;
  		const value = this.valueNode;

  		let node = null;

  		if ( scope === ViewportDepthNode.DEPTH_BASE ) {

  			if ( value !== null ) {

   				node = depthBase().assign( value );

  			}

  		} else if ( scope === ViewportDepthNode.DEPTH ) {

  			if ( camera.isPerspectiveCamera ) {

  				node = viewZToPerspectiveDepth( positionView.z, cameraNear, cameraFar );

  			} else {

  				node = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );

  			}

  		} else if ( scope === ViewportDepthNode.LINEAR_DEPTH ) {

  			if ( value !== null ) {

  				if ( camera.isPerspectiveCamera ) {

  					const viewZ = perspectiveDepthToViewZ( value, cameraNear, cameraFar );

  					node = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );

  				} else {

  					node = value;

  				}

  			} else {

  				node = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );

  			}

  		}

  		return node;

  	}

  }

  ViewportDepthNode.DEPTH_BASE = 'depthBase';
  ViewportDepthNode.DEPTH = 'depth';
  ViewportDepthNode.LINEAR_DEPTH = 'linearDepth';

  // NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera

  // -near maps to 0; -far maps to 1
  const viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );

  // NOTE: https://twitter.com/gonnavis/status/1377183786949959682

  // -near maps to 0; -far maps to 1
  const viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );

  // maps perspective depth in [ 0, 1 ] to viewZ
  const perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );

  const perspectiveDepthToLogarithmicDepth = ( perspectiveW, near, far ) => {

  	// The final logarithmic depth formula used here is adapted from one described in an
  	// article by Thatcher Ulrich (see http://tulrich.com/geekstuff/log_depth_buffer.txt),
  	// which was an improvement upon an earlier formula one described in an
  	// Outerra article (https://outerra.blogspot.com/2009/08/logarithmic-z-buffer.html).
  	// Ulrich's formula is the following:
  	//     z = K * log( w / cameraNear ) / log( cameraFar / cameraNear )
  	//     where K = 2^k - 1, and k is the number of bits in the depth buffer.
  	// The Outerra variant ignored the camera near plane (it assumed it was 0) and instead
  	// opted for a "C-constant" for resolution adjustment of objects near the camera.
  	// Outerra states: "Notice that the 'C' variant doesn’t use a near plane distance, it has it
  	// set at 0" (quote from https://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html).
  	// Ulrich's variant has the benefit of constant relative precision over the whole near-far range.
  	// It was debated here whether Outerra's "C-constant" or Ulrich's "near plane" variant should
  	// be used, and ultimately Ulrich's "near plane" version was chosen.
  	// Outerra eventually made another improvement to their original "C-constant" variant,
  	// but it still does not incorporate the camera near plane (for this version,
  	// see https://outerra.blogspot.com/2013/07/logarithmic-depth-buffer-optimizations.html).
  	// Here we make 4 changes to Ulrich's formula:
  	// 1. Clamp the camera near plane so we don't divide by 0.
  	// 2. Use log2 instead of log to avoid an extra multiply (shaders implement log using log2).
  	// 3. Assume K is 1 (K = maximum value in depth buffer; see Ulrich's formula above).
  	// 4. Add 1 to each division by cameraNear to ensure the depth curve is shifted to the left as cameraNear increases.
  	// For visual representation of this depth curve, see https://www.desmos.com/calculator/lz5rqfysih
  	near = near.max( 1e-6 ).toVar();
  	const numerator = log2( perspectiveW.div( near ).add( 1 ) );
  	const denominator = log2( far.div( near ).add( 1 ) );
  	return numerator.div( denominator );

  };

  const depthBase = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_BASE );

  const depth = /*@__PURE__*/ nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );
  const linearDepth = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH );
  /*@__PURE__*/ linearDepth( viewportDepthTexture() );

  depth.assign = ( value ) => depthBase( value );

  class ClippingNode extends Node {

  	static get type() {

  		return 'ClippingNode';

  	}

  	constructor( scope = ClippingNode.DEFAULT ) {

  		super();

  		this.scope = scope;

  	}

  	setup( builder ) {

  		super.setup( builder );

  		const clippingContext = builder.clippingContext;
  		const { localClipIntersection, localClippingCount, globalClippingCount } = clippingContext;

  		const numClippingPlanes = globalClippingCount + localClippingCount;
  		const numUnionClippingPlanes = localClipIntersection ? numClippingPlanes - localClippingCount : numClippingPlanes;

  		if ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {

  			return this.setupAlphaToCoverage( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );

  		} else {

  			return this.setupDefault( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );

  		}

  	}

  	setupAlphaToCoverage( planes, numClippingPlanes, numUnionClippingPlanes ) {

  		return Fn( () => {

  			const clippingPlanes = uniformArray( planes );

  			const distanceToPlane = property( 'float', 'distanceToPlane' );
  			const distanceGradient = property( 'float', 'distanceToGradient' );

  			const clipOpacity = property( 'float', 'clipOpacity' );

  			clipOpacity.assign( 1 );

  			let plane;

  			Loop( numUnionClippingPlanes, ( { i } ) => {

  				plane = clippingPlanes.element( i );

  				distanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );
  				distanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );

  				clipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );

  				clipOpacity.equal( 0.0 ).discard();

  			} );

  			if ( numUnionClippingPlanes < numClippingPlanes ) {

  				const unionClipOpacity = property( 'float', 'unionclipOpacity' );

  				unionClipOpacity.assign( 1 );

  				Loop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {

  					plane = clippingPlanes.element( i );

  					distanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );
  					distanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );

  					unionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );

  				} );

  				clipOpacity.mulAssign( unionClipOpacity.oneMinus() );

  			}

  			diffuseColor.a.mulAssign( clipOpacity );

  			diffuseColor.a.equal( 0.0 ).discard();

  		} )();

  	}

  	setupDefault( planes, numClippingPlanes, numUnionClippingPlanes ) {

  		return Fn( () => {

  			const clippingPlanes = uniformArray( planes );

  			let plane;

  			Loop( numUnionClippingPlanes, ( { i } ) => {

  				plane = clippingPlanes.element( i );
  				positionView.dot( plane.xyz ).greaterThan( plane.w ).discard();

  			} );

  			if ( numUnionClippingPlanes < numClippingPlanes ) {

  				const clipped = property( 'bool', 'clipped' );

  				clipped.assign( true );

  				Loop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {

  					plane = clippingPlanes.element( i );
  					clipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );

  				} );

  				clipped.discard();

  			}

  		} )();

  	}

  }

  ClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';
  ClippingNode.DEFAULT = 'default';

  const clipping = () => nodeObject( new ClippingNode() );

  const clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );

  /**
   * See: https://casual-effects.com/research/Wyman2017Hashed/index.html
   */

  const ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.

  const hash2D = /*@__PURE__*/ Fn( ( [ value ] ) => {

  	return fract( mul( 1.0e4, sin( mul( 17.0, value.x ).add( mul( 0.1, value.y ) ) ) ).mul( add( 0.1, abs( sin( mul( 13.0, value.y ).add( value.x ) ) ) ) ) );

  } );

  const hash3D = /*@__PURE__*/ Fn( ( [ value ] ) => {

  	return hash2D( vec2( hash2D( value.xy ), value.z ) );

  } );

  const getAlphaHashThreshold = /*@__PURE__*/ Fn( ( [ position ] ) => {

  	// Find the discretized derivatives of our coordinates
  	const maxDeriv = max$1(
  		length( dFdx( position.xyz ) ),
  		length( dFdy( position.xyz ) )
  	).toVar( 'maxDeriv' );

  	const pixScale = float( 1 ).div( float( ALPHA_HASH_SCALE ).mul( maxDeriv ) ).toVar( 'pixScale' );

  	// Find two nearest log-discretized noise scales
  	const pixScales = vec2(
  		exp2( floor( log2( pixScale ) ) ),
  		exp2( ceil( log2( pixScale ) ) )
  	).toVar( 'pixScales' );

  	// Compute alpha thresholds at our two noise scales
  	const alpha = vec2(
  		hash3D( floor( pixScales.x.mul( position.xyz ) ) ),
  		hash3D( floor( pixScales.y.mul( position.xyz ) ) ),
  	).toVar( 'alpha' );

  	// Factor to interpolate lerp with
  	const lerpFactor = fract( log2( pixScale ) ).toVar( 'lerpFactor' );

  	// Interpolate alpha threshold from noise at two scales
  	const x = add( mul( lerpFactor.oneMinus(), alpha.x ), mul( lerpFactor, alpha.y ) ).toVar( 'x' );

  	// Pass into CDF to compute uniformly distrib threshold
  	const a = min$1( lerpFactor, lerpFactor.oneMinus() ).toVar( 'a' );
  	const cases = vec3(
  		x.mul( x ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ),
  		x.sub( mul( 0.5, a ) ).div( sub( 1.0, a ) ),
  		sub( 1.0, sub( 1.0, x ).mul( sub( 1.0, x ) ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ) ) ).toVar( 'cases' );

  	// Find our final, uniformly distributed alpha threshold (ατ)
  	const threshold = x.lessThan( a.oneMinus() ).select( x.lessThan( a ).select( cases.x, cases.y ), cases.z );

  	// Avoids ατ == 0. Could also do ατ =1-ατ
  	return clamp( threshold, 1.0e-6, 1.0 );

  } );

  class NodeMaterial extends Material {

  	static get type() {

  		return 'NodeMaterial';

  	}

  	constructor() {

  		super();

  		this.isNodeMaterial = true;

  		this.type = this.constructor.type;

  		this.forceSinglePass = false;

  		this.fog = true;
  		this.lights = false;

  		this.lightsNode = null;
  		this.envNode = null;
  		this.aoNode = null;

  		this.colorNode = null;
  		this.normalNode = null;
  		this.opacityNode = null;
  		this.backdropNode = null;
  		this.backdropAlphaNode = null;
  		this.alphaTestNode = null;

  		this.positionNode = null;
  		this.geometryNode = null;

  		this.depthNode = null;
  		this.shadowNode = null;
  		this.shadowPositionNode = null;

  		this.outputNode = null;
  		this.mrtNode = null;

  		this.fragmentNode = null;
  		this.vertexNode = null;

  	}

  	customProgramCacheKey() {

  		return this.type + getCacheKey$1( this );

  	}

  	build( builder ) {

  		this.setup( builder );

  	}

  	setupObserver( builder ) {

  		return new NodeMaterialObserver( builder );

  	}

  	setup( builder ) {

  		builder.context.setupNormal = () => this.setupNormal( builder );

  		// < VERTEX STAGE >

  		builder.addStack();

  		builder.stack.outputNode = this.vertexNode || this.setupPosition( builder );

  		if ( this.geometryNode !== null ) {

  			builder.stack.outputNode = builder.stack.outputNode.bypass( this.geometryNode );

  		}

  		builder.addFlow( 'vertex', builder.removeStack() );

  		// < FRAGMENT STAGE >

  		builder.addStack();

  		let resultNode;

  		const clippingNode = this.setupClipping( builder );

  		if ( this.depthWrite === true ) this.setupDepth( builder );

  		if ( this.fragmentNode === null ) {

  			this.setupDiffuseColor( builder );
  			this.setupVariants( builder );

  			const outgoingLightNode = this.setupLighting( builder );

  			if ( clippingNode !== null ) builder.stack.add( clippingNode );

  			// force unsigned floats - useful for RenderTargets

  			const basicOutput = vec4( outgoingLightNode, diffuseColor.a ).max( 0 );

  			resultNode = this.setupOutput( builder, basicOutput );

  			// OUTPUT NODE

  			output.assign( resultNode );

  			//

  			if ( this.outputNode !== null ) resultNode = this.outputNode;

  			// MRT

  			const renderTarget = builder.renderer.getRenderTarget();

  			if ( renderTarget !== null ) {

  				const mrt = builder.renderer.getMRT();
  				const materialMRT = this.mrtNode;

  				if ( mrt !== null ) {

  					resultNode = mrt;

  					if ( materialMRT !== null ) {

  						resultNode = mrt.merge( materialMRT );

  					}

  				} else if ( materialMRT !== null ) {

  					resultNode = materialMRT;

  				}

  			}

  		} else {

  			let fragmentNode = this.fragmentNode;

  			if ( fragmentNode.isOutputStructNode !== true ) {

  				fragmentNode = vec4( fragmentNode );

  			}

  			resultNode = this.setupOutput( builder, fragmentNode );

  		}

  		builder.stack.outputNode = resultNode;

  		builder.addFlow( 'fragment', builder.removeStack() );

  		// < MONITOR >

  		builder.monitor = this.setupObserver( builder );

  	}

  	setupClipping( builder ) {

  		if ( builder.clippingContext === null ) return null;

  		const { globalClippingCount, localClippingCount } = builder.clippingContext;

  		let result = null;

  		if ( globalClippingCount || localClippingCount ) {

  			const samples = builder.renderer.samples;

  			if ( this.alphaToCoverage && samples > 1 ) {

  				// to be added to flow when the color/alpha value has been determined
  				result = clippingAlpha();

  			} else {

  				builder.stack.add( clipping() );

  			}

  		}

  		return result;

  	}

  	setupDepth( builder ) {

  		const { renderer, camera } = builder;

  		// Depth

  		let depthNode = this.depthNode;

  		if ( depthNode === null ) {

  			const mrt = renderer.getMRT();

  			if ( mrt && mrt.has( 'depth' ) ) {

  				depthNode = mrt.get( 'depth' );

  			} else if ( renderer.logarithmicDepthBuffer === true ) {

  				if ( camera.isPerspectiveCamera ) {

  					depthNode = perspectiveDepthToLogarithmicDepth( modelViewProjection().w, cameraNear, cameraFar );

  				} else {

  					depthNode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );

  				}

  			}

  		}

  		if ( depthNode !== null ) {

  			depth.assign( depthNode ).append();

  		}

  	}

  	setupPosition( builder ) {

  		const { object } = builder;
  		const geometry = object.geometry;

  		builder.addStack();

  		// Vertex

  		if ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {

  			morphReference( object ).append();

  		}

  		if ( object.isSkinnedMesh === true ) {

  			skinningReference( object ).append();

  		}

  		if ( this.displacementMap ) {

  			const displacementMap = materialReference( 'displacementMap', 'texture' );
  			const displacementScale = materialReference( 'displacementScale', 'float' );
  			const displacementBias = materialReference( 'displacementBias', 'float' );

  			positionLocal.addAssign( normalLocal.normalize().mul( ( displacementMap.x.mul( displacementScale ).add( displacementBias ) ) ) );

  		}

  		if ( object.isBatchedMesh ) {

  			batch( object ).append();

  		}

  		if ( ( object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) ) {

  			instance( object ).append();

  		}

  		if ( this.positionNode !== null ) {

  			positionLocal.assign( this.positionNode );

  		}

  		const mvp = modelViewProjection();

  		builder.context.vertex = builder.removeStack();
  		builder.context.mvp = mvp;

  		return mvp;

  	}

  	setupDiffuseColor( { object, geometry } ) {

  		let colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;

  		// VERTEX COLORS

  		if ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {

  			colorNode = vec4( colorNode.xyz.mul( attribute( 'color', 'vec3' ) ), colorNode.a );

  		}

  		// Instanced colors

  		if ( object.instanceColor ) {

  			const instanceColor = varyingProperty( 'vec3', 'vInstanceColor' );

  			colorNode = instanceColor.mul( colorNode );

  		}

  		if ( object.isBatchedMesh && object._colorsTexture ) {

  			const batchColor = varyingProperty( 'vec3', 'vBatchColor' );

  			colorNode = batchColor.mul( colorNode );

  		}


  		// COLOR

  		diffuseColor.assign( colorNode );

  		// OPACITY

  		const opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;
  		diffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );

  		// ALPHA TEST

  		if ( this.alphaTestNode !== null || this.alphaTest > 0 ) {

  			const alphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;

  			diffuseColor.a.lessThanEqual( alphaTestNode ).discard();

  		}

  		// ALPHA HASH

  		if ( this.alphaHash === true ) {

  			diffuseColor.a.lessThan( getAlphaHashThreshold( positionLocal ) ).discard();

  		}

  		if ( this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false ) {

  			diffuseColor.a.assign( 1.0 );

  		}

  	}

  	setupVariants( /*builder*/ ) {

  		// Interface function.

  	}

  	setupOutgoingLight() {

  		return ( this.lights === true ) ? vec3( 0 ) : diffuseColor.rgb;

  	}

  	setupNormal() {

  		return this.normalNode ? vec3( this.normalNode ) : materialNormal;

  	}

  	setupEnvironment( /*builder*/ ) {

  		let node = null;

  		if ( this.envNode ) {

  			node = this.envNode;

  		} else if ( this.envMap ) {

  			node = this.envMap.isCubeTexture ? materialReference( 'envMap', 'cubeTexture' ) : materialReference( 'envMap', 'texture' );

  		}

  		return node;

  	}

  	setupLightMap( builder ) {

  		let node = null;

  		if ( builder.material.lightMap ) {

  			node = new IrradianceNode( materialLightMap );

  		}

  		return node;

  	}

  	setupLights( builder ) {

  		const materialLightsNode = [];

  		//

  		const envNode = this.setupEnvironment( builder );

  		if ( envNode && envNode.isLightingNode ) {

  			materialLightsNode.push( envNode );

  		}

  		const lightMapNode = this.setupLightMap( builder );

  		if ( lightMapNode && lightMapNode.isLightingNode ) {

  			materialLightsNode.push( lightMapNode );

  		}

  		if ( this.aoNode !== null || builder.material.aoMap ) {

  			const aoNode = this.aoNode !== null ? this.aoNode : materialAOMap;

  			materialLightsNode.push( new AONode( aoNode ) );

  		}

  		let lightsN = this.lightsNode || builder.lightsNode;

  		if ( materialLightsNode.length > 0 ) {

  			lightsN = builder.renderer.lighting.createNode( [ ...lightsN.getLights(), ...materialLightsNode ] );

  		}

  		return lightsN;

  	}

  	setupLightingModel( /*builder*/ ) {

  		// Interface function.

  	}

  	setupLighting( builder ) {

  		const { material } = builder;
  		const { backdropNode, backdropAlphaNode, emissiveNode } = this;

  		// OUTGOING LIGHT

  		const lights = this.lights === true || this.lightsNode !== null;

  		const lightsNode = lights ? this.setupLights( builder ) : null;

  		let outgoingLightNode = this.setupOutgoingLight( builder );

  		if ( lightsNode && lightsNode.getScope().hasLights ) {

  			const lightingModel = this.setupLightingModel( builder );

  			outgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );

  		} else if ( backdropNode !== null ) {

  			outgoingLightNode = vec3( backdropAlphaNode !== null ? mix$2( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );

  		}

  		// EMISSIVE

  		if ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {

  			emissive.assign( vec3( emissiveNode ? emissiveNode : materialEmissive ) );

  			outgoingLightNode = outgoingLightNode.add( emissive );

  		}

  		return outgoingLightNode;

  	}

  	setupOutput( builder, outputNode ) {

  		// FOG

  		if ( this.fog === true ) {

  			const fogNode = builder.fogNode;

  			if ( fogNode ) outputNode = vec4( fogNode.mix( outputNode.rgb, fogNode.colorNode ), outputNode.a );

  		}

  		return outputNode;

  	}

  	setDefaultValues( material ) {

  		// This approach is to reuse the native refreshUniforms*
  		// and turn available the use of features like transmission and environment in core

  		for ( const property in material ) {

  			const value = material[ property ];

  			if ( this[ property ] === undefined ) {

  				this[ property ] = value;

  				if ( value && value.clone ) this[ property ] = value.clone();

  			}

  		}

  		const descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );

  		for ( const key in descriptors ) {

  			if ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&
  			     descriptors[ key ].get !== undefined ) {

  				Object.defineProperty( this.constructor.prototype, key, descriptors[ key ] );

  			}

  		}

  	}

  	toJSON( meta ) {

  		const isRoot = ( meta === undefined || typeof meta === 'string' );

  		if ( isRoot ) {

  			meta = {
  				textures: {},
  				images: {},
  				nodes: {}
  			};

  		}

  		const data = Material.prototype.toJSON.call( this, meta );
  		const nodeChildren = getNodeChildren( this );

  		data.inputNodes = {};

  		for ( const { property, childNode } of nodeChildren ) {

  			data.inputNodes[ property ] = childNode.toJSON( meta ).uuid;

  		}

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			const values = [];

  			for ( const key in cache ) {

  				const data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRoot ) {

  			const textures = extractFromCache( meta.textures );
  			const images = extractFromCache( meta.images );
  			const nodes = extractFromCache( meta.nodes );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;
  			if ( nodes.length > 0 ) data.nodes = nodes;

  		}

  		return data;

  	}

  	copy( source ) {

  		this.lightsNode = source.lightsNode;
  		this.envNode = source.envNode;

  		this.colorNode = source.colorNode;
  		this.normalNode = source.normalNode;
  		this.opacityNode = source.opacityNode;
  		this.backdropNode = source.backdropNode;
  		this.backdropAlphaNode = source.backdropAlphaNode;
  		this.alphaTestNode = source.alphaTestNode;

  		this.positionNode = source.positionNode;
  		this.geometryNode = source.geometryNode;

  		this.depthNode = source.depthNode;
  		this.shadowNode = source.shadowNode;
  		this.shadowPositionNode = source.shadowPositionNode;

  		this.outputNode = source.outputNode;
  		this.mrtNode = source.mrtNode;

  		this.fragmentNode = source.fragmentNode;
  		this.vertexNode = source.vertexNode;

  		return super.copy( source );

  	}

  }

  const _defaultValues$d = /*@__PURE__*/ new LineBasicMaterial();

  class LineBasicNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'LineBasicNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isLineBasicNodeMaterial = true;

  		this.lights = false;

  		this.setDefaultValues( _defaultValues$d );

  		this.setValues( parameters );

  	}

  }

  const _defaultValues$c = /*@__PURE__*/ new LineDashedMaterial();

  class LineDashedNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'LineDashedNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isLineDashedNodeMaterial = true;

  		this.lights = false;

  		this.setDefaultValues( _defaultValues$c );

  		this.offsetNode = null;
  		this.dashScaleNode = null;
  		this.dashSizeNode = null;
  		this.gapSizeNode = null;

  		this.setValues( parameters );

  	}

  	setupVariants() {

  		const offsetNode = this.offsetNode;
  		const dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;
  		const dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;
  		const gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;

  		dashSize.assign( dashSizeNode );
  		gapSize.assign( gapSizeNode );

  		const vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );
  		const vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;

  		vLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();

  	}

  }

  const directionToColor = ( node ) => nodeObject( node ).mul( 0.5 ).add( 0.5 );

  const _defaultValues$a = /*@__PURE__*/ new MeshNormalMaterial();

  class MeshNormalNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshNormalNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.lights = false;

  		this.isMeshNormalNodeMaterial = true;

  		this.setDefaultValues( _defaultValues$a );

  		this.setValues( parameters );

  	}

  	setupDiffuseColor() {

  		const opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;

  		diffuseColor.assign( vec4( directionToColor( transformedNormalView ), opacityNode ) );

  	}

  }

  class EquirectUVNode extends TempNode {

  	static get type() {

  		return 'EquirectUVNode';

  	}

  	constructor( dirNode = positionWorldDirection ) {

  		super( 'vec2' );

  		this.dirNode = dirNode;

  	}

  	setup() {

  		const dir = this.dirNode;

  		const u = dir.z.atan2( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );
  		const v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );

  		return vec2( u, v );

  	}

  }

  const equirectUV = /*@__PURE__*/ nodeProxy( EquirectUVNode );

  // @TODO: Consider rename WebGLCubeRenderTarget to just CubeRenderTarget

  class CubeRenderTarget extends WebGLCubeRenderTarget {

  	constructor( size = 1, options = {} ) {

  		super( size, options );

  		this.isCubeRenderTarget = true;

  	}

  	fromEquirectangularTexture( renderer, texture$1 ) {

  		const currentMinFilter = texture$1.minFilter;
  		const currentGenerateMipmaps = texture$1.generateMipmaps;

  		texture$1.generateMipmaps = true;

  		this.texture.type = texture$1.type;
  		this.texture.colorSpace = texture$1.colorSpace;

  		this.texture.generateMipmaps = texture$1.generateMipmaps;
  		this.texture.minFilter = texture$1.minFilter;
  		this.texture.magFilter = texture$1.magFilter;

  		const geometry = new BoxGeometry( 5, 5, 5 );

  		const uvNode = equirectUV( positionWorldDirection );

  		const material = new NodeMaterial();
  		material.colorNode = texture( texture$1, uvNode, 0 );
  		material.side = BackSide;
  		material.blending = NoBlending;

  		const mesh = new Mesh( geometry, material );

  		const scene = new Scene();
  		scene.add( mesh );

  		// Avoid blurred poles
  		if ( texture$1.minFilter === LinearMipmapLinearFilter ) texture$1.minFilter = LinearFilter;

  		const camera = new CubeCamera( 1, 10, this );

  		const currentMRT = renderer.getMRT();
  		renderer.setMRT( null );

  		camera.update( renderer, scene );

  		renderer.setMRT( currentMRT );

  		texture$1.minFilter = currentMinFilter;
  		texture$1.currentGenerateMipmaps = currentGenerateMipmaps;

  		mesh.geometry.dispose();
  		mesh.material.dispose();

  		return this;

  	}

  }

  const _cache$1 = new WeakMap();

  class CubeMapNode extends TempNode {

  	static get type() {

  		return 'CubeMapNode';

  	}

  	constructor( envNode ) {

  		super( 'vec3' );

  		this.envNode = envNode;

  		this._cubeTexture = null;
  		this._cubeTextureNode = cubeTexture();

  		const defaultTexture = new CubeTexture();
  		defaultTexture.isRenderTargetTexture = true;

  		this._defaultTexture = defaultTexture;

  		this.updateBeforeType = NodeUpdateType.RENDER;

  	}

  	updateBefore( frame ) {

  		const { renderer, material } = frame;

  		const envNode = this.envNode;

  		if ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {

  			const texture = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];

  			if ( texture && texture.isTexture ) {

  				const mapping = texture.mapping;

  				if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

  					// check for converted cubemap map

  					if ( _cache$1.has( texture ) ) {

  						const cubeMap = _cache$1.get( texture );

  						mapTextureMapping( cubeMap, texture.mapping );
  						this._cubeTexture = cubeMap;

  					} else {

  						// create cube map from equirectangular map

  						const image = texture.image;

  						if ( isEquirectangularMapReady$1( image ) ) {

  							const renderTarget = new CubeRenderTarget( image.height );
  							renderTarget.fromEquirectangularTexture( renderer, texture );

  							mapTextureMapping( renderTarget.texture, texture.mapping );
  							this._cubeTexture = renderTarget.texture;

  							_cache$1.set( texture, renderTarget.texture );

  							texture.addEventListener( 'dispose', onTextureDispose );

  						} else {

  							// default cube texture as fallback when equirectangular texture is not yet loaded

  							this._cubeTexture = this._defaultTexture;

  						}

  					}

  					//

  					this._cubeTextureNode.value = this._cubeTexture;

  				} else {

  					// envNode already refers to a cube map

  					this._cubeTextureNode = this.envNode;

  				}

  			}

  		}

  	}

  	setup( builder ) {

  		this.updateBefore( builder );

  		return this._cubeTextureNode;

  	}

  }

  function isEquirectangularMapReady$1( image ) {

  	if ( image === null || image === undefined ) return false;

  	return image.height > 0;

  }

  function onTextureDispose( event ) {

  	const texture = event.target;

  	texture.removeEventListener( 'dispose', onTextureDispose );

  	const renderTarget = _cache$1.get( texture );

  	if ( renderTarget !== undefined ) {

  		_cache$1.delete( texture );

  		renderTarget.dispose();

  	}

  }

  function mapTextureMapping( texture, mapping ) {

  	if ( mapping === EquirectangularReflectionMapping ) {

  		texture.mapping = CubeReflectionMapping;

  	} else if ( mapping === EquirectangularRefractionMapping ) {

  		texture.mapping = CubeRefractionMapping;

  	}

  }

  const cubeMapNode = /*@__PURE__*/ nodeProxy( CubeMapNode );

  class BasicEnvironmentNode extends LightingNode {

  	static get type() {

  		return 'BasicEnvironmentNode';

  	}

  	constructor( envNode = null ) {

  		super();

  		this.envNode = envNode;

  	}

  	setup( builder ) {

  		// environment property is used in the finish() method of BasicLightingModel

  		builder.context.environment = cubeMapNode( this.envNode );

  	}

  }

  class BasicLightMapNode extends LightingNode {

  	static get type() {

  		return 'BasicLightMapNode';

  	}

  	constructor( lightMapNode = null ) {

  		super();

  		this.lightMapNode = lightMapNode;

  	}

  	setup( builder ) {

  		// irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel

  		const RECIPROCAL_PI = float( 1 / Math.PI );

  		builder.context.irradianceLightMap = this.lightMapNode.mul( RECIPROCAL_PI );

  	}

  }

  class LightingModel {

  	start( /*input, stack, builder*/ ) { }

  	finish( /*input, stack, builder*/ ) { }

  	direct( /*input, stack, builder*/ ) { }

  	directRectArea( /*input, stack, builder*/ ) {}

  	indirect( /*input, stack, builder*/ ) { }

  	ambientOcclusion( /*input, stack, builder*/ ) { }

  }

  class BasicLightingModel extends LightingModel {

  	constructor() {

  		super();

  	}

  	indirect( context, stack, builder ) {

  		const ambientOcclusion = context.ambientOcclusion;
  		const reflectedLight = context.reflectedLight;
  		const irradianceLightMap = builder.context.irradianceLightMap;

  		reflectedLight.indirectDiffuse.assign( vec4( 0.0 ) );

  		// accumulation (baked indirect lighting only)

  		if ( irradianceLightMap ) {

  			reflectedLight.indirectDiffuse.addAssign( irradianceLightMap );

  		} else {

  			reflectedLight.indirectDiffuse.addAssign( vec4( 1.0, 1.0, 1.0, 0.0 ) );

  		}

  		// modulation

  		reflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );

  		reflectedLight.indirectDiffuse.mulAssign( diffuseColor.rgb );

  	}

  	finish( context, stack, builder ) {

  		const material = builder.material;
  		const outgoingLight = context.outgoingLight;
  		const envNode = builder.context.environment;

  		if ( envNode ) {

  			switch ( material.combine ) {

  				case MultiplyOperation:
  					outgoingLight.rgb.assign( mix$2( outgoingLight.rgb, outgoingLight.rgb.mul( envNode.rgb ), materialSpecularStrength.mul( materialReflectivity ) ) );
  					break;

  				case MixOperation:
  					outgoingLight.rgb.assign( mix$2( outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul( materialReflectivity ) ) );
  					break;

  				case AddOperation:
  					outgoingLight.rgb.addAssign( envNode.rgb.mul( materialSpecularStrength.mul( materialReflectivity ) ) );
  					break;

  				default:
  					console.warn( 'THREE.BasicLightingModel: Unsupported .combine value:', material.combine );
  					break;

  			}

  		}

  	}

  }

  const _defaultValues$9 = /*@__PURE__*/ new MeshBasicMaterial();

  class MeshBasicNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshBasicNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshBasicNodeMaterial = true;

  		this.lights = true;

  		this.setDefaultValues( _defaultValues$9 );

  		this.setValues( parameters );

  	}

  	setupNormal() {

  		return normalView; // see #28839

  	}

  	setupEnvironment( builder ) {

  		const envNode = super.setupEnvironment( builder );

  		return envNode ? new BasicEnvironmentNode( envNode ) : null;

  	}

  	setupLightMap( builder ) {

  		let node = null;

  		if ( builder.material.lightMap ) {

  			node = new BasicLightMapNode( materialLightMap );

  		}

  		return node;

  	}

  	setupOutgoingLight() {

  		return diffuseColor.rgb;

  	}

  	setupLightingModel() {

  		return new BasicLightingModel();

  	}

  }

  const F_Schlick = /*@__PURE__*/ Fn( ( { f0, f90, dotVH } ) => {

  	// Original approximation by Christophe Schlick '94
  	// float fresnel = pow( 1.0 - dotVH, 5.0 );

  	// Optimized variant (presented by Epic at SIGGRAPH '13)
  	// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
  	const fresnel = dotVH.mul( - 5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();

  	return f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );

  } ); // validated

  const BRDF_Lambert = /*@__PURE__*/ Fn( ( inputs ) => {

  	return inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light

  } ); // validated

  const G_BlinnPhong_Implicit = () => float( 0.25 );

  const D_BlinnPhong = /*@__PURE__*/ Fn( ( { dotNH } ) => {

  	return shininess.mul( float( 0.5 ) ).add( 1.0 ).mul( float( 1 / Math.PI ) ).mul( dotNH.pow( shininess ) );

  } );

  const BRDF_BlinnPhong = /*@__PURE__*/ Fn( ( { lightDirection } ) => {

  	const halfDir = lightDirection.add( positionViewDirection ).normalize();

  	const dotNH = transformedNormalView.dot( halfDir ).clamp();
  	const dotVH = positionViewDirection.dot( halfDir ).clamp();

  	const F = F_Schlick( { f0: specularColor, f90: 1.0, dotVH } );
  	const G = G_BlinnPhong_Implicit();
  	const D = D_BlinnPhong( { dotNH } );

  	return F.mul( G ).mul( D );

  } );

  class PhongLightingModel extends BasicLightingModel {

  	constructor( specular = true ) {

  		super();

  		this.specular = specular;

  	}

  	direct( { lightDirection, lightColor, reflectedLight } ) {

  		const dotNL = transformedNormalView.dot( lightDirection ).clamp();
  		const irradiance = dotNL.mul( lightColor );

  		reflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );

  		if ( this.specular === true ) {

  			reflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_BlinnPhong( { lightDirection } ) ).mul( materialSpecularStrength ) );

  		}

  	}

  	indirect( { ambientOcclusion, irradiance, reflectedLight } ) {

  		reflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );

  		reflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );

  	}

  }

  const _defaultValues$8 = /*@__PURE__*/ new MeshLambertMaterial();

  class MeshLambertNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshLambertNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshLambertNodeMaterial = true;

  		this.lights = true;

  		this.setDefaultValues( _defaultValues$8 );

  		this.setValues( parameters );

  	}

  	setupEnvironment( builder ) {

  		const envNode = super.setupEnvironment( builder );

  		return envNode ? new BasicEnvironmentNode( envNode ) : null;

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new PhongLightingModel( false ); // ( specular ) -> force lambert

  	}

  }

  const _defaultValues$7 = /*@__PURE__*/ new MeshPhongMaterial();

  class MeshPhongNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshPhongNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshPhongNodeMaterial = true;

  		this.lights = true;

  		this.shininessNode = null;
  		this.specularNode = null;

  		this.setDefaultValues( _defaultValues$7 );

  		this.setValues( parameters );

  	}

  	setupEnvironment( builder ) {

  		const envNode = super.setupEnvironment( builder );

  		return envNode ? new BasicEnvironmentNode( envNode ) : null;

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new PhongLightingModel();

  	}

  	setupVariants() {

  		// SHININESS

  		const shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )

  		shininess.assign( shininessNode );

  		// SPECULAR COLOR

  		const specularNode = this.specularNode || materialSpecular;

  		specularColor.assign( specularNode );

  	}

  	copy( source ) {

  		this.shininessNode = source.shininessNode;
  		this.specularNode = source.specularNode;

  		return super.copy( source );

  	}

  }

  const getGeometryRoughness = /*@__PURE__*/ Fn( ( builder ) => {

  	if ( builder.geometry.hasAttribute( 'normal' ) === false ) {

  		return float( 0 );

  	}

  	const dxy = normalView.dFdx().abs().max( normalView.dFdy().abs() );
  	const geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );

  	return geometryRoughness;

  } );

  const getRoughness = /*@__PURE__*/ Fn( ( inputs ) => {

  	const { roughness } = inputs;

  	const geometryRoughness = getGeometryRoughness();

  	let roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.
  	roughnessFactor = roughnessFactor.add( geometryRoughness );
  	roughnessFactor = roughnessFactor.min( 1.0 );

  	return roughnessFactor;

  } );

  // Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2
  // https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  const V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {

  	const a2 = alpha.pow2();

  	const gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );
  	const gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );

  	return div( 0.5, gv.add( gl ).max( EPSILON ) );

  } ).setLayout( {
  	name: 'V_GGX_SmithCorrelated',
  	type: 'float',
  	inputs: [
  		{ name: 'alpha', type: 'float' },
  		{ name: 'dotNL', type: 'float' },
  		{ name: 'dotNV', type: 'float' }
  	]
  } ); // validated

  // https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf

  const V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {

  	const gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );
  	const gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );
  	const v = div( 0.5, gv.add( gl ) );

  	return v.saturate();

  } ).setLayout( {
  	name: 'V_GGX_SmithCorrelated_Anisotropic',
  	type: 'float',
  	inputs: [
  		{ name: 'alphaT', type: 'float', qualifier: 'in' },
  		{ name: 'alphaB', type: 'float', qualifier: 'in' },
  		{ name: 'dotTV', type: 'float', qualifier: 'in' },
  		{ name: 'dotBV', type: 'float', qualifier: 'in' },
  		{ name: 'dotTL', type: 'float', qualifier: 'in' },
  		{ name: 'dotBL', type: 'float', qualifier: 'in' },
  		{ name: 'dotNV', type: 'float', qualifier: 'in' },
  		{ name: 'dotNL', type: 'float', qualifier: 'in' }
  	]
  } );

  // Microfacet Models for Refraction through Rough Surfaces - equation (33)
  // http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html
  // alpha is "roughness squared" in Disney’s reparameterization
  const D_GGX = /*@__PURE__*/ Fn( ( { alpha, dotNH } ) => {

  	const a2 = alpha.pow2();

  	const denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1

  	return a2.div( denom.pow2() ).mul( 1 / Math.PI );

  } ).setLayout( {
  	name: 'D_GGX',
  	type: 'float',
  	inputs: [
  		{ name: 'alpha', type: 'float' },
  		{ name: 'dotNH', type: 'float' }
  	]
  } ); // validated

  const RECIPROCAL_PI = /*@__PURE__*/ float( 1 / Math.PI );

  // https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf

  const D_GGX_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {

  	const a2 = alphaT.mul( alphaB );
  	const v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );
  	const v2 = v.dot( v );
  	const w2 = a2.div( v2 );

  	return RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );

  } ).setLayout( {
  	name: 'D_GGX_Anisotropic',
  	type: 'float',
  	inputs: [
  		{ name: 'alphaT', type: 'float', qualifier: 'in' },
  		{ name: 'alphaB', type: 'float', qualifier: 'in' },
  		{ name: 'dotNH', type: 'float', qualifier: 'in' },
  		{ name: 'dotTH', type: 'float', qualifier: 'in' },
  		{ name: 'dotBH', type: 'float', qualifier: 'in' }
  	]
  } );

  // GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility
  const BRDF_GGX = /*@__PURE__*/ Fn( ( inputs ) => {

  	const { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;

  	const normalView = inputs.normalView || transformedNormalView;

  	const alpha = roughness.pow2(); // UE4's roughness

  	const halfDir = lightDirection.add( positionViewDirection ).normalize();

  	const dotNL = normalView.dot( lightDirection ).clamp();
  	const dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV
  	const dotNH = normalView.dot( halfDir ).clamp();
  	const dotVH = positionViewDirection.dot( halfDir ).clamp();

  	let F = F_Schlick( { f0, f90, dotVH } );
  	let V, D;

  	if ( defined( USE_IRIDESCENCE ) ) {

  		F = iridescence.mix( F, f );

  	}

  	if ( defined( USE_ANISOTROPY ) ) {

  		const dotTL = anisotropyT.dot( lightDirection );
  		const dotTV = anisotropyT.dot( positionViewDirection );
  		const dotTH = anisotropyT.dot( halfDir );
  		const dotBL = anisotropyB.dot( lightDirection );
  		const dotBV = anisotropyB.dot( positionViewDirection );
  		const dotBH = anisotropyB.dot( halfDir );

  		V = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );
  		D = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );

  	} else {

  		V = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );
  		D = D_GGX( { alpha, dotNH } );

  	}

  	return F.mul( V ).mul( D );

  } ); // validated

  // Analytical approximation of the DFG LUT, one half of the
  // split-sum approximation used in indirect specular lighting.
  // via 'environmentBRDF' from "Physically Based Shading on Mobile"
  // https://www.unrealengine.com/blog/physically-based-shading-on-mobile
  const DFGApprox = /*@__PURE__*/ Fn( ( { roughness, dotNV } ) => {

  	const c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );

  	const c1 = vec4( 1, 0.0425, 1.04, - 0.04 );

  	const r = roughness.mul( c0 ).add( c1 );

  	const a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );

  	const fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );

  	return fab;

  } ).setLayout( {
  	name: 'DFGApprox',
  	type: 'vec2',
  	inputs: [
  		{ name: 'roughness', type: 'float' },
  		{ name: 'dotNV', type: 'vec3' }
  	]
  } );

  const EnvironmentBRDF = /*@__PURE__*/ Fn( ( inputs ) => {

  	const { dotNV, specularColor, specularF90, roughness } = inputs;

  	const fab = DFGApprox( { dotNV, roughness } );
  	return specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );

  } );

  const Schlick_to_F0 = /*@__PURE__*/ Fn( ( { f, f90, dotVH } ) => {

  	const x = dotVH.oneMinus().saturate();
  	const x2 = x.mul( x );
  	const x5 = x.mul( x2, x2 ).clamp( 0, .9999 );

  	return f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );

  } ).setLayout( {
  	name: 'Schlick_to_F0',
  	type: 'vec3',
  	inputs: [
  		{ name: 'f', type: 'vec3' },
  		{ name: 'f90', type: 'float' },
  		{ name: 'dotVH', type: 'float' }
  	]
  } );

  // https://github.com/google/filament/blob/master/shaders/src/brdf.fs
  const D_Charlie = /*@__PURE__*/ Fn( ( { roughness, dotNH } ) => {

  	const alpha = roughness.pow2();

  	// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"
  	const invAlpha = float( 1.0 ).div( alpha );
  	const cos2h = dotNH.pow2();
  	const sin2h = cos2h.oneMinus().max( 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16

  	return float( 2.0 ).add( invAlpha ).mul( sin2h.pow( invAlpha.mul( 0.5 ) ) ).div( 2.0 * Math.PI );

  } ).setLayout( {
  	name: 'D_Charlie',
  	type: 'float',
  	inputs: [
  		{ name: 'roughness', type: 'float' },
  		{ name: 'dotNH', type: 'float' }
  	]
  } );

  // https://github.com/google/filament/blob/master/shaders/src/brdf.fs
  const V_Neubelt = /*@__PURE__*/ Fn( ( { dotNV, dotNL } ) => {

  	// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"
  	return float( 1.0 ).div( float( 4.0 ).mul( dotNL.add( dotNV ).sub( dotNL.mul( dotNV ) ) ) );

  } ).setLayout( {
  	name: 'V_Neubelt',
  	type: 'float',
  	inputs: [
  		{ name: 'dotNV', type: 'float' },
  		{ name: 'dotNL', type: 'float' }
  	]
  } );

  const BRDF_Sheen = /*@__PURE__*/ Fn( ( { lightDirection } ) => {

  	const halfDir = lightDirection.add( positionViewDirection ).normalize();

  	const dotNL = transformedNormalView.dot( lightDirection ).clamp();
  	const dotNV = transformedNormalView.dot( positionViewDirection ).clamp();
  	const dotNH = transformedNormalView.dot( halfDir ).clamp();

  	const D = D_Charlie( { roughness: sheenRoughness, dotNH } );
  	const V = V_Neubelt( { dotNV, dotNL } );

  	return sheen.mul( D ).mul( V );

  } );

  // Rect Area Light

  // Real-Time Polygonal-Light Shading with Linearly Transformed Cosines
  // by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt
  // code: https://github.com/selfshadow/ltc_code/

  const LTC_Uv = /*@__PURE__*/ Fn( ( { N, V, roughness } ) => {

  	const LUT_SIZE = 64.0;
  	const LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
  	const LUT_BIAS = 0.5 / LUT_SIZE;

  	const dotNV = N.dot( V ).saturate();

  	// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )
  	const uv = vec2( roughness, dotNV.oneMinus().sqrt() );

  	uv.assign( uv.mul( LUT_SCALE ).add( LUT_BIAS ) );

  	return uv;

  } ).setLayout( {
  	name: 'LTC_Uv',
  	type: 'vec2',
  	inputs: [
  		{ name: 'N', type: 'vec3' },
  		{ name: 'V', type: 'vec3' },
  		{ name: 'roughness', type: 'float' }
  	]
  } );

  const LTC_ClippedSphereFormFactor = /*@__PURE__*/ Fn( ( { f } ) => {

  	// Real-Time Area Lighting: a Journey from Research to Production (p.102)
  	// An approximation of the form factor of a horizon-clipped rectangle.

  	const l = f.length();

  	return max$1( l.mul( l ).add( f.z ).div( l.add( 1.0 ) ), 0 );

  } ).setLayout( {
  	name: 'LTC_ClippedSphereFormFactor',
  	type: 'float',
  	inputs: [
  		{ name: 'f', type: 'vec3' }
  	]
  } );

  const LTC_EdgeVectorFormFactor = /*@__PURE__*/ Fn( ( { v1, v2 } ) => {

  	const x = v1.dot( v2 );
  	const y = x.abs().toVar();

  	// rational polynomial approximation to theta / sin( theta ) / 2PI
  	const a = y.mul( 0.0145206 ).add( 0.4965155 ).mul( y ).add( 0.8543985 ).toVar();
  	const b = y.add( 4.1616724 ).mul( y ).add( 3.4175940 ).toVar();
  	const v = a.div( b );

  	const theta_sintheta = x.greaterThan( 0.0 ).select( v, max$1( x.mul( x ).oneMinus(), 1e-7 ).inverseSqrt().mul( 0.5 ).sub( v ) );

  	return v1.cross( v2 ).mul( theta_sintheta );

  } ).setLayout( {
  	name: 'LTC_EdgeVectorFormFactor',
  	type: 'vec3',
  	inputs: [
  		{ name: 'v1', type: 'vec3' },
  		{ name: 'v2', type: 'vec3' }
  	]
  } );

  const LTC_Evaluate = /*@__PURE__*/ Fn( ( { N, V, P, mInv, p0, p1, p2, p3 } ) => {

  	// bail if point is on back side of plane of light
  	// assumes ccw winding order of light vertices
  	const v1 = p1.sub( p0 ).toVar();
  	const v2 = p3.sub( p0 ).toVar();

  	const lightNormal = v1.cross( v2 );
  	const result = vec3().toVar();

  	If( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {

  		// construct orthonormal basis around N
  		const T1 = V.sub( N.mul( V.dot( N ) ) ).normalize();
  		const T2 = N.cross( T1 ).negate(); // negated from paper; possibly due to a different handedness of world coordinate system

  		// compute transform
  		const mat = mInv.mul( mat3( T1, T2, N ).transpose() ).toVar();

  		// transform rect
  		// & project rect onto sphere
  		const coords0 = mat.mul( p0.sub( P ) ).normalize().toVar();
  		const coords1 = mat.mul( p1.sub( P ) ).normalize().toVar();
  		const coords2 = mat.mul( p2.sub( P ) ).normalize().toVar();
  		const coords3 = mat.mul( p3.sub( P ) ).normalize().toVar();

  		// calculate vector form factor
  		const vectorFormFactor = vec3( 0 ).toVar();
  		vectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );
  		vectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );
  		vectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );
  		vectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );

  		// adjust for horizon clipping
  		result.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor } ) ) );

  	} );

  	return result;

  } ).setLayout( {
  	name: 'LTC_Evaluate',
  	type: 'vec3',
  	inputs: [
  		{ name: 'N', type: 'vec3' },
  		{ name: 'V', type: 'vec3' },
  		{ name: 'P', type: 'vec3' },
  		{ name: 'mInv', type: 'mat3' },
  		{ name: 'p0', type: 'vec3' },
  		{ name: 'p1', type: 'vec3' },
  		{ name: 'p2', type: 'vec3' },
  		{ name: 'p3', type: 'vec3' }
  	]
  } );

  // Mipped Bicubic Texture Filtering by N8
  // https://www.shadertoy.com/view/Dl2SDW

  const bC = 1.0 / 6.0;

  const w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );

  const w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );

  const w2 = ( a ) => mul( bC, mul( a, mul( a, mul( - 3.0, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );

  const w3 = ( a ) => mul( bC, pow( a, 3 ) );

  const g0 = ( a ) => w0( a ).add( w1( a ) );

  const g1 = ( a ) => w2( a ).add( w3( a ) );

  // h0 and h1 are the two offset functions
  const h0 = ( a ) => add( - 1.0, w1( a ).div( w0( a ).add( w1( a ) ) ) );

  const h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );

  const bicubic = ( textureNode, texelSize, lod ) => {

  	const uv = textureNode.uvNode;
  	const uvScaled = mul( uv, texelSize.zw ).add( 0.5 );

  	const iuv = floor( uvScaled );
  	const fuv = fract( uvScaled );

  	const g0x = g0( fuv.x );
  	const g1x = g1( fuv.x );
  	const h0x = h0( fuv.x );
  	const h1x = h1( fuv.x );
  	const h0y = h0( fuv.y );
  	const h1y = h1( fuv.y );

  	const p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );
  	const p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );
  	const p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );
  	const p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );

  	const a = g0( fuv.y ).mul( add( g0x.mul( textureNode.uv( p0 ).level( lod ) ), g1x.mul( textureNode.uv( p1 ).level( lod ) ) ) );
  	const b = g1( fuv.y ).mul( add( g0x.mul( textureNode.uv( p2 ).level( lod ) ), g1x.mul( textureNode.uv( p3 ).level( lod ) ) ) );

  	return a.add( b );

  };

  const textureBicubic = /*@__PURE__*/ Fn( ( [ textureNode, lodNode = float( 3 ) ] ) => {

  	const fLodSize = vec2( textureNode.size( int( lodNode ) ) );
  	const cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );
  	const fLodSizeInv = div( 1.0, fLodSize );
  	const cLodSizeInv = div( 1.0, cLodSize );
  	const fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );
  	const cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );

  	return fract( lodNode ).mix( fSample, cSample );

  } );

  //
  // Transmission
  //

  const getVolumeTransmissionRay = /*@__PURE__*/ Fn( ( [ n, v, thickness, ior, modelMatrix ] ) => {

  	// Direction of refracted light.
  	const refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );

  	// Compute rotation-independant scaling of the model matrix.
  	const modelScale = vec3(
  		length( modelMatrix[ 0 ].xyz ),
  		length( modelMatrix[ 1 ].xyz ),
  		length( modelMatrix[ 2 ].xyz )
  	);

  	// The thickness is specified in local space.
  	return normalize( refractionVector ).mul( thickness.mul( modelScale ) );

  } ).setLayout( {
  	name: 'getVolumeTransmissionRay',
  	type: 'vec3',
  	inputs: [
  		{ name: 'n', type: 'vec3' },
  		{ name: 'v', type: 'vec3' },
  		{ name: 'thickness', type: 'float' },
  		{ name: 'ior', type: 'float' },
  		{ name: 'modelMatrix', type: 'mat4' }
  	]
  } );

  const applyIorToRoughness = /*@__PURE__*/ Fn( ( [ roughness, ior ] ) => {

  	// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and
  	// an IOR of 1.5 results in the default amount of microfacet refraction.
  	return roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );

  } ).setLayout( {
  	name: 'applyIorToRoughness',
  	type: 'float',
  	inputs: [
  		{ name: 'roughness', type: 'float' },
  		{ name: 'ior', type: 'float' }
  	]
  } );

  const viewportBackSideTexture = /*@__PURE__*/ viewportMipTexture();
  const viewportFrontSideTexture = /*@__PURE__*/ viewportMipTexture();

  const getTransmissionSample = /*@__PURE__*/ Fn( ( [ fragCoord, roughness, ior ], { material } ) => {

  	const vTexture = material.side == BackSide ? viewportBackSideTexture : viewportFrontSideTexture;

  	const transmissionSample = vTexture.uv( fragCoord );
  	//const transmissionSample = viewportMipTexture( fragCoord );

  	const lod = log2( screenSize.x ).mul( applyIorToRoughness( roughness, ior ) );

  	return textureBicubic( transmissionSample, lod );

  } );

  const volumeAttenuation = /*@__PURE__*/ Fn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {

  	If( attenuationDistance.notEqual( 0 ), () => {

  		// Compute light attenuation using Beer's law.
  		const attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );
  		const transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );

  		return transmittance;

  	} );

  	// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.
  	return vec3( 1.0 );

  } ).setLayout( {
  	name: 'volumeAttenuation',
  	type: 'vec3',
  	inputs: [
  		{ name: 'transmissionDistance', type: 'float' },
  		{ name: 'attenuationColor', type: 'vec3' },
  		{ name: 'attenuationDistance', type: 'float' }
  	]
  } );

  const getIBLVolumeRefraction = /*@__PURE__*/ Fn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {

  	let transmittedLight, transmittance;

  	if ( dispersion ) {

  		transmittedLight = vec4().toVar();
  		transmittance = vec3().toVar();

  		const halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );
  		const iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );

  		Loop( { start: 0, end: 3 }, ( { i } ) => {

  			const ior = iors.element( i );

  			const transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
  			const refractedRayExit = position.add( transmissionRay );

  			// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
  			const ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );
  			const refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();
  			refractionCoords.addAssign( 1.0 );
  			refractionCoords.divAssign( 2.0 );
  			refractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu

  			// Sample framebuffer to get pixel the refracted ray hits.
  			const transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );

  			transmittedLight.element( i ).assign( transmissionSample.element( i ) );
  			transmittedLight.a.addAssign( transmissionSample.a );

  			transmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );

  		} );

  		transmittedLight.a.divAssign( 3.0 );

  	} else {

  		const transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
  		const refractedRayExit = position.add( transmissionRay );

  		// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.
  		const ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );
  		const refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();
  		refractionCoords.addAssign( 1.0 );
  		refractionCoords.divAssign( 2.0 );
  		refractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu

  		// Sample framebuffer to get pixel the refracted ray hits.
  		transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
  		transmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );

  	}

  	const attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );
  	const dotNV = n.dot( v ).clamp();

  	// Get the specular component.
  	const F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness
  		dotNV,
  		specularColor,
  		specularF90,
  		roughness
  	} ) );

  	// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job
  	// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.
  	const transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );

  	return vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );

  } );

  //
  // Iridescence
  //

  // XYZ to linear-sRGB color space
  const XYZ_TO_REC709 = /*@__PURE__*/ mat3(
  	3.2404542, - 0.9692660, 0.0556434,
  	- 1.5371385, 1.8760108, - 0.2040259,
  	- 0.4985314, 0.0415560, 1.0572252
  );

  // Assume air interface for top
  // Note: We don't handle the case fresnel0 == 1
  const Fresnel0ToIor = ( fresnel0 ) => {

  	const sqrtF0 = fresnel0.sqrt();
  	return vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );

  };

  // ior is a value between 1.0 and 3.0. 1.0 is air interface
  const IorToFresnel0 = ( transmittedIor, incidentIor ) => {

  	return transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();

  };

  // Fresnel equations for dielectric/dielectric interfaces.
  // Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html
  // Evaluation XYZ sensitivity curves in Fourier space
  const evalSensitivity = ( OPD, shift ) => {

  	const phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );
  	const val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
  	const pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
  	const VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );

  	const x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );

  	let xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );
  	xyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );

  	const rgb = XYZ_TO_REC709.mul( xyz );

  	return rgb;

  };

  const evalIridescence = /*@__PURE__*/ Fn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {

  	// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0
  	const iridescenceIOR = mix$2( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
  	// Evaluate the cosTheta on the base layer (Snell law)
  	const sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( cosTheta1.pow2().oneMinus() );

  	// Handle TIR:
  	const cosTheta2Sq = sinTheta2Sq.oneMinus();

  	If( cosTheta2Sq.lessThan( 0 ), () => {

  		return vec3( 1.0 );

  	} );

  	const cosTheta2 = cosTheta2Sq.sqrt();

  	// First interface
  	const R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
  	const R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );
  	//const R21 = R12;
  	const T121 = R12.oneMinus();
  	const phi12 = iridescenceIOR.lessThan( outsideIOR ).select( Math.PI, 0.0 );
  	const phi21 = float( Math.PI ).sub( phi12 );

  	// Second interface
  	const baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0
  	const R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );
  	const R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );
  	const phi23 = vec3(
  		baseIOR.x.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),
  		baseIOR.y.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),
  		baseIOR.z.lessThan( iridescenceIOR ).select( Math.PI, 0.0 )
  	);

  	// Phase shift
  	const OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );
  	const phi = vec3( phi21 ).add( phi23 );

  	// Compound terms
  	const R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );
  	const r123 = R123.sqrt();
  	const Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );

  	// Reflectance term for m = 0 (DC term amplitude)
  	const C0 = R12.add( Rs );
  	const I = C0.toVar();

  	// Reflectance term for m > 0 (pairs of diracs)
  	const Cm = Rs.sub( T121 ).toVar();

  	Loop( { start: 1, end: 2, condition: '<=', name: 'm' }, ( { m } ) => {

  		Cm.mulAssign( r123 );
  		const Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );
  		I.addAssign( Cm.mul( Sm ) );

  	} );

  	// Since out of gamut colors might be produced, negative color values are clamped to 0.
  	return I.max( vec3( 0.0 ) );

  } ).setLayout( {
  	name: 'evalIridescence',
  	type: 'vec3',
  	inputs: [
  		{ name: 'outsideIOR', type: 'float' },
  		{ name: 'eta2', type: 'float' },
  		{ name: 'cosTheta1', type: 'float' },
  		{ name: 'thinFilmThickness', type: 'float' },
  		{ name: 'baseF0', type: 'vec3' }
  	]
  } );

  //
  //	Sheen
  //

  // This is a curve-fit approxmation to the "Charlie sheen" BRDF integrated over the hemisphere from
  // Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF". The analysis can be found
  // in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing
  const IBLSheenBRDF = /*@__PURE__*/ Fn( ( { normal, viewDir, roughness } ) => {

  	const dotNV = normal.dot( viewDir ).saturate();

  	const r2 = roughness.pow2();

  	const a = select(
  		roughness.lessThan( 0.25 ),
  		float( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),
  		float( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )
  	);

  	const b = select(
  		roughness.lessThan( 0.25 ),
  		float( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),
  		float( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )
  	);

  	const DG = select( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );

  	return DG.mul( 1.0 / Math.PI ).saturate();

  } );

  const clearcoatF0 = vec3( 0.04 );
  const clearcoatF90 = float( 1 );

  //

  class PhysicalLightingModel extends LightingModel {

  	constructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {

  		super();

  		this.clearcoat = clearcoat;
  		this.sheen = sheen;
  		this.iridescence = iridescence;
  		this.anisotropy = anisotropy;
  		this.transmission = transmission;
  		this.dispersion = dispersion;

  		this.clearcoatRadiance = null;
  		this.clearcoatSpecularDirect = null;
  		this.clearcoatSpecularIndirect = null;
  		this.sheenSpecularDirect = null;
  		this.sheenSpecularIndirect = null;
  		this.iridescenceFresnel = null;
  		this.iridescenceF0 = null;

  	}

  	start( context ) {

  		if ( this.clearcoat === true ) {

  			this.clearcoatRadiance = vec3().toVar( 'clearcoatRadiance' );
  			this.clearcoatSpecularDirect = vec3().toVar( 'clearcoatSpecularDirect' );
  			this.clearcoatSpecularIndirect = vec3().toVar( 'clearcoatSpecularIndirect' );

  		}

  		if ( this.sheen === true ) {

  			this.sheenSpecularDirect = vec3().toVar( 'sheenSpecularDirect' );
  			this.sheenSpecularIndirect = vec3().toVar( 'sheenSpecularIndirect' );

  		}

  		if ( this.iridescence === true ) {

  			const dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();

  			this.iridescenceFresnel = evalIridescence( {
  				outsideIOR: float( 1.0 ),
  				eta2: iridescenceIOR,
  				cosTheta1: dotNVi,
  				thinFilmThickness: iridescenceThickness,
  				baseF0: specularColor
  			} );

  			this.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );

  		}

  		if ( this.transmission === true ) {

  			const position = positionWorld;
  			const v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX
  			const n = transformedNormalWorld;

  			context.backdrop = getIBLVolumeRefraction(
  				n,
  				v,
  				roughness,
  				diffuseColor,
  				specularColor,
  				specularF90, // specularF90
  				position, // positionWorld
  				modelWorldMatrix, // modelMatrix
  				cameraViewMatrix, // viewMatrix
  				cameraProjectionMatrix, // projMatrix
  				ior,
  				thickness,
  				attenuationColor,
  				attenuationDistance,
  				this.dispersion ? dispersion : null
  			);

  			context.backdropAlpha = transmission;

  			diffuseColor.a.mulAssign( mix$2( 1, context.backdrop.a, transmission ) );

  		}

  	}

  	// Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
  	// Approximates multiscattering in order to preserve energy.
  	// http://www.jcgt.org/published/0008/01/03/

  	computeMultiscattering( singleScatter, multiScatter, specularF90 ) {

  		const dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV

  		const fab = DFGApprox( { roughness, dotNV } );

  		const Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;

  		const FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );

  		const Ess = fab.x.add( fab.y );
  		const Ems = Ess.oneMinus();

  		const Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21
  		const Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );

  		singleScatter.addAssign( FssEss );
  		multiScatter.addAssign( Fms.mul( Ems ) );

  	}

  	direct( { lightDirection, lightColor, reflectedLight } ) {

  		const dotNL = transformedNormalView.dot( lightDirection ).clamp();
  		const irradiance = dotNL.mul( lightColor );

  		if ( this.sheen === true ) {

  			this.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );

  		}

  		if ( this.clearcoat === true ) {

  			const dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();
  			const ccIrradiance = dotNLcc.mul( lightColor );

  			this.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );

  		}

  		reflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );

  		reflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );

  	}

  	directRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 } ) {

  		const p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction
  		const p1 = lightPosition.sub( halfWidth ).sub( halfHeight );
  		const p2 = lightPosition.sub( halfWidth ).add( halfHeight );
  		const p3 = lightPosition.add( halfWidth ).add( halfHeight );

  		const N = transformedNormalView;
  		const V = positionViewDirection;
  		const P = positionView.toVar();

  		const uv = LTC_Uv( { N, V, roughness } );

  		const t1 = ltc_1.uv( uv ).toVar();
  		const t2 = ltc_2.uv( uv ).toVar();

  		const mInv = mat3(
  			vec3( t1.x, 0, t1.y ),
  			vec3( 0, 1, 0 ),
  			vec3( t1.z, 0, t1.w )
  		).toVar();

  		// LTC Fresnel Approximation by Stephen Hill
  		// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf
  		const fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();

  		reflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );

  		reflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );

  	}

  	indirect( context, stack, builder ) {

  		this.indirectDiffuse( context, stack, builder );
  		this.indirectSpecular( context, stack, builder );
  		this.ambientOcclusion( context, stack, builder );

  	}

  	indirectDiffuse( { irradiance, reflectedLight } ) {

  		reflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );

  	}

  	indirectSpecular( { radiance, iblIrradiance, reflectedLight } ) {

  		if ( this.sheen === true ) {

  			this.sheenSpecularIndirect.addAssign( iblIrradiance.mul(
  				sheen,
  				IBLSheenBRDF( {
  					normal: transformedNormalView,
  					viewDir: positionViewDirection,
  					roughness: sheenRoughness
  				} )
  			) );

  		}

  		if ( this.clearcoat === true ) {

  			const dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();

  			const clearcoatEnv = EnvironmentBRDF( {
  				dotNV: dotNVcc,
  				specularColor: clearcoatF0,
  				specularF90: clearcoatF90,
  				roughness: clearcoatRoughness
  			} );

  			this.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );

  		}

  		// Both indirect specular and indirect diffuse light accumulate here

  		const singleScattering = vec3().toVar( 'singleScattering' );
  		const multiScattering = vec3().toVar( 'multiScattering' );
  		const cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );

  		this.computeMultiscattering( singleScattering, multiScattering, specularF90 );

  		const totalScattering = singleScattering.add( multiScattering );

  		const diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );

  		reflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );
  		reflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );

  		reflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );

  	}

  	ambientOcclusion( { ambientOcclusion, reflectedLight } ) {

  		const dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV

  		const aoNV = dotNV.add( ambientOcclusion );
  		const aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();

  		const aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();

  		if ( this.clearcoat === true ) {

  			this.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );

  		}

  		if ( this.sheen === true ) {

  			this.sheenSpecularIndirect.mulAssign( ambientOcclusion );

  		}

  		reflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );
  		reflectedLight.indirectSpecular.mulAssign( aoNode );

  	}

  	finish( context ) {

  		const { outgoingLight } = context;

  		if ( this.clearcoat === true ) {

  			const dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();

  			const Fcc = F_Schlick( {
  				dotVH: dotNVcc,
  				f0: clearcoatF0,
  				f90: clearcoatF90
  			} );

  			const clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );

  			outgoingLight.assign( clearcoatLight );

  		}

  		if ( this.sheen === true ) {

  			const sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();
  			const sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );

  			outgoingLight.assign( sheenLight );

  		}

  	}

  }

  // These defines must match with PMREMGenerator

  const cubeUV_r0 = /*@__PURE__*/ float( 1.0 );
  const cubeUV_m0 = /*@__PURE__*/ float( - 2.0 );
  const cubeUV_r1 = /*@__PURE__*/ float( 0.8 );
  const cubeUV_m1 = /*@__PURE__*/ float( - 1.0 );
  const cubeUV_r4 = /*@__PURE__*/ float( 0.4 );
  const cubeUV_m4 = /*@__PURE__*/ float( 2.0 );
  const cubeUV_r5 = /*@__PURE__*/ float( 0.305 );
  const cubeUV_m5 = /*@__PURE__*/ float( 3.0 );
  const cubeUV_r6 = /*@__PURE__*/ float( 0.21 );
  const cubeUV_m6 = /*@__PURE__*/ float( 4.0 );

  const cubeUV_minMipLevel = /*@__PURE__*/ float( 4.0 );
  const cubeUV_minTileSize = /*@__PURE__*/ float( 16.0 );

  // These shader functions convert between the UV coordinates of a single face of
  // a cubemap, the 0-5 integer index of a cube face, and the direction vector for
  // sampling a textureCube (not generally normalized ).

  const getFace = /*@__PURE__*/ Fn( ( [ direction ] ) => {

  	const absDirection = vec3( abs( direction ) ).toVar();
  	const face = float( - 1.0 ).toVar();

  	If( absDirection.x.greaterThan( absDirection.z ), () => {

  		If( absDirection.x.greaterThan( absDirection.y ), () => {

  			face.assign( select( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );

  		} ).Else( () => {

  			face.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );

  		} );

  	} ).Else( () => {

  		If( absDirection.z.greaterThan( absDirection.y ), () => {

  			face.assign( select( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );

  		} ).Else( () => {

  			face.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );

  		} );

  	} );

  	return face;

  } ).setLayout( {
  	name: 'getFace',
  	type: 'float',
  	inputs: [
  		{ name: 'direction', type: 'vec3' }
  	]
  } );

  // RH coordinate system; PMREM face-indexing convention
  const getUV = /*@__PURE__*/ Fn( ( [ direction, face ] ) => {

  	const uv = vec2().toVar();

  	If( face.equal( 0.0 ), () => {

  		uv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x

  	} ).ElseIf( face.equal( 1.0 ), () => {

  		uv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y

  	} ).ElseIf( face.equal( 2.0 ), () => {

  		uv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z

  	} ).ElseIf( face.equal( 3.0 ), () => {

  		uv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x

  	} ).ElseIf( face.equal( 4.0 ), () => {

  		uv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y

  	} ).Else( () => {

  		uv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z

  	} );

  	return mul( 0.5, uv.add( 1.0 ) );

  } ).setLayout( {
  	name: 'getUV',
  	type: 'vec2',
  	inputs: [
  		{ name: 'direction', type: 'vec3' },
  		{ name: 'face', type: 'float' }
  	]
  } );

  const roughnessToMip = /*@__PURE__*/ Fn( ( [ roughness ] ) => {

  	const mip = float( 0.0 ).toVar();

  	If( roughness.greaterThanEqual( cubeUV_r1 ), () => {

  		mip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );

  	} ).ElseIf( roughness.greaterThanEqual( cubeUV_r4 ), () => {

  		mip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );

  	} ).ElseIf( roughness.greaterThanEqual( cubeUV_r5 ), () => {

  		mip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );

  	} ).ElseIf( roughness.greaterThanEqual( cubeUV_r6 ), () => {

  		mip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );

  	} ).Else( () => {

  		mip.assign( float( - 2.0 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25

  	} );

  	return mip;

  } ).setLayout( {
  	name: 'roughnessToMip',
  	type: 'float',
  	inputs: [
  		{ name: 'roughness', type: 'float' }
  	]
  } );

  // RH coordinate system; PMREM face-indexing convention
  const getDirection = /*@__PURE__*/ Fn( ( [ uv_immutable, face ] ) => {

  	const uv = uv_immutable.toVar();
  	uv.assign( mul( 2.0, uv ).sub( 1.0 ) );
  	const direction = vec3( uv, 1.0 ).toVar();

  	If( face.equal( 0.0 ), () => {

  		direction.assign( direction.zyx ); // ( 1, v, u ) pos x

  	} ).ElseIf( face.equal( 1.0 ), () => {

  		direction.assign( direction.xzy );
  		direction.xz.mulAssign( - 1.0 ); // ( -u, 1, -v ) pos y

  	} ).ElseIf( face.equal( 2.0 ), () => {

  		direction.x.mulAssign( - 1.0 ); // ( -u, v, 1 ) pos z

  	} ).ElseIf( face.equal( 3.0 ), () => {

  		direction.assign( direction.zyx );
  		direction.xz.mulAssign( - 1.0 ); // ( -1, v, -u ) neg x

  	} ).ElseIf( face.equal( 4.0 ), () => {

  		direction.assign( direction.xzy );
  		direction.xy.mulAssign( - 1.0 ); // ( -u, -1, v ) neg y

  	} ).ElseIf( face.equal( 5.0 ), () => {

  		direction.z.mulAssign( - 1.0 ); // ( u, v, -1 ) neg zS

  	} );

  	return direction;

  } ).setLayout( {
  	name: 'getDirection',
  	type: 'vec3',
  	inputs: [
  		{ name: 'uv', type: 'vec2' },
  		{ name: 'face', type: 'float' }
  	]
  } );

  //

  const textureCubeUV = /*@__PURE__*/ Fn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {

  	const roughness = float( roughness_immutable );
  	const sampleDir = vec3( sampleDir_immutable );

  	const mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
  	const mipF = fract( mip );
  	const mipInt = floor( mip );
  	const color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();

  	If( mipF.notEqual( 0.0 ), () => {

  		const color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();

  		color0.assign( mix$2( color0, color1, mipF ) );

  	} );

  	return color0;

  } );

  const bilinearCubeUV = /*@__PURE__*/ Fn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {

  	const mipInt = float( mipInt_immutable ).toVar();
  	const direction = vec3( direction_immutable );
  	const face = float( getFace( direction ) ).toVar();
  	const filterInt = float( max$1( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();
  	mipInt.assign( max$1( mipInt, cubeUV_minMipLevel ) );
  	const faceSize = float( exp2( mipInt ) ).toVar();
  	const uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();

  	If( face.greaterThan( 2.0 ), () => {

  		uv.y.addAssign( faceSize );
  		face.subAssign( 3.0 );

  	} );

  	uv.x.addAssign( face.mul( faceSize ) );
  	uv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );
  	uv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );
  	uv.x.mulAssign( CUBEUV_TEXEL_WIDTH );
  	uv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );

  	return envMap.uv( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering

  } );

  const getSample = /*@__PURE__*/ Fn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {

  	const cosTheta = cos( theta );

  	// Rodrigues' axis-angle rotation
  	const sampleDirection = outputDirection.mul( cosTheta )
  		.add( axis.cross( outputDirection ).mul( sin( theta ) ) )
  		.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );

  	return bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );

  } );

  const blur = /*@__PURE__*/ Fn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {

  	const axis = vec3( select( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();

  	If( all( axis.equals( vec3( 0.0 ) ) ), () => {

  		axis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );

  	} );

  	axis.assign( normalize( axis ) );

  	const gl_FragColor = vec3().toVar();
  	gl_FragColor.addAssign( weights.element( int( 0 ) ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );

  	Loop( { start: int( 1 ), end: n }, ( { i } ) => {

  		If( i.greaterThanEqual( samples ), () => {

  			Break();

  		} );

  		const theta = float( dTheta.mul( float( i ) ) ).toVar();
  		gl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( - 1.0 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );
  		gl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );

  	} );

  	return vec4( gl_FragColor, 1 );

  } );

  let _generator = null;

  const _cache = new WeakMap();

  function _generateCubeUVSize( imageHeight ) {

  	const maxMip = Math.log2( imageHeight ) - 2;

  	const texelHeight = 1.0 / imageHeight;

  	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

  	return { texelWidth, texelHeight, maxMip };

  }

  function _getPMREMFromTexture( texture ) {

  	let cacheTexture = _cache.get( texture );

  	const pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : - 1;

  	if ( pmremVersion !== texture.pmremVersion ) {

  		const image = texture.image;

  		if ( texture.isCubeTexture ) {

  			if ( isCubeMapReady( image ) ) {

  				cacheTexture = _generator.fromCubemap( texture, cacheTexture );

  			} else {

  				return null;

  			}


  		} else {

  			if ( isEquirectangularMapReady( image ) ) {

  				cacheTexture = _generator.fromEquirectangular( texture, cacheTexture );

  			} else {

  				return null;

  			}

  		}

  		cacheTexture.pmremVersion = texture.pmremVersion;

  		_cache.set( texture, cacheTexture );

  	}

  	return cacheTexture.texture;

  }

  class PMREMNode extends TempNode {

  	static get type() {

  		return 'PMREMNode';

  	}

  	constructor( value, uvNode = null, levelNode = null ) {

  		super( 'vec3' );

  		this._value = value;
  		this._pmrem = null;

  		this.uvNode = uvNode;
  		this.levelNode = levelNode;

  		this._generator = null;

  		const defaultTexture = new Texture();
  		defaultTexture.isRenderTargetTexture = true;

  		this._texture = texture( defaultTexture );

  		this._width = uniform( 0 );
  		this._height = uniform( 0 );
  		this._maxMip = uniform( 0 );

  		this.updateBeforeType = NodeUpdateType.RENDER;

  	}

  	set value( value ) {

  		this._value = value;
  		this._pmrem = null;

  	}

  	get value() {

  		return this._value;

  	}

  	updateFromTexture( texture ) {

  		const cubeUVSize = _generateCubeUVSize( texture.image.height );

  		this._texture.value = texture;
  		this._width.value = cubeUVSize.texelWidth;
  		this._height.value = cubeUVSize.texelHeight;
  		this._maxMip.value = cubeUVSize.maxMip;

  	}

  	updateBefore() {

  		let pmrem = this._pmrem;

  		const pmremVersion = pmrem ? pmrem.pmremVersion : - 1;
  		const texture = this._value;

  		if ( pmremVersion !== texture.pmremVersion ) {

  			if ( texture.isPMREMTexture === true ) {

  				pmrem = texture;

  			} else {

  				pmrem = _getPMREMFromTexture( texture );

  			}

  			if ( pmrem !== null ) {

  				this._pmrem = pmrem;

  				this.updateFromTexture( pmrem );

  			}

  		}

  	}

  	setup( builder ) {

  		if ( _generator === null ) {

  			_generator = builder.createPMREMGenerator();

  		}

  		//

  		this.updateBefore( builder );

  		//

  		let uvNode = this.uvNode;

  		if ( uvNode === null && builder.context.getUV ) {

  			uvNode = builder.context.getUV( this );

  		}

  		//

  		const texture = this.value;

  		if ( builder.renderer.coordinateSystem === WebGLCoordinateSystem && texture.isPMREMTexture !== true && texture.isRenderTargetTexture === true ) {

  			uvNode = vec3( uvNode.x.negate(), uvNode.yz );

  		}

  		//

  		let levelNode = this.levelNode;

  		if ( levelNode === null && builder.context.getTextureLevel ) {

  			levelNode = builder.context.getTextureLevel( this );

  		}

  		//

  		return textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );

  	}

  }

  function isCubeMapReady( image ) {

  	if ( image === null || image === undefined ) return false;

  	let count = 0;
  	const length = 6;

  	for ( let i = 0; i < length; i ++ ) {

  		if ( image[ i ] !== undefined ) count ++;

  	}

  	return count === length;


  }

  function isEquirectangularMapReady( image ) {

  	if ( image === null || image === undefined ) return false;

  	return image.height > 0;

  }

  const pmremTexture = /*@__PURE__*/ nodeProxy( PMREMNode );

  const _envNodeCache = new WeakMap();

  class EnvironmentNode extends LightingNode {

  	static get type() {

  		return 'EnvironmentNode';

  	}

  	constructor( envNode = null ) {

  		super();

  		this.envNode = envNode;

  	}

  	setup( builder ) {

  		const { material } = builder;

  		let envNode = this.envNode;

  		if ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {

  			const value = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];

  			let cacheEnvNode = _envNodeCache.get( value );

  			if ( cacheEnvNode === undefined ) {

  				cacheEnvNode = pmremTexture( value );

  				_envNodeCache.set( value, cacheEnvNode );

  			}

  			envNode	= cacheEnvNode;

  		}

  		//

  		const envMap = material.envMap;
  		const intensity = envMap ? reference( 'envMapIntensity', 'float', builder.material ) : reference( 'environmentIntensity', 'float', builder.scene ); // @TODO: Add materialEnvIntensity in MaterialNode

  		const useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;
  		const radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;

  		const radiance = envNode.context( createRadianceContext( roughness, radianceNormalView ) ).mul( intensity );
  		const irradiance = envNode.context( createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );

  		const isolateRadiance = cache( radiance );
  		const isolateIrradiance = cache( irradiance );

  		//

  		builder.context.radiance.addAssign( isolateRadiance );

  		builder.context.iblIrradiance.addAssign( isolateIrradiance );

  		//

  		const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;

  		if ( clearcoatRadiance ) {

  			const clearcoatRadianceContext = envNode.context( createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );
  			const isolateClearcoatRadiance = cache( clearcoatRadianceContext );

  			clearcoatRadiance.addAssign( isolateClearcoatRadiance );

  		}

  	}

  }

  const createRadianceContext = ( roughnessNode, normalViewNode ) => {

  	let reflectVec = null;

  	return {
  		getUV: () => {

  			if ( reflectVec === null ) {

  				reflectVec = positionViewDirection.negate().reflect( normalViewNode );

  				// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.
  				reflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();

  				reflectVec = reflectVec.transformDirection( cameraViewMatrix );

  			}

  			return reflectVec;

  		},
  		getTextureLevel: () => {

  			return roughnessNode;

  		}
  	};

  };

  const createIrradianceContext = ( normalWorldNode ) => {

  	return {
  		getUV: () => {

  			return normalWorldNode;

  		},
  		getTextureLevel: () => {

  			return float( 1.0 );

  		}
  	};

  };

  const _defaultValues$6 = /*@__PURE__*/ new MeshStandardMaterial();

  class MeshStandardNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshStandardNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshStandardNodeMaterial = true;

  		this.lights = true;

  		this.emissiveNode = null;

  		this.metalnessNode = null;
  		this.roughnessNode = null;

  		this.setDefaultValues( _defaultValues$6 );

  		this.setValues( parameters );

  	}

  	setupEnvironment( builder ) {

  		let envNode = super.setupEnvironment( builder );

  		if ( envNode === null && builder.environmentNode ) {

  			envNode = builder.environmentNode;

  		}

  		return envNode ? new EnvironmentNode( envNode ) : null;

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new PhysicalLightingModel();

  	}

  	setupSpecular() {

  		const specularColorNode = mix$2( vec3( 0.04 ), diffuseColor.rgb, metalness );

  		specularColor.assign( specularColorNode );
  		specularF90.assign( 1.0 );

  	}

  	setupVariants() {

  		// METALNESS

  		const metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;

  		metalness.assign( metalnessNode );

  		// ROUGHNESS

  		let roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;
  		roughnessNode = getRoughness( { roughness: roughnessNode } );

  		roughness.assign( roughnessNode );

  		// SPECULAR COLOR

  		this.setupSpecular();

  		// DIFFUSE COLOR

  		diffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );

  	}

  	copy( source ) {

  		this.emissiveNode = source.emissiveNode;

  		this.metalnessNode = source.metalnessNode;
  		this.roughnessNode = source.roughnessNode;

  		return super.copy( source );

  	}

  }

  const _defaultValues$5 = /*@__PURE__*/ new MeshPhysicalMaterial();

  class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {

  	static get type() {

  		return 'MeshPhysicalNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshPhysicalNodeMaterial = true;

  		this.clearcoatNode = null;
  		this.clearcoatRoughnessNode = null;
  		this.clearcoatNormalNode = null;

  		this.sheenNode = null;
  		this.sheenRoughnessNode = null;

  		this.iridescenceNode = null;
  		this.iridescenceIORNode = null;
  		this.iridescenceThicknessNode = null;

  		this.specularIntensityNode = null;
  		this.specularColorNode = null;

  		this.iorNode = null;
  		this.transmissionNode = null;
  		this.thicknessNode = null;
  		this.attenuationDistanceNode = null;
  		this.attenuationColorNode = null;
  		this.dispersionNode = null;

  		this.anisotropyNode = null;

  		this.setDefaultValues( _defaultValues$5 );

  		this.setValues( parameters );

  	}

  	get useClearcoat() {

  		return this.clearcoat > 0 || this.clearcoatNode !== null;

  	}

  	get useIridescence() {

  		return this.iridescence > 0 || this.iridescenceNode !== null;

  	}

  	get useSheen() {

  		return this.sheen > 0 || this.sheenNode !== null;

  	}

  	get useAnisotropy() {

  		return this.anisotropy > 0 || this.anisotropyNode !== null;

  	}

  	get useTransmission() {

  		return this.transmission > 0 || this.transmissionNode !== null;

  	}

  	get useDispersion() {

  		return this.dispersion > 0 || this.dispersionNode !== null;

  	}

  	setupSpecular() {

  		const iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;

  		ior.assign( iorNode );
  		specularColor.assign( mix$2( min$1( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );
  		specularF90.assign( mix$2( materialSpecularIntensity, 1.0, metalness ) );

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );

  	}

  	setupVariants( builder ) {

  		super.setupVariants( builder );

  		// CLEARCOAT

  		if ( this.useClearcoat ) {

  			const clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;
  			const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;

  			clearcoat.assign( clearcoatNode );
  			clearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );

  		}

  		// SHEEN

  		if ( this.useSheen ) {

  			const sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;
  			const sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;

  			sheen.assign( sheenNode );
  			sheenRoughness.assign( sheenRoughnessNode );

  		}

  		// IRIDESCENCE

  		if ( this.useIridescence ) {

  			const iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;
  			const iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;
  			const iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;

  			iridescence.assign( iridescenceNode );
  			iridescenceIOR.assign( iridescenceIORNode );
  			iridescenceThickness.assign( iridescenceThicknessNode );

  		}

  		// ANISOTROPY

  		if ( this.useAnisotropy ) {

  			const anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();

  			anisotropy.assign( anisotropyV.length() );

  			If( anisotropy.equal( 0.0 ), () => {

  				anisotropyV.assign( vec2( 1.0, 0.0 ) );

  			} ).Else( () => {

  				anisotropyV.divAssign( vec2( anisotropy ) );
  				anisotropy.assign( anisotropy.saturate() );

  			} );

  			// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.
  			alphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );

  			anisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );
  			anisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );

  		}

  		// TRANSMISSION

  		if ( this.useTransmission ) {

  			const transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;
  			const thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;
  			const attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;
  			const attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;

  			transmission.assign( transmissionNode );
  			thickness.assign( thicknessNode );
  			attenuationDistance.assign( attenuationDistanceNode );
  			attenuationColor.assign( attenuationColorNode );

  			if ( this.useDispersion ) {

  				const dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;

  				dispersion.assign( dispersionNode );

  			}

  		}

  	}

  	setupClearcoatNormal() {

  		return this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;

  	}

  	setup( builder ) {

  		builder.context.setupClearcoatNormal = () => this.setupClearcoatNormal( builder );

  		super.setup( builder );

  	}

  	copy( source ) {

  		this.clearcoatNode = source.clearcoatNode;
  		this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;
  		this.clearcoatNormalNode = source.clearcoatNormalNode;

  		this.sheenNode = source.sheenNode;
  		this.sheenRoughnessNode = source.sheenRoughnessNode;

  		this.iridescenceNode = source.iridescenceNode;
  		this.iridescenceIORNode = source.iridescenceIORNode;
  		this.iridescenceThicknessNode = source.iridescenceThicknessNode;

  		this.specularIntensityNode = source.specularIntensityNode;
  		this.specularColorNode = source.specularColorNode;

  		this.transmissionNode = source.transmissionNode;
  		this.thicknessNode = source.thicknessNode;
  		this.attenuationDistanceNode = source.attenuationDistanceNode;
  		this.attenuationColorNode = source.attenuationColorNode;
  		this.dispersionNode = source.dispersionNode;

  		this.anisotropyNode = source.anisotropyNode;

  		return super.copy( source );

  	}

  }

  const getGradientIrradiance = /*@__PURE__*/ Fn( ( { normal, lightDirection, builder } ) => {

  	// dotNL will be from -1.0 to 1.0
  	const dotNL = normal.dot( lightDirection );
  	const coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );

  	if ( builder.material.gradientMap ) {

  		const gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );

  		return vec3( gradientMap.r );

  	} else {

  		const fw = coord.fwidth().mul( 0.5 );

  		return mix$2( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );

  	}

  } );

  class ToonLightingModel extends LightingModel {

  	direct( { lightDirection, lightColor, reflectedLight }, stack, builder ) {

  		const irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );

  		reflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );

  	}

  	indirect( { ambientOcclusion, irradiance, reflectedLight } ) {

  		reflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );

  		reflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );

  	}

  }

  const _defaultValues$4 = /*@__PURE__*/ new MeshToonMaterial();

  class MeshToonNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshToonNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isMeshToonNodeMaterial = true;

  		this.lights = true;

  		this.setDefaultValues( _defaultValues$4 );

  		this.setValues( parameters );

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new ToonLightingModel();

  	}

  }

  class MatcapUVNode extends TempNode {

  	static get type() {

  		return 'MatcapUVNode';

  	}

  	constructor() {

  		super( 'vec2' );

  	}

  	setup() {

  		const x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();
  		const y = positionViewDirection.cross( x );

  		return vec2( x.dot( transformedNormalView ), y.dot( transformedNormalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks

  	}

  }

  const matcapUV = /*@__PURE__*/ nodeImmutable( MatcapUVNode );

  const _defaultValues$3 = /*@__PURE__*/ new MeshMatcapMaterial();

  class MeshMatcapNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'MeshMatcapNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.lights = false;

  		this.isMeshMatcapNodeMaterial = true;

  		this.setDefaultValues( _defaultValues$3 );

  		this.setValues( parameters );

  	}

  	setupVariants( builder ) {

  		const uv = matcapUV;

  		let matcapColor;

  		if ( builder.material.matcap ) {

  			matcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );

  		} else {

  			matcapColor = vec3( mix$2( 0.2, 0.8, uv.y ) ); // default if matcap is missing

  		}

  		diffuseColor.rgb.mulAssign( matcapColor.rgb );

  	}

  }

  const _defaultValues$2 = /*@__PURE__*/ new PointsMaterial();

  class PointsNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'PointsNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isPointsNodeMaterial = true;

  		this.lights = false;
  		this.transparent = true;

  		this.sizeNode = null;

  		this.setDefaultValues( _defaultValues$2 );

  		this.setValues( parameters );

  	}

  	copy( source ) {

  		this.sizeNode = source.sizeNode;

  		return super.copy( source );

  	}

  }

  class RotateNode extends TempNode {

  	static get type() {

  		return 'RotateNode';

  	}

  	constructor( positionNode, rotationNode ) {

  		super();

  		this.positionNode = positionNode;
  		this.rotationNode = rotationNode;

  	}

  	getNodeType( builder ) {

  		return this.positionNode.getNodeType( builder );

  	}

  	setup( builder ) {

  		const { rotationNode, positionNode } = this;

  		const nodeType = this.getNodeType( builder );

  		if ( nodeType === 'vec2' ) {

  			const cosAngle = rotationNode.cos();
  			const sinAngle = rotationNode.sin();

  			const rotationMatrix = mat2(
  				cosAngle, sinAngle,
  				sinAngle.negate(), cosAngle
  			);

  			return rotationMatrix.mul( positionNode );

  		} else {

  			const rotation = rotationNode;
  			const rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );
  			const rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );
  			const rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );

  			return rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;

  		}

  	}

  }

  const rotate = /*@__PURE__*/ nodeProxy( RotateNode );

  const _defaultValues$1 = /*@__PURE__*/ new SpriteMaterial();

  class SpriteNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'SpriteNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isSpriteNodeMaterial = true;

  		this.lights = false;
  		this._useSizeAttenuation = true;

  		this.positionNode = null;
  		this.rotationNode = null;
  		this.scaleNode = null;

  		this.setDefaultValues( _defaultValues$1 );

  		this.setValues( parameters );

  	}

  	setupPosition( { object, camera, context } ) {

  		const sizeAttenuation = this.sizeAttenuation;

  		// < VERTEX STAGE >

  		const { positionNode, rotationNode, scaleNode } = this;

  		const vertex = positionLocal;

  		let mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );

  		let scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );

  		if ( scaleNode !== null ) {

  			scale = scale.mul( scaleNode );

  		}


  		if ( ! sizeAttenuation ) {

  			if ( camera.isPerspectiveCamera ) {

  				scale = scale.mul( mvPosition.z.negate() );

  			} else {

  				const orthoScale = float( 2.0 ).div( cameraProjectionMatrix.element( 1 ).element( 1 ) );
  				scale = scale.mul( orthoScale.mul( 2 ) );

  			}

  		}

  		let alignedPosition = vertex.xy;

  		if ( object.center && object.center.isVector2 === true ) {

  			const center = reference$1( 'center', 'vec2' );

  			alignedPosition = alignedPosition.sub( center.sub( 0.5 ) );

  		}

  		alignedPosition = alignedPosition.mul( scale );

  		const rotation = float( rotationNode || materialRotation );

  		const rotatedPosition = rotate( alignedPosition, rotation );

  		mvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );

  		const modelViewProjection = cameraProjectionMatrix.mul( mvPosition );

  		context.vertex = vertex;

  		return modelViewProjection;

  	}

  	copy( source ) {

  		this.positionNode = source.positionNode;
  		this.rotationNode = source.rotationNode;
  		this.scaleNode = source.scaleNode;

  		return super.copy( source );

  	}

  	get sizeAttenuation() {

  		return this._useSizeAttenuation;

  	}

  	set sizeAttenuation( value ) {

  		if ( this._useSizeAttenuation !== value ) {

  			this._useSizeAttenuation = value;
  			this.needsUpdate = true;

  		}

  	}

  }

  class ShadowMaskModel extends LightingModel {

  	constructor() {

  		super();

  		this.shadowNode = float( 1 ).toVar( 'shadowMask' );

  	}

  	direct( { shadowMask } ) {

  		this.shadowNode.mulAssign( shadowMask );

  	}

  	finish( context ) {

  		diffuseColor.a.mulAssign( this.shadowNode.oneMinus() );

  		context.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment

  	}

  }

  const _defaultValues = /*@__PURE__*/ new ShadowMaterial();

  class ShadowNodeMaterial extends NodeMaterial {

  	static get type() {

  		return 'ShadowNodeMaterial';

  	}

  	constructor( parameters ) {

  		super();

  		this.isShadowNodeMaterial = true;

  		this.lights = true;

  		this.setDefaultValues( _defaultValues );

  		this.setValues( parameters );

  	}

  	setupLightingModel( /*builder*/ ) {

  		return new ShadowMaskModel();

  	}

  }

  Fn( ( { texture, uv } ) => {

  	const epsilon = 0.0001;

  	const ret = vec3().toVar();

  	If( uv.x.lessThan( epsilon ), () => {

  		ret.assign( vec3( 1, 0, 0 ) );

  	} ).ElseIf( uv.y.lessThan( epsilon ), () => {

  		ret.assign( vec3( 0, 1, 0 ) );

  	} ).ElseIf( uv.z.lessThan( epsilon ), () => {

  		ret.assign( vec3( 0, 0, 1 ) );

  	} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {

  		ret.assign( vec3( - 1, 0, 0 ) );

  	} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {

  		ret.assign( vec3( 0, - 1, 0 ) );

  	} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {

  		ret.assign( vec3( 0, 0, - 1 ) );

  	} ).Else( () => {

  		const step = 0.01;

  		const x = texture.uv( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );
  		const y = texture.uv( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );
  		const z = texture.uv( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, 0.0, step ) ) ).r );

  		ret.assign( vec3( x, y, z ) );

  	} );

  	return ret.normalize();

  } );

  class Animation {

  	constructor( nodes, info ) {

  		this.nodes = nodes;
  		this.info = info;

  		this.animationLoop = null;
  		this.requestId = null;

  		this._init();

  	}

  	_init() {

  		const update = ( time, frame ) => {

  			this.requestId = self.requestAnimationFrame( update );

  			if ( this.info.autoReset === true ) this.info.reset();

  			this.nodes.nodeFrame.update();

  			this.info.frame = this.nodes.nodeFrame.frameId;

  			if ( this.animationLoop !== null ) this.animationLoop( time, frame );

  		};

  		update();

  	}

  	dispose() {

  		self.cancelAnimationFrame( this.requestId );
  		this.requestId = null;

  	}

  	setAnimationLoop( callback ) {

  		this.animationLoop = callback;

  	}

  }

  class ChainMap {

  	constructor() {

  		this.weakMap = new WeakMap();

  	}

  	get( keys ) {

  		let map = this.weakMap;

  		for ( let i = 0; i < keys.length; i ++ ) {

  			map = map.get( keys[ i ] );

  			if ( map === undefined ) return undefined;

  		}

  		return map.get( keys[ keys.length - 1 ] );

  	}

  	set( keys, value ) {

  		let map = this.weakMap;

  		for ( let i = 0; i < keys.length; i ++ ) {

  			const key = keys[ i ];

  			if ( map.has( key ) === false ) map.set( key, new WeakMap() );

  			map = map.get( key );

  		}

  		return map.set( keys[ keys.length - 1 ], value );

  	}

  	delete( keys ) {

  		let map = this.weakMap;

  		for ( let i = 0; i < keys.length; i ++ ) {

  			map = map.get( keys[ i ] );

  			if ( map === undefined ) return false;

  		}

  		return map.delete( keys[ keys.length - 1 ] );

  	}

  }

  const _plane$1 = /*@__PURE__*/ new Plane();

  class ClippingContext {

  	constructor() {

  		this.version = 0;

  		this.globalClippingCount = 0;

  		this.localClippingCount = 0;
  		this.localClippingEnabled = false;
  		this.localClipIntersection = false;

  		this.planes = [];

  		this.parentVersion = 0;
  		this.viewNormalMatrix = new Matrix3();
  		this.cacheKey = 0;

  	}

  	projectPlanes( source, offset ) {

  		const l = source.length;
  		const planes = this.planes;

  		for ( let i = 0; i < l; i ++ ) {

  			_plane$1.copy( source[ i ] ).applyMatrix4( this.viewMatrix, this.viewNormalMatrix );

  			const v = planes[ offset + i ];
  			const normal = _plane$1.normal;

  			v.x = - normal.x;
  			v.y = - normal.y;
  			v.z = - normal.z;
  			v.w = _plane$1.constant;

  		}

  	}

  	updateGlobal( renderer, camera ) {

  		const rendererClippingPlanes = renderer.clippingPlanes;
  		this.viewMatrix = camera.matrixWorldInverse;

  		this.viewNormalMatrix.getNormalMatrix( this.viewMatrix );

  		let update = false;

  		if ( Array.isArray( rendererClippingPlanes ) && rendererClippingPlanes.length !== 0 ) {

  			const l = rendererClippingPlanes.length;

  			if ( l !== this.globalClippingCount ) {

  				const planes = [];

  				for ( let i = 0; i < l; i ++ ) {

  					planes.push( new Vector4() );

  				}

  				this.globalClippingCount = l;
  				this.planes = planes;

  				update = true;

  			}

  			this.projectPlanes( rendererClippingPlanes, 0 );

  		} else if ( this.globalClippingCount !== 0 ) {

  			this.globalClippingCount = 0;
  			this.planes = [];
  			update = true;

  		}

  		if ( renderer.localClippingEnabled !== this.localClippingEnabled ) {

  			this.localClippingEnabled = renderer.localClippingEnabled;
  			update = true;

  		}

  		if ( update ) {

  			this.version ++;
  			this.cacheKey = hash$1( this.globalClippingCount, this.localClippingEnabled === true ? 1 : 0 );

  		}

  	}

  	update( parent, material ) {

  		let update = false;

  		if ( this !== parent && parent.version !== this.parentVersion ) {

  			this.globalClippingCount = material.isShadowNodeMaterial ? 0 : parent.globalClippingCount;
  			this.localClippingEnabled = parent.localClippingEnabled;
  			this.planes = Array.from( parent.planes );
  			this.parentVersion = parent.version;
  			this.viewMatrix = parent.viewMatrix;
  			this.viewNormalMatrix = parent.viewNormalMatrix;

  			update = true;

  		}

  		if ( this.localClippingEnabled ) {

  			const localClippingPlanes = material.clippingPlanes;

  			if ( ( Array.isArray( localClippingPlanes ) && localClippingPlanes.length !== 0 ) ) {

  				const l = localClippingPlanes.length;
  				const planes = this.planes;
  				const offset = this.globalClippingCount;

  				if ( update || l !== this.localClippingCount ) {

  					planes.length = offset + l;

  					for ( let i = 0; i < l; i ++ ) {

  						planes[ offset + i ] = new Vector4();

  					}

  					this.localClippingCount = l;
  					update = true;

  				}

  				this.projectPlanes( localClippingPlanes, offset );


  			} else if ( this.localClippingCount !== 0 ) {

  				this.localClippingCount = 0;
  				update = true;

  			}

  			if ( this.localClipIntersection !== material.clipIntersection ) {

  				this.localClipIntersection = material.clipIntersection;
  				update = true;

  			}

  		}

  		if ( update ) {

  			this.version += parent.version;
  			this.cacheKey = hash$1( parent.cacheKey, this.localClippingCount, this.localClipIntersection === true ? 1 : 0 );

  		}

  	}

  }

  let _id$7 = 0;

  function getKeys( obj ) {

  	const keys = Object.keys( obj );

  	let proto = Object.getPrototypeOf( obj );

  	while ( proto ) {

  		const descriptors = Object.getOwnPropertyDescriptors( proto );

  		for ( const key in descriptors ) {

  			if ( descriptors[ key ] !== undefined ) {

  				const descriptor = descriptors[ key ];

  				if ( descriptor && typeof descriptor.get === 'function' ) {

  					keys.push( key );

  				}

  			}

  		}

  		proto = Object.getPrototypeOf( proto );

  	}

  	return keys;

  }

  class RenderObject {

  	constructor( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext ) {

  		this._nodes = nodes;
  		this._geometries = geometries;

  		this.id = _id$7 ++;

  		this.renderer = renderer;
  		this.object = object;
  		this.material = material;
  		this.scene = scene;
  		this.camera = camera;
  		this.lightsNode = lightsNode;
  		this.context = renderContext;

  		this.geometry = object.geometry;
  		this.version = material.version;

  		this.drawRange = null;

  		this.attributes = null;
  		this.pipeline = null;
  		this.vertexBuffers = null;
  		this.drawParams = null;

  		this.bundle = null;

  		this.updateClipping( renderContext.clippingContext );

  		this.clippingContextVersion = this.clippingContext.version;

  		this.initialNodesCacheKey = this.getDynamicCacheKey();
  		this.initialCacheKey = this.getCacheKey();

  		this._nodeBuilderState = null;
  		this._bindings = null;
  		this._monitor = null;

  		this.onDispose = null;

  		this.isRenderObject = true;

  		this.onMaterialDispose = () => {

  			this.dispose();

  		};

  		this.material.addEventListener( 'dispose', this.onMaterialDispose );

  	}

  	updateClipping( parent ) {

  		const material = this.material;

  		let clippingContext = this.clippingContext;

  		if ( Array.isArray( material.clippingPlanes ) ) {

  			if ( clippingContext === parent || ! clippingContext ) {

  				clippingContext = new ClippingContext();
  				this.clippingContext = clippingContext;

  			}

  			clippingContext.update( parent, material );

  		} else if ( this.clippingContext !== parent ) {

  			this.clippingContext = parent;

  		}

  	}

  	get clippingNeedsUpdate() {

  		if ( this.clippingContext.version === this.clippingContextVersion ) return false;

  		this.clippingContextVersion = this.clippingContext.version;

  		return true;

  	}

  	getNodeBuilderState() {

  		return this._nodeBuilderState || ( this._nodeBuilderState = this._nodes.getForRender( this ) );

  	}

  	getMonitor() {

  		return this._monitor || ( this._monitor = this.getNodeBuilderState().monitor );

  	}

  	getBindings() {

  		return this._bindings || ( this._bindings = this.getNodeBuilderState().createBindings() );

  	}

  	getIndex() {

  		return this._geometries.getIndex( this );

  	}

  	getIndirect() {

  		return this._geometries.getIndirect( this );

  	}

  	getChainArray() {

  		return [ this.object, this.material, this.context, this.lightsNode ];

  	}

  	getAttributes() {

  		if ( this.attributes !== null ) return this.attributes;

  		const nodeAttributes = this.getNodeBuilderState().nodeAttributes;
  		const geometry = this.geometry;

  		const attributes = [];
  		const vertexBuffers = new Set();

  		for ( const nodeAttribute of nodeAttributes ) {

  			const attribute = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute( nodeAttribute.name );

  			if ( attribute === undefined ) continue;

  			attributes.push( attribute );

  			const bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;
  			vertexBuffers.add( bufferAttribute );

  		}

  		this.attributes = attributes;
  		this.vertexBuffers = Array.from( vertexBuffers.values() );

  		return attributes;

  	}

  	getVertexBuffers() {

  		if ( this.vertexBuffers === null ) this.getAttributes();

  		return this.vertexBuffers;

  	}

  	getDrawParameters() {

  		const { object, material, geometry, group, drawRange } = this;

  		const drawParams = this.drawParams || ( this.drawParams = {
  			vertexCount: 0,
  			firstVertex: 0,
  			instanceCount: 0,
  			firstInstance: 0
  		} );

  		const index = this.getIndex();
  		const hasIndex = ( index !== null );
  		const instanceCount = geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.count > 1 ? object.count : 1 );

  		if ( instanceCount === 0 ) return null;

  		drawParams.instanceCount = instanceCount;

  		if ( object.isBatchedMesh === true ) return drawParams;

  		let rangeFactor = 1;

  		if ( material.wireframe === true && ! object.isPoints && ! object.isLineSegments && ! object.isLine && ! object.isLineLoop ) {

  			rangeFactor = 2;

  		}

  		let firstVertex = drawRange.start * rangeFactor;
  		let lastVertex = ( drawRange.start + drawRange.count ) * rangeFactor;

  		if ( group !== null ) {

  			firstVertex = Math.max( firstVertex, group.start * rangeFactor );
  			lastVertex = Math.min( lastVertex, ( group.start + group.count ) * rangeFactor );

  		}

  		const position = geometry.attributes.position;
  		let itemCount = Infinity;

  		if ( hasIndex ) {

  			itemCount = index.count;

  		} else if ( position !== undefined && position !== null ) {

  			itemCount = position.count;

  		}

  		firstVertex = Math.max( firstVertex, 0 );
  		lastVertex = Math.min( lastVertex, itemCount );

  		const count = lastVertex - firstVertex;

  		if ( count < 0 || count === Infinity ) return null;

  		drawParams.vertexCount = count;
  		drawParams.firstVertex = firstVertex;

  		return drawParams;

  	}

  	getGeometryCacheKey() {

  		const { geometry } = this;

  		let cacheKey = '';

  		for ( const name of Object.keys( geometry.attributes ).sort() ) {

  			const attribute = geometry.attributes[ name ];

  			cacheKey += name + ',';

  			if ( attribute.data ) cacheKey += attribute.data.stride + ',';
  			if ( attribute.offset ) cacheKey += attribute.offset + ',';
  			if ( attribute.itemSize ) cacheKey += attribute.itemSize + ',';
  			if ( attribute.normalized ) cacheKey += 'n,';

  		}

  		if ( geometry.index ) {

  			cacheKey += 'index,';

  		}

  		return cacheKey;

  	}

  	getMaterialCacheKey() {

  		const { object, material } = this;

  		let cacheKey = material.customProgramCacheKey();

  		for ( const property of getKeys( material ) ) {

  			if ( /^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test( property ) ) continue;

  			const value = material[ property ];

  			let valueKey;

  			if ( value !== null ) {

  				// some material values require a formatting

  				const type = typeof value;

  				if ( type === 'number' ) {

  					valueKey = value !== 0 ? '1' : '0'; // Convert to on/off, important for clearcoat, transmission, etc

  				} else if ( type === 'object' ) {

  					valueKey = '{';

  					if ( value.isTexture ) {

  						valueKey += value.mapping;

  					}

  					valueKey += '}';

  				} else {

  					valueKey = String( value );

  				}

  			} else {

  				valueKey = String( value );

  			}

  			cacheKey += /*property + ':' +*/ valueKey + ',';

  		}

  		cacheKey += this.clippingContext.cacheKey + ',';

  		if ( object.geometry ) {

  			cacheKey += this.getGeometryCacheKey();

  		}

  		if ( object.skeleton ) {

  			cacheKey += object.skeleton.bones.length + ',';

  		}

  		if ( object.morphTargetInfluences ) {

  			cacheKey += object.morphTargetInfluences.length + ',';

  		}

  		if ( object.isBatchedMesh ) {

  			cacheKey += object._matricesTexture.uuid + ',';

  			if ( object._colorsTexture !== null ) {

  				cacheKey += object._colorsTexture.uuid + ',';

  			}

  		}

  		if ( object.count > 1 ) {

  			// TODO: https://github.com/mrdoob/three.js/pull/29066#issuecomment-2269400850

  			cacheKey += object.uuid + ',';

  		}

  		return hashString( cacheKey );

  	}

  	get needsUpdate() {

  		return /*this.object.static !== true &&*/ ( this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate );

  	}

  	getDynamicCacheKey() {

  		// Environment Nodes Cache Key

  		let cacheKey = this._nodes.getCacheKey( this.scene, this.lightsNode );

  		if ( this.object.receiveShadow ) {

  			cacheKey += 1;

  		}

  		return cacheKey;

  	}

  	getCacheKey() {

  		return this.getMaterialCacheKey() + this.getDynamicCacheKey();

  	}

  	dispose() {

  		this.material.removeEventListener( 'dispose', this.onMaterialDispose );

  		this.onDispose();

  	}

  }

  const chainArray = [];

  class RenderObjects {

  	constructor( renderer, nodes, geometries, pipelines, bindings, info ) {

  		this.renderer = renderer;
  		this.nodes = nodes;
  		this.geometries = geometries;
  		this.pipelines = pipelines;
  		this.bindings = bindings;
  		this.info = info;

  		this.chainMaps = {};

  	}

  	get( object, material, scene, camera, lightsNode, renderContext, passId ) {

  		const chainMap = this.getChainMap( passId );

  		// reuse chainArray
  		chainArray[ 0 ] = object;
  		chainArray[ 1 ] = material;
  		chainArray[ 2 ] = renderContext;
  		chainArray[ 3 ] = lightsNode;

  		let renderObject = chainMap.get( chainArray );

  		if ( renderObject === undefined ) {

  			renderObject = this.createRenderObject( this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, passId );

  			chainMap.set( chainArray, renderObject );

  		} else {

  			renderObject.updateClipping( renderContext.clippingContext );

  			if ( renderObject.version !== material.version || renderObject.needsUpdate ) {

  				if ( renderObject.initialCacheKey !== renderObject.getCacheKey() ) {

  					renderObject.dispose();

  					renderObject = this.get( object, material, scene, camera, lightsNode, renderContext, passId );

  				} else {

  					renderObject.version = material.version;

  				}

  			}

  		}

  		return renderObject;

  	}

  	getChainMap( passId = 'default' ) {

  		return this.chainMaps[ passId ] || ( this.chainMaps[ passId ] = new ChainMap() );

  	}

  	dispose() {

  		this.chainMaps = {};

  	}

  	createRenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, passId ) {

  		const chainMap = this.getChainMap( passId );

  		const renderObject = new RenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext );

  		renderObject.onDispose = () => {

  			this.pipelines.delete( renderObject );
  			this.bindings.delete( renderObject );
  			this.nodes.delete( renderObject );

  			chainMap.delete( renderObject.getChainArray() );

  		};

  		return renderObject;

  	}


  }

  class DataMap {

  	constructor() {

  		this.data = new WeakMap();

  	}

  	get( object ) {

  		let map = this.data.get( object );

  		if ( map === undefined ) {

  			map = {};
  			this.data.set( object, map );

  		}

  		return map;

  	}

  	delete( object ) {

  		let map;

  		if ( this.data.has( object ) ) {

  			map = this.data.get( object );

  			this.data.delete( object );

  		}

  		return map;

  	}

  	has( object ) {

  		return this.data.has( object );

  	}

  	dispose() {

  		this.data = new WeakMap();

  	}

  }

  const AttributeType = {
  	VERTEX: 1,
  	INDEX: 2,
  	STORAGE: 3,
  	INDIRECT: 4
  };

  // size of a chunk in bytes (STD140 layout)

  const GPU_CHUNK_BYTES = 16;

  // @TODO: Move to src/constants.js

  const BlendColorFactor = 211;
  const OneMinusBlendColorFactor = 212;

  class Attributes extends DataMap {

  	constructor( backend ) {

  		super();

  		this.backend = backend;

  	}

  	delete( attribute ) {

  		const attributeData = super.delete( attribute );

  		if ( attributeData !== undefined ) {

  			this.backend.destroyAttribute( attribute );

  		}

  		return attributeData;

  	}

  	update( attribute, type ) {

  		const data = this.get( attribute );

  		if ( data.version === undefined ) {

  			if ( type === AttributeType.VERTEX ) {

  				this.backend.createAttribute( attribute );

  			} else if ( type === AttributeType.INDEX ) {

  				this.backend.createIndexAttribute( attribute );

  			} else if ( type === AttributeType.STORAGE ) {

  				this.backend.createStorageAttribute( attribute );

  			} else if ( type === AttributeType.INDIRECT ) {

  				this.backend.createIndirectStorageAttribute( attribute );

  			}

  			data.version = this._getBufferAttribute( attribute ).version;

  		} else {

  			const bufferAttribute = this._getBufferAttribute( attribute );

  			if ( data.version < bufferAttribute.version || bufferAttribute.usage === DynamicDrawUsage ) {

  				this.backend.updateAttribute( attribute );

  				data.version = bufferAttribute.version;

  			}

  		}

  	}

  	_getBufferAttribute( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		return attribute;

  	}

  }

  function arrayNeedsUint32( array ) {

  	// assumes larger values usually on last

  	for ( let i = array.length - 1; i >= 0; -- i ) {

  		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

  	}

  	return false;

  }

  function getWireframeVersion( geometry ) {

  	return ( geometry.index !== null ) ? geometry.index.version : geometry.attributes.position.version;

  }

  function getWireframeIndex( geometry ) {

  	const indices = [];

  	const geometryIndex = geometry.index;
  	const geometryPosition = geometry.attributes.position;

  	if ( geometryIndex !== null ) {

  		const array = geometryIndex.array;

  		for ( let i = 0, l = array.length; i < l; i += 3 ) {

  			const a = array[ i + 0 ];
  			const b = array[ i + 1 ];
  			const c = array[ i + 2 ];

  			indices.push( a, b, b, c, c, a );

  		}

  	} else {

  		const array = geometryPosition.array;

  		for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

  			const a = i + 0;
  			const b = i + 1;
  			const c = i + 2;

  			indices.push( a, b, b, c, c, a );

  		}

  	}

  	const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
  	attribute.version = getWireframeVersion( geometry );

  	return attribute;

  }

  class Geometries extends DataMap {

  	constructor( attributes, info ) {

  		super();

  		this.attributes = attributes;
  		this.info = info;

  		this.wireframes = new WeakMap();

  		this.attributeCall = new WeakMap();

  	}

  	has( renderObject ) {

  		const geometry = renderObject.geometry;

  		return super.has( geometry ) && this.get( geometry ).initialized === true;

  	}

  	updateForRender( renderObject ) {

  		if ( this.has( renderObject ) === false ) this.initGeometry( renderObject );

  		this.updateAttributes( renderObject );

  	}

  	initGeometry( renderObject ) {

  		const geometry = renderObject.geometry;
  		const geometryData = this.get( geometry );

  		geometryData.initialized = true;

  		this.info.memory.geometries ++;

  		const onDispose = () => {

  			this.info.memory.geometries --;

  			const index = geometry.index;
  			const geometryAttributes = renderObject.getAttributes();

  			if ( index !== null ) {

  				this.attributes.delete( index );

  			}

  			for ( const geometryAttribute of geometryAttributes ) {

  				this.attributes.delete( geometryAttribute );

  			}

  			const wireframeAttribute = this.wireframes.get( geometry );

  			if ( wireframeAttribute !== undefined ) {

  				this.attributes.delete( wireframeAttribute );

  			}

  			geometry.removeEventListener( 'dispose', onDispose );

  		};

  		geometry.addEventListener( 'dispose', onDispose );

  	}

  	updateAttributes( renderObject ) {

  		// attributes

  		const attributes = renderObject.getAttributes();

  		for ( const attribute of attributes ) {

  			if ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {

  				this.updateAttribute( attribute, AttributeType.STORAGE );

  			} else {

  				this.updateAttribute( attribute, AttributeType.VERTEX );

  			}

  		}

  		// indexes

  		const index = this.getIndex( renderObject );

  		if ( index !== null ) {

  			this.updateAttribute( index, AttributeType.INDEX );

  		}

  		// indirect

  		const indirect = renderObject.geometry.indirect;

  		if ( indirect !== null ) {

  			this.updateAttribute( indirect, AttributeType.INDIRECT );

  		}

  	}

  	updateAttribute( attribute, type ) {

  		const callId = this.info.render.calls;

  		if ( ! attribute.isInterleavedBufferAttribute ) {

  			if ( this.attributeCall.get( attribute ) !== callId ) {

  				this.attributes.update( attribute, type );

  				this.attributeCall.set( attribute, callId );

  			}

  		} else {

  			if ( this.attributeCall.get( attribute ) === undefined ) {

  				this.attributes.update( attribute, type );

  				this.attributeCall.set( attribute, callId );

  			} else if ( this.attributeCall.get( attribute.data ) !== callId ) {

  				this.attributes.update( attribute, type );

  				this.attributeCall.set( attribute.data, callId );

  				this.attributeCall.set( attribute, callId );

  			}

  		}

  	}

  	getIndirect( renderObject ) {

  		return renderObject.geometry.indirect;

  	}

  	getIndex( renderObject ) {

  		const { geometry, material } = renderObject;

  		let index = geometry.index;

  		if ( material.wireframe === true ) {

  			const wireframes = this.wireframes;

  			let wireframeAttribute = wireframes.get( geometry );

  			if ( wireframeAttribute === undefined ) {

  				wireframeAttribute = getWireframeIndex( geometry );

  				wireframes.set( geometry, wireframeAttribute );

  			} else if ( wireframeAttribute.version !== getWireframeVersion( geometry ) ) {

  				this.attributes.delete( wireframeAttribute );

  				wireframeAttribute = getWireframeIndex( geometry );

  				wireframes.set( geometry, wireframeAttribute );

  			}

  			index = wireframeAttribute;

  		}

  		return index;

  	}

  }

  class Info {

  	constructor() {

  		this.autoReset = true;

  		this.frame = 0;
  		this.calls = 0;

  		this.render = {
  			calls: 0,
  			frameCalls: 0,
  			drawCalls: 0,
  			triangles: 0,
  			points: 0,
  			lines: 0,
  			timestamp: 0,
  			previousFrameCalls: 0,
  			timestampCalls: 0
  		};

  		this.compute = {
  			calls: 0,
  			frameCalls: 0,
  			timestamp: 0,
  			previousFrameCalls: 0,
  			timestampCalls: 0
  		};

  		this.memory = {
  			geometries: 0,
  			textures: 0
  		};

  	}

  	update( object, count, instanceCount ) {

  		this.render.drawCalls ++;

  		if ( object.isMesh || object.isSprite ) {

  			this.render.triangles += instanceCount * ( count / 3 );

  		} else if ( object.isPoints ) {

  			this.render.points += instanceCount * count;

  		} else if ( object.isLineSegments ) {

  			this.render.lines += instanceCount * ( count / 2 );

  		} else if ( object.isLine ) {

  			this.render.lines += instanceCount * ( count - 1 );

  		} else {

  			console.error( 'THREE.WebGPUInfo: Unknown object type.' );

  		}

  	}

  	updateTimestamp( type, time ) {

  		if ( this[ type ].timestampCalls === 0 ) {

  			this[ type ].timestamp = 0;

  		}


  		this[ type ].timestamp += time;

  		this[ type ].timestampCalls ++;


  		if ( this[ type ].timestampCalls >= this[ type ].previousFrameCalls ) {

  			this[ type ].timestampCalls = 0;

  		}


  	}

  	reset() {

  		const previousRenderFrameCalls = this.render.frameCalls;
  		this.render.previousFrameCalls = previousRenderFrameCalls;

  		const previousComputeFrameCalls = this.compute.frameCalls;
  		this.compute.previousFrameCalls = previousComputeFrameCalls;


  		this.render.drawCalls = 0;
  		this.render.frameCalls = 0;
  		this.compute.frameCalls = 0;

  		this.render.triangles = 0;
  		this.render.points = 0;
  		this.render.lines = 0;


  	}

  	dispose() {

  		this.reset();

  		this.calls = 0;

  		this.render.calls = 0;
  		this.compute.calls = 0;

  		this.render.timestamp = 0;
  		this.compute.timestamp = 0;
  		this.memory.geometries = 0;
  		this.memory.textures = 0;

  	}

  }

  class Pipeline {

  	constructor( cacheKey ) {

  		this.cacheKey = cacheKey;

  		this.usedTimes = 0;

  	}

  }

  class RenderPipeline extends Pipeline {

  	constructor( cacheKey, vertexProgram, fragmentProgram ) {

  		super( cacheKey );

  		this.vertexProgram = vertexProgram;
  		this.fragmentProgram = fragmentProgram;

  	}

  }

  class ComputePipeline extends Pipeline {

  	constructor( cacheKey, computeProgram ) {

  		super( cacheKey );

  		this.computeProgram = computeProgram;

  		this.isComputePipeline = true;

  	}

  }

  let _id$6 = 0;

  class ProgrammableStage {

  	constructor( code, type, transforms = null, attributes = null ) {

  		this.id = _id$6 ++;

  		this.code = code;
  		this.stage = type;
  		this.transforms = transforms;
  		this.attributes = attributes;

  		this.usedTimes = 0;

  	}

  }

  class Pipelines extends DataMap {

  	constructor( backend, nodes ) {

  		super();

  		this.backend = backend;
  		this.nodes = nodes;

  		this.bindings = null; // set by the bindings

  		this.caches = new Map();
  		this.programs = {
  			vertex: new Map(),
  			fragment: new Map(),
  			compute: new Map()
  		};

  	}

  	getForCompute( computeNode, bindings ) {

  		const { backend } = this;

  		const data = this.get( computeNode );

  		if ( this._needsComputeUpdate( computeNode ) ) {

  			const previousPipeline = data.pipeline;

  			if ( previousPipeline ) {

  				previousPipeline.usedTimes --;
  				previousPipeline.computeProgram.usedTimes --;

  			}

  			// get shader

  			const nodeBuilderState = this.nodes.getForCompute( computeNode );

  			// programmable stage

  			let stageCompute = this.programs.compute.get( nodeBuilderState.computeShader );

  			if ( stageCompute === undefined ) {

  				if ( previousPipeline && previousPipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.computeProgram );

  				stageCompute = new ProgrammableStage( nodeBuilderState.computeShader, 'compute', nodeBuilderState.transforms, nodeBuilderState.nodeAttributes );
  				this.programs.compute.set( nodeBuilderState.computeShader, stageCompute );

  				backend.createProgram( stageCompute );

  			}

  			// determine compute pipeline

  			const cacheKey = this._getComputeCacheKey( computeNode, stageCompute );

  			let pipeline = this.caches.get( cacheKey );

  			if ( pipeline === undefined ) {

  				if ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );

  				pipeline = this._getComputePipeline( computeNode, stageCompute, cacheKey, bindings );

  			}

  			// keep track of all used times

  			pipeline.usedTimes ++;
  			stageCompute.usedTimes ++;

  			//

  			data.version = computeNode.version;
  			data.pipeline = pipeline;

  		}

  		return data.pipeline;

  	}

  	getForRender( renderObject, promises = null ) {

  		const { backend } = this;

  		const data = this.get( renderObject );

  		if ( this._needsRenderUpdate( renderObject ) ) {

  			const previousPipeline = data.pipeline;

  			if ( previousPipeline ) {

  				previousPipeline.usedTimes --;
  				previousPipeline.vertexProgram.usedTimes --;
  				previousPipeline.fragmentProgram.usedTimes --;

  			}

  			// get shader

  			const nodeBuilderState = renderObject.getNodeBuilderState();

  			// programmable stages

  			let stageVertex = this.programs.vertex.get( nodeBuilderState.vertexShader );

  			if ( stageVertex === undefined ) {

  				if ( previousPipeline && previousPipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.vertexProgram );

  				stageVertex = new ProgrammableStage( nodeBuilderState.vertexShader, 'vertex' );
  				this.programs.vertex.set( nodeBuilderState.vertexShader, stageVertex );

  				backend.createProgram( stageVertex );

  			}

  			let stageFragment = this.programs.fragment.get( nodeBuilderState.fragmentShader );

  			if ( stageFragment === undefined ) {

  				if ( previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.fragmentProgram );

  				stageFragment = new ProgrammableStage( nodeBuilderState.fragmentShader, 'fragment' );
  				this.programs.fragment.set( nodeBuilderState.fragmentShader, stageFragment );

  				backend.createProgram( stageFragment );

  			}

  			// determine render pipeline

  			const cacheKey = this._getRenderCacheKey( renderObject, stageVertex, stageFragment );

  			let pipeline = this.caches.get( cacheKey );

  			if ( pipeline === undefined ) {

  				if ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );

  				pipeline = this._getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises );

  			} else {

  				renderObject.pipeline = pipeline;

  			}

  			// keep track of all used times

  			pipeline.usedTimes ++;
  			stageVertex.usedTimes ++;
  			stageFragment.usedTimes ++;

  			//

  			data.pipeline = pipeline;

  		}

  		return data.pipeline;

  	}

  	delete( object ) {

  		const pipeline = this.get( object ).pipeline;

  		if ( pipeline ) {

  			// pipeline

  			pipeline.usedTimes --;

  			if ( pipeline.usedTimes === 0 ) this._releasePipeline( pipeline );

  			// programs

  			if ( pipeline.isComputePipeline ) {

  				pipeline.computeProgram.usedTimes --;

  				if ( pipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( pipeline.computeProgram );

  			} else {

  				pipeline.fragmentProgram.usedTimes --;
  				pipeline.vertexProgram.usedTimes --;

  				if ( pipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( pipeline.vertexProgram );
  				if ( pipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( pipeline.fragmentProgram );

  			}

  		}

  		return super.delete( object );

  	}

  	dispose() {

  		super.dispose();

  		this.caches = new Map();
  		this.programs = {
  			vertex: new Map(),
  			fragment: new Map(),
  			compute: new Map()
  		};

  	}

  	updateForRender( renderObject ) {

  		this.getForRender( renderObject );

  	}

  	_getComputePipeline( computeNode, stageCompute, cacheKey, bindings ) {

  		// check for existing pipeline

  		cacheKey = cacheKey || this._getComputeCacheKey( computeNode, stageCompute );

  		let pipeline = this.caches.get( cacheKey );

  		if ( pipeline === undefined ) {

  			pipeline = new ComputePipeline( cacheKey, stageCompute );

  			this.caches.set( cacheKey, pipeline );

  			this.backend.createComputePipeline( pipeline, bindings );

  		}

  		return pipeline;

  	}

  	_getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises ) {

  		// check for existing pipeline

  		cacheKey = cacheKey || this._getRenderCacheKey( renderObject, stageVertex, stageFragment );

  		let pipeline = this.caches.get( cacheKey );

  		if ( pipeline === undefined ) {

  			pipeline = new RenderPipeline( cacheKey, stageVertex, stageFragment );

  			this.caches.set( cacheKey, pipeline );

  			renderObject.pipeline = pipeline;

  			this.backend.createRenderPipeline( renderObject, promises );

  		}

  		return pipeline;

  	}

  	_getComputeCacheKey( computeNode, stageCompute ) {

  		return computeNode.id + ',' + stageCompute.id;

  	}

  	_getRenderCacheKey( renderObject, stageVertex, stageFragment ) {

  		return stageVertex.id + ',' + stageFragment.id + ',' + this.backend.getRenderCacheKey( renderObject );

  	}

  	_releasePipeline( pipeline ) {

  		this.caches.delete( pipeline.cacheKey );

  	}

  	_releaseProgram( program ) {

  		const code = program.code;
  		const stage = program.stage;

  		this.programs[ stage ].delete( code );

  	}

  	_needsComputeUpdate( computeNode ) {

  		const data = this.get( computeNode );

  		return data.pipeline === undefined || data.version !== computeNode.version;

  	}

  	_needsRenderUpdate( renderObject ) {

  		const data = this.get( renderObject );

  		return data.pipeline === undefined || this.backend.needsRenderUpdate( renderObject );

  	}

  }

  class Bindings extends DataMap {

  	constructor( backend, nodes, textures, attributes, pipelines, info ) {

  		super();

  		this.backend = backend;
  		this.textures = textures;
  		this.pipelines = pipelines;
  		this.attributes = attributes;
  		this.nodes = nodes;
  		this.info = info;

  		this.pipelines.bindings = this; // assign bindings to pipelines

  	}

  	getForRender( renderObject ) {

  		const bindings = renderObject.getBindings();

  		for ( const bindGroup of bindings ) {

  			const groupData = this.get( bindGroup );

  			if ( groupData.bindGroup === undefined ) {

  				// each object defines an array of bindings (ubos, textures, samplers etc.)

  				this._init( bindGroup );

  				this.backend.createBindings( bindGroup, bindings );

  				groupData.bindGroup = bindGroup;

  			}

  		}

  		return bindings;

  	}

  	getForCompute( computeNode ) {

  		const bindings = this.nodes.getForCompute( computeNode ).bindings;

  		for ( const bindGroup of bindings ) {

  			const groupData = this.get( bindGroup );

  			if ( groupData.bindGroup === undefined ) {

  				this._init( bindGroup );

  				this.backend.createBindings( bindGroup, bindings );

  				groupData.bindGroup = bindGroup;

  			}

  		}

  		return bindings;

  	}

  	updateForCompute( computeNode ) {

  		this._updateBindings( this.getForCompute( computeNode ) );

  	}

  	updateForRender( renderObject ) {

  		this._updateBindings( this.getForRender( renderObject ) );

  	}

  	_updateBindings( bindings ) {

  		for ( const bindGroup of bindings ) {

  			this._update( bindGroup, bindings );

  		}

  	}

  	_init( bindGroup ) {

  		for ( const binding of bindGroup.bindings ) {

  			if ( binding.isSampledTexture ) {

  				this.textures.updateTexture( binding.texture );

  			} else if ( binding.isStorageBuffer ) {

  				const attribute = binding.attribute;
  				const attributeType = attribute.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;

  				this.attributes.update( attribute, attributeType );

  			}

  		}

  	}

  	_update( bindGroup, bindings ) {

  		const { backend } = this;

  		let needsBindingsUpdate = false;

  		// iterate over all bindings and check if buffer updates or a new binding group is required

  		for ( const binding of bindGroup.bindings ) {

  			if ( binding.isNodeUniformsGroup ) {

  				const updated = this.nodes.updateGroup( binding );

  				if ( ! updated ) continue;

  			}

  			if ( binding.isUniformBuffer ) {

  				const updated = binding.update();

  				if ( updated ) {

  					backend.updateBinding( binding );

  				}

  			} else if ( binding.isSampler ) {

  				binding.update();

  			} else if ( binding.isSampledTexture ) {

  				if ( binding.needsBindingsUpdate( this.textures.get( binding.texture ).generation ) ) needsBindingsUpdate = true;

  				const updated = binding.update();

  				const texture = binding.texture;

  				if ( updated ) {

  					this.textures.updateTexture( texture );

  				}

  				const textureData = backend.get( texture );

  				if ( backend.isWebGPUBackend === true && textureData.texture === undefined && textureData.externalTexture === undefined ) {

  					// TODO: Remove this once we found why updated === false isn't bound to a texture in the WebGPU backend
  					console.error( 'Bindings._update: binding should be available:', binding, updated, texture, binding.textureNode.value, needsBindingsUpdate );

  					this.textures.updateTexture( texture );
  					needsBindingsUpdate = true;

  				}

  				if ( texture.isStorageTexture === true ) {

  					const textureData = this.get( texture );

  					if ( binding.store === true ) {

  						textureData.needsMipmap = true;

  					} else if ( this.textures.needsMipmaps( texture ) && textureData.needsMipmap === true ) {

  						this.backend.generateMipmaps( texture );

  						textureData.needsMipmap = false;

  					}

  				}

  			}

  		}

  		if ( needsBindingsUpdate === true ) {

  			this.backend.updateBindings( bindGroup, bindings );

  		}

  	}

  }

  function painterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.material.id !== b.material.id ) {

  		return a.material.id - b.material.id;

  	} else if ( a.z !== b.z ) {

  		return a.z - b.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function reversePainterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.z !== b.z ) {

  		return b.z - a.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function needsDoublePass( material ) {

  	const hasTransmission = material.transmission > 0 || material.transmissionNode;

  	return hasTransmission && material.side === DoubleSide && material.forceSinglePass === false;

  }

  class RenderList {

  	constructor( lighting, scene, camera ) {

  		this.renderItems = [];
  		this.renderItemsIndex = 0;

  		this.opaque = [];
  		this.transparentDoublePass = [];
  		this.transparent = [];
  		this.bundles = [];

  		this.lightsNode = lighting.getNode( scene, camera );
  		this.lightsArray = [];

  		this.scene = scene;
  		this.camera = camera;

  		this.occlusionQueryCount = 0;

  	}

  	begin() {

  		this.renderItemsIndex = 0;

  		this.opaque.length = 0;
  		this.transparentDoublePass.length = 0;
  		this.transparent.length = 0;
  		this.bundles.length = 0;

  		this.lightsArray.length = 0;

  		this.occlusionQueryCount = 0;

  		return this;

  	}

  	getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

  		let renderItem = this.renderItems[ this.renderItemsIndex ];

  		if ( renderItem === undefined ) {

  			renderItem = {
  				id: object.id,
  				object: object,
  				geometry: geometry,
  				material: material,
  				groupOrder: groupOrder,
  				renderOrder: object.renderOrder,
  				z: z,
  				group: group
  			};

  			this.renderItems[ this.renderItemsIndex ] = renderItem;

  		} else {

  			renderItem.id = object.id;
  			renderItem.object = object;
  			renderItem.geometry = geometry;
  			renderItem.material = material;
  			renderItem.groupOrder = groupOrder;
  			renderItem.renderOrder = object.renderOrder;
  			renderItem.z = z;
  			renderItem.group = group;

  		}

  		this.renderItemsIndex ++;

  		return renderItem;

  	}

  	push( object, geometry, material, groupOrder, z, group ) {

  		const renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		if ( object.occlusionTest === true ) this.occlusionQueryCount ++;

  		if ( material.transparent === true || material.transmission > 0 ) {

  			if ( needsDoublePass( material ) ) this.transparentDoublePass.push( renderItem );

  			this.transparent.push( renderItem );

  		} else {

  			this.opaque.push( renderItem );

  		}

  	}

  	unshift( object, geometry, material, groupOrder, z, group ) {

  		const renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		if ( material.transparent === true || material.transmission > 0 ) {

  			if ( needsDoublePass( material ) ) this.transparentDoublePass.unshift( renderItem );

  			this.transparent.unshift( renderItem );

  		} else {

  			this.opaque.unshift( renderItem );

  		}

  	}

  	pushBundle( group ) {

  		this.bundles.push( group );

  	}

  	pushLight( light ) {

  		this.lightsArray.push( light );

  	}

  	sort( customOpaqueSort, customTransparentSort ) {

  		if ( this.opaque.length > 1 ) this.opaque.sort( customOpaqueSort || painterSortStable );
  		if ( this.transparentDoublePass.length > 1 ) this.transparentDoublePass.sort( customTransparentSort || reversePainterSortStable );
  		if ( this.transparent.length > 1 ) this.transparent.sort( customTransparentSort || reversePainterSortStable );

  	}

  	finish() {

  		// update lights

  		this.lightsNode.setLights( this.lightsArray );

  		// Clear references from inactive renderItems in the list

  		for ( let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i ++ ) {

  			const renderItem = this.renderItems[ i ];

  			if ( renderItem.id === null ) break;

  			renderItem.id = null;
  			renderItem.object = null;
  			renderItem.geometry = null;
  			renderItem.material = null;
  			renderItem.groupOrder = null;
  			renderItem.renderOrder = null;
  			renderItem.z = null;
  			renderItem.group = null;

  		}

  	}

  }

  class RenderLists {

  	constructor( lighting ) {

  		this.lighting = lighting;

  		this.lists = new ChainMap();

  	}

  	get( scene, camera ) {

  		const lists = this.lists;
  		const keys = [ scene, camera ];

  		let list = lists.get( keys );

  		if ( list === undefined ) {

  			list = new RenderList( this.lighting, scene, camera );
  			lists.set( keys, list );

  		}

  		return list;

  	}

  	dispose() {

  		this.lists = new ChainMap();

  	}

  }

  let id$1 = 0;

  class RenderContext {

  	constructor() {

  		this.id = id$1 ++;

  		this.color = true;
  		this.clearColor = true;
  		this.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };

  		this.depth = true;
  		this.clearDepth = true;
  		this.clearDepthValue = 1;

  		this.stencil = false;
  		this.clearStencil = true;
  		this.clearStencilValue = 1;

  		this.viewport = false;
  		this.viewportValue = new Vector4();

  		this.scissor = false;
  		this.scissorValue = new Vector4();

  		this.textures = null;
  		this.depthTexture = null;
  		this.activeCubeFace = 0;
  		this.sampleCount = 1;

  		this.width = 0;
  		this.height = 0;

  		this.isRenderContext = true;

  	}

  	getCacheKey() {

  		return getCacheKey( this );

  	}

  }

  function getCacheKey( renderContext ) {

  	const { textures, activeCubeFace } = renderContext;

  	const values = [ activeCubeFace ];

  	for ( const texture of textures ) {

  		values.push( texture.id );

  	}

  	return hashArray( values );

  }

  class RenderContexts {

  	constructor() {

  		this.chainMaps = {};

  	}

  	get( scene, camera, renderTarget = null ) {

  		const chainKey = [ scene, camera ];

  		let attachmentState;

  		if ( renderTarget === null ) {

  			attachmentState = 'default';

  		} else {

  			const format = renderTarget.texture.format;
  			const count = renderTarget.textures.length;

  			attachmentState = `${ count }:${ format }:${ renderTarget.samples }:${ renderTarget.depthBuffer }:${ renderTarget.stencilBuffer }`;

  		}

  		const chainMap = this.getChainMap( attachmentState );

  		let renderState = chainMap.get( chainKey );

  		if ( renderState === undefined ) {

  			renderState = new RenderContext();

  			chainMap.set( chainKey, renderState );

  		}

  		if ( renderTarget !== null ) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;

  		return renderState;

  	}

  	getChainMap( attachmentState ) {

  		return this.chainMaps[ attachmentState ] || ( this.chainMaps[ attachmentState ] = new ChainMap() );

  	}

  	dispose() {

  		this.chainMaps = {};

  	}

  }

  const _size$3 = /*@__PURE__*/ new Vector3();

  class Textures extends DataMap {

  	constructor( renderer, backend, info ) {

  		super();

  		this.renderer = renderer;
  		this.backend = backend;
  		this.info = info;

  	}

  	updateRenderTarget( renderTarget, activeMipmapLevel = 0 ) {

  		const renderTargetData = this.get( renderTarget );

  		const sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
  		const depthTextureMips = renderTargetData.depthTextureMips || ( renderTargetData.depthTextureMips = {} );

  		const textures = renderTarget.textures;

  		const size = this.getSize( textures[ 0 ] );

  		const mipWidth = size.width >> activeMipmapLevel;
  		const mipHeight = size.height >> activeMipmapLevel;

  		let depthTexture = renderTarget.depthTexture || depthTextureMips[ activeMipmapLevel ];
  		const useDepthTexture = renderTarget.depthBuffer === true || renderTarget.stencilBuffer === true;

  		let textureNeedsUpdate = false;

  		if ( depthTexture === undefined && useDepthTexture ) {

  			depthTexture = new DepthTexture();
  			depthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat : DepthFormat;
  			depthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type : UnsignedIntType; // FloatType
  			depthTexture.image.width = mipWidth;
  			depthTexture.image.height = mipHeight;

  			depthTextureMips[ activeMipmapLevel ] = depthTexture;

  		}

  		if ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {

  			textureNeedsUpdate = true;

  			if ( depthTexture ) {

  				depthTexture.needsUpdate = true;
  				depthTexture.image.width = mipWidth;
  				depthTexture.image.height = mipHeight;

  			}

  		}

  		renderTargetData.width = size.width;
  		renderTargetData.height = size.height;
  		renderTargetData.textures = textures;
  		renderTargetData.depthTexture = depthTexture || null;
  		renderTargetData.depth = renderTarget.depthBuffer;
  		renderTargetData.stencil = renderTarget.stencilBuffer;
  		renderTargetData.renderTarget = renderTarget;

  		if ( renderTargetData.sampleCount !== sampleCount ) {

  			textureNeedsUpdate = true;

  			if ( depthTexture ) {

  				depthTexture.needsUpdate = true;

  			}

  			renderTargetData.sampleCount = sampleCount;

  		}

  		//

  		const options = { sampleCount };

  		for ( let i = 0; i < textures.length; i ++ ) {

  			const texture = textures[ i ];

  			if ( textureNeedsUpdate ) texture.needsUpdate = true;

  			this.updateTexture( texture, options );

  		}

  		if ( depthTexture ) {

  			this.updateTexture( depthTexture, options );

  		}

  		// dispose handler

  		if ( renderTargetData.initialized !== true ) {

  			renderTargetData.initialized = true;

  			// dispose

  			const onDispose = () => {

  				renderTarget.removeEventListener( 'dispose', onDispose );

  				for ( let i = 0; i < textures.length; i ++ ) {

  					this._destroyTexture( textures[ i ] );

  				}

  				if ( depthTexture ) {

  					this._destroyTexture( depthTexture );

  				}

  				this.delete( renderTarget );

  			};

  			renderTarget.addEventListener( 'dispose', onDispose );

  		}

  	}

  	updateTexture( texture, options = {} ) {

  		const textureData = this.get( texture );
  		if ( textureData.initialized === true && textureData.version === texture.version ) return;

  		const isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;
  		const backend = this.backend;

  		if ( isRenderTarget && textureData.initialized === true ) {

  			// it's an update

  			backend.destroySampler( texture );
  			backend.destroyTexture( texture );

  		}

  		//

  		if ( texture.isFramebufferTexture ) {

  			const renderTarget = this.renderer.getRenderTarget();

  			if ( renderTarget ) {

  				texture.type = renderTarget.texture.type;

  			} else {

  				texture.type = UnsignedByteType;

  			}

  		}

  		//

  		const { width, height, depth } = this.getSize( texture );

  		options.width = width;
  		options.height = height;
  		options.depth = depth;
  		options.needsMipmaps = this.needsMipmaps( texture );
  		options.levels = options.needsMipmaps ? this.getMipLevels( texture, width, height ) : 1;

  		//

  		if ( isRenderTarget || texture.isStorageTexture === true ) {

  			backend.createSampler( texture );
  			backend.createTexture( texture, options );

  			textureData.generation = texture.version;

  		} else {

  			const needsCreate = textureData.initialized !== true;

  			if ( needsCreate ) backend.createSampler( texture );

  			if ( texture.version > 0 ) {

  				const image = texture.image;

  				if ( image === undefined ) {

  					console.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );

  				} else if ( image.complete === false ) {

  					console.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );

  				} else {

  					if ( texture.images ) {

  						const images = [];

  						for ( const image of texture.images ) {

  							images.push( image );

  						}

  						options.images = images;

  					} else {

  						options.image = image;

  					}

  					if ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {

  						backend.createTexture( texture, options );

  						textureData.isDefaultTexture = false;
  						textureData.generation = texture.version;

  					}

  					if ( texture.source.dataReady === true ) backend.updateTexture( texture, options );

  					if ( options.needsMipmaps && texture.mipmaps.length === 0 ) backend.generateMipmaps( texture );

  				}

  			} else {

  				// async update

  				backend.createDefaultTexture( texture );

  				textureData.isDefaultTexture = true;
  				textureData.generation = texture.version;

  			}

  		}

  		// dispose handler

  		if ( textureData.initialized !== true ) {

  			textureData.initialized = true;
  			textureData.generation = texture.version;

  			//

  			this.info.memory.textures ++;

  			// dispose

  			const onDispose = () => {

  				texture.removeEventListener( 'dispose', onDispose );

  				this._destroyTexture( texture );

  				this.info.memory.textures --;

  			};

  			texture.addEventListener( 'dispose', onDispose );

  		}

  		//

  		textureData.version = texture.version;

  	}

  	getSize( texture, target = _size$3 ) {

  		let image = texture.images ? texture.images[ 0 ] : texture.image;

  		if ( image ) {

  			if ( image.image !== undefined ) image = image.image;

  			target.width = image.width;
  			target.height = image.height;
  			target.depth = texture.isCubeTexture ? 6 : ( image.depth || 1 );

  		} else {

  			target.width = target.height = target.depth = 1;

  		}

  		return target;

  	}

  	getMipLevels( texture, width, height ) {

  		let mipLevelCount;

  		if ( texture.isCompressedTexture ) {

  			mipLevelCount = texture.mipmaps.length;

  		} else {

  			mipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;

  		}

  		return mipLevelCount;

  	}

  	needsMipmaps( texture ) {

  		return this.isEnvironmentTexture( texture ) || texture.isCompressedTexture === true || texture.generateMipmaps;

  	}

  	isEnvironmentTexture( texture ) {

  		const mapping = texture.mapping;

  		return ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

  	}

  	_destroyTexture( texture ) {

  		this.backend.destroySampler( texture );
  		this.backend.destroyTexture( texture );

  		this.delete( texture );

  	}

  }

  class Color4 extends Color {

  	constructor( r, g, b, a = 1 ) {

  		super( r, g, b );

  		this.a = a;

  	}

  	set( r, g, b, a = 1 ) {

  		this.a = a;

  		return super.set( r, g, b );

  	}

  	copy( color ) {

  		if ( color.a !== undefined ) this.a = color.a;

  		return super.copy( color );

  	}

  	clone() {

  		return new this.constructor( this.r, this.g, this.b, this.a );

  	}

  }

  class ParameterNode extends PropertyNode {

  	static get type() {

  		return 'ParameterNode';

  	}

  	constructor( nodeType, name = null ) {

  		super( nodeType, name );

  		this.isParameterNode = true;

  	}

  	getHash() {

  		return this.uuid;

  	}

  	generate() {

  		return this.name;

  	}

  }

  class StackNode extends Node {

  	static get type() {

  		return 'StackNode';

  	}

  	constructor( parent = null ) {

  		super();

  		this.nodes = [];
  		this.outputNode = null;

  		this.parent = parent;

  		this._currentCond = null;

  		this.isStackNode = true;

  	}

  	getNodeType( builder ) {

  		return this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';

  	}

  	add( node ) {

  		this.nodes.push( node );

  		return this;

  	}

  	If( boolNode, method ) {

  		const methodNode = new ShaderNode( method );
  		this._currentCond = select( boolNode, methodNode );

  		return this.add( this._currentCond );

  	}

  	ElseIf( boolNode, method ) {

  		const methodNode = new ShaderNode( method );
  		const ifNode = select( boolNode, methodNode );

  		this._currentCond.elseNode = ifNode;
  		this._currentCond = ifNode;

  		return this;

  	}

  	Else( method ) {

  		this._currentCond.elseNode = new ShaderNode( method );

  		return this;

  	}

  	build( builder, ...params ) {

  		const previousStack = getCurrentStack();

  		setCurrentStack( this );

  		for ( const node of this.nodes ) {

  			node.build( builder, 'void' );

  		}

  		setCurrentStack( previousStack );

  		return this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );

  	}

  	//

  	else( ...params ) { // @deprecated, r168

  		console.warn( 'TSL.StackNode: .else() has been renamed to .Else().' );
  		return this.Else( ...params );

  	}

  	elseif( ...params ) { // @deprecated, r168

  		console.warn( 'TSL.StackNode: .elseif() has been renamed to .ElseIf().' );
  		return this.ElseIf( ...params );

  	}

  }

  const stack = /*@__PURE__*/ nodeProxy( StackNode );

  new Plane();
  new Vector3();
  new Vector3();
  new Vector3();
  new Matrix4();
  new Vector3( 0, 0, - 1 );
  new Vector4();

  new Vector3();
  new Vector3();
  new Vector4();

  new Vector2();

  const _defaultRT = new RenderTarget();
  screenUV.flipX();

  _defaultRT.depthTexture = new DepthTexture( 1, 1 );

  // Helper for passes that need to fill the viewport with a single quad.

  const _camera$1 = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

  // https://github.com/mrdoob/three.js/pull/21358

  class QuadGeometry extends BufferGeometry {

  	constructor( flipY = false ) {

  		super();

  		const uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];

  		this.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );

  	}

  }

  const _geometry$1 = /*@__PURE__*/ new QuadGeometry();

  class QuadMesh extends Mesh {

  	constructor( material = null ) {

  		super( _geometry$1, material );

  		this.camera = _camera$1;

  		this.isQuadMesh = true;

  	}

  	renderAsync( renderer ) {

  		return renderer.renderAsync( this, _camera$1 );

  	}

  	render( renderer ) {

  		renderer.render( this, _camera$1 );

  	}

  }

  const _e1 = /*@__PURE__*/ new Euler();
  const _m1 = /*@__PURE__*/ new Matrix4();

  class SceneNode extends Node {

  	static get type() {

  		return 'SceneNode';

  	}

  	constructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {

  		super();

  		this.scope = scope;
  		this.scene = scene;

  	}

  	setup( builder ) {

  		const scope = this.scope;
  		const scene = this.scene !== null ? this.scene : builder.scene;

  		let output;

  		if ( scope === SceneNode.BACKGROUND_BLURRINESS ) {

  			output = reference( 'backgroundBlurriness', 'float', scene );

  		} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {

  			output = reference( 'backgroundIntensity', 'float', scene );

  		} else if ( scope === SceneNode.BACKGROUND_ROTATION ) {

  			output = uniform( 'mat4' ).label( 'backgroundRotation' ).setGroup( renderGroup ).onRenderUpdate( () => {

  				const background = scene.background;

  				if ( background !== null && background.isTexture && background.mapping !== UVMapping ) {

  					_e1.copy( scene.backgroundRotation );

  					// accommodate left-handed frame
  					_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;

  					_m1.makeRotationFromEuler( _e1 );

  				} else {

  					_m1.identity();

  				}

  				return _m1;

  			} );

  		} else {

  			console.error( 'THREE.SceneNode: Unknown scope:', scope );

  		}

  		return output;

  	}

  }

  SceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';
  SceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';
  SceneNode.BACKGROUND_ROTATION = 'backgroundRotation';

  const backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );
  const backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );
  const backgroundRotation = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_ROTATION );

  const GPUPrimitiveTopology = {
  	PointList: 'point-list',
  	LineList: 'line-list',
  	LineStrip: 'line-strip',
  	TriangleList: 'triangle-list',
  	TriangleStrip: 'triangle-strip',
  };

  const GPUCompareFunction = {
  	Never: 'never',
  	Less: 'less',
  	Equal: 'equal',
  	LessEqual: 'less-equal',
  	Greater: 'greater',
  	NotEqual: 'not-equal',
  	GreaterEqual: 'greater-equal',
  	Always: 'always'
  };

  const GPUStoreOp = {
  	Store: 'store',
  	Discard: 'discard'
  };

  const GPULoadOp = {
  	Load: 'load',
  	Clear: 'clear'
  };

  const GPUFrontFace = {
  	CCW: 'ccw',
  	CW: 'cw'
  };

  const GPUCullMode = {
  	None: 'none',
  	Front: 'front',
  	Back: 'back'
  };

  const GPUIndexFormat = {
  	Uint16: 'uint16',
  	Uint32: 'uint32'
  };

  const GPUTextureFormat = {

  	// 8-bit formats

  	R8Unorm: 'r8unorm',
  	R8Snorm: 'r8snorm',
  	R8Uint: 'r8uint',
  	R8Sint: 'r8sint',

  	// 16-bit formats

  	R16Uint: 'r16uint',
  	R16Sint: 'r16sint',
  	R16Float: 'r16float',
  	RG8Unorm: 'rg8unorm',
  	RG8Snorm: 'rg8snorm',
  	RG8Uint: 'rg8uint',
  	RG8Sint: 'rg8sint',

  	// 32-bit formats

  	R32Uint: 'r32uint',
  	R32Sint: 'r32sint',
  	R32Float: 'r32float',
  	RG16Uint: 'rg16uint',
  	RG16Sint: 'rg16sint',
  	RG16Float: 'rg16float',
  	RGBA8Unorm: 'rgba8unorm',
  	RGBA8UnormSRGB: 'rgba8unorm-srgb',
  	RGBA8Snorm: 'rgba8snorm',
  	RGBA8Uint: 'rgba8uint',
  	RGBA8Sint: 'rgba8sint',
  	BGRA8Unorm: 'bgra8unorm',
  	BGRA8UnormSRGB: 'bgra8unorm-srgb',
  	// Packed 32-bit formats
  	RGB9E5UFloat: 'rgb9e5ufloat',
  	RGB10A2Unorm: 'rgb10a2unorm',
  	RG11B10uFloat: 'rgb10a2unorm',

  	// 64-bit formats

  	RG32Uint: 'rg32uint',
  	RG32Sint: 'rg32sint',
  	RG32Float: 'rg32float',
  	RGBA16Uint: 'rgba16uint',
  	RGBA16Sint: 'rgba16sint',
  	RGBA16Float: 'rgba16float',

  	// 128-bit formats

  	RGBA32Uint: 'rgba32uint',
  	RGBA32Sint: 'rgba32sint',
  	RGBA32Float: 'rgba32float',

  	// Depth and stencil formats

  	Stencil8: 'stencil8',
  	Depth16Unorm: 'depth16unorm',
  	Depth24Plus: 'depth24plus',
  	Depth24PlusStencil8: 'depth24plus-stencil8',
  	Depth32Float: 'depth32float',

  	// 'depth32float-stencil8' extension

  	Depth32FloatStencil8: 'depth32float-stencil8',

  	// BC compressed formats usable if 'texture-compression-bc' is both
  	// supported by the device/user agent and enabled in requestDevice.

  	BC1RGBAUnorm: 'bc1-rgba-unorm',
  	BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',
  	BC2RGBAUnorm: 'bc2-rgba-unorm',
  	BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',
  	BC3RGBAUnorm: 'bc3-rgba-unorm',
  	BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',
  	BC4RUnorm: 'bc4-r-unorm',
  	BC4RSnorm: 'bc4-r-snorm',
  	BC5RGUnorm: 'bc5-rg-unorm',
  	BC5RGSnorm: 'bc5-rg-snorm',
  	BC6HRGBUFloat: 'bc6h-rgb-ufloat',
  	BC6HRGBFloat: 'bc6h-rgb-float',
  	BC7RGBAUnorm: 'bc7-rgba-unorm',
  	BC7RGBAUnormSRGB: 'bc7-rgba-srgb',

  	// ETC2 compressed formats usable if 'texture-compression-etc2' is both
  	// supported by the device/user agent and enabled in requestDevice.

  	ETC2RGB8Unorm: 'etc2-rgb8unorm',
  	ETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',
  	ETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',
  	ETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',
  	ETC2RGBA8Unorm: 'etc2-rgba8unorm',
  	ETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',
  	EACR11Unorm: 'eac-r11unorm',
  	EACR11Snorm: 'eac-r11snorm',
  	EACRG11Unorm: 'eac-rg11unorm',
  	EACRG11Snorm: 'eac-rg11snorm',

  	// ASTC compressed formats usable if 'texture-compression-astc' is both
  	// supported by the device/user agent and enabled in requestDevice.

  	ASTC4x4Unorm: 'astc-4x4-unorm',
  	ASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',
  	ASTC5x4Unorm: 'astc-5x4-unorm',
  	ASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',
  	ASTC5x5Unorm: 'astc-5x5-unorm',
  	ASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',
  	ASTC6x5Unorm: 'astc-6x5-unorm',
  	ASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',
  	ASTC6x6Unorm: 'astc-6x6-unorm',
  	ASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',
  	ASTC8x5Unorm: 'astc-8x5-unorm',
  	ASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',
  	ASTC8x6Unorm: 'astc-8x6-unorm',
  	ASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',
  	ASTC8x8Unorm: 'astc-8x8-unorm',
  	ASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',
  	ASTC10x5Unorm: 'astc-10x5-unorm',
  	ASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',
  	ASTC10x6Unorm: 'astc-10x6-unorm',
  	ASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',
  	ASTC10x8Unorm: 'astc-10x8-unorm',
  	ASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',
  	ASTC10x10Unorm: 'astc-10x10-unorm',
  	ASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',
  	ASTC12x10Unorm: 'astc-12x10-unorm',
  	ASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',
  	ASTC12x12Unorm: 'astc-12x12-unorm',
  	ASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',

  };

  const GPUAddressMode = {
  	ClampToEdge: 'clamp-to-edge',
  	Repeat: 'repeat',
  	MirrorRepeat: 'mirror-repeat'
  };

  const GPUFilterMode = {
  	Linear: 'linear',
  	Nearest: 'nearest'
  };

  const GPUBlendFactor = {
  	Zero: 'zero',
  	One: 'one',
  	Src: 'src',
  	OneMinusSrc: 'one-minus-src',
  	SrcAlpha: 'src-alpha',
  	OneMinusSrcAlpha: 'one-minus-src-alpha',
  	Dst: 'dst',
  	OneMinusDstColor: 'one-minus-dst',
  	DstAlpha: 'dst-alpha',
  	OneMinusDstAlpha: 'one-minus-dst-alpha',
  	SrcAlphaSaturated: 'src-alpha-saturated',
  	Constant: 'constant',
  	OneMinusConstant: 'one-minus-constant'
  };

  const GPUBlendOperation = {
  	Add: 'add',
  	Subtract: 'subtract',
  	ReverseSubtract: 'reverse-subtract',
  	Min: 'min',
  	Max: 'max'
  };

  const GPUColorWriteFlags = {
  	None: 0,
  	Red: 0x1,
  	Green: 0x2,
  	Blue: 0x4,
  	Alpha: 0x8,
  	All: 0xF
  };

  const GPUStencilOperation = {
  	Keep: 'keep',
  	Zero: 'zero',
  	Replace: 'replace',
  	Invert: 'invert',
  	IncrementClamp: 'increment-clamp',
  	DecrementClamp: 'decrement-clamp',
  	IncrementWrap: 'increment-wrap',
  	DecrementWrap: 'decrement-wrap'
  };

  const GPUBufferBindingType = {
  	Uniform: 'uniform',
  	Storage: 'storage',
  	ReadOnlyStorage: 'read-only-storage'
  };

  const GPUStorageTextureAccess = {
  	WriteOnly: 'write-only',
  	ReadOnly: 'read-only',
  	ReadWrite: 'read-write',
  };

  const GPUTextureSampleType = {
  	Float: 'float',
  	UnfilterableFloat: 'unfilterable-float',
  	Depth: 'depth',
  	SInt: 'sint',
  	UInt: 'uint'
  };

  const GPUTextureDimension = {
  	OneD: '1d',
  	TwoD: '2d',
  	ThreeD: '3d'
  };

  const GPUTextureViewDimension = {
  	OneD: '1d',
  	TwoD: '2d',
  	TwoDArray: '2d-array',
  	Cube: 'cube',
  	CubeArray: 'cube-array',
  	ThreeD: '3d'
  };

  const GPUTextureAspect = {
  	All: 'all',
  	StencilOnly: 'stencil-only',
  	DepthOnly: 'depth-only'
  };

  const GPUInputStepMode = {
  	Vertex: 'vertex',
  	Instance: 'instance'
  };

  const GPUFeatureName = {
  	DepthClipControl: 'depth-clip-control',
  	Depth32FloatStencil8: 'depth32float-stencil8',
  	TextureCompressionBC: 'texture-compression-bc',
  	TextureCompressionETC2: 'texture-compression-etc2',
  	TextureCompressionASTC: 'texture-compression-astc',
  	TimestampQuery: 'timestamp-query',
  	IndirectFirstInstance: 'indirect-first-instance',
  	ShaderF16: 'shader-f16',
  	RG11B10UFloat: 'rg11b10ufloat-renderable',
  	BGRA8UNormStorage: 'bgra8unorm-storage',
  	Float32Filterable: 'float32-filterable',
  	ClipDistances: 'clip-distances',
  	DualSourceBlending: 'dual-source-blending',
  	Subgroups: 'subgroups'
  };

  const _size = /*@__PURE__*/ new Vector2();

  class PassTextureNode extends TextureNode {

  	static get type() {

  		return 'PassTextureNode';

  	}

  	constructor( passNode, texture ) {

  		super( texture );

  		this.passNode = passNode;

  		this.setUpdateMatrix( false );

  	}

  	setup( builder ) {

  		if ( builder.object.isQuadMesh ) this.passNode.build( builder );

  		return super.setup( builder );

  	}

  	clone() {

  		return new this.constructor( this.passNode, this.value );

  	}

  }

  class PassMultipleTextureNode extends PassTextureNode {

  	static get type() {

  		return 'PassMultipleTextureNode';

  	}

  	constructor( passNode, textureName, previousTexture = false ) {

  		super( passNode, null );

  		this.textureName = textureName;
  		this.previousTexture = previousTexture;

  	}

  	updateTexture() {

  		this.value = this.previousTexture ? this.passNode.getPreviousTexture( this.textureName ) : this.passNode.getTexture( this.textureName );

  	}

  	setup( builder ) {

  		this.updateTexture();

  		return super.setup( builder );

  	}

  	clone() {

  		return new this.constructor( this.passNode, this.textureName, this.previousTexture );

  	}

  }

  class PassNode extends TempNode {

  	static get type() {

  		return 'PassNode';

  	}

  	constructor( scope, scene, camera, options = {} ) {

  		super( 'vec4' );

  		this.scope = scope;
  		this.scene = scene;
  		this.camera = camera;
  		this.options = options;

  		this._pixelRatio = 1;
  		this._width = 1;
  		this._height = 1;

  		const depthTexture = new DepthTexture();
  		depthTexture.isRenderTargetTexture = true;
  		//depthTexture.type = FloatType;
  		depthTexture.name = 'depth';

  		const renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );
  		renderTarget.texture.name = 'output';
  		renderTarget.depthTexture = depthTexture;

  		this.renderTarget = renderTarget;

  		this.updateBeforeType = NodeUpdateType.FRAME;

  		this._textures = {
  			output: renderTarget.texture,
  			depth: depthTexture
  		};

  		this._textureNodes = {};
  		this._linearDepthNodes = {};
  		this._viewZNodes = {};

  		this._previousTextures = {};
  		this._previousTextureNodes = {};

  		this._cameraNear = uniform( 0 );
  		this._cameraFar = uniform( 0 );

  		this._mrt = null;

  		this.isPassNode = true;

  	}

  	setMRT( mrt ) {

  		this._mrt = mrt;

  		return this;

  	}

  	getMRT() {

  		return this._mrt;

  	}

  	isGlobal() {

  		return true;

  	}

  	getTexture( name ) {

  		let texture = this._textures[ name ];

  		if ( texture === undefined ) {

  			const refTexture = this.renderTarget.texture;

  			texture = refTexture.clone();
  			texture.isRenderTargetTexture = true;
  			texture.name = name;

  			this._textures[ name ] = texture;

  			this.renderTarget.textures.push( texture );

  		}

  		return texture;

  	}

  	getPreviousTexture( name ) {

  		let texture = this._previousTextures[ name ];

  		if ( texture === undefined ) {

  			texture = this.getTexture( name ).clone();
  			texture.isRenderTargetTexture = true;

  			this._previousTextures[ name ] = texture;

  		}

  		return texture;

  	}

  	toggleTexture( name ) {

  		const prevTexture = this._previousTextures[ name ];

  		if ( prevTexture !== undefined ) {

  			const texture = this._textures[ name ];

  			const index = this.renderTarget.textures.indexOf( texture );
  			this.renderTarget.textures[ index ] = prevTexture;

  			this._textures[ name ] = prevTexture;
  			this._previousTextures[ name ] = texture;

  			this._textureNodes[ name ].updateTexture();
  			this._previousTextureNodes[ name ].updateTexture();

  		}

  	}

  	getTextureNode( name = 'output' ) {

  		let textureNode = this._textureNodes[ name ];

  		if ( textureNode === undefined ) {

  			textureNode = nodeObject( new PassMultipleTextureNode( this, name ) );
  			textureNode.updateTexture();
  			this._textureNodes[ name ] = textureNode;

  		}

  		return textureNode;

  	}

  	getPreviousTextureNode( name = 'output' ) {

  		let textureNode = this._previousTextureNodes[ name ];

  		if ( textureNode === undefined ) {

  			if ( this._textureNodes[ name ] === undefined ) this.getTextureNode( name );

  			textureNode = nodeObject( new PassMultipleTextureNode( this, name, true ) );
  			textureNode.updateTexture();
  			this._previousTextureNodes[ name ] = textureNode;

  		}

  		return textureNode;

  	}

  	getViewZNode( name = 'depth' ) {

  		let viewZNode = this._viewZNodes[ name ];

  		if ( viewZNode === undefined ) {

  			const cameraNear = this._cameraNear;
  			const cameraFar = this._cameraFar;

  			this._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );

  		}

  		return viewZNode;

  	}

  	getLinearDepthNode( name = 'depth' ) {

  		let linearDepthNode = this._linearDepthNodes[ name ];

  		if ( linearDepthNode === undefined ) {

  			const cameraNear = this._cameraNear;
  			const cameraFar = this._cameraFar;
  			const viewZNode = this.getViewZNode( name );

  			// TODO: just if ( builder.camera.isPerspectiveCamera )

  			this._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );

  		}

  		return linearDepthNode;

  	}

  	setup( { renderer } ) {

  		this.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;

  		// Disable MSAA for WebGL backend for now
  		if ( renderer.backend.isWebGLBackend === true ) {

  			this.renderTarget.samples = 0;

  		}

  		this.renderTarget.depthTexture.isMultisampleRenderTargetTexture = this.renderTarget.samples > 1;

  		return this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();

  	}

  	updateBefore( frame ) {

  		const { renderer } = frame;
  		const { scene, camera } = this;

  		this._pixelRatio = renderer.getPixelRatio();

  		const size = renderer.getSize( _size );

  		this.setSize( size.width, size.height );

  		const currentRenderTarget = renderer.getRenderTarget();
  		const currentMRT = renderer.getMRT();

  		this._cameraNear.value = camera.near;
  		this._cameraFar.value = camera.far;

  		for ( const name in this._previousTextures ) {

  			this.toggleTexture( name );

  		}

  		renderer.setRenderTarget( this.renderTarget );
  		renderer.setMRT( this._mrt );

  		renderer.render( scene, camera );

  		renderer.setRenderTarget( currentRenderTarget );
  		renderer.setMRT( currentMRT );

  	}

  	setSize( width, height ) {

  		this._width = width;
  		this._height = height;

  		const effectiveWidth = this._width * this._pixelRatio;
  		const effectiveHeight = this._height * this._pixelRatio;

  		this.renderTarget.setSize( effectiveWidth, effectiveHeight );

  	}

  	setPixelRatio( pixelRatio ) {

  		this._pixelRatio = pixelRatio;

  		this.setSize( this._width, this._height );

  	}

  	dispose() {

  		this.renderTarget.dispose();

  	}


  }

  PassNode.COLOR = 'color';
  PassNode.DEPTH = 'depth';

  // exposure only

  const linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	return color.mul( exposure ).clamp();

  } ).setLayout( {
  	name: 'linearToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  // source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf

  const reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	color = color.mul( exposure );

  	return color.div( color.add( 1.0 ) ).clamp();

  } ).setLayout( {
  	name: 'reinhardToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  // source: http://filmicworlds.com/blog/filmic-tonemapping-operators/

  const cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	// filmic operator by Jim Hejl and Richard Burgess-Dawson
  	color = color.mul( exposure );
  	color = color.sub( 0.004 ).max( 0.0 );

  	const a = color.mul( color.mul( 6.2 ).add( 0.5 ) );
  	const b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );

  	return a.div( b ).pow( 2.2 );

  } ).setLayout( {
  	name: 'cineonToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  // source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs

  const RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {

  	const a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );
  	const b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );

  	return a.div( b );

  } );

  // source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs

  const acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
  	const ACESInputMat = mat3(
  		0.59719, 0.35458, 0.04823,
  		0.07600, 0.90834, 0.01566,
  		0.02840, 0.13383, 0.83777
  	);

  	// ODT_SAT => XYZ => D60_2_D65 => sRGB
  	const ACESOutputMat = mat3(
  		1.60475, - 0.53108, - 0.07367,
  		- 0.10208, 1.10813, - 0.00605,
  		- 0.00327, - 0.07276, 1.07602
  	);

  	color = color.mul( exposure ).div( 0.6 );

  	color = ACESInputMat.mul( color );

  	// Apply RRT and ODT
  	color = RRTAndODTFit( color );

  	color = ACESOutputMat.mul( color );

  	// Clamp to [0, 1]
  	return color.clamp();

  } ).setLayout( {
  	name: 'acesFilmicToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  const LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );
  const LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );

  const agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {

  	const x = vec3( x_immutable ).toVar();
  	const x2 = vec3( x.mul( x ) ).toVar();
  	const x4 = vec3( x2.mul( x2 ) ).toVar();

  	return float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );

  } );

  const agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	const colortone = vec3( color ).toVar();
  	const AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );
  	const AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );
  	const AgxMinEv = float( - 12.47393 );
  	const AgxMaxEv = float( 4.026069 );
  	colortone.mulAssign( exposure );
  	colortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );
  	colortone.assign( AgXInsetMatrix.mul( colortone ) );
  	colortone.assign( max$1( colortone, 1e-10 ) );
  	colortone.assign( log2( colortone ) );
  	colortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );
  	colortone.assign( clamp( colortone, 0.0, 1.0 ) );
  	colortone.assign( agxDefaultContrastApprox( colortone ) );
  	colortone.assign( AgXOutsetMatrix.mul( colortone ) );
  	colortone.assign( pow( max$1( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );
  	colortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );
  	colortone.assign( clamp( colortone, 0.0, 1.0 ) );

  	return colortone;

  } ).setLayout( {
  	name: 'agxToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  // https://modelviewer.dev/examples/tone-mapping

  const neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {

  	const StartCompression = float( 0.8 - 0.04 );
  	const Desaturation = float( 0.15 );

  	color = color.mul( exposure );

  	const x = min$1( color.r, min$1( color.g, color.b ) );
  	const offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );

  	color.subAssign( offset );

  	const peak = max$1( color.r, max$1( color.g, color.b ) );

  	If( peak.lessThan( StartCompression ), () => {

  		return color;

  	} );

  	const d = sub( 1, StartCompression );
  	const newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );
  	color.mulAssign( newPeak.div( peak ) );
  	const g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );

  	return mix$2( color, vec3( newPeak ), g );

  } ).setLayout( {
  	name: 'neutralToneMapping',
  	type: 'vec3',
  	inputs: [
  		{ name: 'color', type: 'vec3' },
  		{ name: 'exposure', type: 'float' }
  	]
  } );

  class CodeNode extends Node {

  	static get type() {

  		return 'CodeNode';

  	}

  	constructor( code = '', includes = [], language = '' ) {

  		super( 'code' );

  		this.isCodeNode = true;

  		this.code = code;
  		this.language = language;

  		this.includes = includes;

  	}

  	isGlobal() {

  		return true;

  	}

  	setIncludes( includes ) {

  		this.includes = includes;

  		return this;

  	}

  	getIncludes( /*builder*/ ) {

  		return this.includes;

  	}

  	generate( builder ) {

  		const includes = this.getIncludes( builder );

  		for ( const include of includes ) {

  			include.build( builder );

  		}

  		const nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );
  		nodeCode.code = this.code;

  		return nodeCode.code;

  	}

  	serialize( data ) {

  		super.serialize( data );

  		data.code = this.code;
  		data.language = this.language;

  	}

  	deserialize( data ) {

  		super.deserialize( data );

  		this.code = data.code;
  		this.language = data.language;

  	}

  }

  class FunctionNode extends CodeNode {

  	static get type() {

  		return 'FunctionNode';

  	}

  	constructor( code = '', includes = [], language = '' ) {

  		super( code, includes, language );

  	}

  	getNodeType( builder ) {

  		return this.getNodeFunction( builder ).type;

  	}

  	getInputs( builder ) {

  		return this.getNodeFunction( builder ).inputs;

  	}

  	getNodeFunction( builder ) {

  		const nodeData = builder.getDataFromNode( this );

  		let nodeFunction = nodeData.nodeFunction;

  		if ( nodeFunction === undefined ) {

  			nodeFunction = builder.parser.parseFunction( this.code );

  			nodeData.nodeFunction = nodeFunction;

  		}

  		return nodeFunction;

  	}

  	generate( builder, output ) {

  		super.generate( builder );

  		const nodeFunction = this.getNodeFunction( builder );

  		const name = nodeFunction.name;
  		const type = nodeFunction.type;

  		const nodeCode = builder.getCodeFromNode( this, type );

  		if ( name !== '' ) {

  			// use a custom property name

  			nodeCode.name = name;

  		}

  		const propertyName = builder.getPropertyName( nodeCode );

  		const code = this.getNodeFunction( builder ).getCode( propertyName );

  		nodeCode.code = code + '\n';

  		if ( output === 'property' ) {

  			return propertyName;

  		} else {

  			return builder.format( `${ propertyName }()`, type, output );

  		}

  	}

  }

  class FogNode extends Node {

  	static get type() {

  		return 'FogNode';

  	}

  	constructor( colorNode, factorNode ) {

  		super( 'float' );

  		this.isFogNode = true;

  		this.colorNode = colorNode;
  		this.factorNode = factorNode;

  	}

  	getViewZNode( builder ) {

  		let viewZ;

  		const getViewZ = builder.context.getViewZ;

  		if ( getViewZ !== undefined ) {

  			viewZ = getViewZ( this );

  		}

  		return ( viewZ || positionView.z ).negate();

  	}

  	setup() {

  		return this.factorNode;

  	}

  }

  class FogRangeNode extends FogNode {

  	static get type() {

  		return 'FogRangeNode';

  	}

  	constructor( colorNode, nearNode, farNode ) {

  		super( colorNode );

  		this.isFogRangeNode = true;

  		this.nearNode = nearNode;
  		this.farNode = farNode;

  	}

  	setup( builder ) {

  		const viewZ = this.getViewZNode( builder );

  		return smoothstep( this.nearNode, this.farNode, viewZ );

  	}

  }

  const rangeFog = /*@__PURE__*/ nodeProxy( FogRangeNode );

  class FogExp2Node extends FogNode {

  	static get type() {

  		return 'FogExp2Node';

  	}

  	constructor( colorNode, densityNode ) {

  		super( colorNode );

  		this.isFogExp2Node = true;

  		this.densityNode = densityNode;

  	}

  	setup( builder ) {

  		const viewZ = this.getViewZNode( builder );
  		const density = this.densityNode;

  		return density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();

  	}

  }

  const densityFog = /*@__PURE__*/ nodeProxy( FogExp2Node );

  class BarrierNode extends Node {

  	constructor( scope ) {

  		super();

  		this.scope = scope;

  	}

  	generate( builder ) {

  		const { scope } = this;
  		const { renderer } = builder;

  		if ( renderer.backend.isWebGLBackend === true ) {

  			builder.addFlowCode( `\t// ${scope}Barrier \n` );

  		} else {

  			builder.addLineFlowCode( `${scope}Barrier()`, this );

  		}

  	}

  }

  nodeProxy( BarrierNode );

  class AtomicFunctionNode extends TempNode {

  	static get type() {

  		return 'AtomicFunctionNode';

  	}

  	constructor( method, pointerNode, valueNode, storeNode = null ) {

  		super( 'uint' );

  		this.method = method;

  		this.pointerNode = pointerNode;
  		this.valueNode = valueNode;
  		this.storeNode = storeNode;

  	}

  	getInputType( builder ) {

  		return this.pointerNode.getNodeType( builder );

  	}

  	getNodeType( builder ) {

  		return this.getInputType( builder );

  	}

  	generate( builder ) {

  		const method = this.method;

  		const type = this.getNodeType( builder );
  		const inputType = this.getInputType( builder );

  		const a = this.pointerNode;
  		const b = this.valueNode;

  		const params = [];

  		params.push( `&${ a.build( builder, inputType ) }` );
  		params.push( b.build( builder, inputType ) );

  		const methodSnippet = `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`;

  		if ( this.storeNode !== null ) {

  			const varSnippet = this.storeNode.build( builder, inputType );

  			builder.addLineFlowCode( `${varSnippet} = ${methodSnippet}`, this );

  		} else {

  			builder.addLineFlowCode( methodSnippet, this );

  		}

  	}

  }

  AtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';
  AtomicFunctionNode.ATOMIC_STORE = 'atomicStore';
  AtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';
  AtomicFunctionNode.ATOMIC_SUB = 'atomicSub';
  AtomicFunctionNode.ATOMIC_MAX = 'atomicMax';
  AtomicFunctionNode.ATOMIC_MIN = 'atomicMin';
  AtomicFunctionNode.ATOMIC_AND = 'atomicAnd';
  AtomicFunctionNode.ATOMIC_OR = 'atomicOr';
  AtomicFunctionNode.ATOMIC_XOR = 'atomicXor';

  nodeProxy( AtomicFunctionNode );

  let uniformsLib;

  function getLightData( light ) {

  	uniformsLib = uniformsLib || new WeakMap();

  	let uniforms = uniformsLib.get( light );

  	if ( uniforms === undefined ) uniformsLib.set( light, uniforms = {} );

  	return uniforms;

  }

  function lightPosition( light ) {

  	const data = getLightData( light );

  	return data.position || ( data.position = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.matrixWorld ) ) );

  }

  function lightTargetPosition( light ) {

  	const data = getLightData( light );

  	return data.targetPosition || ( data.targetPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.target.matrixWorld ) ) );

  }

  function lightViewPosition( light ) {

  	const data = getLightData( light );

  	return data.viewPosition || ( data.viewPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => {

  		self.value = self.value || new Vector3();
  		self.value.setFromMatrixPosition( light.matrixWorld );

  		self.value.applyMatrix4( camera.matrixWorldInverse );

  	} ) );

  }

  const lightTargetDirection = ( light ) => cameraViewMatrix.transformDirection( lightPosition( light ).sub( lightTargetPosition( light ) ) );

  const sortLights = ( lights ) => {

  	return lights.sort( ( a, b ) => a.id - b.id );

  };

  const getLightNodeById = ( id, lightNodes ) => {

  	for ( const lightNode of lightNodes ) {

  		if ( lightNode.isAnalyticLightNode && lightNode.light.id === id ) {

  			return lightNode;

  		}

  	}

  	return null;

  };

  const _lightsNodeRef = /*@__PURE__*/ new WeakMap();

  class LightsNode extends Node {

  	static get type() {

  		return 'LightsNode';

  	}

  	constructor() {

  		super( 'vec3' );

  		this.totalDiffuseNode = vec3().toVar( 'totalDiffuse' );
  		this.totalSpecularNode = vec3().toVar( 'totalSpecular' );

  		this.outgoingLightNode = vec3().toVar( 'outgoingLight' );

  		this._lights = [];

  		this._lightNodes = null;
  		this._lightNodesHash = null;

  		this.global = true;

  	}

  	getHash( builder ) {

  		if ( this._lightNodesHash === null ) {

  			if ( this._lightNodes === null ) this.setupLightsNode( builder );

  			const hash = [];

  			for ( const lightNode of this._lightNodes ) {

  				hash.push( lightNode.getSelf().getHash() );

  			}

  			this._lightNodesHash = 'lights-' + hash.join( ',' );

  		}

  		return this._lightNodesHash;

  	}

  	analyze( builder ) {

  		const properties = builder.getDataFromNode( this );

  		for ( const node of properties.nodes ) {

  			node.build( builder );

  		}

  	}

  	setupLightsNode( builder ) {

  		const lightNodes = [];

  		const previousLightNodes = this._lightNodes;

  		const lights = sortLights( this._lights );
  		const nodeLibrary = builder.renderer.library;

  		for ( const light of lights ) {

  			if ( light.isNode ) {

  				lightNodes.push( nodeObject( light ) );

  			} else {

  				let lightNode = null;

  				if ( previousLightNodes !== null ) {

  					lightNode = getLightNodeById( light.id, previousLightNodes ); // resuse existing light node

  				}

  				if ( lightNode === null ) {

  					const lightNodeClass = nodeLibrary.getLightNodeClass( light.constructor );

  					if ( lightNodeClass === null ) {

  						console.warn( `LightsNode.setupNodeLights: Light node not found for ${ light.constructor.name }` );
  						continue;

  					}

  					let lightNode = null;

  					if ( ! _lightsNodeRef.has( light ) ) {

  						lightNode = nodeObject( new lightNodeClass( light ) );
  						_lightsNodeRef.set( light, lightNode );

  					} else {

  						lightNode = _lightsNodeRef.get( light );

  					}

  					lightNodes.push( lightNode );

  				}

  			}

  		}

  		this._lightNodes = lightNodes;

  	}

  	setupLights( builder, lightNodes ) {

  		for ( const lightNode of lightNodes ) {

  			lightNode.build( builder );

  		}

  	}

  	setup( builder ) {

  		if ( this._lightNodes === null ) this.setupLightsNode( builder );

  		const context = builder.context;
  		const lightingModel = context.lightingModel;

  		let outgoingLightNode = this.outgoingLightNode;

  		if ( lightingModel ) {

  			const { _lightNodes, totalDiffuseNode, totalSpecularNode } = this;

  			context.outgoingLight = outgoingLightNode;

  			const stack = builder.addStack();

  			//

  			const properties = builder.getDataFromNode( this );
  			properties.nodes = stack.nodes;

  			//

  			lightingModel.start( context, stack, builder );

  			// lights

  			this.setupLights( builder, _lightNodes );

  			//

  			lightingModel.indirect( context, stack, builder );

  			//

  			const { backdrop, backdropAlpha } = context;
  			const { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context.reflectedLight;

  			let totalDiffuse = directDiffuse.add( indirectDiffuse );

  			if ( backdrop !== null ) {

  				if ( backdropAlpha !== null ) {

  					totalDiffuse = vec3( backdropAlpha.mix( totalDiffuse, backdrop ) );

  				} else {

  					totalDiffuse = vec3( backdrop );

  				}

  				context.material.transparent = true;

  			}

  			totalDiffuseNode.assign( totalDiffuse );
  			totalSpecularNode.assign( directSpecular.add( indirectSpecular ) );

  			outgoingLightNode.assign( totalDiffuseNode.add( totalSpecularNode ) );

  			//

  			lightingModel.finish( context, stack, builder );

  			//

  			outgoingLightNode = outgoingLightNode.bypass( builder.removeStack() );

  		}

  		return outgoingLightNode;

  	}

  	setLights( lights ) {

  		this._lights = lights;

  		this._lightNodes = null;
  		this._lightNodesHash = null;

  		return this;

  	}

  	getLights() {

  		return this._lights;

  	}

  	get hasLights() {

  		return this._lights.length > 0;

  	}

  }

  const BasicShadowMap = Fn( ( { depthTexture, shadowCoord } ) => {

  	return texture( depthTexture, shadowCoord.xy ).compare( shadowCoord.z );

  } );

  const PCFShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {

  	const depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );

  	const mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );
  	const radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );

  	const texelSize = vec2( 1 ).div( mapSize );
  	const dx0 = texelSize.x.negate().mul( radius );
  	const dy0 = texelSize.y.negate().mul( radius );
  	const dx1 = texelSize.x.mul( radius );
  	const dy1 = texelSize.y.mul( radius );
  	const dx2 = dx0.div( 2 );
  	const dy2 = dy0.div( 2 );
  	const dx3 = dx1.div( 2 );
  	const dy3 = dy1.div( 2 );

  	return add(
  		depthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy, shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),
  		depthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )
  	).mul( 1 / 17 );

  } );

  const PCFSoftShadowMap = Fn( ( { depthTexture, shadowCoord, shadow } ) => {

  	const depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );

  	const mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );

  	const texelSize = vec2( 1 ).div( mapSize );
  	const dx = texelSize.x;
  	const dy = texelSize.y;

  	const uv = shadowCoord.xy;
  	const f = fract( uv.mul( mapSize ).add( 0.5 ) );
  	uv.subAssign( f.mul( texelSize ) );

  	return add(
  		depthCompare( uv, shadowCoord.z ),
  		depthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),
  		depthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),
  		depthCompare( uv.add( texelSize ), shadowCoord.z ),
  		mix$2(
  			depthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),
  			depthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),
  			f.x
  		),
  		mix$2(
  			depthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),
  			depthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),
  			f.x
  		),
  		mix$2(
  			depthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),
  			depthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),
  			f.y
  		),
  		mix$2(
  			depthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),
  			depthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),
  			f.y
  		),
  		mix$2(
  			mix$2(
  				depthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),
  				depthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),
  				f.x
  			),
  			mix$2(
  				depthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),
  				depthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),
  				f.x
  			),
  			f.y
  		)
  	).mul( 1 / 9 );

  } );

  // VSM

  const VSMShadowMapNode = Fn( ( { depthTexture, shadowCoord } ) => {

  	const occlusion = float( 1 ).toVar();

  	const distribution = texture( depthTexture ).uv( shadowCoord.xy ).rg;

  	const hardShadow = step( shadowCoord.z, distribution.x );

  	If( hardShadow.notEqual( float( 1.0 ) ), () => {

  		const distance = shadowCoord.z.sub( distribution.x );
  		const variance = max$1( 0, distribution.y.mul( distribution.y ) );
  		let softnessProbability = variance.div( variance.add( distance.mul( distance ) ) ); // Chebeyshevs inequality
  		softnessProbability = clamp( sub( softnessProbability, 0.3 ).div( 0.95 - 0.3 ) );
  		occlusion.assign( clamp( max$1( hardShadow, softnessProbability ) ) );

  	} );

  	return occlusion;

  } );

  const VSMPassVertical = Fn( ( { samples, radius, size, shadowPass } ) => {

  	const mean = float( 0 ).toVar();
  	const squaredMean = float( 0 ).toVar();

  	const uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );
  	const uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );

  	Loop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {

  		const uvOffset = uvStart.add( float( i ).mul( uvStride ) );

  		const depth = shadowPass.uv( add( screenCoordinate.xy, vec2( 0, uvOffset ).mul( radius ) ).div( size ) ).x;
  		mean.addAssign( depth );
  		squaredMean.addAssign( depth.mul( depth ) );

  	} );

  	mean.divAssign( samples );
  	squaredMean.divAssign( samples );

  	const std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );
  	return vec2( mean, std_dev );

  } );

  const VSMPassHorizontal = Fn( ( { samples, radius, size, shadowPass } ) => {

  	const mean = float( 0 ).toVar();
  	const squaredMean = float( 0 ).toVar();

  	const uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );
  	const uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );

  	Loop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {

  		const uvOffset = uvStart.add( float( i ).mul( uvStride ) );

  		const distribution = shadowPass.uv( add( screenCoordinate.xy, vec2( uvOffset, 0 ).mul( radius ) ).div( size ) );
  		mean.addAssign( distribution.x );
  		squaredMean.addAssign( add( distribution.y.mul( distribution.y ), distribution.x.mul( distribution.x ) ) );

  	} );

  	mean.divAssign( samples );
  	squaredMean.divAssign( samples );

  	const std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );
  	return vec2( mean, std_dev );

  } );

  const _shadowFilterLib = [ BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, VSMShadowMapNode ];

  //

  let _overrideMaterial = null;
  const _quadMesh$1 = /*@__PURE__*/ new QuadMesh();

  class ShadowNode extends Node {

  	static get type() {

  		return 'ShadowNode';

  	}

  	constructor( light, shadow = null ) {

  		super();

  		this.light = light;
  		this.shadow = shadow || light.shadow;

  		this.shadowMap = null;

  		this.vsmShadowMapVertical = null;
  		this.vsmShadowMapHorizontal = null;

  		this.vsmMaterialVertical = null;
  		this.vsmMaterialHorizontal = null;

  		this.updateBeforeType = NodeUpdateType.RENDER;
  		this._node = null;

  		this.isShadowNode = true;

  	}

  	setupShadow( builder ) {

  		const { object, renderer } = builder;

  		if ( _overrideMaterial === null ) {

  			_overrideMaterial = new NodeMaterial();
  			_overrideMaterial.fragmentNode = vec4( 0, 0, 0, 1 );
  			_overrideMaterial.isShadowNodeMaterial = true; // Use to avoid other overrideMaterial override material.fragmentNode unintentionally when using material.shadowNode
  			_overrideMaterial.name = 'ShadowMaterial';

  		}

  		const shadow = this.shadow;
  		const shadowMapType = renderer.shadowMap.type;

  		const depthTexture = new DepthTexture( shadow.mapSize.width, shadow.mapSize.height );
  		depthTexture.compareFunction = LessCompare;

  		const shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );
  		shadowMap.depthTexture = depthTexture;

  		shadow.camera.updateProjectionMatrix();

  		// VSM

  		if ( shadowMapType === VSMShadowMap ) {

  			depthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()

  			this.vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );
  			this.vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType } );

  			const shadowPassVertical = texture( depthTexture );
  			const shadowPassHorizontal = texture( this.vsmShadowMapVertical.texture );

  			const samples = reference( 'blurSamples', 'float', shadow ).setGroup( renderGroup );
  			const radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );
  			const size = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );

  			let material = this.vsmMaterialVertical || ( this.vsmMaterialVertical = new NodeMaterial() );
  			material.fragmentNode = VSMPassVertical( { samples, radius, size, shadowPass: shadowPassVertical } ).context( builder.getSharedContext() );
  			material.name = 'VSMVertical';

  			material = this.vsmMaterialHorizontal || ( this.vsmMaterialHorizontal = new NodeMaterial() );
  			material.fragmentNode = VSMPassHorizontal( { samples, radius, size, shadowPass: shadowPassHorizontal } ).context( builder.getSharedContext() );
  			material.name = 'VSMHorizontal';

  		}

  		//

  		const shadowIntensity = reference( 'intensity', 'float', shadow ).setGroup( renderGroup );
  		const bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );
  		const normalBias = reference( 'normalBias', 'float', shadow ).setGroup( renderGroup );

  		const position = object.material.shadowPositionNode || positionWorld;

  		let shadowCoord = uniform( shadow.matrix ).setGroup( renderGroup ).mul( position.add( transformedNormalWorld.mul( normalBias ) ) );

  		let coordZ;

  		if ( shadow.camera.isOrthographicCamera || renderer.logarithmicDepthBuffer !== true ) {

  			shadowCoord = shadowCoord.xyz.div( shadowCoord.w );

  			coordZ = shadowCoord.z;

  			if ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {

  				coordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Conversion [ 0, 1 ] to [ - 1, 1 ]

  			}

  		} else {

  			const w = shadowCoord.w;
  			shadowCoord = shadowCoord.xy.div( w ); // <-- Only divide X/Y coords since we don't need Z

  			// The normally available "cameraNear" and "cameraFar" nodes cannot be used here because they do not get
  			// updated to use the shadow camera. So, we have to declare our own "local" ones here.
  			// TODO: How do we get the cameraNear/cameraFar nodes to use the shadow camera so we don't have to declare local ones here?
  			const cameraNearLocal = uniform( 'float' ).onRenderUpdate( () => shadow.camera.near );
  			const cameraFarLocal = uniform( 'float' ).onRenderUpdate( () => shadow.camera.far );

  			coordZ = perspectiveDepthToLogarithmicDepth( w, cameraNearLocal, cameraFarLocal );

  		}

  		shadowCoord = vec3(
  			shadowCoord.x,
  			shadowCoord.y.oneMinus(), // follow webgpu standards
  			coordZ.add( bias )
  		);

  		const frustumTest = shadowCoord.x.greaterThanEqual( 0 )
  			.and( shadowCoord.x.lessThanEqual( 1 ) )
  			.and( shadowCoord.y.greaterThanEqual( 0 ) )
  			.and( shadowCoord.y.lessThanEqual( 1 ) )
  			.and( shadowCoord.z.lessThanEqual( 1 ) );

  		//

  		const filterFn = shadow.filterNode || _shadowFilterLib[ renderer.shadowMap.type ] || null;

  		if ( filterFn === null ) {

  			throw new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );

  		}

  		const shadowColor = texture( shadowMap.texture, shadowCoord );
  		const shadowNode = frustumTest.select( filterFn( { depthTexture: ( shadowMapType === VSMShadowMap ) ? this.vsmShadowMapHorizontal.texture : depthTexture, shadowCoord, shadow } ), float( 1 ) );

  		this.shadowMap = shadowMap;
  		this.shadow.map = shadowMap;

  		return mix$2( 1, shadowNode.rgb.mix( shadowColor, 1 ), shadowIntensity.mul( shadowColor.a ) );

  	}

  	setup( builder ) {

  		if ( builder.renderer.shadowMap.enabled === false ) return;

  		return this._node !== null ? this._node : ( this._node = this.setupShadow( builder ) );

  	}

  	updateShadow( frame ) {

  		const { shadowMap, light, shadow } = this;
  		const { renderer, scene, camera } = frame;

  		const shadowType = renderer.shadowMap.type;

  		const depthVersion = shadowMap.depthTexture.version;
  		this._depthVersionCached = depthVersion;

  		const currentOverrideMaterial = scene.overrideMaterial;

  		scene.overrideMaterial = _overrideMaterial;

  		shadowMap.setSize( shadow.mapSize.width, shadow.mapSize.height );

  		shadow.updateMatrices( light );
  		shadow.camera.layers.mask = camera.layers.mask;

  		const currentRenderTarget = renderer.getRenderTarget();
  		const currentRenderObjectFunction = renderer.getRenderObjectFunction();

  		renderer.setRenderObjectFunction( ( object, ...params ) => {

  			if ( object.castShadow === true || ( object.receiveShadow && shadowType === VSMShadowMap ) ) {

  				renderer.renderObject( object, ...params );

  			}

  		} );

  		renderer.setRenderTarget( shadowMap );
  		renderer.render( scene, shadow.camera );

  		renderer.setRenderObjectFunction( currentRenderObjectFunction );

  		// vsm blur pass

  		if ( light.isPointLight !== true && shadowType === VSMShadowMap ) {

  			this.vsmPass( renderer );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  		scene.overrideMaterial = currentOverrideMaterial;

  	}

  	vsmPass( renderer ) {

  		const { shadow } = this;

  		this.vsmShadowMapVertical.setSize( shadow.mapSize.width, shadow.mapSize.height );
  		this.vsmShadowMapHorizontal.setSize( shadow.mapSize.width, shadow.mapSize.height );

  		renderer.setRenderTarget( this.vsmShadowMapVertical );
  		_quadMesh$1.material = this.vsmMaterialVertical;
  		_quadMesh$1.render( renderer );

  		renderer.setRenderTarget( this.vsmShadowMapHorizontal );
  		_quadMesh$1.material = this.vsmMaterialHorizontal;
  		_quadMesh$1.render( renderer );

  	}

  	dispose() {

  		this.shadowMap.dispose();
  		this.shadowMap = null;

  		if ( this.vsmShadowMapVertical !== null ) {

  			this.vsmShadowMapVertical.dispose();
  			this.vsmShadowMapVertical = null;

  			this.vsmMaterialVertical.dispose();
  			this.vsmMaterialVertical = null;

  		}

  		if ( this.vsmShadowMapHorizontal !== null ) {

  			this.vsmShadowMapHorizontal.dispose();
  			this.vsmShadowMapHorizontal = null;

  			this.vsmMaterialHorizontal.dispose();
  			this.vsmMaterialHorizontal = null;

  		}

  		this.updateBeforeType = NodeUpdateType.NONE;

  	}

  	updateBefore( frame ) {

  		const { shadow } = this;

  		const needsUpdate = shadow.needsUpdate || shadow.autoUpdate;

  		if ( needsUpdate ) {

  			this.updateShadow( frame );

  			if ( this.shadowMap.depthTexture.version === this._depthVersionCached ) {

  				shadow.needsUpdate = false;

  			}

  		}

  	}

  }

  const shadow = ( light, shadow ) => nodeObject( new ShadowNode( light, shadow ) );

  class AnalyticLightNode extends LightingNode {

  	static get type() {

  		return 'AnalyticLightNode';

  	}

  	constructor( light = null ) {

  		super();

  		this.updateType = NodeUpdateType.FRAME;

  		this.light = light;

  		this.color = new Color();
  		this.colorNode = uniform( this.color ).setGroup( renderGroup );

  		this.baseColorNode = null;

  		this.shadowNode = null;
  		this.shadowColorNode = null;

  		this.isAnalyticLightNode = true;

  	}

  	getCacheKey() {

  		return hash$1( super.getCacheKey(), this.light.id, this.light.castShadow ? 1 : 0 );

  	}

  	getHash() {

  		return this.light.uuid;

  	}

  	setupShadow( builder ) {

  		const { renderer } = builder;

  		if ( renderer.shadowMap.enabled === false ) return;

  		let shadowColorNode = this.shadowColorNode;

  		if ( shadowColorNode === null ) {

  			const customShadowNode = this.light.shadow.shadowNode;

  			let shadowNode;

  			if ( customShadowNode !== undefined ) {

  				shadowNode = nodeObject( customShadowNode );

  			} else {

  				shadowNode = shadow( this.light );

  			}

  			this.shadowNode = shadowNode;

  			this.shadowColorNode = shadowColorNode = this.colorNode.mul( shadowNode );

  			this.baseColorNode = this.colorNode;

  		}

  		//

  		this.colorNode = shadowColorNode;

  	}

  	setup( builder ) {

  		this.colorNode = this.baseColorNode || this.colorNode;

  		if ( this.light.castShadow ) {

  			if ( builder.object.receiveShadow ) {

  				this.setupShadow( builder );

  			}

  		} else if ( this.shadowNode !== null ) {

  			this.shadowNode.dispose();

  		}

  	}

  	update( /*frame*/ ) {

  		const { light } = this;

  		this.color.copy( light.color ).multiplyScalar( light.intensity );

  	}

  }

  const getDistanceAttenuation = /*@__PURE__*/ Fn( ( inputs ) => {

  	const { lightDistance, cutoffDistance, decayExponent } = inputs;

  	// based upon Frostbite 3 Moving to Physically-based Rendering
  	// page 32, equation 26: E[window1]
  	// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  	const distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();

  	return cutoffDistance.greaterThan( 0 ).select(
  		distanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),
  		distanceFalloff
  	);

  } ); // validated

  const directPointLight = Fn( ( { color, lightViewPosition, cutoffDistance, decayExponent }, builder ) => {

  	const lightingModel = builder.context.lightingModel;

  	const lVector = lightViewPosition.sub( positionView ); // @TODO: Add it into LightNode

  	const lightDirection = lVector.normalize();
  	const lightDistance = lVector.length();

  	const lightAttenuation = getDistanceAttenuation( {
  		lightDistance,
  		cutoffDistance,
  		decayExponent
  	} );

  	const lightColor = color.mul( lightAttenuation );

  	const reflectedLight = builder.context.reflectedLight;

  	lightingModel.direct( {
  		lightDirection,
  		lightColor,
  		reflectedLight
  	}, builder.stack, builder );

  } );

  class PointLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'PointLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  		this.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );
  		this.decayExponentNode = uniform( 0 ).setGroup( renderGroup );

  	}

  	update( frame ) {

  		const { light } = this;

  		super.update( frame );

  		this.cutoffDistanceNode.value = light.distance;
  		this.decayExponentNode.value = light.decay;

  	}

  	setup() {

  		directPointLight( {
  			color: this.colorNode,
  			lightViewPosition: lightViewPosition( this.light ),
  			cutoffDistance: this.cutoffDistanceNode,
  			decayExponent: this.decayExponentNode
  		} ).append();

  	}

  }

  const getShIrradianceAt = /*@__PURE__*/ Fn( ( [ normal, shCoefficients ] ) => {

  	// normal is assumed to have unit length

  	const x = normal.x, y = normal.y, z = normal.z;

  	// band 0
  	let result = shCoefficients.element( 0 ).mul( 0.886227 );

  	// band 1
  	result = result.add( shCoefficients.element( 1 ).mul( 2.0 * 0.511664 ).mul( y ) );
  	result = result.add( shCoefficients.element( 2 ).mul( 2.0 * 0.511664 ).mul( z ) );
  	result = result.add( shCoefficients.element( 3 ).mul( 2.0 * 0.511664 ).mul( x ) );

  	// band 2
  	result = result.add( shCoefficients.element( 4 ).mul( 2.0 * 0.429043 ).mul( x ).mul( y ) );
  	result = result.add( shCoefficients.element( 5 ).mul( 2.0 * 0.429043 ).mul( y ).mul( z ) );
  	result = result.add( shCoefficients.element( 6 ).mul( z.mul( z ).mul( 0.743125 ).sub( 0.247708 ) ) );
  	result = result.add( shCoefficients.element( 7 ).mul( 2.0 * 0.429043 ).mul( x ).mul( z ) );
  	result = result.add( shCoefficients.element( 8 ).mul( 0.429043 ).mul( mul( x, x ).sub( mul( y, y ) ) ) );

  	return result;

  } );

  const _clearColor$1 = /*@__PURE__*/ new Color4();

  class Background extends DataMap {

  	constructor( renderer, nodes ) {

  		super();

  		this.renderer = renderer;
  		this.nodes = nodes;

  	}

  	update( scene, renderList, renderContext ) {

  		const renderer = this.renderer;
  		const background = this.nodes.getBackgroundNode( scene ) || scene.background;

  		let forceClear = false;

  		if ( background === null ) {

  			// no background settings, use clear color configuration from the renderer

  			renderer._clearColor.getRGB( _clearColor$1, LinearSRGBColorSpace );
  			_clearColor$1.a = renderer._clearColor.a;

  		} else if ( background.isColor === true ) {

  			// background is an opaque color

  			background.getRGB( _clearColor$1, LinearSRGBColorSpace );
  			_clearColor$1.a = 1;

  			forceClear = true;

  		} else if ( background.isNode === true ) {

  			const sceneData = this.get( scene );
  			const backgroundNode = background;

  			_clearColor$1.copy( renderer._clearColor );

  			let backgroundMesh = sceneData.backgroundMesh;

  			if ( backgroundMesh === undefined ) {

  				const backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {
  					// @TODO: Add Texture2D support using node context
  					getUV: () => backgroundRotation.mul( normalWorld ),
  					getTextureLevel: () => backgroundBlurriness
  				} );

  				let viewProj = modelViewProjection();
  				viewProj = viewProj.setZ( viewProj.w );

  				const nodeMaterial = new NodeMaterial();
  				nodeMaterial.name = 'Background.material';
  				nodeMaterial.side = BackSide;
  				nodeMaterial.depthTest = false;
  				nodeMaterial.depthWrite = false;
  				nodeMaterial.fog = false;
  				nodeMaterial.lights = false;
  				nodeMaterial.vertexNode = viewProj;
  				nodeMaterial.colorNode = backgroundMeshNode;

  				sceneData.backgroundMeshNode = backgroundMeshNode;
  				sceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );
  				backgroundMesh.frustumCulled = false;
  				backgroundMesh.name = 'Background.mesh';

  				backgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {

  					this.matrixWorld.copyPosition( camera.matrixWorld );

  				};

  			}

  			const backgroundCacheKey = backgroundNode.getCacheKey();

  			if ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {

  				sceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );
  				sceneData.backgroundMeshNode.needsUpdate = true;

  				backgroundMesh.material.needsUpdate = true;

  				sceneData.backgroundCacheKey = backgroundCacheKey;

  			}

  			renderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null );

  		} else {

  			console.error( 'THREE.Renderer: Unsupported background configuration.', background );

  		}

  		//

  		if ( renderer.autoClear === true || forceClear === true ) {

  			const clearColorValue = renderContext.clearColorValue;

  			clearColorValue.r = _clearColor$1.r;
  			clearColorValue.g = _clearColor$1.g;
  			clearColorValue.b = _clearColor$1.b;
  			clearColorValue.a = _clearColor$1.a;

  			// premultiply alpha

  			if ( renderer.backend.isWebGLBackend === true || renderer.alpha === true ) {

  				clearColorValue.r *= clearColorValue.a;
  				clearColorValue.g *= clearColorValue.a;
  				clearColorValue.b *= clearColorValue.a;

  			}

  			//

  			renderContext.depthClearValue = renderer._clearDepth;
  			renderContext.stencilClearValue = renderer._clearStencil;

  			renderContext.clearColor = renderer.autoClearColor === true;
  			renderContext.clearDepth = renderer.autoClearDepth === true;
  			renderContext.clearStencil = renderer.autoClearStencil === true;

  		} else {

  			renderContext.clearColor = false;
  			renderContext.clearDepth = false;
  			renderContext.clearStencil = false;

  		}

  	}

  }

  let _id$5 = 0;

  class BindGroup {

  	constructor( name = '', bindings = [], index = 0, bindingsReference = [] ) {

  		this.name = name;
  		this.bindings = bindings;
  		this.index = index;
  		this.bindingsReference = bindingsReference;

  		this.id = _id$5 ++;

  	}

  }

  class NodeBuilderState {

  	constructor( vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, monitor, transforms = [] ) {

  		this.vertexShader = vertexShader;
  		this.fragmentShader = fragmentShader;
  		this.computeShader = computeShader;
  		this.transforms = transforms;

  		this.nodeAttributes = nodeAttributes;
  		this.bindings = bindings;

  		this.updateNodes = updateNodes;
  		this.updateBeforeNodes = updateBeforeNodes;
  		this.updateAfterNodes = updateAfterNodes;

  		this.monitor = monitor;

  		this.usedTimes = 0;

  	}

  	createBindings() {

  		const bindings = [];

  		for ( const instanceGroup of this.bindings ) {

  			const shared = instanceGroup.bindings[ 0 ].groupNode.shared;

  			if ( shared !== true ) {

  				const bindingsGroup = new BindGroup( instanceGroup.name, [], instanceGroup.index, instanceGroup );
  				bindings.push( bindingsGroup );

  				for ( const instanceBinding of instanceGroup.bindings ) {

  					bindingsGroup.bindings.push( instanceBinding.clone() );

  				}

  			} else {

  				bindings.push( instanceGroup );

  			}

  		}

  		return bindings;

  	}

  }

  class NodeAttribute {

  	constructor( name, type, node = null ) {

  		this.isNodeAttribute = true;

  		this.name = name;
  		this.type = type;
  		this.node = node;

  	}

  }

  class NodeUniform {

  	constructor( name, type, node ) {

  		this.isNodeUniform = true;

  		this.name = name;
  		this.type = type;
  		this.node = node.getSelf();

  	}

  	get value() {

  		return this.node.value;

  	}

  	set value( val ) {

  		this.node.value = val;

  	}

  	get id() {

  		return this.node.id;

  	}

  	get groupNode() {

  		return this.node.groupNode;

  	}

  }

  class NodeVar {

  	constructor( name, type ) {

  		this.isNodeVar = true;

  		this.name = name;
  		this.type = type;

  	}

  }

  class NodeVarying extends NodeVar {

  	constructor( name, type ) {

  		super( name, type );

  		this.needsInterpolation = false;

  		this.isNodeVarying = true;

  	}

  }

  class NodeCode {

  	constructor( name, type, code = '' ) {

  		this.name = name;
  		this.type = type;
  		this.code = code;

  		Object.defineProperty( this, 'isNodeCode', { value: true } );

  	}

  }

  let id = 0;

  class NodeCache {

  	constructor( parent = null ) {

  		this.id = id ++;
  		this.nodesData = new WeakMap();

  		this.parent = parent;

  	}

  	getData( node ) {

  		let data = this.nodesData.get( node );

  		if ( data === undefined && this.parent !== null ) {

  			data = this.parent.getData( node );

  		}

  		return data;

  	}

  	setData( node, data ) {

  		this.nodesData.set( node, data );

  	}

  }

  class Uniform {

  	constructor( name, value ) {

  		this.name = name;
  		this.value = value;

  		this.boundary = 0; // used to build the uniform buffer according to the STD140 layout
  		this.itemSize = 0;

  		this.offset = 0; // this property is set by WebGPUUniformsGroup and marks the start position in the uniform buffer

  	}

  	setValue( value ) {

  		this.value = value;

  	}

  	getValue() {

  		return this.value;

  	}

  }

  class NumberUniform extends Uniform {

  	constructor( name, value = 0 ) {

  		super( name, value );

  		this.isNumberUniform = true;

  		this.boundary = 4;
  		this.itemSize = 1;

  	}

  }

  class Vector2Uniform extends Uniform {

  	constructor( name, value = new Vector2() ) {

  		super( name, value );

  		this.isVector2Uniform = true;

  		this.boundary = 8;
  		this.itemSize = 2;

  	}

  }

  class Vector3Uniform extends Uniform {

  	constructor( name, value = new Vector3() ) {

  		super( name, value );

  		this.isVector3Uniform = true;

  		this.boundary = 16;
  		this.itemSize = 3;

  	}

  }

  class Vector4Uniform extends Uniform {

  	constructor( name, value = new Vector4() ) {

  		super( name, value );

  		this.isVector4Uniform = true;

  		this.boundary = 16;
  		this.itemSize = 4;

  	}

  }

  class ColorUniform extends Uniform {

  	constructor( name, value = new Color() ) {

  		super( name, value );

  		this.isColorUniform = true;

  		this.boundary = 16;
  		this.itemSize = 3;

  	}

  }

  class Matrix3Uniform extends Uniform {

  	constructor( name, value = new Matrix3() ) {

  		super( name, value );

  		this.isMatrix3Uniform = true;

  		this.boundary = 48;
  		this.itemSize = 12;

  	}

  }

  class Matrix4Uniform extends Uniform {

  	constructor( name, value = new Matrix4() ) {

  		super( name, value );

  		this.isMatrix4Uniform = true;

  		this.boundary = 64;
  		this.itemSize = 16;

  	}

  }

  class NumberNodeUniform extends NumberUniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class Vector2NodeUniform extends Vector2Uniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class Vector3NodeUniform extends Vector3Uniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class Vector4NodeUniform extends Vector4Uniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class ColorNodeUniform extends ColorUniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class Matrix3NodeUniform extends Matrix3Uniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  class Matrix4NodeUniform extends Matrix4Uniform {

  	constructor( nodeUniform ) {

  		super( nodeUniform.name, nodeUniform.value );

  		this.nodeUniform = nodeUniform;

  	}

  	getValue() {

  		return this.nodeUniform.value;

  	}

  }

  const LOD_MIN = 4;

  // The standard deviations (radians) associated with the extra mips. These are
  // chosen to approximate a Trowbridge-Reitz distribution function times the
  // geometric shadowing function. These sigma values squared must match the
  // variance #defines in cube_uv_reflection_fragment.glsl.js.
  const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

  // The maximum length of the blur for loop. Smaller sigmas will use fewer
  // samples and exit early, but not recompile the shader.
  const MAX_SAMPLES = 20;

  const _flatCamera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
  const _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );
  const _clearColor = /*@__PURE__*/ new Color();
  let _oldTarget = null;
  let _oldActiveCubeFace = 0;
  let _oldActiveMipmapLevel = 0;

  // Golden Ratio
  const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
  const INV_PHI = 1 / PHI;

  // Vertices of a dodecahedron (except the opposites, which represent the
  // same axis), used as axis directions evenly spread on a sphere.
  const _axisDirections = [
  	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),
  	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
  	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
  	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
  	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
  	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
  	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
  	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
  	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
  	/*@__PURE__*/ new Vector3( 1, 1, 1 )
  ];

  //

  // WebGPU Face indices
  const _faceLib = [
  	3, 1, 5,
  	0, 4, 2
  ];

  const direction = getDirection( uv(), attribute( 'faceIndex' ) ).normalize();
  const outputDirection = vec3( direction.x, direction.y.negate(), direction.z );

  /**
   * This class generates a Prefiltered, Mipmapped Radiance Environment Map
   * (PMREM) from a cubeMap environment texture. This allows different levels of
   * blur to be quickly accessed based on material roughness. It is packed into a
   * special CubeUV format that allows us to perform custom interpolation so that
   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
   * chain, it only goes down to the LOD_MIN level (above), and then creates extra
   * even more filtered 'mips' at the same LOD_MIN resolution, associated with
   * higher roughness levels. In this way we maintain resolution to smoothly
   * interpolate diffuse lighting while limiting sampling computation.
   *
   * Paper: Fast, Accurate Image-Based Lighting
   * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
  */

  class PMREMGenerator {

  	constructor( renderer ) {

  		this._renderer = renderer;
  		this._pingPongRenderTarget = null;

  		this._lodMax = 0;
  		this._cubeSize = 0;
  		this._lodPlanes = [];
  		this._sizeLods = [];
  		this._sigmas = [];
  		this._lodMeshes = [];

  		this._blurMaterial = null;
  		this._cubemapMaterial = null;
  		this._equirectMaterial = null;
  		this._backgroundBox = null;

  	}

  	/**
  	 * Generates a PMREM from a supplied Scene, which can be faster than using an
  	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
  	 * in radians to be applied to the scene before PMREM generation. Optional near
  	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
  	 * is placed at the origin).
  	 */
  	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

  		_oldTarget = this._renderer.getRenderTarget();
  		_oldActiveCubeFace = this._renderer.getActiveCubeFace();
  		_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();

  		this._setSize( 256 );

  		const cubeUVRenderTarget = this._allocateTargets();
  		cubeUVRenderTarget.depthBuffer = true;

  		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

  		if ( sigma > 0 ) {

  			this._blur( cubeUVRenderTarget, 0, 0, sigma );

  		}

  		this._applyPMREM( cubeUVRenderTarget );

  		this._cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	}

  	/**
  	 * Generates a PMREM from an equirectangular texture, which can be either LDR
  	 * or HDR. The ideal input image size is 1k (1024 x 512),
  	 * as this matches best with the 256 x 256 cubemap output.
  	 */
  	fromEquirectangular( equirectangular, renderTarget = null ) {

  		return this._fromTexture( equirectangular, renderTarget );

  	}

  	/**
  	 * Generates a PMREM from an cubemap texture, which can be either LDR
  	 * or HDR. The ideal input cube size is 256 x 256,
  	 * as this matches best with the 256 x 256 cubemap output.
  	 */
  	fromCubemap( cubemap, renderTarget = null ) {

  		return this._fromTexture( cubemap, renderTarget );

  	}

  	/**
  	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	async compileCubemapShader() {

  		if ( this._cubemapMaterial === null ) {

  			this._cubemapMaterial = _getCubemapMaterial();
  			await this._compileMaterial( this._cubemapMaterial );

  		}

  	}

  	/**
  	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	async compileEquirectangularShader() {

  		if ( this._equirectMaterial === null ) {

  			this._equirectMaterial = _getEquirectMaterial();
  			await this._compileMaterial( this._equirectMaterial );

  		}

  	}

  	/**
  	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
  	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
  	 * one of them will cause any others to also become unusable.
  	 */
  	dispose() {

  		this._dispose();

  		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
  		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();
  		if ( this._backgroundBox !== null ) {

  			this._backgroundBox.geometry.dispose();
  			this._backgroundBox.material.dispose();

  		}

  	}

  	// private interface

  	_setSize( cubeSize ) {

  		this._lodMax = Math.floor( Math.log2( cubeSize ) );
  		this._cubeSize = Math.pow( 2, this._lodMax );

  	}

  	_dispose() {

  		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

  		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

  		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

  			this._lodPlanes[ i ].dispose();

  		}

  	}

  	_cleanup( outputTarget ) {

  		this._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );
  		outputTarget.scissorTest = false;
  		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

  	}

  	_fromTexture( texture, renderTarget ) {

  		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

  			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

  		} else { // Equirectangular

  			this._setSize( texture.image.width / 4 );

  		}

  		_oldTarget = this._renderer.getRenderTarget();
  		_oldActiveCubeFace = this._renderer.getActiveCubeFace();
  		_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();

  		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
  		this._textureToCubeUV( texture, cubeUVRenderTarget );
  		this._applyPMREM( cubeUVRenderTarget );
  		this._cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	}

  	_allocateTargets() {

  		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
  		const height = 4 * this._cubeSize;

  		const params = {
  			magFilter: LinearFilter,
  			minFilter: LinearFilter,
  			generateMipmaps: false,
  			type: HalfFloatType,
  			format: RGBAFormat,
  			colorSpace: LinearSRGBColorSpace,
  			//depthBuffer: false
  		};

  		const cubeUVRenderTarget = _createRenderTarget( width, height, params );

  		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

  			if ( this._pingPongRenderTarget !== null ) {

  				this._dispose();

  			}

  			this._pingPongRenderTarget = _createRenderTarget( width, height, params );

  			const { _lodMax } = this;
  			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );

  			this._blurMaterial = _getBlurShader( _lodMax, width, height );

  		}

  		return cubeUVRenderTarget;

  	}

  	async _compileMaterial( material ) {

  		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
  		await this._renderer.compile( tmpMesh, _flatCamera );

  	}

  	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

  		const cubeCamera = _cubeCamera;
  		cubeCamera.near = near;
  		cubeCamera.far = far;

  		// px, py, pz, nx, ny, nz
  		const upSign = [ - 1, 1, - 1, - 1, - 1, - 1 ];
  		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];

  		const renderer = this._renderer;

  		const originalAutoClear = renderer.autoClear;

  		renderer.getClearColor( _clearColor );

  		renderer.autoClear = false;

  		let backgroundBox = this._backgroundBox;

  		if ( backgroundBox === null ) {

  			const backgroundMaterial = new MeshBasicMaterial( {
  				name: 'PMREM.Background',
  				side: BackSide,
  				depthWrite: false,
  				depthTest: false
  			} );

  			backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

  		}

  		let useSolidColor = false;
  		const background = scene.background;

  		if ( background ) {

  			if ( background.isColor ) {

  				backgroundBox.material.color.copy( background );
  				scene.background = null;
  				useSolidColor = true;

  			}

  		} else {

  			backgroundBox.material.color.copy( _clearColor );
  			useSolidColor = true;

  		}

  		renderer.setRenderTarget( cubeUVRenderTarget );

  		renderer.clear();

  		if ( useSolidColor ) {

  			renderer.render( backgroundBox, cubeCamera );

  		}

  		for ( let i = 0; i < 6; i ++ ) {

  			const col = i % 3;

  			if ( col === 0 ) {

  				cubeCamera.up.set( 0, upSign[ i ], 0 );
  				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

  			} else if ( col === 1 ) {

  				cubeCamera.up.set( 0, 0, upSign[ i ] );
  				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

  			} else {

  				cubeCamera.up.set( 0, upSign[ i ], 0 );
  				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

  			}

  			const size = this._cubeSize;

  			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

  			renderer.render( scene, cubeCamera );

  		}

  		renderer.autoClear = originalAutoClear;
  		scene.background = background;

  	}

  	_textureToCubeUV( texture, cubeUVRenderTarget ) {

  		const renderer = this._renderer;

  		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

  		if ( isCubeTexture ) {

  			if ( this._cubemapMaterial === null ) {

  				this._cubemapMaterial = _getCubemapMaterial( texture );

  			}

  		} else {

  			if ( this._equirectMaterial === null ) {

  				this._equirectMaterial = _getEquirectMaterial( texture );

  			}

  		}

  		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
  		material.fragmentNode.value = texture;

  		const mesh = this._lodMeshes[ 0 ];
  		mesh.material = material;

  		const size = this._cubeSize;

  		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

  		renderer.setRenderTarget( cubeUVRenderTarget );
  		renderer.render( mesh, _flatCamera );

  	}

  	_applyPMREM( cubeUVRenderTarget ) {

  		const renderer = this._renderer;
  		const autoClear = renderer.autoClear;
  		renderer.autoClear = false;
  		const n = this._lodPlanes.length;

  		for ( let i = 1; i < n; i ++ ) {

  			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

  			const poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];

  			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

  		}

  		renderer.autoClear = autoClear;

  	}

  	/**
  	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
  	 * vertically and horizontally, but this breaks down on a cube. Here we apply
  	 * the blur latitudinally (around the poles), and then longitudinally (towards
  	 * the poles) to approximate the orthogonally-separable blur. It is least
  	 * accurate at the poles, but still does a decent job.
  	 */
  	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

  		const pingPongRenderTarget = this._pingPongRenderTarget;

  		this._halfBlur(
  			cubeUVRenderTarget,
  			pingPongRenderTarget,
  			lodIn,
  			lodOut,
  			sigma,
  			'latitudinal',
  			poleAxis );

  		this._halfBlur(
  			pingPongRenderTarget,
  			cubeUVRenderTarget,
  			lodOut,
  			lodOut,
  			sigma,
  			'longitudinal',
  			poleAxis );

  	}

  	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

  		const renderer = this._renderer;
  		const blurMaterial = this._blurMaterial;

  		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

  			console.error( 'blur direction must be either latitudinal or longitudinal!' );

  		}

  		// Number of standard deviations at which to cut off the discrete approximation.
  		const STANDARD_DEVIATIONS = 3;

  		const blurMesh = this._lodMeshes[ lodOut ];
  		blurMesh.material = blurMaterial;

  		const blurUniforms = blurMaterial.uniforms;

  		const pixels = this._sizeLods[ lodIn ] - 1;
  		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
  		const sigmaPixels = sigmaRadians / radiansPerPixel;
  		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

  		if ( samples > MAX_SAMPLES ) {

  			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

  		}

  		const weights = [];
  		let sum = 0;

  		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

  			const x = i / sigmaPixels;
  			const weight = Math.exp( - x * x / 2 );
  			weights.push( weight );

  			if ( i === 0 ) {

  				sum += weight;

  			} else if ( i < samples ) {

  				sum += 2 * weight;

  			}

  		}

  		for ( let i = 0; i < weights.length; i ++ ) {

  			weights[ i ] = weights[ i ] / sum;

  		}

  		targetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;

  		blurUniforms.envMap.value = targetIn.texture;
  		blurUniforms.samples.value = samples;
  		blurUniforms.weights.array = weights;
  		blurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;

  		if ( poleAxis ) {

  			blurUniforms.poleAxis.value = poleAxis;

  		}

  		const { _lodMax } = this;
  		blurUniforms.dTheta.value = radiansPerPixel;
  		blurUniforms.mipInt.value = _lodMax - lodIn;

  		const outputSize = this._sizeLods[ lodOut ];
  		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
  		const y = 4 * ( this._cubeSize - outputSize );

  		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
  		renderer.setRenderTarget( targetOut );
  		renderer.render( blurMesh, _flatCamera );

  	}

  }

  function _createPlanes( lodMax ) {

  	const lodPlanes = [];
  	const sizeLods = [];
  	const sigmas = [];
  	const lodMeshes = [];

  	let lod = lodMax;

  	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

  	for ( let i = 0; i < totalLods; i ++ ) {

  		const sizeLod = Math.pow( 2, lod );
  		sizeLods.push( sizeLod );
  		let sigma = 1.0 / sizeLod;

  		if ( i > lodMax - LOD_MIN ) {

  			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

  		} else if ( i === 0 ) {

  			sigma = 0;

  		}

  		sigmas.push( sigma );

  		const texelSize = 1.0 / ( sizeLod - 2 );
  		const min = - texelSize;
  		const max = 1 + texelSize;
  		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

  		const cubeFaces = 6;
  		const vertices = 6;
  		const positionSize = 3;
  		const uvSize = 2;
  		const faceIndexSize = 1;

  		const position = new Float32Array( positionSize * vertices * cubeFaces );
  		const uv = new Float32Array( uvSize * vertices * cubeFaces );
  		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

  		for ( let face = 0; face < cubeFaces; face ++ ) {

  			const x = ( face % 3 ) * 2 / 3 - 1;
  			const y = face > 2 ? 0 : - 1;
  			const coordinates = [
  				x, y, 0,
  				x + 2 / 3, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y + 1, 0
  			];

  			const faceIdx = _faceLib[ face ];
  			position.set( coordinates, positionSize * vertices * faceIdx );
  			uv.set( uv1, uvSize * vertices * faceIdx );
  			const fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];
  			faceIndex.set( fill, faceIndexSize * vertices * faceIdx );

  		}

  		const planes = new BufferGeometry();
  		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
  		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
  		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
  		lodPlanes.push( planes );
  		lodMeshes.push( new Mesh( planes, null ) );

  		if ( lod > LOD_MIN ) {

  			lod --;

  		}

  	}

  	return { lodPlanes, sizeLods, sigmas, lodMeshes };

  }

  function _createRenderTarget( width, height, params ) {

  	const cubeUVRenderTarget = new RenderTarget( width, height, params );
  	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
  	cubeUVRenderTarget.texture.isPMREMTexture = true;
  	cubeUVRenderTarget.scissorTest = true;
  	return cubeUVRenderTarget;

  }

  function _setViewport( target, x, y, width, height ) {

  	target.viewport.set( x, y, width, height );
  	target.scissor.set( x, y, width, height );

  }

  function _getMaterial( type ) {

  	const material = new NodeMaterial();
  	material.depthTest = false;
  	material.depthWrite = false;
  	material.blending = NoBlending;
  	material.name = `PMREM_${ type }`;

  	return material;

  }

  function _getBlurShader( lodMax, width, height ) {

  	const weights = uniformArray( new Array( MAX_SAMPLES ).fill( 0 ) );
  	const poleAxis = uniform( new Vector3( 0, 1, 0 ) );
  	const dTheta = uniform( 0 );
  	const n = float( MAX_SAMPLES );
  	const latitudinal = uniform( 0 ); // false, bool
  	const samples = uniform( 1 ); // int
  	const envMap = texture( null );
  	const mipInt = uniform( 0 ); // int
  	const CUBEUV_TEXEL_WIDTH = float( 1 / width );
  	const CUBEUV_TEXEL_HEIGHT = float( 1 / height );
  	const CUBEUV_MAX_MIP = float( lodMax );

  	const materialUniforms = {
  		n,
  		latitudinal,
  		weights,
  		poleAxis,
  		outputDirection,
  		dTheta,
  		samples,
  		envMap,
  		mipInt,
  		CUBEUV_TEXEL_WIDTH,
  		CUBEUV_TEXEL_HEIGHT,
  		CUBEUV_MAX_MIP
  	};

  	const material = _getMaterial( 'blur' );
  	material.uniforms = materialUniforms; // TODO: Move to outside of the material
  	material.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );

  	return material;

  }

  function _getCubemapMaterial( envTexture ) {

  	const material = _getMaterial( 'cubemap' );
  	material.fragmentNode = cubeTexture( envTexture, outputDirection );

  	return material;

  }

  function _getEquirectMaterial( envTexture ) {

  	const material = _getMaterial( 'equirect' );
  	material.fragmentNode = texture( envTexture, equirectUV( outputDirection ), 0 );

  	return material;

  }

  const rendererCache = new WeakMap();

  const typeFromLength = new Map( [
  	[ 2, 'vec2' ],
  	[ 3, 'vec3' ],
  	[ 4, 'vec4' ],
  	[ 9, 'mat3' ],
  	[ 16, 'mat4' ]
  ] );

  const typeFromArray = new Map( [
  	[ Int8Array, 'int' ],
  	[ Int16Array, 'int' ],
  	[ Int32Array, 'int' ],
  	[ Uint8Array, 'uint' ],
  	[ Uint16Array, 'uint' ],
  	[ Uint32Array, 'uint' ],
  	[ Float32Array, 'float' ]
  ] );

  const toFloat = ( value ) => {

  	if ( /e/g.test( value ) ) {

  		return String( value ).replace( /\+/g, '' );

  	} else {

  		value = Number( value );

  		return value + ( value % 1 ? '' : '.0' );

  	}

  };

  class NodeBuilder {

  	constructor( object, renderer, parser ) {

  		this.object = object;
  		this.material = ( object && object.material ) || null;
  		this.geometry = ( object && object.geometry ) || null;
  		this.renderer = renderer;
  		this.parser = parser;
  		this.scene = null;
  		this.camera = null;

  		this.nodes = [];
  		this.sequentialNodes = [];
  		this.updateNodes = [];
  		this.updateBeforeNodes = [];
  		this.updateAfterNodes = [];
  		this.hashNodes = {};

  		this.monitor = null;

  		this.lightsNode = null;
  		this.environmentNode = null;
  		this.fogNode = null;

  		this.clippingContext = null;

  		this.vertexShader = null;
  		this.fragmentShader = null;
  		this.computeShader = null;

  		this.flowNodes = { vertex: [], fragment: [], compute: [] };
  		this.flowCode = { vertex: '', fragment: '', compute: '' };
  		this.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };
  		this.structs = { vertex: [], fragment: [], compute: [], index: 0 };
  		this.bindings = { vertex: {}, fragment: {}, compute: {} };
  		this.bindingsIndexes = {};
  		this.bindGroups = null;
  		this.attributes = [];
  		this.bufferAttributes = [];
  		this.varyings = [];
  		this.codes = {};
  		this.vars = {};
  		this.flow = { code: '' };
  		this.chaining = [];
  		this.stack = stack();
  		this.stacks = [];
  		this.tab = '\t';

  		this.currentFunctionNode = null;

  		this.context = {
  			material: this.material
  		};

  		this.cache = new NodeCache();
  		this.globalCache = this.cache;

  		this.flowsData = new WeakMap();

  		this.shaderStage = null;
  		this.buildStage = null;

  		this.useComparisonMethod = false;

  	}

  	getBindGroupsCache() {

  		let bindGroupsCache = rendererCache.get( this.renderer );

  		if ( bindGroupsCache === undefined ) {

  			bindGroupsCache = new ChainMap();

  			rendererCache.set( this.renderer, bindGroupsCache );

  		}

  		return bindGroupsCache;

  	}

  	createRenderTarget( width, height, options ) {

  		return new RenderTarget( width, height, options );

  	}

  	createCubeRenderTarget( size, options ) {

  		return new CubeRenderTarget( size, options );

  	}

  	createPMREMGenerator() {

  		// TODO: Move Materials.js to outside of the Nodes.js in order to remove this function and improve tree-shaking support

  		return new PMREMGenerator( this.renderer );

  	}

  	includes( node ) {

  		return this.nodes.includes( node );

  	}

  	_getBindGroup( groupName, bindings ) {

  		const bindGroupsCache = this.getBindGroupsCache();

  		//

  		const bindingsArray = [];

  		let sharedGroup = true;

  		for ( const binding of bindings ) {

  			bindingsArray.push( binding );

  			sharedGroup = sharedGroup && binding.groupNode.shared !== true;

  		}

  		//

  		let bindGroup;

  		if ( sharedGroup ) {

  			bindGroup = bindGroupsCache.get( bindingsArray );

  			if ( bindGroup === undefined ) {

  				bindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );

  				bindGroupsCache.set( bindingsArray, bindGroup );

  			}

  		} else {

  			bindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );

  		}

  		return bindGroup;

  	}

  	getBindGroupArray( groupName, shaderStage ) {

  		const bindings = this.bindings[ shaderStage ];

  		let bindGroup = bindings[ groupName ];

  		if ( bindGroup === undefined ) {

  			if ( this.bindingsIndexes[ groupName ] === undefined ) {

  				this.bindingsIndexes[ groupName ] = { binding: 0, group: Object.keys( this.bindingsIndexes ).length };

  			}

  			bindings[ groupName ] = bindGroup = [];

  		}

  		return bindGroup;

  	}

  	getBindings() {

  		let bindingsGroups = this.bindGroups;

  		if ( bindingsGroups === null ) {

  			const groups = {};
  			const bindings = this.bindings;

  			for ( const shaderStage of shaderStages ) {

  				for ( const groupName in bindings[ shaderStage ] ) {

  					const uniforms = bindings[ shaderStage ][ groupName ];

  					const groupUniforms = groups[ groupName ] || ( groups[ groupName ] = [] );
  					groupUniforms.push( ...uniforms );

  				}

  			}

  			bindingsGroups = [];

  			for ( const groupName in groups ) {

  				const group = groups[ groupName ];

  				const bindingsGroup = this._getBindGroup( groupName, group );

  				bindingsGroups.push( bindingsGroup );

  			}

  			this.bindGroups = bindingsGroups;

  		}

  		return bindingsGroups;

  	}

  	sortBindingGroups() {

  		const bindingsGroups = this.getBindings();

  		bindingsGroups.sort( ( a, b ) => ( a.bindings[ 0 ].groupNode.order - b.bindings[ 0 ].groupNode.order ) );

  		for ( let i = 0; i < bindingsGroups.length; i ++ ) {

  			const bindingGroup = bindingsGroups[ i ];
  			this.bindingsIndexes[ bindingGroup.name ].group = i;

  			bindingGroup.index = i;

  		}

  	}

  	setHashNode( node, hash ) {

  		this.hashNodes[ hash ] = node;

  	}

  	addNode( node ) {

  		if ( this.nodes.includes( node ) === false ) {

  			this.nodes.push( node );

  			this.setHashNode( node, node.getHash( this ) );

  		}

  	}

  	addSequentialNode( node ) {

  		if ( this.sequentialNodes.includes( node ) === false ) {

  			this.sequentialNodes.push( node );

  		}

  	}

  	buildUpdateNodes() {

  		for ( const node of this.nodes ) {

  			const updateType = node.getUpdateType();

  			if ( updateType !== NodeUpdateType.NONE ) {

  				this.updateNodes.push( node.getSelf() );

  			}

  		}

  		for ( const node of this.sequentialNodes ) {

  			const updateBeforeType = node.getUpdateBeforeType();
  			const updateAfterType = node.getUpdateAfterType();

  			if ( updateBeforeType !== NodeUpdateType.NONE ) {

  				this.updateBeforeNodes.push( node.getSelf() );

  			}

  			if ( updateAfterType !== NodeUpdateType.NONE ) {

  				this.updateAfterNodes.push( node.getSelf() );

  			}

  		}

  	}

  	get currentNode() {

  		return this.chaining[ this.chaining.length - 1 ];

  	}

  	isFilteredTexture( texture ) {

  		return ( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||
  			texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter );

  	}

  	addChain( node ) {

  		/*
  		if ( this.chaining.indexOf( node ) !== - 1 ) {

  			console.warn( 'Recursive node: ', node );

  		}
  		*/

  		this.chaining.push( node );

  	}

  	removeChain( node ) {

  		const lastChain = this.chaining.pop();

  		if ( lastChain !== node ) {

  			throw new Error( 'NodeBuilder: Invalid node chaining!' );

  		}

  	}

  	getMethod( method ) {

  		return method;

  	}

  	getNodeFromHash( hash ) {

  		return this.hashNodes[ hash ];

  	}

  	addFlow( shaderStage, node ) {

  		this.flowNodes[ shaderStage ].push( node );

  		return node;

  	}

  	setContext( context ) {

  		this.context = context;

  	}

  	getContext() {

  		return this.context;

  	}

  	getSharedContext() {

  		({ ...this.context });

  		return this.context;

  	}

  	setCache( cache ) {

  		this.cache = cache;

  	}

  	getCache() {

  		return this.cache;

  	}

  	getCacheFromNode( node, parent = true ) {

  		const data = this.getDataFromNode( node );
  		if ( data.cache === undefined ) data.cache = new NodeCache( parent ? this.getCache() : null );

  		return data.cache;

  	}

  	isAvailable( /*name*/ ) {

  		return false;

  	}

  	getVertexIndex() {

  		console.warn( 'Abstract function.' );

  	}

  	getInstanceIndex() {

  		console.warn( 'Abstract function.' );

  	}

  	getDrawIndex() {

  		console.warn( 'Abstract function.' );

  	}

  	getFrontFacing() {

  		console.warn( 'Abstract function.' );

  	}

  	getFragCoord() {

  		console.warn( 'Abstract function.' );

  	}

  	isFlipY() {

  		return false;

  	}

  	increaseUsage( node ) {

  		const nodeData = this.getDataFromNode( node );
  		nodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;

  		return nodeData.usageCount;

  	}

  	generateTexture( /* texture, textureProperty, uvSnippet */ ) {

  		console.warn( 'Abstract function.' );

  	}

  	generateTextureLod( /* texture, textureProperty, uvSnippet, levelSnippet */ ) {

  		console.warn( 'Abstract function.' );

  	}

  	generateConst( type, value = null ) {

  		if ( value === null ) {

  			if ( type === 'float' || type === 'int' || type === 'uint' ) value = 0;
  			else if ( type === 'bool' ) value = false;
  			else if ( type === 'color' ) value = new Color();
  			else if ( type === 'vec2' ) value = new Vector2();
  			else if ( type === 'vec3' ) value = new Vector3();
  			else if ( type === 'vec4' ) value = new Vector4();

  		}

  		if ( type === 'float' ) return toFloat( value );
  		if ( type === 'int' ) return `${ Math.round( value ) }`;
  		if ( type === 'uint' ) return value >= 0 ? `${ Math.round( value ) }u` : '0u';
  		if ( type === 'bool' ) return value ? 'true' : 'false';
  		if ( type === 'color' ) return `${ this.getType( 'vec3' ) }( ${ toFloat( value.r ) }, ${ toFloat( value.g ) }, ${ toFloat( value.b ) } )`;

  		const typeLength = this.getTypeLength( type );

  		const componentType = this.getComponentType( type );

  		const generateConst = value => this.generateConst( componentType, value );

  		if ( typeLength === 2 ) {

  			return `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) } )`;

  		} else if ( typeLength === 3 ) {

  			return `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) } )`;

  		} else if ( typeLength === 4 ) {

  			return `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) }, ${ generateConst( value.w ) } )`;

  		} else if ( typeLength > 4 && value && ( value.isMatrix3 || value.isMatrix4 ) ) {

  			return `${ this.getType( type ) }( ${ value.elements.map( generateConst ).join( ', ' ) } )`;

  		} else if ( typeLength > 4 ) {

  			return `${ this.getType( type ) }()`;

  		}

  		throw new Error( `NodeBuilder: Type '${type}' not found in generate constant attempt.` );

  	}

  	getType( type ) {

  		if ( type === 'color' ) return 'vec3';

  		return type;

  	}

  	hasGeometryAttribute( name ) {

  		return this.geometry && this.geometry.getAttribute( name ) !== undefined;

  	}

  	getAttribute( name, type ) {

  		const attributes = this.attributes;

  		// find attribute

  		for ( const attribute of attributes ) {

  			if ( attribute.name === name ) {

  				return attribute;

  			}

  		}

  		// create a new if no exist

  		const attribute = new NodeAttribute( name, type );

  		attributes.push( attribute );

  		return attribute;

  	}

  	getPropertyName( node/*, shaderStage*/ ) {

  		return node.name;

  	}

  	isVector( type ) {

  		return /vec\d/.test( type );

  	}

  	isMatrix( type ) {

  		return /mat\d/.test( type );

  	}

  	isReference( type ) {

  		return type === 'void' || type === 'property' || type === 'sampler' || type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'depthTexture' || type === 'texture3D';

  	}

  	needsToWorkingColorSpace( /*texture*/ ) {

  		return false;

  	}

  	getComponentTypeFromTexture( texture ) {

  		const type = texture.type;

  		if ( texture.isDataTexture ) {

  			if ( type === IntType ) return 'int';
  			if ( type === UnsignedIntType ) return 'uint';

  		}

  		return 'float';

  	}

  	getElementType( type ) {

  		if ( type === 'mat2' ) return 'vec2';
  		if ( type === 'mat3' ) return 'vec3';
  		if ( type === 'mat4' ) return 'vec4';

  		return this.getComponentType( type );

  	}

  	getComponentType( type ) {

  		type = this.getVectorType( type );

  		if ( type === 'float' || type === 'bool' || type === 'int' || type === 'uint' ) return type;

  		const componentType = /(b|i|u|)(vec|mat)([2-4])/.exec( type );

  		if ( componentType === null ) return null;

  		if ( componentType[ 1 ] === 'b' ) return 'bool';
  		if ( componentType[ 1 ] === 'i' ) return 'int';
  		if ( componentType[ 1 ] === 'u' ) return 'uint';

  		return 'float';

  	}

  	getVectorType( type ) {

  		if ( type === 'color' ) return 'vec3';
  		if ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) return 'vec4';

  		return type;

  	}

  	getTypeFromLength( length, componentType = 'float' ) {

  		if ( length === 1 ) return componentType;

  		const baseType = typeFromLength.get( length );
  		const prefix = componentType === 'float' ? '' : componentType[ 0 ];

  		return prefix + baseType;

  	}

  	getTypeFromArray( array ) {

  		return typeFromArray.get( array.constructor );

  	}

  	getTypeFromAttribute( attribute ) {

  		let dataAttribute = attribute;

  		if ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;

  		const array = dataAttribute.array;
  		const itemSize = attribute.itemSize;
  		const normalized = attribute.normalized;

  		let arrayType;

  		if ( ! ( attribute instanceof Float16BufferAttribute ) && normalized !== true ) {

  			arrayType = this.getTypeFromArray( array );

  		}

  		return this.getTypeFromLength( itemSize, arrayType );

  	}

  	getTypeLength( type ) {

  		const vecType = this.getVectorType( type );
  		const vecNum = /vec([2-4])/.exec( vecType );

  		if ( vecNum !== null ) return Number( vecNum[ 1 ] );
  		if ( vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint' ) return 1;
  		if ( /mat2/.test( type ) === true ) return 4;
  		if ( /mat3/.test( type ) === true ) return 9;
  		if ( /mat4/.test( type ) === true ) return 16;

  		return 0;

  	}

  	getVectorFromMatrix( type ) {

  		return type.replace( 'mat', 'vec' );

  	}

  	changeComponentType( type, newComponentType ) {

  		return this.getTypeFromLength( this.getTypeLength( type ), newComponentType );

  	}

  	getIntegerType( type ) {

  		const componentType = this.getComponentType( type );

  		if ( componentType === 'int' || componentType === 'uint' ) return type;

  		return this.changeComponentType( type, 'int' );

  	}

  	addStack() {

  		this.stack = stack( this.stack );

  		this.stacks.push( getCurrentStack() || this.stack );
  		setCurrentStack( this.stack );

  		return this.stack;

  	}

  	removeStack() {

  		const lastStack = this.stack;
  		this.stack = lastStack.parent;

  		setCurrentStack( this.stacks.pop() );

  		return lastStack;

  	}

  	getDataFromNode( node, shaderStage = this.shaderStage, cache = null ) {

  		cache = cache === null ? ( node.isGlobal( this ) ? this.globalCache : this.cache ) : cache;

  		let nodeData = cache.getData( node );

  		if ( nodeData === undefined ) {

  			nodeData = {};

  			cache.setData( node, nodeData );

  		}

  		if ( nodeData[ shaderStage ] === undefined ) nodeData[ shaderStage ] = {};

  		return nodeData[ shaderStage ];

  	}

  	getNodeProperties( node, shaderStage = 'any' ) {

  		const nodeData = this.getDataFromNode( node, shaderStage );

  		return nodeData.properties || ( nodeData.properties = { outputNode: null } );

  	}

  	getBufferAttributeFromNode( node, type ) {

  		const nodeData = this.getDataFromNode( node );

  		let bufferAttribute = nodeData.bufferAttribute;

  		if ( bufferAttribute === undefined ) {

  			const index = this.uniforms.index ++;

  			bufferAttribute = new NodeAttribute( 'nodeAttribute' + index, type, node );

  			this.bufferAttributes.push( bufferAttribute );

  			nodeData.bufferAttribute = bufferAttribute;

  		}

  		return bufferAttribute;

  	}

  	getStructTypeFromNode( node, shaderStage = this.shaderStage ) {

  		const nodeData = this.getDataFromNode( node, shaderStage );

  		if ( nodeData.structType === undefined ) {

  			const index = this.structs.index ++;

  			node.name = `StructType${ index }`;
  			this.structs[ shaderStage ].push( node );

  			nodeData.structType = node;

  		}

  		return node;

  	}

  	getUniformFromNode( node, type, shaderStage = this.shaderStage, name = null ) {

  		const nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );

  		let nodeUniform = nodeData.uniform;

  		if ( nodeUniform === undefined ) {

  			const index = this.uniforms.index ++;

  			nodeUniform = new NodeUniform( name || ( 'nodeUniform' + index ), type, node );

  			this.uniforms[ shaderStage ].push( nodeUniform );

  			nodeData.uniform = nodeUniform;

  		}

  		return nodeUniform;

  	}

  	getVarFromNode( node, name = null, type = node.getNodeType( this ), shaderStage = this.shaderStage ) {

  		const nodeData = this.getDataFromNode( node, shaderStage );

  		let nodeVar = nodeData.variable;

  		if ( nodeVar === undefined ) {

  			const vars = this.vars[ shaderStage ] || ( this.vars[ shaderStage ] = [] );

  			if ( name === null ) name = 'nodeVar' + vars.length;

  			nodeVar = new NodeVar( name, type );

  			vars.push( nodeVar );

  			nodeData.variable = nodeVar;

  		}

  		return nodeVar;

  	}

  	getVaryingFromNode( node, name = null, type = node.getNodeType( this ) ) {

  		const nodeData = this.getDataFromNode( node, 'any' );

  		let nodeVarying = nodeData.varying;

  		if ( nodeVarying === undefined ) {

  			const varyings = this.varyings;
  			const index = varyings.length;

  			if ( name === null ) name = 'nodeVarying' + index;

  			nodeVarying = new NodeVarying( name, type );

  			varyings.push( nodeVarying );

  			nodeData.varying = nodeVarying;

  		}

  		return nodeVarying;

  	}

  	getCodeFromNode( node, type, shaderStage = this.shaderStage ) {

  		const nodeData = this.getDataFromNode( node );

  		let nodeCode = nodeData.code;

  		if ( nodeCode === undefined ) {

  			const codes = this.codes[ shaderStage ] || ( this.codes[ shaderStage ] = [] );
  			const index = codes.length;

  			nodeCode = new NodeCode( 'nodeCode' + index, type );

  			codes.push( nodeCode );

  			nodeData.code = nodeCode;

  		}

  		return nodeCode;

  	}

  	addFlowCodeHierarchy( node, nodeBlock ) {

  		const { flowCodes, flowCodeBlock } = this.getDataFromNode( node );

  		let needsFlowCode = true;
  		let nodeBlockHierarchy = nodeBlock;

  		while ( nodeBlockHierarchy ) {

  			if ( flowCodeBlock.get( nodeBlockHierarchy ) === true ) {

  				needsFlowCode = false;
  				break;

  			}

  			nodeBlockHierarchy = this.getDataFromNode( nodeBlockHierarchy ).parentNodeBlock;

  		}

  		if ( needsFlowCode ) {

  			for ( const flowCode of flowCodes ) {

  				this.addLineFlowCode( flowCode );

  			}

  		}

  	}

  	addLineFlowCodeBlock( node, code, nodeBlock ) {

  		const nodeData = this.getDataFromNode( node );
  		const flowCodes = nodeData.flowCodes || ( nodeData.flowCodes = [] );
  		const codeBlock = nodeData.flowCodeBlock || ( nodeData.flowCodeBlock = new WeakMap() );

  		flowCodes.push( code );
  		codeBlock.set( nodeBlock, true );

  	}

  	addLineFlowCode( code, node = null ) {

  		if ( code === '' ) return this;

  		if ( node !== null && this.context.nodeBlock ) {

  			this.addLineFlowCodeBlock( node, code, this.context.nodeBlock );

  		}

  		code = this.tab + code;

  		if ( ! /;\s*$/.test( code ) ) {

  			code = code + ';\n';

  		}

  		this.flow.code += code;

  		return this;

  	}

  	addFlowCode( code ) {

  		this.flow.code += code;

  		return this;

  	}

  	addFlowTab() {

  		this.tab += '\t';

  		return this;

  	}

  	removeFlowTab() {

  		this.tab = this.tab.slice( 0, - 1 );

  		return this;

  	}

  	getFlowData( node/*, shaderStage*/ ) {

  		return this.flowsData.get( node );

  	}

  	flowNode( node ) {

  		const output = node.getNodeType( this );

  		const flowData = this.flowChildNode( node, output );

  		this.flowsData.set( node, flowData );

  		return flowData;

  	}

  	buildFunctionNode( shaderNode ) {

  		const fn = new FunctionNode();

  		const previous = this.currentFunctionNode;

  		this.currentFunctionNode = fn;

  		fn.code = this.buildFunctionCode( shaderNode );

  		this.currentFunctionNode = previous;

  		return fn;

  	}

  	flowShaderNode( shaderNode ) {

  		const layout = shaderNode.layout;

  		const inputs = {
  			[ Symbol.iterator ]() {

  				let index = 0;
  				const values = Object.values( this );
  				return {
  					next: () => ( {
  						value: values[ index ],
  						done: index ++ >= values.length
  					} )
  				};

  			}
  		};

  		for ( const input of layout.inputs ) {

  			inputs[ input.name ] = new ParameterNode( input.type, input.name );

  		}

  		//

  		shaderNode.layout = null;

  		const callNode = shaderNode.call( inputs );
  		const flowData = this.flowStagesNode( callNode, layout.type );

  		shaderNode.layout = layout;

  		return flowData;

  	}

  	flowStagesNode( node, output = null ) {

  		const previousFlow = this.flow;
  		const previousVars = this.vars;
  		const previousCache = this.cache;
  		const previousBuildStage = this.buildStage;
  		const previousStack = this.stack;

  		const flow = {
  			code: ''
  		};

  		this.flow = flow;
  		this.vars = {};
  		this.cache = new NodeCache();
  		this.stack = stack();

  		for ( const buildStage of defaultBuildStages ) {

  			this.setBuildStage( buildStage );

  			flow.result = node.build( this, output );

  		}

  		flow.vars = this.getVars( this.shaderStage );

  		this.flow = previousFlow;
  		this.vars = previousVars;
  		this.cache = previousCache;
  		this.stack = previousStack;

  		this.setBuildStage( previousBuildStage );

  		return flow;

  	}

  	getFunctionOperator() {

  		return null;

  	}

  	flowChildNode( node, output = null ) {

  		const previousFlow = this.flow;

  		const flow = {
  			code: ''
  		};

  		this.flow = flow;

  		flow.result = node.build( this, output );

  		this.flow = previousFlow;

  		return flow;

  	}

  	flowNodeFromShaderStage( shaderStage, node, output = null, propertyName = null ) {

  		const previousShaderStage = this.shaderStage;

  		this.setShaderStage( shaderStage );

  		const flowData = this.flowChildNode( node, output );

  		if ( propertyName !== null ) {

  			flowData.code += `${ this.tab + propertyName } = ${ flowData.result };\n`;

  		}

  		this.flowCode[ shaderStage ] = this.flowCode[ shaderStage ] + flowData.code;

  		this.setShaderStage( previousShaderStage );

  		return flowData;

  	}

  	getAttributesArray() {

  		return this.attributes.concat( this.bufferAttributes );

  	}

  	getAttributes( /*shaderStage*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	getVaryings( /*shaderStage*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	getVar( type, name ) {

  		return `${ this.getType( type ) } ${ name }`;

  	}

  	getVars( shaderStage ) {

  		let snippet = '';

  		const vars = this.vars[ shaderStage ];

  		if ( vars !== undefined ) {

  			for ( const variable of vars ) {

  				snippet += `${ this.getVar( variable.type, variable.name ) }; `;

  			}

  		}

  		return snippet;

  	}

  	getUniforms( /*shaderStage*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  	getCodes( shaderStage ) {

  		const codes = this.codes[ shaderStage ];

  		let code = '';

  		if ( codes !== undefined ) {

  			for ( const nodeCode of codes ) {

  				code += nodeCode.code + '\n';

  			}

  		}

  		return code;

  	}

  	getHash() {

  		return this.vertexShader + this.fragmentShader + this.computeShader;

  	}

  	setShaderStage( shaderStage ) {

  		this.shaderStage = shaderStage;

  	}

  	getShaderStage() {

  		return this.shaderStage;

  	}

  	setBuildStage( buildStage ) {

  		this.buildStage = buildStage;

  	}

  	getBuildStage() {

  		return this.buildStage;

  	}

  	buildCode() {

  		console.warn( 'Abstract function.' );

  	}

  	build() {

  		const { object, material, renderer } = this;

  		if ( material !== null ) {

  			let nodeMaterial = renderer.library.fromMaterial( material );

  			if ( nodeMaterial === null ) {

  				console.error( `NodeMaterial: Material "${ material.type }" is not compatible.` );

  				nodeMaterial = new NodeMaterial();

  			}

  			nodeMaterial.build( this );

  		} else {

  			this.addFlow( 'compute', object );

  		}

  		// setup() -> stage 1: create possible new nodes and returns an output reference node
  		// analyze()   -> stage 2: analyze nodes to possible optimization and validation
  		// generate()  -> stage 3: generate shader

  		for ( const buildStage of defaultBuildStages ) {

  			this.setBuildStage( buildStage );

  			if ( this.context.vertex && this.context.vertex.isNode ) {

  				this.flowNodeFromShaderStage( 'vertex', this.context.vertex );

  			}

  			for ( const shaderStage of shaderStages ) {

  				this.setShaderStage( shaderStage );

  				const flowNodes = this.flowNodes[ shaderStage ];

  				for ( const node of flowNodes ) {

  					if ( buildStage === 'generate' ) {

  						this.flowNode( node );

  					} else {

  						node.build( this );

  					}

  				}

  			}

  		}

  		this.setBuildStage( null );
  		this.setShaderStage( null );

  		// stage 4: build code for a specific output

  		this.buildCode();
  		this.buildUpdateNodes();

  		return this;

  	}

  	getNodeUniform( uniformNode, type ) {

  		if ( type === 'float' || type === 'int' || type === 'uint' ) return new NumberNodeUniform( uniformNode );
  		if ( type === 'vec2' || type === 'ivec2' || type === 'uvec2' ) return new Vector2NodeUniform( uniformNode );
  		if ( type === 'vec3' || type === 'ivec3' || type === 'uvec3' ) return new Vector3NodeUniform( uniformNode );
  		if ( type === 'vec4' || type === 'ivec4' || type === 'uvec4' ) return new Vector4NodeUniform( uniformNode );
  		if ( type === 'color' ) return new ColorNodeUniform( uniformNode );
  		if ( type === 'mat3' ) return new Matrix3NodeUniform( uniformNode );
  		if ( type === 'mat4' ) return new Matrix4NodeUniform( uniformNode );

  		throw new Error( `Uniform "${type}" not declared.` );

  	}

  	createNodeMaterial( type = 'NodeMaterial' ) { // @deprecated, r168

  		throw new Error( `THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${ type }() instead.` );

  	}

  	format( snippet, fromType, toType ) {

  		fromType = this.getVectorType( fromType );
  		toType = this.getVectorType( toType );

  		if ( fromType === toType || toType === null || this.isReference( toType ) ) {

  			return snippet;

  		}

  		const fromTypeLength = this.getTypeLength( fromType );
  		const toTypeLength = this.getTypeLength( toType );

  		if ( fromTypeLength === 16 && toTypeLength === 9 ) {

  			return `${ this.getType( toType ) }(${ snippet }[0].xyz, ${ snippet }[1].xyz, ${ snippet }[2].xyz)`;

  		}

  		if ( fromTypeLength === 9 && toTypeLength === 4 ) {

  			return `${ this.getType( toType ) }(${ snippet }[0].xy, ${ snippet }[1].xy)`;

  		}


  		if ( fromTypeLength > 4 ) { // fromType is matrix-like

  			// @TODO: ignore for now

  			return snippet;

  		}

  		if ( toTypeLength > 4 || toTypeLength === 0 ) { // toType is matrix-like or unknown

  			// @TODO: ignore for now

  			return snippet;

  		}

  		if ( fromTypeLength === toTypeLength ) {

  			return `${ this.getType( toType ) }( ${ snippet } )`;

  		}

  		if ( fromTypeLength > toTypeLength ) {

  			return this.format( `${ snippet }.${ 'xyz'.slice( 0, toTypeLength ) }`, this.getTypeFromLength( toTypeLength, this.getComponentType( fromType ) ), toType );

  		}

  		if ( toTypeLength === 4 && fromTypeLength > 1 ) { // toType is vec4-like

  			return `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec3' ) }, 1.0 )`;

  		}

  		if ( fromTypeLength === 2 ) { // fromType is vec2-like and toType is vec3-like

  			return `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec2' ) }, 0.0 )`;

  		}

  		if ( fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType( toType ) ) { // fromType is float-like

  			// convert a number value to vector type, e.g:
  			// vec3( 1u ) -> vec3( float( 1u ) )

  			snippet = `${ this.getType( this.getComponentType( toType ) ) }( ${ snippet } )`;

  		}

  		return `${ this.getType( toType ) }( ${ snippet } )`; // fromType is float-like

  	}

  	getSignature() {

  		return `// Three.js r${ REVISION } - Node System\n`;

  	}

  }

  class NodeFrame {

  	constructor() {

  		this.time = 0;
  		this.deltaTime = 0;

  		this.frameId = 0;
  		this.renderId = 0;

  		this.startTime = null;

  		this.updateMap = new WeakMap();
  		this.updateBeforeMap = new WeakMap();
  		this.updateAfterMap = new WeakMap();

  		this.renderer = null;
  		this.material = null;
  		this.camera = null;
  		this.object = null;
  		this.scene = null;

  	}

  	_getMaps( referenceMap, nodeRef ) {

  		let maps = referenceMap.get( nodeRef );

  		if ( maps === undefined ) {

  			maps = {
  				renderMap: new WeakMap(),
  				frameMap: new WeakMap()
  			};

  			referenceMap.set( nodeRef, maps );

  		}

  		return maps;

  	}

  	updateBeforeNode( node ) {

  		const updateType = node.getUpdateBeforeType();
  		const reference = node.updateReference( this );

  		if ( updateType === NodeUpdateType.FRAME ) {

  			const { frameMap } = this._getMaps( this.updateBeforeMap, reference );

  			if ( frameMap.get( reference ) !== this.frameId ) {

  				if ( node.updateBefore( this ) !== false ) {

  					frameMap.set( reference, this.frameId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.RENDER ) {

  			const { renderMap } = this._getMaps( this.updateBeforeMap, reference );

  			if ( renderMap.get( reference ) !== this.renderId ) {

  				if ( node.updateBefore( this ) !== false ) {

  					renderMap.set( reference, this.renderId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.OBJECT ) {

  			node.updateBefore( this );

  		}

  	}

  	updateAfterNode( node ) {

  		const updateType = node.getUpdateAfterType();
  		const reference = node.updateReference( this );

  		if ( updateType === NodeUpdateType.FRAME ) {

  			const { frameMap } = this._getMaps( this.updateAfterMap, reference );

  			if ( frameMap.get( reference ) !== this.frameId ) {

  				if ( node.updateAfter( this ) !== false ) {

  					frameMap.set( reference, this.frameId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.RENDER ) {

  			const { renderMap } = this._getMaps( this.updateAfterMap, reference );

  			if ( renderMap.get( reference ) !== this.renderId ) {

  				if ( node.updateAfter( this ) !== false ) {

  					renderMap.set( reference, this.renderId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.OBJECT ) {

  			node.updateAfter( this );

  		}

  	}

  	updateNode( node ) {

  		const updateType = node.getUpdateType();
  		const reference = node.updateReference( this );

  		if ( updateType === NodeUpdateType.FRAME ) {

  			const { frameMap } = this._getMaps( this.updateMap, reference );

  			if ( frameMap.get( reference ) !== this.frameId ) {

  				if ( node.update( this ) !== false ) {

  					frameMap.set( reference, this.frameId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.RENDER ) {

  			const { renderMap } = this._getMaps( this.updateMap, reference );

  			if ( renderMap.get( reference ) !== this.renderId ) {

  				if ( node.update( this ) !== false ) {

  					renderMap.set( reference, this.renderId );

  				}

  			}

  		} else if ( updateType === NodeUpdateType.OBJECT ) {

  			node.update( this );

  		}

  	}

  	update() {

  		this.frameId ++;

  		if ( this.lastTime === undefined ) this.lastTime = performance.now();

  		this.deltaTime = ( performance.now() - this.lastTime ) / 1000;

  		this.lastTime = performance.now();

  		this.time += this.deltaTime;

  	}

  }

  class NodeFunctionInput {

  	constructor( type, name, count = null, qualifier = '', isConst = false ) {

  		this.type = type;
  		this.name = name;
  		this.count = count;
  		this.qualifier = qualifier;
  		this.isConst = isConst;

  	}

  }

  NodeFunctionInput.isNodeFunctionInput = true;

  class DirectionalLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'DirectionalLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  	}

  	setup( builder ) {

  		super.setup( builder );

  		const lightingModel = builder.context.lightingModel;

  		const lightColor = this.colorNode;
  		const lightDirection = lightTargetDirection( this.light );
  		const reflectedLight = builder.context.reflectedLight;

  		lightingModel.direct( {
  			lightDirection,
  			lightColor,
  			reflectedLight
  		}, builder.stack, builder );

  	}

  }

  const _matrix41 = /*@__PURE__*/ new Matrix4();
  const _matrix42 = /*@__PURE__*/ new Matrix4();

  let ltcLib = null;

  class RectAreaLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'RectAreaLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  		this.halfHeight = uniform( new Vector3() ).setGroup( renderGroup );
  		this.halfWidth = uniform( new Vector3() ).setGroup( renderGroup );

  		this.updateType = NodeUpdateType.RENDER;

  	}

  	update( frame ) {

  		super.update( frame );

  		const { light } = this;

  		const viewMatrix = frame.camera.matrixWorldInverse;

  		_matrix42.identity();
  		_matrix41.copy( light.matrixWorld );
  		_matrix41.premultiply( viewMatrix );
  		_matrix42.extractRotation( _matrix41 );

  		this.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );
  		this.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );

  		this.halfWidth.value.applyMatrix4( _matrix42 );
  		this.halfHeight.value.applyMatrix4( _matrix42 );

  	}

  	setup( builder ) {

  		super.setup( builder );

  		let ltc_1, ltc_2;

  		if ( builder.isAvailable( 'float32Filterable' ) ) {

  			ltc_1 = texture( ltcLib.LTC_FLOAT_1 );
  			ltc_2 = texture( ltcLib.LTC_FLOAT_2 );

  		} else {

  			ltc_1 = texture( ltcLib.LTC_HALF_1 );
  			ltc_2 = texture( ltcLib.LTC_HALF_2 );

  		}

  		const { colorNode, light } = this;
  		const lightingModel = builder.context.lightingModel;

  		const lightPosition = lightViewPosition( light );
  		const reflectedLight = builder.context.reflectedLight;

  		lightingModel.directRectArea( {
  			lightColor: colorNode,
  			lightPosition,
  			halfWidth: this.halfWidth,
  			halfHeight: this.halfHeight,
  			reflectedLight,
  			ltc_1,
  			ltc_2
  		}, builder.stack, builder );

  	}

  	static setLTC( ltc ) {

  		ltcLib = ltc;

  	}

  }

  class SpotLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'SpotLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  		this.coneCosNode = uniform( 0 ).setGroup( renderGroup );
  		this.penumbraCosNode = uniform( 0 ).setGroup( renderGroup );

  		this.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );
  		this.decayExponentNode = uniform( 0 ).setGroup( renderGroup );

  	}

  	update( frame ) {

  		super.update( frame );

  		const { light } = this;

  		this.coneCosNode.value = Math.cos( light.angle );
  		this.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );

  		this.cutoffDistanceNode.value = light.distance;
  		this.decayExponentNode.value = light.decay;

  	}

  	getSpotAttenuation( angleCosine ) {

  		const { coneCosNode, penumbraCosNode } = this;

  		return smoothstep( coneCosNode, penumbraCosNode, angleCosine );

  	}

  	setup( builder ) {

  		super.setup( builder );

  		const lightingModel = builder.context.lightingModel;

  		const { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;

  		const lVector = lightViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode

  		const lightDirection = lVector.normalize();
  		const angleCos = lightDirection.dot( lightTargetDirection( light ) );
  		const spotAttenuation = this.getSpotAttenuation( angleCos );

  		const lightDistance = lVector.length();

  		const lightAttenuation = getDistanceAttenuation( {
  			lightDistance,
  			cutoffDistance: cutoffDistanceNode,
  			decayExponent: decayExponentNode
  		} );

  		const lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );

  		const reflectedLight = builder.context.reflectedLight;

  		lightingModel.direct( {
  			lightDirection,
  			lightColor,
  			reflectedLight
  		}, builder.stack, builder );

  	}

  }

  class IESSpotLightNode extends SpotLightNode {

  	static get type() {

  		return 'IESSpotLightNode';

  	}

  	getSpotAttenuation( angleCosine ) {

  		const iesMap = this.light.iesMap;

  		let spotAttenuation = null;

  		if ( iesMap && iesMap.isTexture === true ) {

  			const angle = angleCosine.acos().mul( 1.0 / Math.PI );

  			spotAttenuation = texture( iesMap, vec2( angle, 0 ), 0 ).r;

  		} else {

  			spotAttenuation = super.getSpotAttenuation( angleCosine );

  		}

  		return spotAttenuation;

  	}

  }

  class AmbientLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'AmbientLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  	}

  	setup( { context } ) {

  		context.irradiance.addAssign( this.colorNode );

  	}

  }

  class HemisphereLightNode extends AnalyticLightNode {

  	static get type() {

  		return 'HemisphereLightNode';

  	}

  	constructor( light = null ) {

  		super( light );

  		this.lightPositionNode = lightPosition( light );
  		this.lightDirectionNode = this.lightPositionNode.normalize();

  		this.groundColorNode = uniform( new Color() ).setGroup( renderGroup );

  	}

  	update( frame ) {

  		const { light } = this;

  		super.update( frame );

  		this.lightPositionNode.object3d = light;

  		this.groundColorNode.value.copy( light.groundColor ).multiplyScalar( light.intensity );

  	}

  	setup( builder ) {

  		const { colorNode, groundColorNode, lightDirectionNode } = this;

  		const dotNL = normalView.dot( lightDirectionNode );
  		const hemiDiffuseWeight = dotNL.mul( 0.5 ).add( 0.5 );

  		const irradiance = mix$2( groundColorNode, colorNode, hemiDiffuseWeight );

  		builder.context.irradiance.addAssign( irradiance );

  	}

  }

  class LightProbeNode extends AnalyticLightNode {

  	static get type() {

  		return 'LightProbeNode';

  	}

  	constructor( light = null ) {

  		super( light );

  		const array = [];

  		for ( let i = 0; i < 9; i ++ ) array.push( new Vector3() );

  		this.lightProbe = uniformArray( array );

  	}

  	update( frame ) {

  		const { light } = this;

  		super.update( frame );

  		//

  		for ( let i = 0; i < 9; i ++ ) {

  			this.lightProbe.array[ i ].copy( light.sh.coefficients[ i ] ).multiplyScalar( light.intensity );

  		}

  	}

  	setup( builder ) {

  		const irradiance = getShIrradianceAt( normalWorld, this.lightProbe );

  		builder.context.irradiance.addAssign( irradiance );

  	}

  }

  class NodeParser {

  	parseFunction( /*source*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  }

  class NodeFunction {

  	constructor( type, inputs, name = '', precision = '' ) {

  		this.type = type;
  		this.inputs = inputs;
  		this.name = name;
  		this.precision = precision;

  	}

  	getCode( /*name = this.name*/ ) {

  		console.warn( 'Abstract function.' );

  	}

  }

  NodeFunction.isNodeFunction = true;

  const declarationRegexp$1 = /^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i;
  const propertiesRegexp$1 = /[a-z_0-9]+/ig;

  const pragmaMain = '#pragma main';

  const parse$1 = ( source ) => {

  	source = source.trim();

  	const pragmaMainIndex = source.indexOf( pragmaMain );

  	const mainCode = pragmaMainIndex !== - 1 ? source.slice( pragmaMainIndex + pragmaMain.length ) : source;

  	const declaration = mainCode.match( declarationRegexp$1 );

  	if ( declaration !== null && declaration.length === 5 ) {

  		// tokenizer

  		const inputsCode = declaration[ 4 ];
  		const propsMatches = [];

  		let nameMatch = null;

  		while ( ( nameMatch = propertiesRegexp$1.exec( inputsCode ) ) !== null ) {

  			propsMatches.push( nameMatch );

  		}

  		// parser

  		const inputs = [];

  		let i = 0;

  		while ( i < propsMatches.length ) {

  			const isConst = propsMatches[ i ][ 0 ] === 'const';

  			if ( isConst === true ) {

  				i ++;

  			}

  			let qualifier = propsMatches[ i ][ 0 ];

  			if ( qualifier === 'in' || qualifier === 'out' || qualifier === 'inout' ) {

  				i ++;

  			} else {

  				qualifier = '';

  			}

  			const type = propsMatches[ i ++ ][ 0 ];

  			let count = Number.parseInt( propsMatches[ i ][ 0 ] );

  			if ( Number.isNaN( count ) === false ) i ++;
  			else count = null;

  			const name = propsMatches[ i ++ ][ 0 ];

  			inputs.push( new NodeFunctionInput( type, name, count, qualifier, isConst ) );

  		}

  		//

  		const blockCode = mainCode.substring( declaration[ 0 ].length );

  		const name = declaration[ 3 ] !== undefined ? declaration[ 3 ] : '';
  		const type = declaration[ 2 ];

  		const precision = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';

  		const headerCode = pragmaMainIndex !== - 1 ? source.slice( 0, pragmaMainIndex ) : '';

  		return {
  			type,
  			inputs,
  			name,
  			precision,
  			inputsCode,
  			blockCode,
  			headerCode
  		};

  	} else {

  		throw new Error( 'FunctionNode: Function is not a GLSL code.' );

  	}

  };

  class GLSLNodeFunction extends NodeFunction {

  	constructor( source ) {

  		const { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse$1( source );

  		super( type, inputs, name, precision );

  		this.inputsCode = inputsCode;
  		this.blockCode = blockCode;
  		this.headerCode = headerCode;

  	}

  	getCode( name = this.name ) {

  		let code;

  		const blockCode = this.blockCode;

  		if ( blockCode !== '' ) {

  			const { type, inputsCode, headerCode, precision } = this;

  			let declarationCode = `${ type } ${ name } ( ${ inputsCode.trim() } )`;

  			if ( precision !== '' ) {

  				declarationCode = `${ precision } ${ declarationCode }`;

  			}

  			code = headerCode + declarationCode + blockCode;

  		} else {

  			// interface function

  			code = '';

  		}

  		return code;

  	}

  }

  class GLSLNodeParser extends NodeParser {

  	parseFunction( source ) {

  		return new GLSLNodeFunction( source );

  	}

  }

  const outputNodeMap = new WeakMap();

  class Nodes extends DataMap {

  	constructor( renderer, backend ) {

  		super();

  		this.renderer = renderer;
  		this.backend = backend;
  		this.nodeFrame = new NodeFrame();
  		this.nodeBuilderCache = new Map();
  		this.callHashCache = new ChainMap();
  		this.groupsData = new ChainMap();

  	}

  	updateGroup( nodeUniformsGroup ) {

  		const groupNode = nodeUniformsGroup.groupNode;
  		const name = groupNode.name;

  		// objectGroup is every updated

  		if ( name === objectGroup.name ) return true;

  		// renderGroup is updated once per render/compute call

  		if ( name === renderGroup.name ) {

  			const uniformsGroupData = this.get( nodeUniformsGroup );
  			const renderId = this.nodeFrame.renderId;

  			if ( uniformsGroupData.renderId !== renderId ) {

  				uniformsGroupData.renderId = renderId;

  				return true;

  			}

  			return false;

  		}

  		// frameGroup is updated once per frame

  		if ( name === frameGroup.name ) {

  			const uniformsGroupData = this.get( nodeUniformsGroup );
  			const frameId = this.nodeFrame.frameId;

  			if ( uniformsGroupData.frameId !== frameId ) {

  				uniformsGroupData.frameId = frameId;

  				return true;

  			}

  			return false;

  		}

  		// other groups are updated just when groupNode.needsUpdate is true

  		const groupChain = [ groupNode, nodeUniformsGroup ];

  		let groupData = this.groupsData.get( groupChain );
  		if ( groupData === undefined ) this.groupsData.set( groupChain, groupData = {} );

  		if ( groupData.version !== groupNode.version ) {

  			groupData.version = groupNode.version;

  			return true;

  		}

  		return false;

  	}

  	getForRenderCacheKey( renderObject ) {

  		return renderObject.initialCacheKey;

  	}

  	getForRender( renderObject ) {

  		const renderObjectData = this.get( renderObject );

  		let nodeBuilderState = renderObjectData.nodeBuilderState;

  		if ( nodeBuilderState === undefined ) {

  			const { nodeBuilderCache } = this;

  			const cacheKey = this.getForRenderCacheKey( renderObject );

  			nodeBuilderState = nodeBuilderCache.get( cacheKey );

  			if ( nodeBuilderState === undefined ) {

  				const nodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer );
  				nodeBuilder.scene = renderObject.scene;
  				nodeBuilder.material = renderObject.material;
  				nodeBuilder.camera = renderObject.camera;
  				nodeBuilder.context.material = renderObject.material;
  				nodeBuilder.lightsNode = renderObject.lightsNode;
  				nodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );
  				nodeBuilder.fogNode = this.getFogNode( renderObject.scene );
  				nodeBuilder.clippingContext = renderObject.clippingContext;
  				nodeBuilder.build();

  				nodeBuilderState = this._createNodeBuilderState( nodeBuilder );

  				nodeBuilderCache.set( cacheKey, nodeBuilderState );

  			}

  			nodeBuilderState.usedTimes ++;

  			renderObjectData.nodeBuilderState = nodeBuilderState;

  		}

  		return nodeBuilderState;

  	}

  	delete( object ) {

  		if ( object.isRenderObject ) {

  			const nodeBuilderState = this.get( object ).nodeBuilderState;
  			nodeBuilderState.usedTimes --;

  			if ( nodeBuilderState.usedTimes === 0 ) {

  				this.nodeBuilderCache.delete( this.getForRenderCacheKey( object ) );

  			}

  		}

  		return super.delete( object );

  	}

  	getForCompute( computeNode ) {

  		const computeData = this.get( computeNode );

  		let nodeBuilderState = computeData.nodeBuilderState;

  		if ( nodeBuilderState === undefined ) {

  			const nodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );
  			nodeBuilder.build();

  			nodeBuilderState = this._createNodeBuilderState( nodeBuilder );

  			computeData.nodeBuilderState = nodeBuilderState;

  		}

  		return nodeBuilderState;

  	}

  	_createNodeBuilderState( nodeBuilder ) {

  		return new NodeBuilderState(
  			nodeBuilder.vertexShader,
  			nodeBuilder.fragmentShader,
  			nodeBuilder.computeShader,
  			nodeBuilder.getAttributesArray(),
  			nodeBuilder.getBindings(),
  			nodeBuilder.updateNodes,
  			nodeBuilder.updateBeforeNodes,
  			nodeBuilder.updateAfterNodes,
  			nodeBuilder.monitor,
  			nodeBuilder.transforms
  		);

  	}

  	getEnvironmentNode( scene ) {

  		return scene.environmentNode || this.get( scene ).environmentNode || null;

  	}

  	getBackgroundNode( scene ) {

  		return scene.backgroundNode || this.get( scene ).backgroundNode || null;

  	}

  	getFogNode( scene ) {

  		return scene.fogNode || this.get( scene ).fogNode || null;

  	}

  	getCacheKey( scene, lightsNode ) {

  		const chain = [ scene, lightsNode ];
  		const callId = this.renderer.info.calls;

  		let cacheKeyData = this.callHashCache.get( chain );

  		if ( cacheKeyData === undefined || cacheKeyData.callId !== callId ) {

  			const environmentNode = this.getEnvironmentNode( scene );
  			const fogNode = this.getFogNode( scene );

  			const values = [];

  			if ( lightsNode ) values.push( lightsNode.getCacheKey( true ) );
  			if ( environmentNode ) values.push( environmentNode.getCacheKey() );
  			if ( fogNode ) values.push( fogNode.getCacheKey() );

  			values.push( this.renderer.shadowMap.enabled ? 1 : 0 );

  			cacheKeyData = {
  				callId,
  				cacheKey: hashArray( values )
  			};

  			this.callHashCache.set( chain, cacheKeyData );

  		}

  		return cacheKeyData.cacheKey;

  	}

  	updateScene( scene ) {

  		this.updateEnvironment( scene );
  		this.updateFog( scene );
  		this.updateBackground( scene );

  	}

  	get isToneMappingState() {

  		return this.renderer.getRenderTarget() ? false : true;

  	}

  	updateBackground( scene ) {

  		const sceneData = this.get( scene );
  		const background = scene.background;

  		if ( background ) {

  			const forceUpdate = ( scene.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 ) || ( scene.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0 );

  			if ( sceneData.background !== background || forceUpdate ) {

  				let backgroundNode = null;

  				if ( background.isCubeTexture === true || ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping || background.mapping === CubeUVReflectionMapping ) ) {

  					if ( scene.backgroundBlurriness > 0 || background.mapping === CubeUVReflectionMapping ) {

  						backgroundNode = pmremTexture( background );

  					} else {

  						let envMap;

  						if ( background.isCubeTexture === true ) {

  							envMap = cubeTexture( background );

  						} else {

  							envMap = texture( background );

  						}

  						backgroundNode = cubeMapNode( envMap );

  					}

  				} else if ( background.isTexture === true ) {

  					backgroundNode = texture( background, screenUV.flipY() ).setUpdateMatrix( true );

  				} else if ( background.isColor !== true ) {

  					console.error( 'WebGPUNodes: Unsupported background configuration.', background );

  				}

  				sceneData.backgroundNode = backgroundNode;
  				sceneData.background = background;
  				sceneData.backgroundBlurriness = scene.backgroundBlurriness;

  			}

  		} else if ( sceneData.backgroundNode ) {

  			delete sceneData.backgroundNode;
  			delete sceneData.background;

  		}

  	}

  	updateFog( scene ) {

  		const sceneData = this.get( scene );
  		const fog = scene.fog;

  		if ( fog ) {

  			if ( sceneData.fog !== fog ) {

  				let fogNode = null;

  				if ( fog.isFogExp2 ) {

  					const color = reference( 'color', 'color', fog ).setGroup( renderGroup );
  					const density = reference( 'density', 'float', fog ).setGroup( renderGroup );

  					fogNode = densityFog( color, density );

  				} else if ( fog.isFog ) {

  					const color = reference( 'color', 'color', fog ).setGroup( renderGroup );
  					const near = reference( 'near', 'float', fog ).setGroup( renderGroup );
  					const far = reference( 'far', 'float', fog ).setGroup( renderGroup );

  					fogNode = rangeFog( color, near, far );

  				} else {

  					console.error( 'WebGPUNodes: Unsupported fog configuration.', fog );

  				}

  				sceneData.fogNode = fogNode;
  				sceneData.fog = fog;

  			}

  		} else {

  			delete sceneData.fogNode;
  			delete sceneData.fog;

  		}

  	}

  	updateEnvironment( scene ) {

  		const sceneData = this.get( scene );
  		const environment = scene.environment;

  		if ( environment ) {

  			if ( sceneData.environment !== environment ) {

  				let environmentNode = null;

  				if ( environment.isCubeTexture === true ) {

  					environmentNode = cubeTexture( environment );

  				} else if ( environment.isTexture === true ) {

  					environmentNode = texture( environment );

  				} else {

  					console.error( 'Nodes: Unsupported environment configuration.', environment );

  				}

  				sceneData.environmentNode = environmentNode;
  				sceneData.environment = environment;

  			}

  		} else if ( sceneData.environmentNode ) {

  			delete sceneData.environmentNode;
  			delete sceneData.environment;

  		}

  	}

  	getNodeFrame( renderer = this.renderer, scene = null, object = null, camera = null, material = null ) {

  		const nodeFrame = this.nodeFrame;
  		nodeFrame.renderer = renderer;
  		nodeFrame.scene = scene;
  		nodeFrame.object = object;
  		nodeFrame.camera = camera;
  		nodeFrame.material = material;

  		return nodeFrame;

  	}

  	getNodeFrameForRender( renderObject ) {

  		return this.getNodeFrame( renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material );

  	}

  	getOutputCacheKey() {

  		const renderer = this.renderer;

  		return renderer.toneMapping + ',' + renderer.currentColorSpace;

  	}

  	hasOutputChange( outputTarget ) {

  		const cacheKey = outputNodeMap.get( outputTarget );

  		return cacheKey !== this.getOutputCacheKey();

  	}

  	getOutputNode( outputTexture ) {

  		const renderer = this.renderer;
  		const cacheKey = this.getOutputCacheKey();

  		const output = texture( outputTexture, screenUV ).renderOutput( renderer.toneMapping, renderer.currentColorSpace );

  		outputNodeMap.set( outputTexture, cacheKey );

  		return output;

  	}

  	updateBefore( renderObject ) {

  		const nodeBuilder = renderObject.getNodeBuilderState();

  		for ( const node of nodeBuilder.updateBeforeNodes ) {

  			// update frame state for each node

  			this.getNodeFrameForRender( renderObject ).updateBeforeNode( node );

  		}

  	}

  	updateAfter( renderObject ) {

  		const nodeBuilder = renderObject.getNodeBuilderState();

  		for ( const node of nodeBuilder.updateAfterNodes ) {

  			// update frame state for each node

  			this.getNodeFrameForRender( renderObject ).updateAfterNode( node );

  		}

  	}

  	updateForCompute( computeNode ) {

  		const nodeFrame = this.getNodeFrame();
  		const nodeBuilder = this.getForCompute( computeNode );

  		for ( const node of nodeBuilder.updateNodes ) {

  			nodeFrame.updateNode( node );

  		}

  	}

  	updateForRender( renderObject ) {

  		const nodeFrame = this.getNodeFrameForRender( renderObject );
  		const nodeBuilder = renderObject.getNodeBuilderState();

  		for ( const node of nodeBuilder.updateNodes ) {

  			nodeFrame.updateNode( node );

  		}

  	}

  	needsRefresh( renderObject ) {

  		const nodeFrame = this.getNodeFrameForRender( renderObject );
  		const monitor = renderObject.getMonitor();

  		return monitor.needsRefresh( renderObject, nodeFrame );

  	}

  	dispose() {

  		super.dispose();

  		this.nodeFrame = new NodeFrame();
  		this.nodeBuilderCache = new Map();

  	}

  }

  class RenderBundle {

  	constructor( scene, camera ) {

  		this.scene = scene;
  		this.camera = camera;

  	}

  	clone() {

  		return Object.assign( new this.constructor(), this );

  	}

  }

  class RenderBundles {

  	constructor() {

  		this.lists = new ChainMap();

  	}

  	get( scene, camera ) {

  		const lists = this.lists;
  		const keys = [ scene, camera ];

  		let list = lists.get( keys );

  		if ( list === undefined ) {

  			list = new RenderBundle( scene, camera );
  			lists.set( keys, list );

  		}

  		return list;

  	}

  	dispose() {

  		this.lists = new ChainMap();

  	}

  }

  class NodeLibrary {

  	constructor() {

  		this.lightNodes = new WeakMap();
  		this.materialNodes = new Map();
  		this.toneMappingNodes = new Map();

  	}

  	fromMaterial( material ) {

  		if ( material.isNodeMaterial ) return material;

  		let nodeMaterial = null;

  		const nodeMaterialClass = this.getMaterialNodeClass( material.type );

  		if ( nodeMaterialClass !== null ) {

  			nodeMaterial = new nodeMaterialClass();

  			for ( const key in material ) {

  				nodeMaterial[ key ] = material[ key ];

  			}

  		}

  		return nodeMaterial;

  	}

  	addToneMapping( toneMappingNode, toneMapping ) {

  		this.addType( toneMappingNode, toneMapping, this.toneMappingNodes );

  	}

  	getToneMappingFunction( toneMapping ) {

  		return this.toneMappingNodes.get( toneMapping ) || null;

  	}

  	getMaterialNodeClass( materialType ) {

  		return this.materialNodes.get( materialType ) || null;

  	}

  	addMaterial( materialNodeClass, materialClass ) {

  		this.addType( materialNodeClass, materialClass.type, this.materialNodes );

  	}

  	getLightNodeClass( light ) {

  		return this.lightNodes.get( light ) || null;

  	}

  	addLight( lightNodeClass, lightClass ) {

  		this.addClass( lightNodeClass, lightClass, this.lightNodes );

  	}

  	addType( nodeClass, type, library ) {

  		if ( library.has( type ) ) {

  			console.warn( `Redefinition of node ${ type }` );
  			return;

  		}

  		if ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );
  		if ( typeof type === 'function' || typeof type === 'object' ) throw new Error( `Base class ${ type } is not a class.` );

  		library.set( type, nodeClass );

  	}

  	addClass( nodeClass, baseClass, library ) {

  		if ( library.has( baseClass ) ) {

  			console.warn( `Redefinition of node ${ baseClass.name }` );
  			return;

  		}

  		if ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );
  		if ( typeof baseClass !== 'function' ) throw new Error( `Base class ${ baseClass.name } is not a class.` );

  		library.set( baseClass, nodeClass );

  	}

  }

  const _defaultLights = /*@__PURE__*/ new LightsNode();

  class Lighting extends ChainMap {

  	constructor() {

  		super();

  	}

  	createNode( lights = [] ) {

  		return new LightsNode().setLights( lights );

  	}

  	getNode( scene, camera ) {

  		// ignore post-processing

  		if ( scene.isQuadMesh ) return _defaultLights;

  		// tiled lighting

  		const keys = [ scene, camera ];

  		let node = this.get( keys );

  		if ( node === undefined ) {

  			node = this.createNode();
  			this.set( keys, node );

  		}

  		return node;

  	}

  }

  const _scene = /*@__PURE__*/ new Scene();
  const _drawingBufferSize = /*@__PURE__*/ new Vector2();
  const _screen = /*@__PURE__*/ new Vector4();
  const _frustum = /*@__PURE__*/ new Frustum();
  const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
  const _vector4 = /*@__PURE__*/ new Vector4();

  class Renderer {

  	constructor( backend, parameters = {} ) {

  		this.isRenderer = true;

  		//

  		const {
  			logarithmicDepthBuffer = false,
  			alpha = true,
  			depth = true,
  			stencil = false,
  			antialias = false,
  			samples = 0,
  			getFallback = null
  		} = parameters;

  		// public
  		this.domElement = backend.getDomElement();

  		this.backend = backend;

  		this.samples = samples || ( antialias === true ) ? 4 : 0;

  		this.autoClear = true;
  		this.autoClearColor = true;
  		this.autoClearDepth = true;
  		this.autoClearStencil = true;

  		this.alpha = alpha;

  		this.logarithmicDepthBuffer = logarithmicDepthBuffer;

  		this.outputColorSpace = SRGBColorSpace;

  		this.toneMapping = NoToneMapping;
  		this.toneMappingExposure = 1.0;

  		this.sortObjects = true;

  		this.depth = depth;
  		this.stencil = stencil;

  		this.clippingPlanes = [];

  		this.info = new Info();

  		this.nodes = {
  			modelViewMatrix: null,
  			modelNormalViewMatrix: null
  		};

  		this.library = new NodeLibrary();
  		this.lighting = new Lighting();

  		// internals

  		this._getFallback = getFallback;

  		this._pixelRatio = 1;
  		this._width = this.domElement.width;
  		this._height = this.domElement.height;

  		this._viewport = new Vector4( 0, 0, this._width, this._height );
  		this._scissor = new Vector4( 0, 0, this._width, this._height );
  		this._scissorTest = false;

  		this._attributes = null;
  		this._geometries = null;
  		this._nodes = null;
  		this._animation = null;
  		this._bindings = null;
  		this._objects = null;
  		this._pipelines = null;
  		this._bundles = null;
  		this._renderLists = null;
  		this._renderContexts = null;
  		this._textures = null;
  		this._background = null;

  		this._quad = new QuadMesh( new NodeMaterial() );
  		this._quad.material.type = 'Renderer_output';

  		this._currentRenderContext = null;

  		this._opaqueSort = null;
  		this._transparentSort = null;

  		this._frameBufferTarget = null;

  		const alphaClear = this.alpha === true ? 0 : 1;

  		this._clearColor = new Color4( 0, 0, 0, alphaClear );
  		this._clearDepth = 1;
  		this._clearStencil = 0;

  		this._renderTarget = null;
  		this._activeCubeFace = 0;
  		this._activeMipmapLevel = 0;

  		this._mrt = null;

  		this._renderObjectFunction = null;
  		this._currentRenderObjectFunction = null;
  		this._currentRenderBundle = null;

  		this._handleObjectFunction = this._renderObjectDirect;

  		this._isDeviceLost = false;
  		this.onDeviceLost = this._onDeviceLost;

  		this._initialized = false;
  		this._initPromise = null;

  		this._compilationPromises = null;

  		this.transparent = true;
  		this.opaque = true;

  		this.shadowMap = {
  			enabled: false,
  			type: PCFShadowMap$1
  		};

  		this.xr = {
  			enabled: false
  		};

  		this.debug = {
  			checkShaderErrors: true,
  			onShaderError: null,
  			getShaderAsync: async ( scene, camera, object ) => {

  				await this.compileAsync( scene, camera );

  				const renderList = this._renderLists.get( scene, camera );
  				const renderContext = this._renderContexts.get( scene, camera, this._renderTarget );

  				const material = scene.overrideMaterial || object.material;

  				const renderObject = this._objects.get( object, material, scene, camera, renderList.lightsNode, renderContext );

  				const { fragmentShader, vertexShader } = renderObject.getNodeBuilderState();

  				return { fragmentShader, vertexShader };

  			}
  		};

  	}

  	async init() {

  		if ( this._initialized ) {

  			throw new Error( 'Renderer: Backend has already been initialized.' );

  		}

  		if ( this._initPromise !== null ) {

  			return this._initPromise;

  		}

  		this._initPromise = new Promise( async ( resolve, reject ) => {

  			let backend = this.backend;

  			try {

  				await backend.init( this );

  			} catch ( error ) {

  				if ( this._getFallback !== null ) {

  					// try the fallback

  					try {

  						this.backend = backend = this._getFallback( error );
  						await backend.init( this );

  					} catch ( error ) {

  						reject( error );
  						return;

  					}

  				} else {

  					reject( error );
  					return;

  				}

  			}

  			this._nodes = new Nodes( this, backend );
  			this._animation = new Animation( this._nodes, this.info );
  			this._attributes = new Attributes( backend );
  			this._background = new Background( this, this._nodes );
  			this._geometries = new Geometries( this._attributes, this.info );
  			this._textures = new Textures( this, backend, this.info );
  			this._pipelines = new Pipelines( backend, this._nodes );
  			this._bindings = new Bindings( backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info );
  			this._objects = new RenderObjects( this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info );
  			this._renderLists = new RenderLists( this.lighting );
  			this._bundles = new RenderBundles();
  			this._renderContexts = new RenderContexts();

  			//

  			this._initialized = true;

  			resolve();

  		} );

  		return this._initPromise;

  	}

  	get coordinateSystem() {

  		return this.backend.coordinateSystem;

  	}

  	async compileAsync( scene, camera, targetScene = null ) {

  		if ( this._isDeviceLost === true ) return;

  		if ( this._initialized === false ) await this.init();

  		// preserve render tree

  		const nodeFrame = this._nodes.nodeFrame;

  		const previousRenderId = nodeFrame.renderId;
  		const previousRenderContext = this._currentRenderContext;
  		const previousRenderObjectFunction = this._currentRenderObjectFunction;
  		const previousCompilationPromises = this._compilationPromises;

  		//

  		const sceneRef = ( scene.isScene === true ) ? scene : _scene;

  		if ( targetScene === null ) targetScene = scene;

  		const renderTarget = this._renderTarget;
  		const renderContext = this._renderContexts.get( targetScene, camera, renderTarget );
  		const activeMipmapLevel = this._activeMipmapLevel;

  		const compilationPromises = [];

  		this._currentRenderContext = renderContext;
  		this._currentRenderObjectFunction = this.renderObject;

  		this._handleObjectFunction = this._createObjectPipeline;

  		this._compilationPromises = compilationPromises;

  		nodeFrame.renderId ++;

  		//

  		nodeFrame.update();

  		//

  		renderContext.depth = this.depth;
  		renderContext.stencil = this.stencil;

  		if ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();
  		renderContext.clippingContext.updateGlobal( this, camera );

  		//

  		sceneRef.onBeforeRender( this, scene, camera, renderTarget );

  		//

  		const renderList = this._renderLists.get( scene, camera );
  		renderList.begin();

  		this._projectObject( scene, camera, 0, renderList );

  		// include lights from target scene
  		if ( targetScene !== scene ) {

  			targetScene.traverseVisible( function ( object ) {

  				if ( object.isLight && object.layers.test( camera.layers ) ) {

  					renderList.pushLight( object );

  				}

  			} );

  		}

  		renderList.finish();

  		//

  		if ( renderTarget !== null ) {

  			this._textures.updateRenderTarget( renderTarget, activeMipmapLevel );

  			const renderTargetData = this._textures.get( renderTarget );

  			renderContext.textures = renderTargetData.textures;
  			renderContext.depthTexture = renderTargetData.depthTexture;

  		} else {

  			renderContext.textures = null;
  			renderContext.depthTexture = null;

  		}

  		//

  		this._nodes.updateScene( sceneRef );

  		//

  		this._background.update( sceneRef, renderList, renderContext );

  		// process render lists

  		const opaqueObjects = renderList.opaque;
  		const transparentObjects = renderList.transparent;
  		const lightsNode = renderList.lightsNode;

  		if ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );
  		if ( this.transparent === true && transparentObjects.length > 0 ) this._renderTransparents( transparentObjects, camera, sceneRef, lightsNode );

  		// restore render tree

  		nodeFrame.renderId = previousRenderId;

  		this._currentRenderContext = previousRenderContext;
  		this._currentRenderObjectFunction = previousRenderObjectFunction;
  		this._compilationPromises = previousCompilationPromises;

  		this._handleObjectFunction = this._renderObjectDirect;

  		// wait for all promises setup by backends awaiting compilation/linking/pipeline creation to complete

  		await Promise.all( compilationPromises );

  	}

  	async renderAsync( scene, camera ) {

  		if ( this._initialized === false ) await this.init();

  		const renderContext = this._renderScene( scene, camera );

  		await this.backend.resolveTimestampAsync( renderContext, 'render' );

  	}

  	async waitForGPU() {

  		await this.backend.waitForGPU();

  	}

  	setMRT( mrt ) {

  		this._mrt = mrt;

  		return this;

  	}

  	getMRT() {

  		return this._mrt;

  	}

  	_onDeviceLost( info ) {

  		let errorMessage = `THREE.WebGPURenderer: ${info.api} Device Lost:\n\nMessage: ${info.message}`;

  		if ( info.reason ) {

  			errorMessage += `\nReason: ${info.reason}`;

  		}

  		console.error( errorMessage );

  		this._isDeviceLost = true;

  	}


  	_renderBundle( bundle, sceneRef, lightsNode ) {

  		const { bundleGroup, camera, renderList } = bundle;

  		const renderContext = this._currentRenderContext;

  		//

  		const renderBundle = this._bundles.get( bundleGroup, camera );
  		const renderBundleData = this.backend.get( renderBundle );

  		if ( renderBundleData.renderContexts === undefined ) renderBundleData.renderContexts = new Set();

  		//

  		const needsUpdate = bundleGroup.version !== renderBundleData.version;
  		const renderBundleNeedsUpdate = renderBundleData.renderContexts.has( renderContext ) === false || needsUpdate;

  		renderBundleData.renderContexts.add( renderContext );

  		if ( renderBundleNeedsUpdate ) {

  			this.backend.beginBundle( renderContext );

  			if ( renderBundleData.renderObjects === undefined || needsUpdate ) {

  				renderBundleData.renderObjects = [];

  			}

  			this._currentRenderBundle = renderBundle;

  			const opaqueObjects = renderList.opaque;

  			if ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );

  			this._currentRenderBundle = null;

  			//

  			this.backend.finishBundle( renderContext, renderBundle );

  			renderBundleData.version = bundleGroup.version;

  		} else {

  			const { renderObjects } = renderBundleData;

  			for ( let i = 0, l = renderObjects.length; i < l; i ++ ) {

  				const renderObject = renderObjects[ i ];

  				if ( this._nodes.needsRefresh( renderObject ) ) {

  					this._nodes.updateBefore( renderObject );

  					this._nodes.updateForRender( renderObject );
  					this._bindings.updateForRender( renderObject );

  					this._nodes.updateAfter( renderObject );

  				}

  			}

  		}

  		this.backend.addBundle( renderContext, renderBundle );

  	}

  	render( scene, camera ) {

  		if ( this._initialized === false ) {

  			console.warn( 'THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.' );

  			return this.renderAsync( scene, camera );

  		}

  		this._renderScene( scene, camera );

  	}

  	_getFrameBufferTarget() {

  		const { currentToneMapping, currentColorSpace } = this;

  		const useToneMapping = currentToneMapping !== NoToneMapping;
  		const useColorSpace = currentColorSpace !== LinearSRGBColorSpace;

  		if ( useToneMapping === false && useColorSpace === false ) return null;

  		const { width, height } = this.getDrawingBufferSize( _drawingBufferSize );
  		const { depth, stencil } = this;

  		let frameBufferTarget = this._frameBufferTarget;

  		if ( frameBufferTarget === null ) {

  			frameBufferTarget = new RenderTarget( width, height, {
  				depthBuffer: depth,
  				stencilBuffer: stencil,
  				type: HalfFloatType, // FloatType
  				format: RGBAFormat,
  				colorSpace: LinearSRGBColorSpace,
  				generateMipmaps: false,
  				minFilter: LinearFilter,
  				magFilter: LinearFilter,
  				samples: this.samples
  			} );

  			frameBufferTarget.isPostProcessingRenderTarget = true;

  			this._frameBufferTarget = frameBufferTarget;

  		}

  		frameBufferTarget.depthBuffer = depth;
  		frameBufferTarget.stencilBuffer = stencil;
  		frameBufferTarget.setSize( width, height );
  		frameBufferTarget.viewport.copy( this._viewport );
  		frameBufferTarget.scissor.copy( this._scissor );
  		frameBufferTarget.viewport.multiplyScalar( this._pixelRatio );
  		frameBufferTarget.scissor.multiplyScalar( this._pixelRatio );
  		frameBufferTarget.scissorTest = this._scissorTest;

  		return frameBufferTarget;

  	}

  	_renderScene( scene, camera, useFrameBufferTarget = true ) {

  		if ( this._isDeviceLost === true ) return;

  		const frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;

  		// preserve render tree

  		const nodeFrame = this._nodes.nodeFrame;

  		const previousRenderId = nodeFrame.renderId;
  		const previousRenderContext = this._currentRenderContext;
  		const previousRenderObjectFunction = this._currentRenderObjectFunction;

  		//

  		const sceneRef = ( scene.isScene === true ) ? scene : _scene;

  		const outputRenderTarget = this._renderTarget;

  		const activeCubeFace = this._activeCubeFace;
  		const activeMipmapLevel = this._activeMipmapLevel;

  		//

  		let renderTarget;

  		if ( frameBufferTarget !== null ) {

  			renderTarget = frameBufferTarget;

  			this.setRenderTarget( renderTarget );

  		} else {

  			renderTarget = outputRenderTarget;

  		}

  		//

  		const renderContext = this._renderContexts.get( scene, camera, renderTarget );

  		this._currentRenderContext = renderContext;
  		this._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;

  		//

  		this.info.calls ++;
  		this.info.render.calls ++;
  		this.info.render.frameCalls ++;

  		nodeFrame.renderId = this.info.calls;

  		//

  		const coordinateSystem = this.coordinateSystem;

  		if ( camera.coordinateSystem !== coordinateSystem ) {

  			camera.coordinateSystem = coordinateSystem;

  			camera.updateProjectionMatrix();

  		}

  		//

  		if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

  		if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

  		//

  		let viewport = this._viewport;
  		let scissor = this._scissor;
  		let pixelRatio = this._pixelRatio;

  		if ( renderTarget !== null ) {

  			viewport = renderTarget.viewport;
  			scissor = renderTarget.scissor;
  			pixelRatio = 1;

  		}

  		this.getDrawingBufferSize( _drawingBufferSize );

  		_screen.set( 0, 0, _drawingBufferSize.width, _drawingBufferSize.height );

  		const minDepth = ( viewport.minDepth === undefined ) ? 0 : viewport.minDepth;
  		const maxDepth = ( viewport.maxDepth === undefined ) ? 1 : viewport.maxDepth;

  		renderContext.viewportValue.copy( viewport ).multiplyScalar( pixelRatio ).floor();
  		renderContext.viewportValue.width >>= activeMipmapLevel;
  		renderContext.viewportValue.height >>= activeMipmapLevel;
  		renderContext.viewportValue.minDepth = minDepth;
  		renderContext.viewportValue.maxDepth = maxDepth;
  		renderContext.viewport = renderContext.viewportValue.equals( _screen ) === false;

  		renderContext.scissorValue.copy( scissor ).multiplyScalar( pixelRatio ).floor();
  		renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals( _screen ) === false;
  		renderContext.scissorValue.width >>= activeMipmapLevel;
  		renderContext.scissorValue.height >>= activeMipmapLevel;

  		if ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();
  		renderContext.clippingContext.updateGlobal( this, camera );

  		//

  		sceneRef.onBeforeRender( this, scene, camera, renderTarget );

  		//

  		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		_frustum.setFromProjectionMatrix( _projScreenMatrix, coordinateSystem );

  		const renderList = this._renderLists.get( scene, camera );
  		renderList.begin();

  		this._projectObject( scene, camera, 0, renderList );

  		renderList.finish();

  		if ( this.sortObjects === true ) {

  			renderList.sort( this._opaqueSort, this._transparentSort );

  		}

  		//

  		if ( renderTarget !== null ) {

  			this._textures.updateRenderTarget( renderTarget, activeMipmapLevel );

  			const renderTargetData = this._textures.get( renderTarget );

  			renderContext.textures = renderTargetData.textures;
  			renderContext.depthTexture = renderTargetData.depthTexture;
  			renderContext.width = renderTargetData.width;
  			renderContext.height = renderTargetData.height;
  			renderContext.renderTarget = renderTarget;
  			renderContext.depth = renderTarget.depthBuffer;
  			renderContext.stencil = renderTarget.stencilBuffer;

  		} else {

  			renderContext.textures = null;
  			renderContext.depthTexture = null;
  			renderContext.width = this.domElement.width;
  			renderContext.height = this.domElement.height;
  			renderContext.depth = this.depth;
  			renderContext.stencil = this.stencil;

  		}

  		renderContext.width >>= activeMipmapLevel;
  		renderContext.height >>= activeMipmapLevel;
  		renderContext.activeCubeFace = activeCubeFace;
  		renderContext.activeMipmapLevel = activeMipmapLevel;
  		renderContext.occlusionQueryCount = renderList.occlusionQueryCount;

  		//

  		this._nodes.updateScene( sceneRef );

  		//

  		this._background.update( sceneRef, renderList, renderContext );

  		//

  		this.backend.beginRender( renderContext );

  		// process render lists

  		const {
  			bundles,
  			lightsNode,
  			transparentDoublePass: transparentDoublePassObjects,
  			transparent: transparentObjects,
  			opaque: opaqueObjects
  		} = renderList;

  		if ( bundles.length > 0 ) this._renderBundles( bundles, sceneRef, lightsNode );
  		if ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );
  		if ( this.transparent === true && transparentObjects.length > 0 ) this._renderTransparents( transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode );

  		// finish render pass

  		this.backend.finishRender( renderContext );

  		// restore render tree

  		nodeFrame.renderId = previousRenderId;

  		this._currentRenderContext = previousRenderContext;
  		this._currentRenderObjectFunction = previousRenderObjectFunction;

  		//

  		if ( frameBufferTarget !== null ) {

  			this.setRenderTarget( outputRenderTarget, activeCubeFace, activeMipmapLevel );

  			const quad = this._quad;

  			if ( this._nodes.hasOutputChange( renderTarget.texture ) ) {

  				quad.material.fragmentNode = this._nodes.getOutputNode( renderTarget.texture );
  				quad.material.needsUpdate = true;

  			}

  			this._renderScene( quad, quad.camera, false );

  		}

  		//

  		sceneRef.onAfterRender( this, scene, camera, renderTarget );

  		//

  		return renderContext;

  	}

  	getMaxAnisotropy() {

  		return this.backend.getMaxAnisotropy();

  	}

  	getActiveCubeFace() {

  		return this._activeCubeFace;

  	}

  	getActiveMipmapLevel() {

  		return this._activeMipmapLevel;

  	}

  	async setAnimationLoop( callback ) {

  		if ( this._initialized === false ) await this.init();

  		this._animation.setAnimationLoop( callback );

  	}

  	async getArrayBufferAsync( attribute ) {

  		return await this.backend.getArrayBufferAsync( attribute );

  	}

  	getContext() {

  		return this.backend.getContext();

  	}

  	getPixelRatio() {

  		return this._pixelRatio;

  	}

  	getDrawingBufferSize( target ) {

  		return target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();

  	}

  	getSize( target ) {

  		return target.set( this._width, this._height );

  	}

  	setPixelRatio( value = 1 ) {

  		if ( this._pixelRatio === value ) return;

  		this._pixelRatio = value;

  		this.setSize( this._width, this._height, false );

  	}

  	setDrawingBufferSize( width, height, pixelRatio ) {

  		this._width = width;
  		this._height = height;

  		this._pixelRatio = pixelRatio;

  		this.domElement.width = Math.floor( width * pixelRatio );
  		this.domElement.height = Math.floor( height * pixelRatio );

  		this.setViewport( 0, 0, width, height );

  		if ( this._initialized ) this.backend.updateSize();

  	}

  	setSize( width, height, updateStyle = true ) {

  		this._width = width;
  		this._height = height;

  		this.domElement.width = Math.floor( width * this._pixelRatio );
  		this.domElement.height = Math.floor( height * this._pixelRatio );

  		if ( updateStyle === true ) {

  			this.domElement.style.width = width + 'px';
  			this.domElement.style.height = height + 'px';

  		}

  		this.setViewport( 0, 0, width, height );

  		if ( this._initialized ) this.backend.updateSize();

  	}

  	setOpaqueSort( method ) {

  		this._opaqueSort = method;

  	}

  	setTransparentSort( method ) {

  		this._transparentSort = method;

  	}

  	getScissor( target ) {

  		const scissor = this._scissor;

  		target.x = scissor.x;
  		target.y = scissor.y;
  		target.width = scissor.width;
  		target.height = scissor.height;

  		return target;

  	}

  	setScissor( x, y, width, height ) {

  		const scissor = this._scissor;

  		if ( x.isVector4 ) {

  			scissor.copy( x );

  		} else {

  			scissor.set( x, y, width, height );

  		}

  	}

  	getScissorTest() {

  		return this._scissorTest;

  	}

  	setScissorTest( boolean ) {

  		this._scissorTest = boolean;

  		this.backend.setScissorTest( boolean );

  	}

  	getViewport( target ) {

  		return target.copy( this._viewport );

  	}

  	setViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {

  		const viewport = this._viewport;

  		if ( x.isVector4 ) {

  			viewport.copy( x );

  		} else {

  			viewport.set( x, y, width, height );

  		}

  		viewport.minDepth = minDepth;
  		viewport.maxDepth = maxDepth;

  	}

  	getClearColor( target ) {

  		return target.copy( this._clearColor );

  	}

  	setClearColor( color, alpha = 1 ) {

  		this._clearColor.set( color );
  		this._clearColor.a = alpha;

  	}

  	getClearAlpha() {

  		return this._clearColor.a;

  	}

  	setClearAlpha( alpha ) {

  		this._clearColor.a = alpha;

  	}

  	getClearDepth() {

  		return this._clearDepth;

  	}

  	setClearDepth( depth ) {

  		this._clearDepth = depth;

  	}

  	getClearStencil() {

  		return this._clearStencil;

  	}

  	setClearStencil( stencil ) {

  		this._clearStencil = stencil;

  	}

  	isOccluded( object ) {

  		const renderContext = this._currentRenderContext;

  		return renderContext && this.backend.isOccluded( renderContext, object );

  	}

  	clear( color = true, depth = true, stencil = true ) {

  		if ( this._initialized === false ) {

  			console.warn( 'THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.' );

  			return this.clearAsync( color, depth, stencil );

  		}

  		const renderTarget = this._renderTarget || this._getFrameBufferTarget();

  		let renderTargetData = null;

  		if ( renderTarget !== null ) {

  			this._textures.updateRenderTarget( renderTarget );

  			renderTargetData = this._textures.get( renderTarget );

  		}

  		this.backend.clear( color, depth, stencil, renderTargetData );

  		if ( renderTarget !== null && this._renderTarget === null ) {

  			// If a color space transform or tone mapping is required,
  			// the clear operation clears the intermediate renderTarget texture, but does not update the screen canvas.

  			const quad = this._quad;

  			if ( this._nodes.hasOutputChange( renderTarget.texture ) ) {

  				quad.material.fragmentNode = this._nodes.getOutputNode( renderTarget.texture );
  				quad.material.needsUpdate = true;

  			}

  			this._renderScene( quad, quad.camera, false );

  		}

  	}

  	clearColor() {

  		return this.clear( true, false, false );

  	}

  	clearDepth() {

  		return this.clear( false, true, false );

  	}

  	clearStencil() {

  		return this.clear( false, false, true );

  	}

  	async clearAsync( color = true, depth = true, stencil = true ) {

  		if ( this._initialized === false ) await this.init();

  		this.clear( color, depth, stencil );

  	}

  	clearColorAsync() {

  		return this.clearAsync( true, false, false );

  	}

  	clearDepthAsync() {

  		return this.clearAsync( false, true, false );

  	}

  	clearStencilAsync() {

  		return this.clearAsync( false, false, true );

  	}

  	get currentToneMapping() {

  		return this._renderTarget !== null ? NoToneMapping : this.toneMapping;

  	}

  	get currentColorSpace() {

  		return this._renderTarget !== null ? LinearSRGBColorSpace : this.outputColorSpace;

  	}

  	dispose() {

  		this.info.dispose();
  		this.backend.dispose();

  		this._animation.dispose();
  		this._objects.dispose();
  		this._pipelines.dispose();
  		this._nodes.dispose();
  		this._bindings.dispose();
  		this._renderLists.dispose();
  		this._renderContexts.dispose();
  		this._textures.dispose();

  		this.setRenderTarget( null );
  		this.setAnimationLoop( null );

  	}

  	setRenderTarget( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

  		this._renderTarget = renderTarget;
  		this._activeCubeFace = activeCubeFace;
  		this._activeMipmapLevel = activeMipmapLevel;

  	}

  	getRenderTarget() {

  		return this._renderTarget;

  	}

  	setRenderObjectFunction( renderObjectFunction ) {

  		this._renderObjectFunction = renderObjectFunction;

  	}

  	getRenderObjectFunction() {

  		return this._renderObjectFunction;

  	}

  	compute( computeNodes ) {

  		if ( this.isDeviceLost === true ) return;

  		if ( this._initialized === false ) {

  			console.warn( 'THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead.' );

  			return this.computeAsync( computeNodes );

  		}

  		//

  		const nodeFrame = this._nodes.nodeFrame;

  		const previousRenderId = nodeFrame.renderId;

  		//

  		this.info.calls ++;
  		this.info.compute.calls ++;
  		this.info.compute.frameCalls ++;

  		nodeFrame.renderId = this.info.calls;

  		//

  		const backend = this.backend;
  		const pipelines = this._pipelines;
  		const bindings = this._bindings;
  		const nodes = this._nodes;

  		const computeList = Array.isArray( computeNodes ) ? computeNodes : [ computeNodes ];

  		if ( computeList[ 0 ] === undefined || computeList[ 0 ].isComputeNode !== true ) {

  			throw new Error( 'THREE.Renderer: .compute() expects a ComputeNode.' );

  		}

  		backend.beginCompute( computeNodes );

  		for ( const computeNode of computeList ) {

  			// onInit

  			if ( pipelines.has( computeNode ) === false ) {

  				const dispose = () => {

  					computeNode.removeEventListener( 'dispose', dispose );

  					pipelines.delete( computeNode );
  					bindings.delete( computeNode );
  					nodes.delete( computeNode );

  				};

  				computeNode.addEventListener( 'dispose', dispose );

  				//

  				const onInitFn = computeNode.onInitFunction;

  				if ( onInitFn !== null ) {

  					onInitFn.call( computeNode, { renderer: this } );

  				}

  			}

  			nodes.updateForCompute( computeNode );
  			bindings.updateForCompute( computeNode );

  			const computeBindings = bindings.getForCompute( computeNode );
  			const computePipeline = pipelines.getForCompute( computeNode, computeBindings );

  			backend.compute( computeNodes, computeNode, computeBindings, computePipeline );

  		}

  		backend.finishCompute( computeNodes );

  		//

  		nodeFrame.renderId = previousRenderId;

  	}

  	async computeAsync( computeNodes ) {

  		if ( this._initialized === false ) await this.init();

  		this.compute( computeNodes );

  		await this.backend.resolveTimestampAsync( computeNodes, 'compute' );

  	}

  	async hasFeatureAsync( name ) {

  		if ( this._initialized === false ) await this.init();

  		return this.backend.hasFeature( name );

  	}

  	hasFeature( name ) {

  		if ( this._initialized === false ) {

  			console.warn( 'THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.' );

  			return false;

  		}

  		return this.backend.hasFeature( name );

  	}

  	copyFramebufferToTexture( framebufferTexture, rectangle = null ) {

  		if ( rectangle !== null ) {

  			if ( rectangle.isVector2 ) {

  				rectangle = _vector4.set( rectangle.x, rectangle.y, framebufferTexture.image.width, framebufferTexture.image.height ).floor();

  			} else if ( rectangle.isVector4 ) {

  				rectangle = _vector4.copy( rectangle ).floor();

  			} else {

  				console.error( 'THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.' );

  				return;

  			}

  		} else {

  			rectangle = _vector4.set( 0, 0, framebufferTexture.image.width, framebufferTexture.image.height );

  		}

  		//

  		let renderContext = this._currentRenderContext;
  		let renderTarget;

  		if ( renderContext !== null ) {

  			renderTarget = renderContext.renderTarget;

  		} else {

  			renderTarget = this._renderTarget || this._getFrameBufferTarget();

  			if ( renderTarget !== null ) {

  				this._textures.updateRenderTarget( renderTarget );

  				renderContext = this._textures.get( renderTarget );

  			}

  		}

  		//

  		this._textures.updateTexture( framebufferTexture, { renderTarget } );

  		this.backend.copyFramebufferToTexture( framebufferTexture, renderContext, rectangle );

  	}

  	copyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

  		this._textures.updateTexture( srcTexture );
  		this._textures.updateTexture( dstTexture );

  		this.backend.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );

  	}

  	readRenderTargetPixelsAsync( renderTarget, x, y, width, height, index = 0, faceIndex = 0 ) {

  		return this.backend.copyTextureToBuffer( renderTarget.textures[ index ], x, y, width, height, faceIndex );

  	}

  	_projectObject( object, camera, groupOrder, renderList ) {

  		if ( object.visible === false ) return;

  		const visible = object.layers.test( camera.layers );

  		if ( visible ) {

  			if ( object.isGroup ) {

  				groupOrder = object.renderOrder;

  			} else if ( object.isLOD ) {

  				if ( object.autoUpdate === true ) object.update( camera );

  			} else if ( object.isLight ) {

  				renderList.pushLight( object );

  			} else if ( object.isSprite ) {

  				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

  					if ( this.sortObjects === true ) {

  						_vector4.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );

  					}

  					const { geometry, material } = object;

  					if ( material.visible ) {

  						renderList.push( object, geometry, material, groupOrder, _vector4.z, null );

  					}

  				}

  			} else if ( object.isLineLoop ) {

  				console.error( 'THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );

  			} else if ( object.isMesh || object.isLine || object.isPoints ) {

  				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

  					const { geometry, material } = object;

  					if ( this.sortObjects === true ) {

  						if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  						_vector4
  							.copy( geometry.boundingSphere.center )
  							.applyMatrix4( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					if ( Array.isArray( material ) ) {

  						const groups = geometry.groups;

  						for ( let i = 0, l = groups.length; i < l; i ++ ) {

  							const group = groups[ i ];
  							const groupMaterial = material[ group.materialIndex ];

  							if ( groupMaterial && groupMaterial.visible ) {

  								renderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group );

  							}

  						}

  					} else if ( material.visible ) {

  						renderList.push( object, geometry, material, groupOrder, _vector4.z, null );

  					}

  				}

  			}

  		}

  		if ( object.isBundleGroup === true && this.backend.beginBundle !== undefined ) {

  			const baseRenderList = renderList;

  			// replace render list
  			renderList = this._renderLists.get( object, camera );

  			renderList.begin();

  			baseRenderList.pushBundle( {
  				bundleGroup: object,
  				camera,
  				renderList,
  			} );

  			renderList.finish();

  		}

  		const children = object.children;

  		for ( let i = 0, l = children.length; i < l; i ++ ) {

  			this._projectObject( children[ i ], camera, groupOrder, renderList );

  		}

  	}

  	_renderBundles( bundles, sceneRef, lightsNode ) {

  		for ( const bundle of bundles ) {

  			this._renderBundle( bundle, sceneRef, lightsNode );

  		}

  	}

  	_renderTransparents( renderList, doublePassList, camera, scene, lightsNode ) {

  		if ( doublePassList.length > 0 ) {

  			// render back side

  			for ( const { material } of doublePassList ) {

  				material.side = BackSide;

  			}

  			this._renderObjects( doublePassList, camera, scene, lightsNode, 'backSide' );

  			// render front side

  			for ( const { material } of doublePassList ) {

  				material.side = FrontSide;

  			}

  			this._renderObjects( renderList, camera, scene, lightsNode );

  			// restore

  			for ( const { material } of doublePassList ) {

  				material.side = DoubleSide;

  			}

  		} else {

  			this._renderObjects( renderList, camera, scene, lightsNode );

  		}

  	}

  	_renderObjects( renderList, camera, scene, lightsNode, passId = null ) {

  		// process renderable objects

  		for ( let i = 0, il = renderList.length; i < il; i ++ ) {

  			const renderItem = renderList[ i ];

  			// @TODO: Add support for multiple materials per object. This will require to extract
  			// the material from the renderItem object and pass it with its group data to renderObject().

  			const { object, geometry, material, group } = renderItem;

  			if ( camera.isArrayCamera ) {

  				const cameras = camera.cameras;

  				for ( let j = 0, jl = cameras.length; j < jl; j ++ ) {

  					const camera2 = cameras[ j ];

  					if ( object.layers.test( camera2.layers ) ) {

  						const vp = camera2.viewport;
  						const minDepth = ( vp.minDepth === undefined ) ? 0 : vp.minDepth;
  						const maxDepth = ( vp.maxDepth === undefined ) ? 1 : vp.maxDepth;

  						const viewportValue = this._currentRenderContext.viewportValue;
  						viewportValue.copy( vp ).multiplyScalar( this._pixelRatio ).floor();
  						viewportValue.minDepth = minDepth;
  						viewportValue.maxDepth = maxDepth;

  						this.backend.updateViewport( this._currentRenderContext );

  						this._currentRenderObjectFunction( object, scene, camera2, geometry, material, group, lightsNode, passId );

  					}

  				}

  			} else {

  				this._currentRenderObjectFunction( object, scene, camera, geometry, material, group, lightsNode, passId );

  			}

  		}

  	}

  	renderObject( object, scene, camera, geometry, material, group, lightsNode, passId = null ) {

  		let overridePositionNode;
  		let overrideFragmentNode;
  		let overrideDepthNode;

  		//

  		object.onBeforeRender( this, scene, camera, geometry, material, group );

  		//

  		if ( scene.overrideMaterial !== null ) {

  			const overrideMaterial = scene.overrideMaterial;

  			if ( material.positionNode && material.positionNode.isNode ) {

  				overridePositionNode = overrideMaterial.positionNode;
  				overrideMaterial.positionNode = material.positionNode;

  			}

  			if ( overrideMaterial.isShadowNodeMaterial ) {

  				overrideMaterial.side = material.shadowSide === null ? material.side : material.shadowSide;

  				if ( material.depthNode && material.depthNode.isNode ) {

  					overrideDepthNode = overrideMaterial.depthNode;
  					overrideMaterial.depthNode = material.depthNode;

  				}


  				if ( material.shadowNode && material.shadowNode.isNode ) {

  					overrideFragmentNode = overrideMaterial.fragmentNode;
  					overrideMaterial.fragmentNode = material.shadowNode;

  				}

  				if ( this.localClippingEnabled ) {

  					if ( material.clipShadows ) {

  						if ( overrideMaterial.clippingPlanes !== material.clippingPlanes ) {

  							overrideMaterial.clippingPlanes = material.clippingPlanes;
  							overrideMaterial.needsUpdate = true;

  						}

  						if ( overrideMaterial.clipIntersection !== material.clipIntersection ) {

  							overrideMaterial.clipIntersection = material.clipIntersection;

  						}

  					} else if ( Array.isArray( overrideMaterial.clippingPlanes ) ) {

  						overrideMaterial.clippingPlanes = null;
  						overrideMaterial.needsUpdate = true;

  					}

  				}

  			}

  			material = overrideMaterial;

  		}

  		//

  		if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

  			material.side = BackSide;
  			this._handleObjectFunction( object, material, scene, camera, lightsNode, group, 'backSide' ); // create backSide pass id

  			material.side = FrontSide;
  			this._handleObjectFunction( object, material, scene, camera, lightsNode, group, passId ); // use default pass id

  			material.side = DoubleSide;

  		} else {

  			this._handleObjectFunction( object, material, scene, camera, lightsNode, group, passId );

  		}

  		//

  		if ( overridePositionNode !== undefined ) {

  			scene.overrideMaterial.positionNode = overridePositionNode;

  		}

  		if ( overrideDepthNode !== undefined ) {

  			scene.overrideMaterial.depthNode = overrideDepthNode;

  		}

  		if ( overrideFragmentNode !== undefined ) {

  			scene.overrideMaterial.fragmentNode = overrideFragmentNode;

  		}

  		//

  		object.onAfterRender( this, scene, camera, geometry, material, group );

  	}

  	_renderObjectDirect( object, material, scene, camera, lightsNode, group, passId ) {

  		const renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, passId );
  		renderObject.drawRange = object.geometry.drawRange;
  		renderObject.group = group;

  		//

  		const needsRefresh = this._nodes.needsRefresh( renderObject );

  		if ( needsRefresh ) {

  			this._nodes.updateBefore( renderObject );

  			this._geometries.updateForRender( renderObject );

  			this._nodes.updateForRender( renderObject );
  			this._bindings.updateForRender( renderObject );

  		}

  		this._pipelines.updateForRender( renderObject );

  		//

  		if ( this._currentRenderBundle !== null ) {

  			const renderBundleData = this.backend.get( this._currentRenderBundle );

  			renderBundleData.renderObjects.push( renderObject );

  			renderObject.bundle = this._currentRenderBundle.scene;

  		}

  		this.backend.draw( renderObject, this.info );

  		if ( needsRefresh ) this._nodes.updateAfter( renderObject );

  	}

  	_createObjectPipeline( object, material, scene, camera, lightsNode, passId ) {

  		const renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, passId );

  		//

  		this._nodes.updateBefore( renderObject );

  		this._geometries.updateForRender( renderObject );

  		this._nodes.updateForRender( renderObject );
  		this._bindings.updateForRender( renderObject );

  		this._pipelines.getForRender( renderObject, this._compilationPromises );

  		this._nodes.updateAfter( renderObject );

  	}

  	get compile() {

  		return this.compileAsync;

  	}

  }

  class Binding {

  	constructor( name = '' ) {

  		this.name = name;

  		this.visibility = 0;

  	}

  	setVisibility( visibility ) {

  		this.visibility |= visibility;

  	}

  	clone() {

  		return Object.assign( new this.constructor(), this );

  	}

  }

  function getFloatLength( floatLength ) {

  	// ensure chunk size alignment (STD140 layout)

  	return floatLength + ( ( GPU_CHUNK_BYTES - ( floatLength % GPU_CHUNK_BYTES ) ) % GPU_CHUNK_BYTES );

  }

  class Buffer extends Binding {

  	constructor( name, buffer = null ) {

  		super( name );

  		this.isBuffer = true;

  		this.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;

  		this._buffer = buffer;

  	}

  	get byteLength() {

  		return getFloatLength( this._buffer.byteLength );

  	}

  	get buffer() {

  		return this._buffer;

  	}

  	update() {

  		return true;

  	}

  }

  class UniformBuffer extends Buffer {

  	constructor( name, buffer = null ) {

  		super( name, buffer );

  		this.isUniformBuffer = true;

  	}

  }

  let _id$4 = 0;

  class NodeUniformBuffer extends UniformBuffer {

  	constructor( nodeUniform, groupNode ) {

  		super( 'UniformBuffer_' + _id$4 ++, nodeUniform ? nodeUniform.value : null );

  		this.nodeUniform = nodeUniform;
  		this.groupNode = groupNode;

  	}

  	get buffer() {

  		return this.nodeUniform.value;

  	}

  }

  class UniformsGroup extends UniformBuffer {

  	constructor( name ) {

  		super( name );

  		this.isUniformsGroup = true;

  		this._values = null;

  		// the order of uniforms in this array must match the order of uniforms in the shader

  		this.uniforms = [];

  	}

  	addUniform( uniform ) {

  		this.uniforms.push( uniform );

  		return this;

  	}

  	removeUniform( uniform ) {

  		const index = this.uniforms.indexOf( uniform );

  		if ( index !== - 1 ) {

  			this.uniforms.splice( index, 1 );

  		}

  		return this;

  	}

  	get values() {

  		if ( this._values === null ) {

  			this._values = Array.from( this.buffer );

  		}

  		return this._values;

  	}

  	get buffer() {

  		let buffer = this._buffer;

  		if ( buffer === null ) {

  			const byteLength = this.byteLength;

  			buffer = new Float32Array( new ArrayBuffer( byteLength ) );

  			this._buffer = buffer;

  		}

  		return buffer;

  	}

  	get byteLength() {

  		let offset = 0; // global buffer offset in bytes

  		for ( let i = 0, l = this.uniforms.length; i < l; i ++ ) {

  			const uniform = this.uniforms[ i ];

  			const { boundary, itemSize } = uniform;

  			// offset within a single chunk in bytes

  			const chunkOffset = offset % GPU_CHUNK_BYTES;
  			const remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;

  			// conformance tests

  			if ( chunkOffset !== 0 && ( remainingSizeInChunk - boundary ) < 0 ) {

  				// check for chunk overflow

  				offset += ( GPU_CHUNK_BYTES - chunkOffset );

  			} else if ( chunkOffset % boundary !== 0 ) {

  				// check for correct alignment

  				offset += ( chunkOffset % boundary );

  			}

  			uniform.offset = ( offset / this.bytesPerElement );

  			offset += ( itemSize * this.bytesPerElement );

  		}

  		return Math.ceil( offset / GPU_CHUNK_BYTES ) * GPU_CHUNK_BYTES;

  	}

  	update() {

  		let updated = false;

  		for ( const uniform of this.uniforms ) {

  			if ( this.updateByType( uniform ) === true ) {

  				updated = true;

  			}

  		}

  		return updated;

  	}

  	updateByType( uniform ) {

  		if ( uniform.isNumberUniform ) return this.updateNumber( uniform );
  		if ( uniform.isVector2Uniform ) return this.updateVector2( uniform );
  		if ( uniform.isVector3Uniform ) return this.updateVector3( uniform );
  		if ( uniform.isVector4Uniform ) return this.updateVector4( uniform );
  		if ( uniform.isColorUniform ) return this.updateColor( uniform );
  		if ( uniform.isMatrix3Uniform ) return this.updateMatrix3( uniform );
  		if ( uniform.isMatrix4Uniform ) return this.updateMatrix4( uniform );

  		console.error( 'THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform );

  	}

  	updateNumber( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const v = uniform.getValue();
  		const offset = uniform.offset;

  		if ( a[ offset ] !== v ) {

  			const b = this.buffer;

  			b[ offset ] = a[ offset ] = v;
  			updated = true;

  		}

  		return updated;

  	}

  	updateVector2( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const v = uniform.getValue();
  		const offset = uniform.offset;

  		if ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y ) {

  			const b = this.buffer;

  			b[ offset + 0 ] = a[ offset + 0 ] = v.x;
  			b[ offset + 1 ] = a[ offset + 1 ] = v.y;

  			updated = true;

  		}

  		return updated;

  	}

  	updateVector3( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const v = uniform.getValue();
  		const offset = uniform.offset;

  		if ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z ) {

  			const b = this.buffer;

  			b[ offset + 0 ] = a[ offset + 0 ] = v.x;
  			b[ offset + 1 ] = a[ offset + 1 ] = v.y;
  			b[ offset + 2 ] = a[ offset + 2 ] = v.z;

  			updated = true;

  		}

  		return updated;

  	}

  	updateVector4( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const v = uniform.getValue();
  		const offset = uniform.offset;

  		if ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z || a[ offset + 4 ] !== v.w ) {

  			const b = this.buffer;

  			b[ offset + 0 ] = a[ offset + 0 ] = v.x;
  			b[ offset + 1 ] = a[ offset + 1 ] = v.y;
  			b[ offset + 2 ] = a[ offset + 2 ] = v.z;
  			b[ offset + 3 ] = a[ offset + 3 ] = v.w;

  			updated = true;

  		}

  		return updated;

  	}

  	updateColor( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const c = uniform.getValue();
  		const offset = uniform.offset;

  		if ( a[ offset + 0 ] !== c.r || a[ offset + 1 ] !== c.g || a[ offset + 2 ] !== c.b ) {

  			const b = this.buffer;

  			b[ offset + 0 ] = a[ offset + 0 ] = c.r;
  			b[ offset + 1 ] = a[ offset + 1 ] = c.g;
  			b[ offset + 2 ] = a[ offset + 2 ] = c.b;

  			updated = true;

  		}

  		return updated;

  	}

  	updateMatrix3( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const e = uniform.getValue().elements;
  		const offset = uniform.offset;

  		if ( a[ offset + 0 ] !== e[ 0 ] || a[ offset + 1 ] !== e[ 1 ] || a[ offset + 2 ] !== e[ 2 ] ||
  			a[ offset + 4 ] !== e[ 3 ] || a[ offset + 5 ] !== e[ 4 ] || a[ offset + 6 ] !== e[ 5 ] ||
  			a[ offset + 8 ] !== e[ 6 ] || a[ offset + 9 ] !== e[ 7 ] || a[ offset + 10 ] !== e[ 8 ] ) {

  			const b = this.buffer;

  			b[ offset + 0 ] = a[ offset + 0 ] = e[ 0 ];
  			b[ offset + 1 ] = a[ offset + 1 ] = e[ 1 ];
  			b[ offset + 2 ] = a[ offset + 2 ] = e[ 2 ];
  			b[ offset + 4 ] = a[ offset + 4 ] = e[ 3 ];
  			b[ offset + 5 ] = a[ offset + 5 ] = e[ 4 ];
  			b[ offset + 6 ] = a[ offset + 6 ] = e[ 5 ];
  			b[ offset + 8 ] = a[ offset + 8 ] = e[ 6 ];
  			b[ offset + 9 ] = a[ offset + 9 ] = e[ 7 ];
  			b[ offset + 10 ] = a[ offset + 10 ] = e[ 8 ];

  			updated = true;

  		}

  		return updated;

  	}

  	updateMatrix4( uniform ) {

  		let updated = false;

  		const a = this.values;
  		const e = uniform.getValue().elements;
  		const offset = uniform.offset;

  		if ( arraysEqual( a, e, offset ) === false ) {

  			const b = this.buffer;
  			b.set( e, offset );
  			setArray( a, e, offset );
  			updated = true;

  		}

  		return updated;

  	}

  }

  function setArray( a, b, offset ) {

  	for ( let i = 0, l = b.length; i < l; i ++ ) {

  		a[ offset + i ] = b[ i ];

  	}

  }

  function arraysEqual( a, b, offset ) {

  	for ( let i = 0, l = b.length; i < l; i ++ ) {

  		if ( a[ offset + i ] !== b[ i ] ) return false;

  	}

  	return true;

  }

  let _id$3 = 0;

  class NodeUniformsGroup extends UniformsGroup {

  	constructor( name, groupNode ) {

  		super( name );

  		this.id = _id$3 ++;
  		this.groupNode = groupNode;

  		this.isNodeUniformsGroup = true;

  	}

  	getNodes() {

  		const nodes = [];

  		for ( const uniform of this.uniforms ) {

  			const node = uniform.nodeUniform.node;

  			if ( ! node ) throw new Error( 'NodeUniformsGroup: Uniform has no node.' );

  			nodes.push( node );

  		}

  		return nodes;

  	}

  }

  let _id$2 = 0;

  class SampledTexture extends Binding {

  	constructor( name, texture ) {

  		super( name );

  		this.id = _id$2 ++;

  		this.texture = texture;
  		this.version = texture ? texture.version : 0;
  		this.store = false;
  		this.generation = null;

  		this.isSampledTexture = true;

  	}

  	needsBindingsUpdate( generation ) {

  		const { texture } = this;

  		if ( generation !== this.generation ) {

  			this.generation = generation;

  			return true;

  		}

  		return texture.isVideoTexture;

  	}

  	update() {

  		const { texture, version } = this;

  		if ( version !== texture.version ) {

  			this.version = texture.version;

  			return true;

  		}

  		return false;

  	}

  }

  class NodeSampledTexture extends SampledTexture {

  	constructor( name, textureNode, groupNode, access = null ) {

  		super( name, textureNode ? textureNode.value : null );

  		this.textureNode = textureNode;
  		this.groupNode = groupNode;

  		this.access = access;

  	}

  	needsBindingsUpdate( generation ) {

  		return this.textureNode.value !== this.texture || super.needsBindingsUpdate( generation );

  	}

  	update() {

  		const { textureNode } = this;

  		if ( this.texture !== textureNode.value ) {

  			this.texture = textureNode.value;

  			return true;

  		}

  		return super.update();

  	}

  }

  class NodeSampledCubeTexture extends NodeSampledTexture {

  	constructor( name, textureNode, groupNode, access ) {

  		super( name, textureNode, groupNode, access );

  		this.isSampledCubeTexture = true;

  	}

  }

  class NodeSampledTexture3D extends NodeSampledTexture {

  	constructor( name, textureNode, groupNode, access ) {

  		super( name, textureNode, groupNode, access );

  		this.isSampledTexture3D = true;

  	}

  }

  const glslMethods = {
  	atan2: 'atan',
  	textureDimensions: 'textureSize',
  	equals: 'equal'
  };

  const precisionLib = {
  	low: 'lowp',
  	medium: 'mediump',
  	high: 'highp'
  };

  const supports$1 = {
  	swizzleAssign: true,
  	storageBuffer: false
  };

  const defaultPrecisions = `
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;

  class GLSLNodeBuilder extends NodeBuilder {

  	constructor( object, renderer ) {

  		super( object, renderer, new GLSLNodeParser() );

  		this.uniformGroups = {};
  		this.transforms = [];
  		this.extensions = {};

  		this.useComparisonMethod = true;

  	}

  	needsColorSpaceToLinearSRGB( texture ) {

  		return texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;

  	}

  	getMethod( method ) {

  		return glslMethods[ method ] || method;

  	}

  	getOutputStructName() {

  		return '';

  	}

  	buildFunctionCode( shaderNode ) {

  		const layout = shaderNode.layout;
  		const flowData = this.flowShaderNode( shaderNode );

  		const parameters = [];

  		for ( const input of layout.inputs ) {

  			parameters.push( this.getType( input.type ) + ' ' + input.name );

  		}

  		//

  		const code = `${ this.getType( layout.type ) } ${ layout.name }( ${ parameters.join( ', ' ) } ) {

	${ flowData.vars }

${ flowData.code }
	return ${ flowData.result };

}`;

  		//

  		return code;

  	}

  	setupPBO( storageBufferNode ) {

  		const attribute = storageBufferNode.value;

  		if ( attribute.pbo === undefined ) {

  			const originalArray = attribute.array;
  			const numElements = attribute.count * attribute.itemSize;

  			const { itemSize } = attribute;

  			const isInteger = attribute.array.constructor.name.toLowerCase().includes( 'int' );

  			let format = isInteger ? RedIntegerFormat : RedFormat;


  			if ( itemSize === 2 ) {

  				format = isInteger ? RGIntegerFormat : RGFormat;

  			} else if ( itemSize === 3 ) {

  				format = isInteger ? RGBIntegerFormat : RGBFormat;

  			} else if ( itemSize === 4 ) {

  				format = isInteger ? RGBAIntegerFormat : RGBAFormat;

  			}

  			const typeMap = {
  				Float32Array: FloatType,
  				Uint8Array: UnsignedByteType,
  				Uint16Array: UnsignedShortType,
  				Uint32Array: UnsignedIntType,
  				Int8Array: ByteType,
  				Int16Array: ShortType,
  				Int32Array: IntType,
  				Uint8ClampedArray: UnsignedByteType,
  			};

  			const width = Math.pow( 2, Math.ceil( Math.log2( Math.sqrt( numElements / itemSize ) ) ) );
  			let height = Math.ceil( ( numElements / itemSize ) / width );
  			if ( width * height * itemSize < numElements ) height ++; // Ensure enough space

  			const newSize = width * height * itemSize;

  			const newArray = new originalArray.constructor( newSize );

  			newArray.set( originalArray, 0 );

  			attribute.array = newArray;

  			const pboTexture = new DataTexture( attribute.array, width, height, format, typeMap[ attribute.array.constructor.name ] || FloatType );
  			pboTexture.needsUpdate = true;
  			pboTexture.isPBOTexture = true;

  			const pbo = new TextureNode( pboTexture, null, null );
  			pbo.setPrecision( 'high' );

  			attribute.pboNode = pbo;
  			attribute.pbo = pbo.value;

  			this.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );

  		}

  	}

  	getPropertyName( node, shaderStage = this.shaderStage ) {

  		if ( node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true ) {

  			return shaderStage.charAt( 0 ) + '_' + node.name;

  		}

  		return super.getPropertyName( node, shaderStage );

  	}

  	generatePBO( storageArrayElementNode ) {

  		const { node, indexNode } = storageArrayElementNode;
  		const attribute = node.value;

  		if ( this.renderer.backend.has( attribute ) ) {

  			const attributeData = this.renderer.backend.get( attribute );
  			attributeData.pbo = attribute.pbo;

  		}


  		const nodeUniform = this.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );
  		const textureName = this.getPropertyName( nodeUniform );

  		this.increaseUsage( indexNode ); // force cache generate to be used as index in x,y
  		const indexSnippet = indexNode.build( this, 'uint' );

  		const elementNodeData = this.getDataFromNode( storageArrayElementNode );

  		let propertyName = elementNodeData.propertyName;

  		if ( propertyName === undefined ) {

  			// property element

  			const nodeVar = this.getVarFromNode( storageArrayElementNode );

  			propertyName = this.getPropertyName( nodeVar );

  			// property size

  			const bufferNodeData = this.getDataFromNode( node );

  			let propertySizeName = bufferNodeData.propertySizeName;

  			if ( propertySizeName === undefined ) {

  				propertySizeName = propertyName + 'Size';

  				this.getVarFromNode( node, propertySizeName, 'uint' );

  				this.addLineFlowCode( `${ propertySizeName } = uint( textureSize( ${ textureName }, 0 ).x )`, storageArrayElementNode );

  				bufferNodeData.propertySizeName = propertySizeName;

  			}

  			//

  			const { itemSize } = attribute;

  			const channel = '.' + vectorComponents.join( '' ).slice( 0, itemSize );
  			const uvSnippet = `ivec2(${indexSnippet} % ${ propertySizeName }, ${indexSnippet} / ${ propertySizeName })`;

  			const snippet = this.generateTextureLoad( null, textureName, uvSnippet, null, '0' );

  			//


  			let prefix = 'vec4';

  			if ( attribute.pbo.type === UnsignedIntType ) {

  				prefix = 'uvec4';

  			} else if ( attribute.pbo.type === IntType ) {

  				prefix = 'ivec4';

  			}

  			this.addLineFlowCode( `${ propertyName } = ${prefix}(${ snippet })${channel}`, storageArrayElementNode );

  			elementNodeData.propertyName = propertyName;

  		}

  		return propertyName;

  	}

  	generateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0' ) {

  		if ( depthSnippet ) {

  			return `texelFetch( ${ textureProperty }, ivec3( ${ uvIndexSnippet }, ${ depthSnippet } ), ${ levelSnippet } )`;

  		} else {

  			return `texelFetch( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;

  		}

  	}

  	generateTexture( texture, textureProperty, uvSnippet, depthSnippet ) {

  		if ( texture.isDepthTexture ) {

  			return `texture( ${ textureProperty }, ${ uvSnippet } ).x`;

  		} else {

  			if ( depthSnippet ) uvSnippet = `vec3( ${ uvSnippet }, ${ depthSnippet } )`;

  			return `texture( ${ textureProperty }, ${ uvSnippet } )`;

  		}

  	}

  	generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet ) {

  		return `textureLod( ${ textureProperty }, ${ uvSnippet }, ${ levelSnippet } )`;

  	}

  	generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet ) {

  		return `texture( ${ textureProperty }, ${ uvSnippet }, ${ biasSnippet } )`;

  	}

  	generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet ) {

  		return `textureGrad( ${ textureProperty }, ${ uvSnippet }, ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;

  	}

  	generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			return `texture( ${ textureProperty }, vec3( ${ uvSnippet }, ${ compareSnippet } ) )`;

  		} else {

  			console.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );

  		}

  	}

  	getVars( shaderStage ) {

  		const snippets = [];

  		const vars = this.vars[ shaderStage ];

  		if ( vars !== undefined ) {

  			for ( const variable of vars ) {

  				snippets.push( `${ this.getVar( variable.type, variable.name ) };` );

  			}

  		}

  		return snippets.join( '\n\t' );

  	}

  	getUniforms( shaderStage ) {

  		const uniforms = this.uniforms[ shaderStage ];

  		const bindingSnippets = [];
  		const uniformGroups = {};

  		for ( const uniform of uniforms ) {

  			let snippet = null;
  			let group = false;

  			if ( uniform.type === 'texture' ) {

  				const texture = uniform.node.value;

  				let typePrefix = '';

  				if ( texture.isDataTexture === true ) {


  					if ( texture.type === UnsignedIntType ) {

  						typePrefix = 'u';

  					} else if ( texture.type === IntType ) {

  						typePrefix = 'i';

  					}

  				}

  				if ( texture.compareFunction ) {

  					snippet = `sampler2DShadow ${ uniform.name };`;

  				} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {

  					snippet = `${typePrefix}sampler2DArray ${ uniform.name };`;

  				} else {

  					snippet = `${typePrefix}sampler2D ${ uniform.name };`;

  				}

  			} else if ( uniform.type === 'cubeTexture' ) {

  				snippet = `samplerCube ${ uniform.name };`;

  			} else if ( uniform.type === 'texture3D' ) {

  				snippet = `sampler3D ${ uniform.name };`;

  			} else if ( uniform.type === 'buffer' ) {

  				const bufferNode = uniform.node;
  				const bufferType = this.getType( bufferNode.bufferType );
  				const bufferCount = bufferNode.bufferCount;

  				const bufferCountSnippet = bufferCount > 0 ? bufferCount : '';
  				snippet = `${bufferNode.name} {\n\t${ bufferType } ${ uniform.name }[${ bufferCountSnippet }];\n};\n`;

  			} else {

  				const vectorType = this.getVectorType( uniform.type );

  				snippet = `${ vectorType } ${ this.getPropertyName( uniform, shaderStage ) };`;

  				group = true;

  			}

  			const precision = uniform.node.precision;

  			if ( precision !== null ) {

  				snippet = precisionLib[ precision ] + ' ' + snippet;

  			}

  			if ( group ) {

  				snippet = '\t' + snippet;

  				const groupName = uniform.groupNode.name;
  				const groupSnippets = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = [] );

  				groupSnippets.push( snippet );

  			} else {

  				snippet = 'uniform ' + snippet;

  				bindingSnippets.push( snippet );

  			}

  		}

  		let output = '';

  		for ( const name in uniformGroups ) {

  			const groupSnippets = uniformGroups[ name ];

  			output += this._getGLSLUniformStruct( shaderStage + '_' + name, groupSnippets.join( '\n' ) ) + '\n';

  		}

  		output += bindingSnippets.join( '\n' );

  		return output;

  	}

  	getTypeFromAttribute( attribute ) {

  		let nodeType = super.getTypeFromAttribute( attribute );

  		if ( /^[iu]/.test( nodeType ) && attribute.gpuType !== IntType ) {

  			let dataAttribute = attribute;

  			if ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;

  			const array = dataAttribute.array;

  			if ( ( array instanceof Uint32Array || array instanceof Int32Array ) === false ) {

  				nodeType = nodeType.slice( 1 );

  			}

  		}

  		return nodeType;

  	}

  	getAttributes( shaderStage ) {

  		let snippet = '';

  		if ( shaderStage === 'vertex' || shaderStage === 'compute' ) {

  			const attributes = this.getAttributesArray();

  			let location = 0;

  			for ( const attribute of attributes ) {

  				snippet += `layout( location = ${ location ++ } ) in ${ attribute.type } ${ attribute.name };\n`;

  			}

  		}

  		return snippet;

  	}

  	getStructMembers( struct ) {

  		const snippets = [];
  		const members = struct.getMemberTypes();

  		for ( let i = 0; i < members.length; i ++ ) {

  			const member = members[ i ];
  			snippets.push( `layout( location = ${i} ) out ${ member} m${i};` );

  		}

  		return snippets.join( '\n' );

  	}

  	getStructs( shaderStage ) {

  		const snippets = [];
  		const structs = this.structs[ shaderStage ];

  		if ( structs.length === 0 ) {

  			return 'layout( location = 0 ) out vec4 fragColor;\n';

  		}

  		for ( let index = 0, length = structs.length; index < length; index ++ ) {

  			const struct = structs[ index ];

  			let snippet = '\n';
  			snippet += this.getStructMembers( struct );
  			snippet += '\n';

  			snippets.push( snippet );

  		}

  		return snippets.join( '\n\n' );

  	}

  	getVaryings( shaderStage ) {

  		let snippet = '';

  		const varyings = this.varyings;

  		if ( shaderStage === 'vertex' || shaderStage === 'compute' ) {

  			for ( const varying of varyings ) {

  				if ( shaderStage === 'compute' ) varying.needsInterpolation = true;
  				const type = varying.type;
  				const flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';

  				snippet += `${flat}${varying.needsInterpolation ? 'out' : '/*out*/'} ${type} ${varying.name};\n`;

  			}

  		} else if ( shaderStage === 'fragment' ) {

  			for ( const varying of varyings ) {

  				if ( varying.needsInterpolation ) {

  					const type = varying.type;
  					const flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';

  					snippet += `${flat}in ${type} ${varying.name};\n`;

  				}

  			}

  		}

  		return snippet;

  	}

  	getVertexIndex() {

  		return 'uint( gl_VertexID )';

  	}

  	getInstanceIndex() {

  		return 'uint( gl_InstanceID )';

  	}

  	getInvocationLocalIndex() {

  		const workgroupSize = this.object.workgroupSize;

  		const size = workgroupSize.reduce( ( acc, curr ) => acc * curr, 1 );

  		return `uint( gl_InstanceID ) % ${size}u`;

  	}

  	getDrawIndex() {

  		const extensions = this.renderer.backend.extensions;

  		if ( extensions.has( 'WEBGL_multi_draw' ) ) {

  			return 'uint( gl_DrawID )';

  		}

  		return null;

  	}

  	getFrontFacing() {

  		return 'gl_FrontFacing';

  	}

  	getFragCoord() {

  		return 'gl_FragCoord.xy';

  	}

  	getFragDepth() {

  		return 'gl_FragDepth';

  	}

  	enableExtension( name, behavior, shaderStage = this.shaderStage ) {

  		const map = this.extensions[ shaderStage ] || ( this.extensions[ shaderStage ] = new Map() );

  		if ( map.has( name ) === false ) {

  			map.set( name, {
  				name,
  				behavior
  			} );

  		}

  	}

  	getExtensions( shaderStage ) {

  		const snippets = [];

  		if ( shaderStage === 'vertex' ) {

  			const ext = this.renderer.backend.extensions;
  			const isBatchedMesh = this.object.isBatchedMesh;

  			if ( isBatchedMesh && ext.has( 'WEBGL_multi_draw' ) ) {

  				this.enableExtension( 'GL_ANGLE_multi_draw', 'require', shaderStage );

  			}

  		}

  		const extensions = this.extensions[ shaderStage ];

  		if ( extensions !== undefined ) {

  			for ( const { name, behavior } of extensions.values() ) {

  				snippets.push( `#extension ${name} : ${behavior}` );

  			}

  		}

  		return snippets.join( '\n' );

  	}

  	isAvailable( name ) {

  		let result = supports$1[ name ];

  		if ( result === undefined ) {

  			if ( name === 'float32Filterable' ) {

  				const extensions = this.renderer.backend.extensions;

  				if ( extensions.has( 'OES_texture_float_linear' ) ) {

  					extensions.get( 'OES_texture_float_linear' );
  					result = true;

  				} else {

  					result = false;

  				}

  			}

  			supports$1[ name ] = result;

  		}

  		return result;

  	}

  	isFlipY() {

  		return true;

  	}

  	registerTransform( varyingName, attributeNode ) {

  		this.transforms.push( { varyingName, attributeNode } );

  	}

  	getTransforms( /* shaderStage  */ ) {

  		const transforms = this.transforms;

  		let snippet = '';

  		for ( let i = 0; i < transforms.length; i ++ ) {

  			const transform = transforms[ i ];

  			const attributeName = this.getPropertyName( transform.attributeNode );

  			snippet += `${ transform.varyingName } = ${ attributeName };\n\t`;

  		}

  		return snippet;

  	}

  	_getGLSLUniformStruct( name, vars ) {

  		return `
layout( std140 ) uniform ${name} {
${vars}
};`;

  	}

  	_getGLSLVertexCode( shaderData ) {

  		return `#version 300 es

${ this.getSignature() }

// extensions 
${shaderData.extensions}

// precision
${ defaultPrecisions }

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// attributes
${shaderData.attributes}

// codes
${shaderData.codes}

void main() {

	// vars
	${shaderData.vars}

	// transforms
	${shaderData.transforms}

	// flow
	${shaderData.flow}

	gl_PointSize = 1.0;

}
`;

  	}

  	_getGLSLFragmentCode( shaderData ) {

  		return `#version 300 es

${ this.getSignature() }

// precision
${ defaultPrecisions }

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// codes
${shaderData.codes}

${shaderData.structs}

void main() {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;

  	}

  	buildCode() {

  		const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };

  		this.sortBindingGroups();

  		for ( const shaderStage in shadersData ) {

  			let flow = '// code\n\n';
  			flow += this.flowCode[ shaderStage ];

  			const flowNodes = this.flowNodes[ shaderStage ];
  			const mainNode = flowNodes[ flowNodes.length - 1 ];

  			for ( const node of flowNodes ) {

  				const flowSlotData = this.getFlowData( node/*, shaderStage*/ );
  				const slotName = node.name;

  				if ( slotName ) {

  					if ( flow.length > 0 ) flow += '\n';

  					flow += `\t// flow -> ${ slotName }\n\t`;

  				}

  				flow += `${ flowSlotData.code }\n\t`;

  				if ( node === mainNode && shaderStage !== 'compute' ) {

  					flow += '// result\n\t';

  					if ( shaderStage === 'vertex' ) {

  						flow += 'gl_Position = ';
  						flow += `${ flowSlotData.result };`;

  					} else if ( shaderStage === 'fragment' ) {

  						if ( ! node.outputNode.isOutputStructNode ) {

  							flow += 'fragColor = ';
  							flow += `${ flowSlotData.result };`;

  						}

  					}

  				}

  			}

  			const stageData = shadersData[ shaderStage ];

  			stageData.extensions = this.getExtensions( shaderStage );
  			stageData.uniforms = this.getUniforms( shaderStage );
  			stageData.attributes = this.getAttributes( shaderStage );
  			stageData.varyings = this.getVaryings( shaderStage );
  			stageData.vars = this.getVars( shaderStage );
  			stageData.structs = this.getStructs( shaderStage );
  			stageData.codes = this.getCodes( shaderStage );
  			stageData.transforms = this.getTransforms( shaderStage );
  			stageData.flow = flow;

  		}

  		if ( this.material !== null ) {

  			this.vertexShader = this._getGLSLVertexCode( shadersData.vertex );
  			this.fragmentShader = this._getGLSLFragmentCode( shadersData.fragment );

  		} else {

  			this.computeShader = this._getGLSLVertexCode( shadersData.compute );

  		}

  	}

  	getUniformFromNode( node, type, shaderStage, name = null ) {

  		const uniformNode = super.getUniformFromNode( node, type, shaderStage, name );
  		const nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );

  		let uniformGPU = nodeData.uniformGPU;

  		if ( uniformGPU === undefined ) {

  			const group = node.groupNode;
  			const groupName = group.name;

  			const bindings = this.getBindGroupArray( groupName, shaderStage );

  			if ( type === 'texture' ) {

  				uniformGPU = new NodeSampledTexture( uniformNode.name, uniformNode.node, group );
  				bindings.push( uniformGPU );

  			} else if ( type === 'cubeTexture' ) {

  				uniformGPU = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group );
  				bindings.push( uniformGPU );

  			} else if ( type === 'texture3D' ) {

  				uniformGPU = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group );
  				bindings.push( uniformGPU );

  			} else if ( type === 'buffer' ) {

  				node.name = `NodeBuffer_${ node.id }`;
  				uniformNode.name = `buffer${ node.id }`;

  				const buffer = new NodeUniformBuffer( node, group );
  				buffer.name = node.name;

  				bindings.push( buffer );

  				uniformGPU = buffer;

  			} else {

  				const uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );

  				let uniformsGroup = uniformsStage[ groupName ];

  				if ( uniformsGroup === undefined ) {

  					uniformsGroup = new NodeUniformsGroup( shaderStage + '_' + groupName, group );
  					//uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );

  					uniformsStage[ groupName ] = uniformsGroup;

  					bindings.push( uniformsGroup );

  				}

  				uniformGPU = this.getNodeUniform( uniformNode, type );

  				uniformsGroup.addUniform( uniformGPU );

  			}

  			nodeData.uniformGPU = uniformGPU;

  		}

  		return uniformNode;

  	}

  }

  let vector2 = null;
  let vector4 = null;
  let color4 = null;

  class Backend {

  	constructor( parameters = {} ) {

  		this.parameters = Object.assign( {}, parameters );
  		this.data = new WeakMap();
  		this.renderer = null;
  		this.domElement = null;

  	}

  	async init( renderer ) {

  		this.renderer = renderer;

  	}

  	// render context

  	begin( /*renderContext*/ ) { }

  	finish( /*renderContext*/ ) { }

  	// render object

  	draw( /*renderObject, info*/ ) { }

  	// program

  	createProgram( /*program*/ ) { }

  	destroyProgram( /*program*/ ) { }

  	// bindings

  	createBindings( /*bingGroup, bindings*/ ) { }

  	updateBindings( /*bingGroup, bindings*/ ) { }

  	// pipeline

  	createRenderPipeline( /*renderObject*/ ) { }

  	createComputePipeline( /*computeNode, pipeline*/ ) { }

  	destroyPipeline( /*pipeline*/ ) { }

  	// cache key

  	needsRenderUpdate( /*renderObject*/ ) { } // return Boolean ( fast test )

  	getRenderCacheKey( /*renderObject*/ ) { } // return String

  	// node builder

  	createNodeBuilder( /*renderObject*/ ) { } // return NodeBuilder (ADD IT)

  	// textures

  	createSampler( /*texture*/ ) { }

  	createDefaultTexture( /*texture*/ ) { }

  	createTexture( /*texture*/ ) { }

  	copyTextureToBuffer( /*texture, x, y, width, height*/ ) {}

  	// attributes

  	createAttribute( /*attribute*/ ) { }

  	createIndexAttribute( /*attribute*/ ) { }

  	updateAttribute( /*attribute*/ ) { }

  	destroyAttribute( /*attribute*/ ) { }

  	// canvas

  	getContext() { }

  	updateSize() { }

  	// utils

  	resolveTimestampAsync( /*renderContext, type*/ ) { }

  	hasFeatureAsync( /*name*/ ) { } // return Boolean

  	hasFeature( /*name*/ ) { } // return Boolean

  	getInstanceCount( renderObject ) {

  		const { object, geometry } = renderObject;

  		return geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.count > 1 ? object.count : 1 );

  	}

  	getDrawingBufferSize() {

  		vector2 = vector2 || new Vector2();

  		return this.renderer.getDrawingBufferSize( vector2 );

  	}

  	getScissor() {

  		vector4 = vector4 || new Vector4();

  		return this.renderer.getScissor( vector4 );

  	}

  	setScissorTest( /*boolean*/ ) { }

  	getClearColor() {

  		const renderer = this.renderer;

  		color4 = color4 || new Color4();

  		renderer.getClearColor( color4 );

  		color4.getRGB( color4, this.renderer.currentColorSpace );

  		return color4;

  	}

  	getDomElement() {

  		let domElement = this.domElement;

  		if ( domElement === null ) {

  			domElement = ( this.parameters.canvas !== undefined ) ? this.parameters.canvas : createCanvasElement();

  			// OffscreenCanvas does not have setAttribute, see #22811
  			if ( 'setAttribute' in domElement ) domElement.setAttribute( 'data-engine', `three.js r${REVISION} webgpu` );

  			this.domElement = domElement;

  		}

  		return domElement;

  	}

  	// resource properties

  	set( object, value ) {

  		this.data.set( object, value );

  	}

  	get( object ) {

  		let map = this.data.get( object );

  		if ( map === undefined ) {

  			map = {};
  			this.data.set( object, map );

  		}

  		return map;

  	}

  	has( object ) {

  		return this.data.has( object );

  	}

  	delete( object ) {

  		this.data.delete( object );

  	}

  	dispose() { }

  }

  let _id$1 = 0;

  class DualAttributeData {

  	constructor( attributeData, dualBuffer ) {

  		this.buffers = [ attributeData.bufferGPU, dualBuffer ];
  		this.type = attributeData.type;
  		this.bufferType = attributeData.bufferType;
  		this.pbo = attributeData.pbo;
  		this.byteLength = attributeData.byteLength;
  		this.bytesPerElement = attributeData.BYTES_PER_ELEMENT;
  		this.version = attributeData.version;
  		this.isInteger = attributeData.isInteger;
  		this.activeBufferIndex = 0;
  		this.baseId = attributeData.id;

  	}


  	get id() {

  		return `${ this.baseId }|${ this.activeBufferIndex }`;

  	}

  	get bufferGPU() {

  		return this.buffers[ this.activeBufferIndex ];

  	}

  	get transformBuffer() {

  		return this.buffers[ this.activeBufferIndex ^ 1 ];

  	}

  	switchBuffers() {

  		this.activeBufferIndex ^= 1;

  	}

  }

  class WebGLAttributeUtils {

  	constructor( backend ) {

  		this.backend = backend;

  	}

  	createAttribute( attribute, bufferType ) {

  		const backend = this.backend;
  		const { gl } = backend;

  		const array = attribute.array;
  		const usage = attribute.usage || gl.STATIC_DRAW;

  		const bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;
  		const bufferData = backend.get( bufferAttribute );

  		let bufferGPU = bufferData.bufferGPU;

  		if ( bufferGPU === undefined ) {

  			bufferGPU = this._createBuffer( gl, bufferType, array, usage );

  			bufferData.bufferGPU = bufferGPU;
  			bufferData.bufferType = bufferType;
  			bufferData.version = bufferAttribute.version;

  		}

  		//attribute.onUploadCallback();

  		let type;

  		if ( array instanceof Float32Array ) {

  			type = gl.FLOAT;

  		} else if ( array instanceof Uint16Array ) {

  			if ( attribute.isFloat16BufferAttribute ) {

  				type = gl.HALF_FLOAT;

  			} else {

  				type = gl.UNSIGNED_SHORT;

  			}

  		} else if ( array instanceof Int16Array ) {

  			type = gl.SHORT;

  		} else if ( array instanceof Uint32Array ) {

  			type = gl.UNSIGNED_INT;

  		} else if ( array instanceof Int32Array ) {

  			type = gl.INT;

  		} else if ( array instanceof Int8Array ) {

  			type = gl.BYTE;

  		} else if ( array instanceof Uint8Array ) {

  			type = gl.UNSIGNED_BYTE;

  		} else if ( array instanceof Uint8ClampedArray ) {

  			type = gl.UNSIGNED_BYTE;

  		} else {

  			throw new Error( 'THREE.WebGLBackend: Unsupported buffer data format: ' + array );

  		}

  		let attributeData = {
  			bufferGPU,
  			bufferType,
  			type,
  			byteLength: array.byteLength,
  			bytesPerElement: array.BYTES_PER_ELEMENT,
  			version: attribute.version,
  			pbo: attribute.pbo,
  			isInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute.gpuType === IntType,
  			id: _id$1 ++
  		};

  		if ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {

  			// create buffer for tranform feedback use
  			const bufferGPUDual = this._createBuffer( gl, bufferType, array, usage );
  			attributeData = new DualAttributeData( attributeData, bufferGPUDual );

  		}

  		backend.set( attribute, attributeData );

  	}

  	updateAttribute( attribute ) {

  		const backend = this.backend;
  		const { gl } = backend;

  		const array = attribute.array;
  		const bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;
  		const bufferData = backend.get( bufferAttribute );
  		const bufferType = bufferData.bufferType;
  		const updateRanges = attribute.isInterleavedBufferAttribute ? attribute.data.updateRanges : attribute.updateRanges;

  		gl.bindBuffer( bufferType, bufferData.bufferGPU );

  		if ( updateRanges.length === 0 ) {

  			// Not using update ranges

  			gl.bufferSubData( bufferType, 0, array );

  		} else {

  			for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

  				const range = updateRanges[ i ];
  				gl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,
  					array, range.start, range.count );

  			}

  			bufferAttribute.clearUpdateRanges();

  		}

  		gl.bindBuffer( bufferType, null );

  		bufferData.version = bufferAttribute.version;

  	}

  	destroyAttribute( attribute ) {

  		const backend = this.backend;
  		const { gl } = backend;

  		if ( attribute.isInterleavedBufferAttribute ) {

  			backend.delete( attribute.data );

  		}

  		const attributeData = backend.get( attribute );

  		gl.deleteBuffer( attributeData.bufferGPU );

  		backend.delete( attribute );

  	}

  	async getArrayBufferAsync( attribute ) {

  		const backend = this.backend;
  		const { gl } = backend;

  		const bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;
  		const { bufferGPU } = backend.get( bufferAttribute );

  		const array = attribute.array;
  		const byteLength = array.byteLength;

  		gl.bindBuffer( gl.COPY_READ_BUFFER, bufferGPU );

  		const writeBuffer = gl.createBuffer();

  		gl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );
  		gl.bufferData( gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ );

  		gl.copyBufferSubData( gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength );

  		await backend.utils._clientWaitAsync();

  		const dstBuffer = new attribute.array.constructor( array.length );

  		// Ensure the buffer is bound before reading
  		gl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );

  		gl.getBufferSubData( gl.COPY_WRITE_BUFFER, 0, dstBuffer );

  		gl.deleteBuffer( writeBuffer );

  		gl.bindBuffer( gl.COPY_READ_BUFFER, null );
  		gl.bindBuffer( gl.COPY_WRITE_BUFFER, null );

  		return dstBuffer.buffer;

  	}

  	_createBuffer( gl, bufferType, array, usage ) {

  		const bufferGPU = gl.createBuffer();

  		gl.bindBuffer( bufferType, bufferGPU );
  		gl.bufferData( bufferType, array, usage );
  		gl.bindBuffer( bufferType, null );

  		return bufferGPU;

  	}

  }

  let initialized$1 = false, equationToGL, factorToGL;

  class WebGLState {

  	constructor( backend ) {

  		this.backend = backend;

  		this.gl = this.backend.gl;

  		this.enabled = {};
  		this.currentFlipSided = null;
  		this.currentCullFace = null;
  		this.currentProgram = null;
  		this.currentBlendingEnabled = false;
  		this.currentBlending = null;
  		this.currentBlendSrc = null;
  		this.currentBlendDst = null;
  		this.currentBlendSrcAlpha = null;
  		this.currentBlendDstAlpha = null;
  		this.currentPremultipledAlpha = null;
  		this.currentPolygonOffsetFactor = null;
  		this.currentPolygonOffsetUnits = null;
  		this.currentColorMask = null;
  		this.currentDepthFunc = null;
  		this.currentDepthMask = null;
  		this.currentStencilFunc = null;
  		this.currentStencilRef = null;
  		this.currentStencilFuncMask = null;
  		this.currentStencilFail = null;
  		this.currentStencilZFail = null;
  		this.currentStencilZPass = null;
  		this.currentStencilMask = null;
  		this.currentLineWidth = null;

  		this.currentBoundFramebuffers = {};
  		this.currentDrawbuffers = new WeakMap();

  		this.maxTextures = this.gl.getParameter( this.gl.MAX_TEXTURE_IMAGE_UNITS );
  		this.currentTextureSlot = null;
  		this.currentBoundTextures = {};
  		this.currentBoundBufferBases = {};

  		if ( initialized$1 === false ) {

  			this._init( this.gl );

  			initialized$1 = true;

  		}

  	}

  	_init( gl ) {

  		// Store only WebGL constants here.

  		equationToGL = {
  			[ AddEquation ]: gl.FUNC_ADD,
  			[ SubtractEquation ]: gl.FUNC_SUBTRACT,
  			[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
  		};

  		factorToGL = {
  			[ ZeroFactor ]: gl.ZERO,
  			[ OneFactor ]: gl.ONE,
  			[ SrcColorFactor ]: gl.SRC_COLOR,
  			[ SrcAlphaFactor ]: gl.SRC_ALPHA,
  			[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
  			[ DstColorFactor ]: gl.DST_COLOR,
  			[ DstAlphaFactor ]: gl.DST_ALPHA,
  			[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
  			[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
  			[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
  			[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA
  		};

  	}

  	enable( id ) {

  		const { enabled } = this;

  		if ( enabled[ id ] !== true ) {

  			this.gl.enable( id );
  			enabled[ id ] = true;

  		}

  	}

  	disable( id ) {

  		const { enabled } = this;

  		if ( enabled[ id ] !== false ) {

  			this.gl.disable( id );
  			enabled[ id ] = false;

  		}

  	}

  	setFlipSided( flipSided ) {

  		if ( this.currentFlipSided !== flipSided ) {

  			const { gl } = this;

  			if ( flipSided ) {

  				gl.frontFace( gl.CW );

  			} else {

  				gl.frontFace( gl.CCW );

  			}

  			this.currentFlipSided = flipSided;

  		}

  	}

  	setCullFace( cullFace ) {

  		const { gl } = this;

  		if ( cullFace !== CullFaceNone ) {

  			this.enable( gl.CULL_FACE );

  			if ( cullFace !== this.currentCullFace ) {

  				if ( cullFace === CullFaceBack ) {

  					gl.cullFace( gl.BACK );

  				} else if ( cullFace === CullFaceFront ) {

  					gl.cullFace( gl.FRONT );

  				} else {

  					gl.cullFace( gl.FRONT_AND_BACK );

  				}

  			}

  		} else {

  			this.disable( gl.CULL_FACE );

  		}

  		this.currentCullFace = cullFace;

  	}

  	setLineWidth( width ) {

  		const { currentLineWidth, gl } = this;

  		if ( width !== currentLineWidth ) {

  			gl.lineWidth( width );

  			this.currentLineWidth = width;

  		}

  	}


  	setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

  		const { gl } = this;

  		if ( blending === NoBlending ) {

  			if ( this.currentBlendingEnabled === true ) {

  				this.disable( gl.BLEND );
  				this.currentBlendingEnabled = false;

  			}

  			return;

  		}

  		if ( this.currentBlendingEnabled === false ) {

  			this.enable( gl.BLEND );
  			this.currentBlendingEnabled = true;

  		}

  		if ( blending !== CustomBlending ) {

  			if ( blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha ) {

  				if ( this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation ) {

  					gl.blendEquation( gl.FUNC_ADD );

  					this.currentBlendEquation = AddEquation;
  					this.currentBlendEquationAlpha = AddEquation;

  				}

  				if ( premultipliedAlpha ) {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( gl.ONE, gl.ONE );
  							break;

  						case SubtractiveBlending:
  							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
  							break;

  						case MultiplyBlending:
  							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				} else {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
  							break;

  						case SubtractiveBlending:
  							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
  							break;

  						case MultiplyBlending:
  							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				}

  				this.currentBlendSrc = null;
  				this.currentBlendDst = null;
  				this.currentBlendSrcAlpha = null;
  				this.currentBlendDstAlpha = null;

  				this.currentBlending = blending;
  				this.currentPremultipledAlpha = premultipliedAlpha;

  			}

  			return;

  		}

  		// custom blending

  		blendEquationAlpha = blendEquationAlpha || blendEquation;
  		blendSrcAlpha = blendSrcAlpha || blendSrc;
  		blendDstAlpha = blendDstAlpha || blendDst;

  		if ( blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha ) {

  			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

  			this.currentBlendEquation = blendEquation;
  			this.currentBlendEquationAlpha = blendEquationAlpha;

  		}

  		if ( blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha ) {

  			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

  			this.currentBlendSrc = blendSrc;
  			this.currentBlendDst = blendDst;
  			this.currentBlendSrcAlpha = blendSrcAlpha;
  			this.currentBlendDstAlpha = blendDstAlpha;

  		}

  		this.currentBlending = blending;
  		this.currentPremultipledAlpha = false;

  	}

  	setColorMask( colorMask ) {

  		if ( this.currentColorMask !== colorMask ) {

  			this.gl.colorMask( colorMask, colorMask, colorMask, colorMask );
  			this.currentColorMask = colorMask;

  		}

  	}

  	setDepthTest( depthTest ) {

  		const { gl } = this;

  		if ( depthTest ) {

  			this.enable( gl.DEPTH_TEST );

  		} else {

  			this.disable( gl.DEPTH_TEST );

  		}

  	}

  	setDepthMask( depthMask ) {

  		if ( this.currentDepthMask !== depthMask ) {

  			this.gl.depthMask( depthMask );
  			this.currentDepthMask = depthMask;

  		}

  	}

  	setDepthFunc( depthFunc ) {

  		if ( this.currentDepthFunc !== depthFunc ) {

  			const { gl } = this;

  			switch ( depthFunc ) {

  				case NeverDepth:

  					gl.depthFunc( gl.NEVER );
  					break;

  				case AlwaysDepth:

  					gl.depthFunc( gl.ALWAYS );
  					break;

  				case LessDepth:

  					gl.depthFunc( gl.LESS );
  					break;

  				case LessEqualDepth:

  					gl.depthFunc( gl.LEQUAL );
  					break;

  				case EqualDepth:

  					gl.depthFunc( gl.EQUAL );
  					break;

  				case GreaterEqualDepth:

  					gl.depthFunc( gl.GEQUAL );
  					break;

  				case GreaterDepth:

  					gl.depthFunc( gl.GREATER );
  					break;

  				case NotEqualDepth:

  					gl.depthFunc( gl.NOTEQUAL );
  					break;

  				default:

  					gl.depthFunc( gl.LEQUAL );

  			}

  			this.currentDepthFunc = depthFunc;

  		}

  	}

  	setStencilTest( stencilTest ) {

  		const { gl } = this;

  		if ( stencilTest ) {

  			this.enable( gl.STENCIL_TEST );

  		} else {

  			this.disable( gl.STENCIL_TEST );

  		}

  	}

  	setStencilMask( stencilMask ) {

  		if ( this.currentStencilMask !== stencilMask ) {

  			this.gl.stencilMask( stencilMask );
  			this.currentStencilMask = stencilMask;

  		}

  	}

  	setStencilFunc( stencilFunc, stencilRef, stencilMask ) {

  		if ( this.currentStencilFunc !== stencilFunc ||
  			 this.currentStencilRef !== stencilRef ||
  			 this.currentStencilFuncMask !== stencilMask ) {

  			this.gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

  			this.currentStencilFunc = stencilFunc;
  			this.currentStencilRef = stencilRef;
  			this.currentStencilFuncMask = stencilMask;

  		}

  	}

  	setStencilOp( stencilFail, stencilZFail, stencilZPass ) {

  		if ( this.currentStencilFail !== stencilFail ||
  			 this.currentStencilZFail !== stencilZFail ||
  			 this.currentStencilZPass !== stencilZPass ) {

  			this.gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

  			this.currentStencilFail = stencilFail;
  			this.currentStencilZFail = stencilZFail;
  			this.currentStencilZPass = stencilZPass;

  		}

  	}

  	setMaterial( material, frontFaceCW ) {

  		const { gl } = this;

  		material.side === DoubleSide
  			? this.disable( gl.CULL_FACE )
  			: this.enable( gl.CULL_FACE );

  		let flipSided = ( material.side === BackSide );
  		if ( frontFaceCW ) flipSided = ! flipSided;

  		this.setFlipSided( flipSided );

  		( material.blending === NormalBlending && material.transparent === false )
  			? this.setBlending( NoBlending )
  			: this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

  		this.setDepthFunc( material.depthFunc );
  		this.setDepthTest( material.depthTest );
  		this.setDepthMask( material.depthWrite );
  		this.setColorMask( material.colorWrite );

  		const stencilWrite = material.stencilWrite;
  		this.setStencilTest( stencilWrite );
  		if ( stencilWrite ) {

  			this.setStencilMask( material.stencilWriteMask );
  			this.setStencilFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
  			this.setStencilOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

  		}

  		this.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

  		material.alphaToCoverage === true && this.backend.renderer.samples > 1
  			? this.enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
  			: this.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

  	}

  	setPolygonOffset( polygonOffset, factor, units ) {

  		const { gl } = this;

  		if ( polygonOffset ) {

  			this.enable( gl.POLYGON_OFFSET_FILL );

  			if ( this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units ) {

  				gl.polygonOffset( factor, units );

  				this.currentPolygonOffsetFactor = factor;
  				this.currentPolygonOffsetUnits = units;

  			}

  		} else {

  			this.disable( gl.POLYGON_OFFSET_FILL );

  		}

  	}

  	useProgram( program ) {

  		if ( this.currentProgram !== program ) {

  			this.gl.useProgram( program );

  			this.currentProgram = program;

  			return true;

  		}

  		return false;

  	}

  	// framebuffer


  	bindFramebuffer( target, framebuffer ) {

  		const { gl, currentBoundFramebuffers } = this;

  		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

  			gl.bindFramebuffer( target, framebuffer );

  			currentBoundFramebuffers[ target ] = framebuffer;

  			// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

  			if ( target === gl.DRAW_FRAMEBUFFER ) {

  				currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

  			}

  			if ( target === gl.FRAMEBUFFER ) {

  				currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

  			}

  			return true;

  		}

  		return false;

  	}

  	drawBuffers( renderContext, framebuffer ) {

  		const { gl } = this;

  		let drawBuffers = [];

  		let needsUpdate = false;

  		if ( renderContext.textures !== null ) {

  			drawBuffers = this.currentDrawbuffers.get( framebuffer );

  			if ( drawBuffers === undefined ) {

  				drawBuffers = [];
  				this.currentDrawbuffers.set( framebuffer, drawBuffers );

  			}


  			const textures = renderContext.textures;

  			if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

  				for ( let i = 0, il = textures.length; i < il; i ++ ) {

  					drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

  				}

  				drawBuffers.length = textures.length;

  				needsUpdate = true;

  			}


  		} else {

  			if ( drawBuffers[ 0 ] !== gl.BACK ) {

  				drawBuffers[ 0 ] = gl.BACK;

  				needsUpdate = true;

  			}

  		}

  		if ( needsUpdate ) {

  			gl.drawBuffers( drawBuffers );

  		}

  	}


  	// texture

  	activeTexture( webglSlot ) {

  		const { gl, currentTextureSlot, maxTextures } = this;

  		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

  		if ( currentTextureSlot !== webglSlot ) {

  			gl.activeTexture( webglSlot );
  			this.currentTextureSlot = webglSlot;

  		}

  	}

  	bindTexture( webglType, webglTexture, webglSlot ) {

  		const { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;

  		if ( webglSlot === undefined ) {

  			if ( currentTextureSlot === null ) {

  				webglSlot = gl.TEXTURE0 + maxTextures - 1;

  			} else {

  				webglSlot = currentTextureSlot;

  			}

  		}

  		let boundTexture = currentBoundTextures[ webglSlot ];

  		if ( boundTexture === undefined ) {

  			boundTexture = { type: undefined, texture: undefined };
  			currentBoundTextures[ webglSlot ] = boundTexture;

  		}

  		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

  			if ( currentTextureSlot !== webglSlot ) {

  				gl.activeTexture( webglSlot );
  				this.currentTextureSlot = webglSlot;

  			}

  			gl.bindTexture( webglType, webglTexture );

  			boundTexture.type = webglType;
  			boundTexture.texture = webglTexture;

  		}

  	}

  	bindBufferBase( target, index, buffer ) {

  		const { gl } = this;

  		const key = `${target}-${index}`;

  		if ( this.currentBoundBufferBases[ key ] !== buffer ) {

  			gl.bindBufferBase( target, index, buffer );
  			this.currentBoundBufferBases[ key ] = buffer;

  			return true;

  		}

  		return false;

  	}


  	unbindTexture() {

  		const { gl, currentTextureSlot, currentBoundTextures } = this;

  		const boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

  			gl.bindTexture( boundTexture.type, null );

  			boundTexture.type = undefined;
  			boundTexture.texture = undefined;

  		}

  	}

  }

  class WebGLUtils {

  	constructor( backend ) {

  		this.backend = backend;

  		this.gl = this.backend.gl;
  		this.extensions = backend.extensions;

  	}

  	convert( p, colorSpace = NoColorSpace ) {

  		const { gl, extensions } = this;

  		let extension;

  		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
  		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
  		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
  		if ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;

  		if ( p === ByteType ) return gl.BYTE;
  		if ( p === ShortType ) return gl.SHORT;
  		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
  		if ( p === IntType ) return gl.INT;
  		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
  		if ( p === FloatType ) return gl.FLOAT;

  		if ( p === HalfFloatType ) {

  			return gl.HALF_FLOAT;

  		}

  		if ( p === AlphaFormat ) return gl.ALPHA;
  		if ( p === RGBFormat ) return gl.RGB;
  		if ( p === RGBAFormat ) return gl.RGBA;
  		if ( p === LuminanceFormat ) return gl.LUMINANCE;
  		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
  		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
  		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

  		// WebGL2 formats.

  		if ( p === RedFormat ) return gl.RED;
  		if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
  		if ( p === RGFormat ) return gl.RG;
  		if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
  		if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

  		// S3TC

  		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

  			if ( colorSpace === SRGBColorSpace ) {

  				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

  				if ( extension !== null ) {

  					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
  					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

  				} else {

  					return null;

  				}

  			} else {

  				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

  				if ( extension !== null ) {

  					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
  					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
  					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

  				} else {

  					return null;

  				}

  			}

  		}

  		// PVRTC

  		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  			if ( extension !== null ) {

  				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

  			} else {

  				return null;

  			}

  		}

  		// ETC

  		if ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

  			if ( extension !== null ) {

  				if ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
  				if ( p === RGBA_ETC2_EAC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

  			} else {

  				return null;

  			}

  		}

  		// ASTC

  		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
  			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
  			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
  			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
  			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_ASTC_4x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
  				if ( p === RGBA_ASTC_5x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
  				if ( p === RGBA_ASTC_5x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
  				if ( p === RGBA_ASTC_6x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
  				if ( p === RGBA_ASTC_6x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
  				if ( p === RGBA_ASTC_8x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
  				if ( p === RGBA_ASTC_8x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
  				if ( p === RGBA_ASTC_8x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
  				if ( p === RGBA_ASTC_10x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
  				if ( p === RGBA_ASTC_10x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
  				if ( p === RGBA_ASTC_10x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
  				if ( p === RGBA_ASTC_10x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
  				if ( p === RGBA_ASTC_12x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
  				if ( p === RGBA_ASTC_12x12_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

  			} else {

  				return null;

  			}

  		}

  		// BPTC

  		if ( p === RGBA_BPTC_Format ) {

  			extension = extensions.get( 'EXT_texture_compression_bptc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_BPTC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;

  			} else {

  				return null;

  			}

  		}

  		// RGTC

  		if ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {

  			extension = extensions.get( 'EXT_texture_compression_rgtc' );

  			if ( extension !== null ) {

  				if ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;
  				if ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
  				if ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
  				if ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

  			} else {

  				return null;

  			}

  		}

  		//

  		if ( p === UnsignedInt248Type ) {

  			return gl.UNSIGNED_INT_24_8;

  		}

  		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

  		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

  	}

  	_clientWaitAsync() {

  		const { gl } = this;

  		const sync = gl.fenceSync( gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );

  		gl.flush();

  		return new Promise( ( resolve, reject ) => {

  			function test() {

  				const res = gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 );

  				if ( res === gl.WAIT_FAILED ) {

  					gl.deleteSync( sync );

  					reject();
  					return;

  				}

  				if ( res === gl.TIMEOUT_EXPIRED ) {

  					requestAnimationFrame( test );
  					return;

  				}

  				gl.deleteSync( sync );

  				resolve();

  			}

  			test();

  		} );

  	}

  }

  let initialized = false, wrappingToGL, filterToGL, compareToGL;

  class WebGLTextureUtils {

  	constructor( backend ) {

  		this.backend = backend;

  		this.gl = backend.gl;
  		this.extensions = backend.extensions;
  		this.defaultTextures = {};

  		if ( initialized === false ) {

  			this._init( this.gl );

  			initialized = true;

  		}

  	}

  	_init( gl ) {

  		// Store only WebGL constants here.

  		wrappingToGL = {
  			[ RepeatWrapping ]: gl.REPEAT,
  			[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,
  			[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT
  		};

  		filterToGL = {
  			[ NearestFilter ]: gl.NEAREST,
  			[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,
  			[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,

  			[ LinearFilter ]: gl.LINEAR,
  			[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,
  			[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR
  		};

  		compareToGL = {
  			[ NeverCompare ]: gl.NEVER,
  			[ AlwaysCompare ]: gl.ALWAYS,
  			[ LessCompare ]: gl.LESS,
  			[ LessEqualCompare ]: gl.LEQUAL,
  			[ EqualCompare ]: gl.EQUAL,
  			[ GreaterEqualCompare ]: gl.GEQUAL,
  			[ GreaterCompare ]: gl.GREATER,
  			[ NotEqualCompare ]: gl.NOTEQUAL
  		};

  	}

  	filterFallback( f ) {

  		const { gl } = this;

  		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

  			return gl.NEAREST;

  		}

  		return gl.LINEAR;

  	}

  	getGLTextureType( texture ) {

  		const { gl } = this;

  		let glTextureType;

  		if ( texture.isCubeTexture === true ) {

  			glTextureType = gl.TEXTURE_CUBE_MAP;

  		} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {

  			glTextureType = gl.TEXTURE_2D_ARRAY;

  		} else if ( texture.isData3DTexture === true ) { // TODO: isCompressed3DTexture, wait for #26642

  			glTextureType = gl.TEXTURE_3D;

  		} else {

  			glTextureType = gl.TEXTURE_2D;


  		}

  		return glTextureType;

  	}

  	getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

  		const { gl, extensions } = this;

  		if ( internalFormatName !== null ) {

  			if ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];

  			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

  		}

  		let internalFormat = glFormat;

  		if ( glFormat === gl.RED ) {

  			if ( glType === gl.FLOAT ) internalFormat = gl.R32F;
  			if ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.R8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.R16I;
  			if ( glType === gl.INT ) internalFormat = gl.R32I;

  		}

  		if ( glFormat === gl.RED_INTEGER ) {

  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.R8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.R16I;
  			if ( glType === gl.INT ) internalFormat = gl.R32I;

  		}

  		if ( glFormat === gl.RG ) {

  			if ( glType === gl.FLOAT ) internalFormat = gl.RG32F;
  			if ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RG8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RG16I;
  			if ( glType === gl.INT ) internalFormat = gl.RG32I;

  		}

  		if ( glFormat === gl.RG_INTEGER ) {

  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8UI;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16UI;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RG8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RG16I;
  			if ( glType === gl.INT ) internalFormat = gl.RG32I;

  		}

  		if ( glFormat === gl.RGB ) {

  			if ( glType === gl.FLOAT ) internalFormat = gl.RGB32F;
  			if ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGB16F;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RGB8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RGB16I;
  			if ( glType === gl.INT ) internalFormat = gl.RGB32I;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8 : gl.RGB8;
  			if ( glType === gl.UNSIGNED_SHORT_5_6_5 ) internalFormat = gl.RGB565;
  			if ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;
  			if ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGB4;
  			if ( glType === gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = gl.RGB9_E5;

  		}

  		if ( glFormat === gl.RGB_INTEGER ) {

  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8UI;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16UI;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RGB8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RGB16I;
  			if ( glType === gl.INT ) internalFormat = gl.RGB32I;

  		}

  		if ( glFormat === gl.RGBA ) {

  			if ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;
  			if ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;
  			if ( glType === gl.INT ) internalFormat = gl.RGBA32I;
  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;
  			if ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;
  			if ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;

  		}

  		if ( glFormat === gl.RGBA_INTEGER ) {

  			if ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8UI;
  			if ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16UI;
  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;
  			if ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;
  			if ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;
  			if ( glType === gl.INT ) internalFormat = gl.RGBA32I;

  		}

  		if ( glFormat === gl.DEPTH_COMPONENT ) {

  			if ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH24_STENCIL8;
  			if ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;

  		}

  		if ( glFormat === gl.DEPTH_STENCIL ) {

  			if ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;

  		}

  		if ( internalFormat === gl.R16F || internalFormat === gl.R32F ||
  			internalFormat === gl.RG16F || internalFormat === gl.RG32F ||
  			internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {

  			extensions.get( 'EXT_color_buffer_float' );

  		}

  		return internalFormat;

  	}

  	setTextureParameters( textureType, texture ) {

  		const { gl, extensions, backend } = this;


  		gl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
  		gl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
  		gl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
  		gl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE );

  		gl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
  		gl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

  		if ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {

  			gl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

  		}

  		gl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );


  		const hasMipmaps = texture.mipmaps !== undefined && texture.mipmaps.length > 0;

  		// follow WebGPU backend mapping for texture filtering
  		const minFilter = texture.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture.minFilter;

  		gl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ minFilter ] );

  		if ( texture.compareFunction ) {

  			gl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );
  			gl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

  		}

  		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

  			if ( texture.magFilter === NearestFilter ) return;
  			if ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;
  			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2

  			if ( texture.anisotropy > 1 ) {

  				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
  				gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, backend.getMaxAnisotropy() ) );

  			}

  		}

  	}

  	createDefaultTexture( texture ) {

  		const { gl, backend, defaultTextures } = this;


  		const glTextureType = this.getGLTextureType( texture );

  		let textureGPU = defaultTextures[ glTextureType ];

  		if ( textureGPU === undefined ) {

  			textureGPU = gl.createTexture();

  			backend.state.bindTexture( glTextureType, textureGPU );
  			gl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
  			gl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

  			// gl.texImage2D( glTextureType, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

  			defaultTextures[ glTextureType ] = textureGPU;

  		}

  		backend.set( texture, {
  			textureGPU,
  			glTextureType,
  			isDefault: true
  		} );

  	}

  	createTexture( texture, options ) {

  		const { gl, backend } = this;
  		const { levels, width, height, depth } = options;

  		const glFormat = backend.utils.convert( texture.format, texture.colorSpace );
  		const glType = backend.utils.convert( texture.type );
  		const glInternalFormat = this.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

  		const textureGPU = gl.createTexture();
  		const glTextureType = this.getGLTextureType( texture );

  		backend.state.bindTexture( glTextureType, textureGPU );

  		this.setTextureParameters( glTextureType, texture );

  		if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

  			gl.texStorage3D( gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth );

  		} else if ( texture.isData3DTexture ) {

  			gl.texStorage3D( gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth );

  		} else if ( ! texture.isVideoTexture ) {

  			gl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );

  		}

  		backend.set( texture, {
  			textureGPU,
  			glTextureType,
  			glFormat,
  			glType,
  			glInternalFormat
  		} );

  	}

  	copyBufferToTexture( buffer, texture ) {

  		const { gl, backend } = this;

  		const { textureGPU, glTextureType, glFormat, glType } = backend.get( texture );

  		const { width, height } = texture.source.data;

  		gl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, buffer );

  		backend.state.bindTexture( glTextureType, textureGPU );

  		gl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, false );
  		gl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false );
  		gl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, 0 );

  		gl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, null );

  		backend.state.unbindTexture();
  		// debug
  		// const framebuffer = gl.createFramebuffer();
  		// gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer );
  		// gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTextureType, textureGPU, 0 );

  		// const readout = new Float32Array( width * height * 4 );

  		// const altFormat = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT );
  		// const altType = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE );

  		// gl.readPixels( 0, 0, width, height, altFormat, altType, readout );
  		// gl.bindFramebuffer( gl.FRAMEBUFFER, null );
  		// console.log( readout );

  	}

  	updateTexture( texture, options ) {

  		const { gl } = this;
  		const { width, height } = options;
  		const { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get( texture );

  		if ( texture.isRenderTargetTexture || ( textureGPU === undefined /* unsupported texture format */ ) )
  			return;

  		const getImage = ( source ) => {

  			if ( source.isDataTexture ) {

  				return source.image.data;

  			} else if ( source instanceof ImageBitmap || source instanceof OffscreenCanvas || source instanceof HTMLImageElement || source instanceof HTMLCanvasElement ) {

  				return source;

  			}

  			return source.data;

  		};

  		this.backend.state.bindTexture( glTextureType, textureGPU );

  		this.setTextureParameters( glTextureType, texture );

  		if ( texture.isCompressedTexture ) {

  			const mipmaps = texture.mipmaps;
  			const image = options.image;

  			for ( let i = 0; i < mipmaps.length; i ++ ) {

  				const mipmap = mipmaps[ i ];

  				if ( texture.isCompressedArrayTexture ) {


  					if ( texture.format !== gl.RGBA ) {

  						if ( glFormat !== null ) {

  							gl.compressedTexSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );

  						} else {

  							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  						}

  					} else {

  						gl.texSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

  					}

  				} else {

  					if ( glFormat !== null ) {

  						gl.compressedTexSubImage2D( gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

  					} else {

  						console.warn( 'Unsupported compressed texture format' );

  					}

  				}

  			}


  		} else if ( texture.isCubeTexture ) {

  			const images = options.images;

  			for ( let i = 0; i < 6; i ++ ) {

  				const image = getImage( images[ i ] );

  				gl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );

  			}

  		} else if ( texture.isDataArrayTexture ) {

  			const image = options.image;

  			gl.texSubImage3D( gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

  		} else if ( texture.isData3DTexture ) {

  			const image = options.image;

  			gl.texSubImage3D( gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

  		} else if ( texture.isVideoTexture ) {

  			texture.update();

  			gl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );


  		} else {

  			const image = getImage( options.image );

  			gl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );

  		}

  	}

  	generateMipmaps( texture ) {

  		const { gl, backend } = this;
  		const { textureGPU, glTextureType } = backend.get( texture );

  		backend.state.bindTexture( glTextureType, textureGPU );
  		gl.generateMipmap( glTextureType );

  	}

  	deallocateRenderBuffers( renderTarget ) {

  		const { gl, backend } = this;

  		// remove framebuffer reference
  		if ( renderTarget ) {

  			const renderContextData = backend.get( renderTarget );

  			renderContextData.renderBufferStorageSetup = undefined;

  			if ( renderContextData.framebuffers ) {

  				for ( const cacheKey in renderContextData.framebuffers ) {

  					gl.deleteFramebuffer( renderContextData.framebuffers[ cacheKey ] );

  				}

  				delete renderContextData.framebuffers;

  			}

  			if ( renderContextData.depthRenderbuffer ) {

  				gl.deleteRenderbuffer( renderContextData.depthRenderbuffer );
  				delete renderContextData.depthRenderbuffer;

  			}

  			if ( renderContextData.stencilRenderbuffer ) {

  				gl.deleteRenderbuffer( renderContextData.stencilRenderbuffer );
  				delete renderContextData.stencilRenderbuffer;

  			}

  			if ( renderContextData.msaaFrameBuffer ) {

  				gl.deleteFramebuffer( renderContextData.msaaFrameBuffer );
  				delete renderContextData.msaaFrameBuffer;

  			}

  			if ( renderContextData.msaaRenderbuffers ) {

  				for ( let i = 0; i < renderContextData.msaaRenderbuffers.length; i ++ ) {

  					gl.deleteRenderbuffer( renderContextData.msaaRenderbuffers[ i ] );

  				}

  				delete renderContextData.msaaRenderbuffers;

  			}

  		}

  	}

  	destroyTexture( texture ) {

  		const { gl, backend } = this;
  		const { textureGPU, renderTarget } = backend.get( texture );

  		this.deallocateRenderBuffers( renderTarget );
  		gl.deleteTexture( textureGPU );

  		backend.delete( texture );

  	}

  	copyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

  		const { gl, backend } = this;
  		const { state } = this.backend;

  		const { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get( dstTexture );

  		let width, height, minX, minY;
  		let dstX, dstY;

  		if ( srcRegion !== null ) {

  			width = srcRegion.max.x - srcRegion.min.x;
  			height = srcRegion.max.y - srcRegion.min.y;
  			minX = srcRegion.min.x;
  			minY = srcRegion.min.y;

  		} else {

  			width = srcTexture.image.width;
  			height = srcTexture.image.height;
  			minX = 0;
  			minY = 0;

  		}

  		if ( dstPosition !== null ) {

  			dstX = dstPosition.x;
  			dstY = dstPosition.y;

  		} else {

  			dstX = 0;
  			dstY = 0;

  		}

  		state.bindTexture( glTextureType, dstTextureGPU );

  		// As another texture upload may have changed pixelStorei
  		// parameters, make sure they are correct for the dstTexture
  		gl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );
  		gl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
  		gl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
  		gl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

  		const currentUnpackRowLen = gl.getParameter( gl.UNPACK_ROW_LENGTH );
  		const currentUnpackImageHeight = gl.getParameter( gl.UNPACK_IMAGE_HEIGHT );
  		const currentUnpackSkipPixels = gl.getParameter( gl.UNPACK_SKIP_PIXELS );
  		const currentUnpackSkipRows = gl.getParameter( gl.UNPACK_SKIP_ROWS );
  		const currentUnpackSkipImages = gl.getParameter( gl.UNPACK_SKIP_IMAGES );

  		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;

  		gl.pixelStorei( gl.UNPACK_ROW_LENGTH, image.width );
  		gl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, image.height );
  		gl.pixelStorei( gl.UNPACK_SKIP_PIXELS, minX );
  		gl.pixelStorei( gl.UNPACK_SKIP_ROWS, minY );

  		if ( srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture ) {

  			const srcTextureData = backend.get( srcTexture );
  			const dstTextureData = backend.get( dstTexture );

  			const srcRenderContextData = backend.get( srcTextureData.renderTarget );
  			const dstRenderContextData = backend.get( dstTextureData.renderTarget );

  			const srcFramebuffer = srcRenderContextData.framebuffers[ srcTextureData.cacheKey ];
  			const dstFramebuffer = dstRenderContextData.framebuffers[ dstTextureData.cacheKey ];

  			state.bindFramebuffer( gl.READ_FRAMEBUFFER, srcFramebuffer );
  			state.bindFramebuffer( gl.DRAW_FRAMEBUFFER, dstFramebuffer );

  			let mask = gl.COLOR_BUFFER_BIT;

  			if ( srcTexture.isDepthTexture ) mask = gl.DEPTH_BUFFER_BIT;

  			gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST );

  			state.bindFramebuffer( gl.READ_FRAMEBUFFER, null );
  			state.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );

  		} else {

  			if ( srcTexture.isDataTexture ) {

  				gl.texSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data );

  			} else {

  				if ( srcTexture.isCompressedTexture ) {

  					gl.compressedTexSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data );

  				} else {

  					gl.texSubImage2D( gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image );

  				}

  			}

  		}

  		gl.pixelStorei( gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );
  		gl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );
  		gl.pixelStorei( gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );
  		gl.pixelStorei( gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );
  		gl.pixelStorei( gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );

  		// Generate mipmaps only when copying level 0
  		if ( level === 0 && dstTexture.generateMipmaps ) gl.generateMipmap( gl.TEXTURE_2D );

  		state.unbindTexture();

  	}

  	copyFramebufferToTexture( texture, renderContext, rectangle ) {

  		const { gl } = this;
  		const { state } = this.backend;

  		const { textureGPU } = this.backend.get( texture );

  		const { x, y, z: width, w: height } = rectangle;

  		const requireDrawFrameBuffer = texture.isDepthTexture === true || ( renderContext.renderTarget && renderContext.renderTarget.samples > 0 );

  		const srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.gerDrawingBufferSize().y;

  		if ( requireDrawFrameBuffer ) {

  			const partial = ( x !== 0 || y !== 0 );
  			let mask;
  			let attachment;

  			if ( texture.isDepthTexture === true ) {

  				mask = gl.DEPTH_BUFFER_BIT;
  				attachment = gl.DEPTH_ATTACHMENT;

  				if ( renderContext.stencil ) {

  					mask |= gl.STENCIL_BUFFER_BIT;

  				}

  			} else {

  				mask = gl.COLOR_BUFFER_BIT;
  				attachment = gl.COLOR_ATTACHMENT0;

  			}

  			if ( partial ) {

  				const renderTargetContextData = this.backend.get( renderContext.renderTarget );

  				const fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];
  				const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;

  				state.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );
  				state.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );

  				const flippedY = srcHeight - y - height;

  				gl.blitFramebuffer( x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST );

  				state.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );

  				state.bindTexture( gl.TEXTURE_2D, textureGPU );

  				gl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height );

  				state.unbindTexture();

  			} else {

  				const fb = gl.createFramebuffer();

  				state.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );

  				gl.framebufferTexture2D( gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0 );
  				gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST );

  				gl.deleteFramebuffer( fb );

  			}

  		} else {

  			state.bindTexture( gl.TEXTURE_2D, textureGPU );
  			gl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height );

  			state.unbindTexture();

  		}

  		if ( texture.generateMipmaps ) this.generateMipmaps( texture );

  		this.backend._setFramebuffer( renderContext );

  	}

  	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  	setupRenderBufferStorage( renderbuffer, renderContext ) {

  		const { gl } = this;
  		const renderTarget = renderContext.renderTarget;

  		const { samples, depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;

  		gl.bindRenderbuffer( gl.RENDERBUFFER, renderbuffer );

  		if ( depthBuffer && ! stencilBuffer ) {

  			let glInternalFormat = gl.DEPTH_COMPONENT24;

  			if ( samples > 0 ) {

  				if ( depthTexture && depthTexture.isDepthTexture ) {

  					if ( depthTexture.type === gl.FLOAT ) {

  						glInternalFormat = gl.DEPTH_COMPONENT32F;

  					}

  				}

  				gl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, glInternalFormat, width, height );

  			} else {

  				gl.renderbufferStorage( gl.RENDERBUFFER, glInternalFormat, width, height );

  			}

  			gl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );

  		} else if ( depthBuffer && stencilBuffer ) {

  			if ( samples > 0 ) {

  				gl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height );

  			} else {

  				gl.renderbufferStorage( gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height );

  			}


  			gl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );

  		}

  	}

  	async copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {

  		const { backend, gl } = this;

  		const { textureGPU, glFormat, glType } = this.backend.get( texture );

  		const fb = gl.createFramebuffer();

  		gl.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );

  		const target = texture.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;

  		gl.framebufferTexture2D( gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0 );

  		const typedArrayType = this._getTypedArrayType( glType );
  		const bytesPerTexel = this._getBytesPerTexel( glType, glFormat );

  		const elementCount = width * height;
  		const byteLength = elementCount * bytesPerTexel;

  		const buffer = gl.createBuffer();

  		gl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );
  		gl.bufferData( gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ );
  		gl.readPixels( x, y, width, height, glFormat, glType, 0 );
  		gl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );

  		await backend.utils._clientWaitAsync();

  		const dstBuffer = new typedArrayType( byteLength / typedArrayType.BYTES_PER_ELEMENT );

  		gl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );
  		gl.getBufferSubData( gl.PIXEL_PACK_BUFFER, 0, dstBuffer );
  		gl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );

  		gl.deleteFramebuffer( fb );

  		return dstBuffer;

  	}

  	_getTypedArrayType( glType ) {

  		const { gl } = this;

  		if ( glType === gl.UNSIGNED_BYTE ) return Uint8Array;

  		if ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) return Uint16Array;
  		if ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) return Uint16Array;
  		if ( glType === gl.UNSIGNED_SHORT_5_6_5 ) return Uint16Array;
  		if ( glType === gl.UNSIGNED_SHORT ) return Uint16Array;
  		if ( glType === gl.UNSIGNED_INT ) return Uint32Array;

  		if ( glType === gl.HALF_FLOAT ) return Uint16Array;
  		if ( glType === gl.FLOAT ) return Float32Array;

  		throw new Error( `Unsupported WebGL type: ${glType}` );

  	}

  	_getBytesPerTexel( glType, glFormat ) {

  		const { gl } = this;

  		let bytesPerComponent = 0;

  		if ( glType === gl.UNSIGNED_BYTE ) bytesPerComponent = 1;

  		if ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ||
  			glType === gl.UNSIGNED_SHORT_5_5_5_1 ||
  			glType === gl.UNSIGNED_SHORT_5_6_5 ||
  			glType === gl.UNSIGNED_SHORT ||
  			glType === gl.HALF_FLOAT ) bytesPerComponent = 2;

  		if ( glType === gl.UNSIGNED_INT ||
  			glType === gl.FLOAT ) bytesPerComponent = 4;

  		if ( glFormat === gl.RGBA ) return bytesPerComponent * 4;
  		if ( glFormat === gl.RGB ) return bytesPerComponent * 3;
  		if ( glFormat === gl.ALPHA ) return bytesPerComponent;

  	}

  }

  class WebGLExtensions {

  	constructor( backend ) {

  		this.backend = backend;

  		this.gl = this.backend.gl;
  		this.availableExtensions = this.gl.getSupportedExtensions();

  		this.extensions = {};

  	}

  	get( name ) {

  		let extension = this.extensions[ name ];

  		if ( extension === undefined ) {

  			extension = this.gl.getExtension( name );

  			this.extensions[ name ] = extension;

  		}

  		return extension;

  	}

  	has( name ) {

  		return this.availableExtensions.includes( name );

  	}

  }

  class WebGLCapabilities {

  	constructor( backend ) {

  		this.backend = backend;

  		this.maxAnisotropy = null;

  	}

  	getMaxAnisotropy() {

  		if ( this.maxAnisotropy !== null ) return this.maxAnisotropy;

  		const gl = this.backend.gl;
  		const extensions = this.backend.extensions;

  		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

  			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  			this.maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

  		} else {

  			this.maxAnisotropy = 0;

  		}

  		return this.maxAnisotropy;

  	}

  }

  const GLFeatureName = {

  	'WEBGL_multi_draw': 'WEBGL_multi_draw',
  	'WEBGL_compressed_texture_astc': 'texture-compression-astc',
  	'WEBGL_compressed_texture_etc': 'texture-compression-etc2',
  	'WEBGL_compressed_texture_etc1': 'texture-compression-etc1',
  	'WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',
  	'WEBKIT_WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',
  	'WEBGL_compressed_texture_s3tc': 'texture-compression-bc',
  	'EXT_texture_compression_bptc': 'texture-compression-bptc',
  	'EXT_disjoint_timer_query_webgl2': 'timestamp-query',

  };

  class WebGLBufferRenderer {

  	constructor( backend ) {

  		this.gl = backend.gl;
  		this.extensions = backend.extensions;
  		this.info = backend.renderer.info;
  		this.mode = null;
  		this.index = 0;
  		this.type = null;
  		this.object = null;

  	}

  	render( start, count ) {

  		const { gl, mode, object, type, info, index } = this;

  		if ( index !== 0 ) {

  			gl.drawElements( mode, count, type, start );

  		} else {

  			gl.drawArrays( mode, start, count );

  		}

  		info.update( object, count, mode, 1 );

  	}

  	renderInstances( start, count, primcount ) {

  		const { gl, mode, type, index, object, info } = this;

  		if ( primcount === 0 ) return;

  		if ( index !== 0 ) {

  			gl.drawElementsInstanced( mode, count, type, start, primcount );

  		} else {

  			gl.drawArraysInstanced( mode, start, count, primcount );

  		}

  		info.update( object, count, mode, primcount );

  	}

  	renderMultiDraw( starts, counts, drawCount ) {

  		const { extensions, mode, object, info } = this;

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );

  		if ( extension === null ) {

  			for ( let i = 0; i < drawCount; i ++ ) {

  				this.render( starts[ i ], counts[ i ] );

  			}

  		} else {

  			if ( this.index !== 0 ) {

  				extension.multiDrawElementsWEBGL( mode, counts, 0, this.type, starts, 0, drawCount );

  			} else {

  				extension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );

  			}

  			let elementCount = 0;
  			for ( let i = 0; i < drawCount; i ++ ) {

  				elementCount += counts[ i ];

  			}

  			info.update( object, elementCount, mode, 1 );

  		}

  	}

  	renderMultiDrawInstances( starts, counts, drawCount, primcount ) {

  		const { extensions, mode, object, info } = this;

  		if ( drawCount === 0 ) return;

  		const extension = extensions.get( 'WEBGL_multi_draw' );

  		if ( extension === null ) {

  			for ( let i = 0; i < drawCount; i ++ ) {

  				this.renderInstances( starts[ i ], counts[ i ], primcount[ i ] );

  			}

  		} else {

  			if ( this.index !== 0 ) {

  				extension.multiDrawElementsInstancedWEBGL( mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount );

  			} else {

  				extension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );

  			}

  			let elementCount = 0;
  			for ( let i = 0; i < drawCount; i ++ ) {

  				elementCount += counts[ i ] * primcount[ i ];

  			}

  			info.update( object, elementCount, mode, 1 );

  		}

  	}

  	//

  }

  //

  class WebGLBackend extends Backend {

  	constructor( parameters = {} ) {

  		super( parameters );

  		this.isWebGLBackend = true;

  	}

  	init( renderer ) {

  		super.init( renderer );

  		//

  		const parameters = this.parameters;

  		const glContext = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgl2' );

  	 	function onContextLost( event ) {

  			event.preventDefault();

  			const contextLossInfo = {
  				api: 'WebGL',
  				message: event.statusMessage || 'Unknown reason',
  				reason: null,
  				originalEvent: event
  			};

  			renderer.onDeviceLost( contextLossInfo );

  		}

  		this._onContextLost = onContextLost;

  		renderer.domElement.addEventListener( 'webglcontextlost', onContextLost, false );

  		this.gl = glContext;

  		this.extensions = new WebGLExtensions( this );
  		this.capabilities = new WebGLCapabilities( this );
  		this.attributeUtils = new WebGLAttributeUtils( this );
  		this.textureUtils = new WebGLTextureUtils( this );
  		this.bufferRenderer = new WebGLBufferRenderer( this );

  		this.state = new WebGLState( this );
  		this.utils = new WebGLUtils( this );

  		this.vaoCache = {};
  		this.transformFeedbackCache = {};
  		this.discard = false;
  		this.trackTimestamp = ( parameters.trackTimestamp === true );

  		this.extensions.get( 'EXT_color_buffer_float' );
  		this.extensions.get( 'WEBGL_clip_cull_distance' );
  		this.extensions.get( 'OES_texture_float_linear' );
  		this.extensions.get( 'EXT_color_buffer_half_float' );
  		this.extensions.get( 'WEBGL_multisampled_render_to_texture' );
  		this.extensions.get( 'WEBGL_render_shared_exponent' );
  		this.extensions.get( 'WEBGL_multi_draw' );

  		this.disjoint = this.extensions.get( 'EXT_disjoint_timer_query_webgl2' );
  		this.parallel = this.extensions.get( 'KHR_parallel_shader_compile' );

  		this._knownBindings = new WeakSet();

  		this._currentContext = null;

  	}

  	get coordinateSystem() {

  		return WebGLCoordinateSystem;

  	}

  	async getArrayBufferAsync( attribute ) {

  		return await this.attributeUtils.getArrayBufferAsync( attribute );

  	}

  	async waitForGPU() {

  		await this.utils._clientWaitAsync();

  	}

  	initTimestampQuery( renderContext ) {

  		if ( ! this.disjoint || ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );

  		if ( this.queryRunning ) {

  		  if ( ! renderContextData.queryQueue ) renderContextData.queryQueue = [];
  		  renderContextData.queryQueue.push( renderContext );
  		  return;

  		}

  		if ( renderContextData.activeQuery ) {

  		  this.gl.endQuery( this.disjoint.TIME_ELAPSED_EXT );
  		  renderContextData.activeQuery = null;

  		}

  		renderContextData.activeQuery = this.gl.createQuery();

  		if ( renderContextData.activeQuery !== null ) {

  		  this.gl.beginQuery( this.disjoint.TIME_ELAPSED_EXT, renderContextData.activeQuery );
  		  this.queryRunning = true;

  		}

  	}

  	// timestamp utils

  	prepareTimestampBuffer( renderContext ) {

  		if ( ! this.disjoint || ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );

  		if ( renderContextData.activeQuery ) {

  		  this.gl.endQuery( this.disjoint.TIME_ELAPSED_EXT );

  		  if ( ! renderContextData.gpuQueries ) renderContextData.gpuQueries = [];
  		  renderContextData.gpuQueries.push( { query: renderContextData.activeQuery } );
  		  renderContextData.activeQuery = null;
  		  this.queryRunning = false;

  		  if ( renderContextData.queryQueue && renderContextData.queryQueue.length > 0 ) {

  				const nextRenderContext = renderContextData.queryQueue.shift();
  				this.initTimestampQuery( nextRenderContext );

  			}

  		}

  	}

  	  async resolveTimestampAsync( renderContext, type = 'render' ) {

  		if ( ! this.disjoint || ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );

  		if ( ! renderContextData.gpuQueries ) renderContextData.gpuQueries = [];

  		for ( let i = 0; i < renderContextData.gpuQueries.length; i ++ ) {

  		  const queryInfo = renderContextData.gpuQueries[ i ];
  		  const available = this.gl.getQueryParameter( queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE );
  		  const disjoint = this.gl.getParameter( this.disjoint.GPU_DISJOINT_EXT );

  		  if ( available && ! disjoint ) {

  				const elapsed = this.gl.getQueryParameter( queryInfo.query, this.gl.QUERY_RESULT );
  				const duration = Number( elapsed ) / 1000000; // Convert nanoseconds to milliseconds
  				this.gl.deleteQuery( queryInfo.query );
  				renderContextData.gpuQueries.splice( i, 1 ); // Remove the processed query
  				i --;
  				this.renderer.info.updateTimestamp( type, duration );

  			}

  		}

  	}

  	getContext() {

  		return this.gl;

  	}

  	beginRender( renderContext ) {

  		const { gl } = this;
  		const renderContextData = this.get( renderContext );

  		//

  		//

  		this.initTimestampQuery( renderContext );

  		renderContextData.previousContext = this._currentContext;
  		this._currentContext = renderContext;

  		this._setFramebuffer( renderContext );

  		this.clear( renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false );

  		//
  		if ( renderContext.viewport ) {

  			this.updateViewport( renderContext );

  		} else {

  			gl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );

  		}

  		if ( renderContext.scissor ) {

  			const { x, y, width, height } = renderContext.scissorValue;

  			gl.scissor( x, renderContext.height - height - y, width, height );

  		}

  		const occlusionQueryCount = renderContext.occlusionQueryCount;

  		if ( occlusionQueryCount > 0 ) {

  			// Get a reference to the array of objects with queries. The renderContextData property
  			// can be changed by another render pass before the async reading of all previous queries complete
  			renderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;
  			renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;

  			renderContextData.lastOcclusionObject = null;
  			renderContextData.occlusionQueries = new Array( occlusionQueryCount );
  			renderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );
  			renderContextData.occlusionQueryIndex = 0;

  		}

  	}

  	finishRender( renderContext ) {

  		const { gl, state } = this;
  		const renderContextData = this.get( renderContext );
  		const previousContext = renderContextData.previousContext;

  		const occlusionQueryCount = renderContext.occlusionQueryCount;

  		if ( occlusionQueryCount > 0 ) {

  			if ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {

  				gl.endQuery( gl.ANY_SAMPLES_PASSED );

  			}

  			this.resolveOccludedAsync( renderContext );

  		}

  		const textures = renderContext.textures;

  		if ( textures !== null ) {

  			for ( let i = 0; i < textures.length; i ++ ) {

  				const texture = textures[ i ];

  				if ( texture.generateMipmaps ) {

  					this.generateMipmaps( texture );

  				}

  			}

  		}

  		this._currentContext = previousContext;

  		if ( renderContext.textures !== null && renderContext.renderTarget ) {

  			const renderTargetContextData = this.get( renderContext.renderTarget );

  			const { samples } = renderContext.renderTarget;

  			if ( samples > 0 ) {

  				const fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];

  				const mask = gl.COLOR_BUFFER_BIT;

  				const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;

  				const textures = renderContext.textures;

  				state.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );
  				state.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );

  				for ( let i = 0; i < textures.length; i ++ ) {

  					// TODO Add support for MRT

  					if ( renderContext.scissor ) {

  						const { x, y, width, height } = renderContext.scissorValue;

  						const viewY = renderContext.height - height - y;

  						gl.blitFramebuffer( x, viewY, x + width, viewY + height, x, viewY, x + width, viewY + height, mask, gl.NEAREST );
  						gl.invalidateSubFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x, viewY, width, height );

  					} else {

  						gl.blitFramebuffer( 0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST );
  						gl.invalidateFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray );

  					}

  				}

  			}


  		}

  		if ( previousContext !== null ) {

  			this._setFramebuffer( previousContext );

  			if ( previousContext.viewport ) {

  				this.updateViewport( previousContext );

  			} else {

  				gl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );

  			}

  		}

  		this.prepareTimestampBuffer( renderContext );

  	}

  	resolveOccludedAsync( renderContext ) {

  		const renderContextData = this.get( renderContext );

  		// handle occlusion query results

  		const { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;

  		if ( currentOcclusionQueries && currentOcclusionQueryObjects ) {

  			const occluded = new WeakSet();
  			const { gl } = this;

  			renderContextData.currentOcclusionQueryObjects = null;
  			renderContextData.currentOcclusionQueries = null;

  			const check = () => {

  				let completed = 0;

  				// check all queries and requeue as appropriate
  				for ( let i = 0; i < currentOcclusionQueries.length; i ++ ) {

  					const query = currentOcclusionQueries[ i ];

  					if ( query === null ) continue;

  					if ( gl.getQueryParameter( query, gl.QUERY_RESULT_AVAILABLE ) ) {

  						if ( gl.getQueryParameter( query, gl.QUERY_RESULT ) > 0 ) occluded.add( currentOcclusionQueryObjects[ i ] );

  						currentOcclusionQueries[ i ] = null;
  						gl.deleteQuery( query );

  						completed ++;

  					}

  				}

  				if ( completed < currentOcclusionQueries.length ) {

  					requestAnimationFrame( check );

  				} else {

  					renderContextData.occluded = occluded;

  				}

  			};

  			check();

  		}

  	}

  	isOccluded( renderContext, object ) {

  		const renderContextData = this.get( renderContext );

  		return renderContextData.occluded && renderContextData.occluded.has( object );

  	}

  	updateViewport( renderContext ) {

  		const gl = this.gl;
  		const { x, y, width, height } = renderContext.viewportValue;

  		gl.viewport( x, renderContext.height - height - y, width, height );

  	}

  	setScissorTest( boolean ) {

  		const gl = this.gl;

  		if ( boolean ) {

  			gl.enable( gl.SCISSOR_TEST );

  		} else {

  			gl.disable( gl.SCISSOR_TEST );

  		}

  	}

  	clear( color, depth, stencil, descriptor = null, setFrameBuffer = true ) {

  		const { gl } = this;

  		if ( descriptor === null ) {

  			const clearColor = this.getClearColor();

  			// premultiply alpha

  			clearColor.r *= clearColor.a;
  			clearColor.g *= clearColor.a;
  			clearColor.b *= clearColor.a;

  			descriptor = {
  				textures: null,
  				clearColorValue: clearColor
  			};

  		}

  		//

  		let clear = 0;

  		if ( color ) clear |= gl.COLOR_BUFFER_BIT;
  		if ( depth ) clear |= gl.DEPTH_BUFFER_BIT;
  		if ( stencil ) clear |= gl.STENCIL_BUFFER_BIT;

  		if ( clear !== 0 ) {

  			let clearColor;

  			if ( descriptor.clearColorValue ) {

  				clearColor = descriptor.clearColorValue;

  			} else {

  				clearColor = this.getClearColor();

  				// premultiply alpha

  				clearColor.r *= clearColor.a;
  				clearColor.g *= clearColor.a;
  				clearColor.b *= clearColor.a;

  			}

  			if ( depth ) this.state.setDepthMask( true );

  			if ( descriptor.textures === null ) {

  				gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearColor.a );
  				gl.clear( clear );

  			} else {

  				if ( setFrameBuffer ) this._setFramebuffer( descriptor );

  				if ( color ) {

  					for ( let i = 0; i < descriptor.textures.length; i ++ ) {

  						gl.clearBufferfv( gl.COLOR, i, [ clearColor.r, clearColor.g, clearColor.b, clearColor.a ] );

  					}

  				}

  				if ( depth && stencil ) {

  					gl.clearBufferfi( gl.DEPTH_STENCIL, 0, 1, 0 );

  				} else if ( depth ) {

  					gl.clearBufferfv( gl.DEPTH, 0, [ 1.0 ] );

  				} else if ( stencil ) {

  					gl.clearBufferiv( gl.STENCIL, 0, [ 0 ] );

  				}

  			}

  		}

  	}

  	beginCompute( computeGroup ) {

  		const { state, gl } = this;

  		state.bindFramebuffer( gl.FRAMEBUFFER, null );
  		this.initTimestampQuery( computeGroup );

  	}

  	compute( computeGroup, computeNode, bindings, pipeline ) {

  		const { state, gl } = this;

  		if ( ! this.discard ) {

  			// required here to handle async behaviour of render.compute()
  			gl.enable( gl.RASTERIZER_DISCARD );
  			this.discard = true;

  		}

  		const { programGPU, transformBuffers, attributes } = this.get( pipeline );

  		const vaoKey = this._getVaoKey( null, attributes );

  		const vaoGPU = this.vaoCache[ vaoKey ];

  		if ( vaoGPU === undefined ) {

  			this._createVao( null, attributes );

  		} else {

  			gl.bindVertexArray( vaoGPU );

  		}

  		state.useProgram( programGPU );

  		this._bindUniforms( bindings );

  		const transformFeedbackGPU = this._getTransformFeedback( transformBuffers );

  		gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );
  		gl.beginTransformFeedback( gl.POINTS );

  		if ( attributes[ 0 ].isStorageInstancedBufferAttribute ) {

  			gl.drawArraysInstanced( gl.POINTS, 0, 1, computeNode.count );

  		} else {

  			gl.drawArrays( gl.POINTS, 0, computeNode.count );

  		}

  		gl.endTransformFeedback();
  		gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );

  		// switch active buffers

  		for ( let i = 0; i < transformBuffers.length; i ++ ) {

  			const dualAttributeData = transformBuffers[ i ];

  			if ( dualAttributeData.pbo ) {

  				this.textureUtils.copyBufferToTexture( dualAttributeData.transformBuffer, dualAttributeData.pbo );

  			}

  			dualAttributeData.switchBuffers();


  		}

  	}

  	finishCompute( computeGroup ) {

  		const gl = this.gl;

  		this.discard = false;

  		gl.disable( gl.RASTERIZER_DISCARD );

  		this.prepareTimestampBuffer( computeGroup );

  		if ( this._currentContext ) {

  			this._setFramebuffer( this._currentContext );

  		}

  	}

  	draw( renderObject/*, info*/ ) {

  		const { object, pipeline, material, context } = renderObject;
  		const { programGPU } = this.get( pipeline );

  		const { gl, state } = this;

  		const contextData = this.get( context );

  		const drawParams = renderObject.getDrawParameters();

  		if ( drawParams === null ) return;

  		//

  		this._bindUniforms( renderObject.getBindings() );

  		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

  		state.setMaterial( material, frontFaceCW );

  		state.useProgram( programGPU );

  		//

  		let vaoGPU = renderObject.staticVao;

  		if ( vaoGPU === undefined ) {

  			const vaoKey = this._getVaoKey( renderObject.getIndex(), renderObject.getAttributes() );

  			vaoGPU = this.vaoCache[ vaoKey ];

  			if ( vaoGPU === undefined ) {

  				let staticVao;

  				( { vaoGPU, staticVao } = this._createVao( renderObject.getIndex(), renderObject.getAttributes() ) );

  				if ( staticVao ) renderObject.staticVao = vaoGPU;

  			}

  		}

  		gl.bindVertexArray( vaoGPU );

  		//

  		const index = renderObject.getIndex();

  		//

  		const lastObject = contextData.lastOcclusionObject;

  		if ( lastObject !== object && lastObject !== undefined ) {

  			if ( lastObject !== null && lastObject.occlusionTest === true ) {

  				gl.endQuery( gl.ANY_SAMPLES_PASSED );

  				contextData.occlusionQueryIndex ++;

  			}

  			if ( object.occlusionTest === true ) {

  				const query = gl.createQuery();

  				gl.beginQuery( gl.ANY_SAMPLES_PASSED, query );

  				contextData.occlusionQueries[ contextData.occlusionQueryIndex ] = query;
  				contextData.occlusionQueryObjects[ contextData.occlusionQueryIndex ] = object;

  			}

  			contextData.lastOcclusionObject = object;

  		}

  		//
  		const renderer = this.bufferRenderer;

  		if ( object.isPoints ) renderer.mode = gl.POINTS;
  		else if ( object.isLineSegments ) renderer.mode = gl.LINES;
  		else if ( object.isLine ) renderer.mode = gl.LINE_STRIP;
  		else if ( object.isLineLoop ) renderer.mode = gl.LINE_LOOP;
  		else {

  			if ( material.wireframe === true ) {

  				state.setLineWidth( material.wireframeLinewidth * this.renderer.getPixelRatio() );
  				renderer.mode = gl.LINES;

  			} else {

  				renderer.mode = gl.TRIANGLES;

  			}

  		}

  		//

  		const { vertexCount, instanceCount } = drawParams;
  		let { firstVertex } = drawParams;

  		renderer.object = object;

  		if ( index !== null ) {

  			firstVertex *= index.array.BYTES_PER_ELEMENT;

  			const indexData = this.get( index );

  			renderer.index = index.count;
  			renderer.type = indexData.type;

  		} else {

  			renderer.index = 0;

  		}

  		if ( object.isBatchedMesh ) {

  			if ( object._multiDrawInstances !== null ) {

  				renderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );

  			} else if ( ! this.hasFeature( 'WEBGL_multi_draw' ) ) {

  				warnOnce( 'THREE.WebGLRenderer: WEBGL_multi_draw not supported.' );

  			} else {

  				renderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );

  			}

  		} else if ( instanceCount > 1 ) {

  			renderer.renderInstances( firstVertex, vertexCount, instanceCount );

  		} else {

  			renderer.render( firstVertex, vertexCount );

  		}
  		//

  		gl.bindVertexArray( null );

  	}

  	needsRenderUpdate( /*renderObject*/ ) {

  		return false;

  	}

  	getRenderCacheKey( /*renderObject*/ ) {

  		return '';

  	}

  	// textures

  	createDefaultTexture( texture ) {

  		this.textureUtils.createDefaultTexture( texture );

  	}

  	createTexture( texture, options ) {

  		this.textureUtils.createTexture( texture, options );

  	}

  	updateTexture( texture, options ) {

  		this.textureUtils.updateTexture( texture, options );

  	}

  	generateMipmaps( texture ) {

  		this.textureUtils.generateMipmaps( texture );

  	}


  	destroyTexture( texture ) {

  		this.textureUtils.destroyTexture( texture );

  	}

  	copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {

  		return this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );

  	}

  	createSampler( /*texture*/ ) {

  		//console.warn( 'Abstract class.' );

  	}

  	destroySampler() {}

  	// node builder

  	createNodeBuilder( object, renderer ) {

  		return new GLSLNodeBuilder( object, renderer );

  	}

  	// program

  	createProgram( program ) {

  		const gl = this.gl;
  		const { stage, code } = program;

  		const shader = stage === 'fragment' ? gl.createShader( gl.FRAGMENT_SHADER ) : gl.createShader( gl.VERTEX_SHADER );

  		gl.shaderSource( shader, code );
  		gl.compileShader( shader );

  		this.set( program, {
  			shaderGPU: shader
  		} );

  	}

  	destroyProgram( /*program*/ ) {

  		console.warn( 'Abstract class.' );

  	}

  	createRenderPipeline( renderObject, promises ) {

  		const gl = this.gl;
  		const pipeline = renderObject.pipeline;

  		// Program

  		const { fragmentProgram, vertexProgram } = pipeline;

  		const programGPU = gl.createProgram();

  		const fragmentShader = this.get( fragmentProgram ).shaderGPU;
  		const vertexShader = this.get( vertexProgram ).shaderGPU;

  		gl.attachShader( programGPU, fragmentShader );
  		gl.attachShader( programGPU, vertexShader );
  		gl.linkProgram( programGPU );

  		this.set( pipeline, {
  			programGPU,
  			fragmentShader,
  			vertexShader
  		} );

  		if ( promises !== null && this.parallel ) {

  			const p = new Promise( ( resolve /*, reject*/ ) => {

  				const parallel = this.parallel;
  				const checkStatus = () => {

  					if ( gl.getProgramParameter( programGPU, parallel.COMPLETION_STATUS_KHR ) ) {

  						this._completeCompile( renderObject, pipeline );
  						resolve();

  					} else {

  						requestAnimationFrame( checkStatus );

  					}

  				};

  				checkStatus();

  			} );

  			promises.push( p );

  			return;

  		}

  		this._completeCompile( renderObject, pipeline );

  	}

  	_handleSource( string, errorLine ) {

  		const lines = string.split( '\n' );
  		const lines2 = [];

  		const from = Math.max( errorLine - 6, 0 );
  		const to = Math.min( errorLine + 6, lines.length );

  		for ( let i = from; i < to; i ++ ) {

  			const line = i + 1;
  			lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

  		}

  		return lines2.join( '\n' );

  	}

  	_getShaderErrors( gl, shader, type ) {

  		const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
  		const errors = gl.getShaderInfoLog( shader ).trim();

  		if ( status && errors === '' ) return '';

  		const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
  		if ( errorMatches ) {

  			const errorLine = parseInt( errorMatches[ 1 ] );
  			return type.toUpperCase() + '\n\n' + errors + '\n\n' + this._handleSource( gl.getShaderSource( shader ), errorLine );

  		} else {

  			return errors;

  		}

  	}

  	_logProgramError( programGPU, glFragmentShader, glVertexShader ) {

  		if ( this.renderer.debug.checkShaderErrors ) {

  			const gl = this.gl;

  			const programLog = gl.getProgramInfoLog( programGPU ).trim();

  			if ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {


  				if ( typeof this.renderer.debug.onShaderError === 'function' ) {

  					this.renderer.debug.onShaderError( gl, programGPU, glVertexShader, glFragmentShader );

  				} else {

  					// default error reporting

  					const vertexErrors = this._getShaderErrors( gl, glVertexShader, 'vertex' );
  					const fragmentErrors = this._getShaderErrors( gl, glFragmentShader, 'fragment' );

  					console.error(
  						'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
  						'VALIDATE_STATUS ' + gl.getProgramParameter( programGPU, gl.VALIDATE_STATUS ) + '\n\n' +
  						'Program Info Log: ' + programLog + '\n' +
  						vertexErrors + '\n' +
  						fragmentErrors
  					);

  				}

  			} else if ( programLog !== '' ) {

  				console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

  			}

  		}

  	}

  	_completeCompile( renderObject, pipeline ) {

  		const { state, gl } = this;
  		const pipelineData = this.get( pipeline );
  		const { programGPU, fragmentShader, vertexShader } = pipelineData;

  		if ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {

  			this._logProgramError( programGPU, fragmentShader, vertexShader );

  		}

  		state.useProgram( programGPU );

  		// Bindings

  		const bindings = renderObject.getBindings();

  		this._setupBindings( bindings, programGPU );

  		//

  		this.set( pipeline, {
  			programGPU
  		} );

  	}

  	createComputePipeline( computePipeline, bindings ) {

  		const { state, gl } = this;

  		// Program

  		const fragmentProgram = {
  			stage: 'fragment',
  			code: '#version 300 es\nprecision highp float;\nvoid main() {}'
  		};

  		this.createProgram( fragmentProgram );

  		const { computeProgram } = computePipeline;

  		const programGPU = gl.createProgram();

  		const fragmentShader = this.get( fragmentProgram ).shaderGPU;
  		const vertexShader = this.get( computeProgram ).shaderGPU;

  		const transforms = computeProgram.transforms;

  		const transformVaryingNames = [];
  		const transformAttributeNodes = [];

  		for ( let i = 0; i < transforms.length; i ++ ) {

  			const transform = transforms[ i ];

  			transformVaryingNames.push( transform.varyingName );
  			transformAttributeNodes.push( transform.attributeNode );

  		}

  		gl.attachShader( programGPU, fragmentShader );
  		gl.attachShader( programGPU, vertexShader );

  		gl.transformFeedbackVaryings(
  			programGPU,
  			transformVaryingNames,
  			gl.SEPARATE_ATTRIBS
  		);

  		gl.linkProgram( programGPU );

  		if ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {

  			this._logProgramError( programGPU, fragmentShader, vertexShader );


  		}

  		state.useProgram( programGPU );

  		// Bindings

  		this._setupBindings( bindings, programGPU );

  		const attributeNodes = computeProgram.attributes;
  		const attributes = [];
  		const transformBuffers = [];

  		for ( let i = 0; i < attributeNodes.length; i ++ ) {

  			const attribute = attributeNodes[ i ].node.attribute;

  			attributes.push( attribute );

  			if ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );

  		}

  		for ( let i = 0; i < transformAttributeNodes.length; i ++ ) {

  			const attribute = transformAttributeNodes[ i ].attribute;

  			if ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );

  			const attributeData = this.get( attribute );

  			transformBuffers.push( attributeData );

  		}

  		//

  		this.set( computePipeline, {
  			programGPU,
  			transformBuffers,
  			attributes
  		} );

  	}

  	createBindings( bindGroup, bindings ) {

  		if ( this._knownBindings.has( bindings ) === false ) {

  			this._knownBindings.add( bindings );

  			let uniformBuffers = 0;
  			let textures = 0;

  			for ( const bindGroup of bindings ) {

  				this.set( bindGroup, {
  					textures: textures,
  					uniformBuffers: uniformBuffers
  				} );

  				for ( const binding of bindGroup.bindings ) {

  					if ( binding.isUniformBuffer ) uniformBuffers ++;
  					if ( binding.isSampledTexture ) textures ++;

  				}

  			}

  		}

  		this.updateBindings( bindGroup, bindings );

  	}

  	updateBindings( bindGroup /*, bindings*/ ) {

  		const { gl } = this;

  		const bindGroupData = this.get( bindGroup );

  		let i = bindGroupData.uniformBuffers;
  		let t = bindGroupData.textures;

  		for ( const binding of bindGroup.bindings ) {

  			if ( binding.isUniformsGroup || binding.isUniformBuffer ) {

  				const data = binding.buffer;
  				const bufferGPU = gl.createBuffer();

  				gl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );
  				gl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );

  				this.set( binding, {
  					index: i ++,
  					bufferGPU
  				} );

  			} else if ( binding.isSampledTexture ) {

  				const { textureGPU, glTextureType } = this.get( binding.texture );

  				this.set( binding, {
  					index: t ++,
  					textureGPU,
  					glTextureType
  				} );

  			}

  		}

  	}

  	updateBinding( binding ) {

  		const gl = this.gl;

  		if ( binding.isUniformsGroup || binding.isUniformBuffer ) {

  			const bindingData = this.get( binding );
  			const bufferGPU = bindingData.bufferGPU;
  			const data = binding.buffer;

  			gl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );
  			gl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );

  		}

  	}

  	// attributes

  	createIndexAttribute( attribute ) {

  		const gl = this.gl;

  		this.attributeUtils.createAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

  	}

  	createAttribute( attribute ) {

  		if ( this.has( attribute ) ) return;

  		const gl = this.gl;

  		this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );

  	}

  	createStorageAttribute( attribute ) {

  		if ( this.has( attribute ) ) return;

  		const gl = this.gl;

  		this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );

  	}

  	updateAttribute( attribute ) {

  		this.attributeUtils.updateAttribute( attribute );

  	}

  	destroyAttribute( attribute ) {

  		this.attributeUtils.destroyAttribute( attribute );

  	}

  	updateSize() {

  		//console.warn( 'Abstract class.' );

  	}

  	hasFeature( name ) {

  		const keysMatching = Object.keys( GLFeatureName ).filter( key => GLFeatureName[ key ] === name );

  		const extensions = this.extensions;

  		for ( let i = 0; i < keysMatching.length; i ++ ) {

  			if ( extensions.has( keysMatching[ i ] ) ) return true;

  		}

  		return false;

  	}

  	getMaxAnisotropy() {

  		return this.capabilities.getMaxAnisotropy();

  	}

  	copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level ) {

  		this.textureUtils.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, level );

  	}

  	copyFramebufferToTexture( texture, renderContext, rectangle ) {

  		this.textureUtils.copyFramebufferToTexture( texture, renderContext, rectangle );

  	}

  	_setFramebuffer( descriptor ) {

  		const { gl, state } = this;

  		let currentFrameBuffer = null;

  		if ( descriptor.textures !== null ) {

  			const renderTarget = descriptor.renderTarget;
  			const renderTargetContextData = this.get( renderTarget );
  			const { samples, depthBuffer, stencilBuffer } = renderTarget;

  			const isCube = renderTarget.isWebGLCubeRenderTarget === true;

  			let msaaFb = renderTargetContextData.msaaFrameBuffer;
  			let depthRenderbuffer = renderTargetContextData.depthRenderbuffer;

  			const cacheKey = getCacheKey( descriptor );

  			let fb;

  			if ( isCube ) {

  				renderTargetContextData.cubeFramebuffers || ( renderTargetContextData.cubeFramebuffers = {} );

  				fb = renderTargetContextData.cubeFramebuffers[ cacheKey ];

  			} else {

  				renderTargetContextData.framebuffers || ( renderTargetContextData.framebuffers = {} );

  				fb = renderTargetContextData.framebuffers[ cacheKey ];

  			}

  			if ( fb === undefined ) {

  				fb = gl.createFramebuffer();

  				state.bindFramebuffer( gl.FRAMEBUFFER, fb );

  				const textures = descriptor.textures;

  				if ( isCube ) {

  					renderTargetContextData.cubeFramebuffers[ cacheKey ] = fb;

  					const { textureGPU } = this.get( textures[ 0 ] );

  					const cubeFace = this.renderer._activeCubeFace;

  					gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0 );

  				} else {

  					renderTargetContextData.framebuffers[ cacheKey ] = fb;

  					for ( let i = 0; i < textures.length; i ++ ) {

  						const texture = textures[ i ];
  						const textureData = this.get( texture );
  						textureData.renderTarget = descriptor.renderTarget;
  						textureData.cacheKey = cacheKey; // required for copyTextureToTexture()

  						const attachment = gl.COLOR_ATTACHMENT0 + i;

  						gl.framebufferTexture2D( gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0 );

  					}

  					state.drawBuffers( descriptor, fb );

  				}

  				if ( descriptor.depthTexture !== null ) {

  					const textureData = this.get( descriptor.depthTexture );
  					const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
  					textureData.renderTarget = descriptor.renderTarget;
  					textureData.cacheKey = cacheKey; // required for copyTextureToTexture()

  					gl.framebufferTexture2D( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0 );

  				}

  			}

  			if ( samples > 0 ) {

  				if ( msaaFb === undefined ) {

  					const invalidationArray = [];

  					msaaFb = gl.createFramebuffer();

  					state.bindFramebuffer( gl.FRAMEBUFFER, msaaFb );

  					const msaaRenderbuffers = [];

  					const textures = descriptor.textures;

  					for ( let i = 0; i < textures.length; i ++ ) {

  						msaaRenderbuffers[ i ] = gl.createRenderbuffer();

  						gl.bindRenderbuffer( gl.RENDERBUFFER, msaaRenderbuffers[ i ] );

  						invalidationArray.push( gl.COLOR_ATTACHMENT0 + i );

  						if ( depthBuffer ) {

  							const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
  							invalidationArray.push( depthStyle );

  						}

  						const texture = descriptor.textures[ i ];
  						const textureData = this.get( texture );

  						gl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height );
  						gl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, msaaRenderbuffers[ i ] );


  					}

  					renderTargetContextData.msaaFrameBuffer = msaaFb;
  					renderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;

  					if ( depthRenderbuffer === undefined ) {

  						depthRenderbuffer = gl.createRenderbuffer();
  						this.textureUtils.setupRenderBufferStorage( depthRenderbuffer, descriptor );

  						renderTargetContextData.depthRenderbuffer = depthRenderbuffer;

  						const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
  						invalidationArray.push( depthStyle );

  					}

  					renderTargetContextData.invalidationArray = invalidationArray;

  				}

  				currentFrameBuffer = renderTargetContextData.msaaFrameBuffer;

  			} else {

  				currentFrameBuffer = fb;

  			}

  		}

  		state.bindFramebuffer( gl.FRAMEBUFFER, currentFrameBuffer );

  	}


  	_getVaoKey( index, attributes ) {

  		let key = [];

  		if ( index !== null ) {

  			const indexData = this.get( index );

  			key += ':' + indexData.id;

  		}

  		for ( let i = 0; i < attributes.length; i ++ ) {

  			const attributeData = this.get( attributes[ i ] );

  			key += ':' + attributeData.id;

  		}

  		return key;

  	}

  	_createVao( index, attributes ) {

  		const { gl } = this;

  		const vaoGPU = gl.createVertexArray();
  		let key = '';

  		let staticVao = true;

  		gl.bindVertexArray( vaoGPU );

  		if ( index !== null ) {

  			const indexData = this.get( index );

  			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU );

  			key += ':' + indexData.id;

  		}

  		for ( let i = 0; i < attributes.length; i ++ ) {

  			const attribute = attributes[ i ];
  			const attributeData = this.get( attribute );

  			key += ':' + attributeData.id;

  			gl.bindBuffer( gl.ARRAY_BUFFER, attributeData.bufferGPU );
  			gl.enableVertexAttribArray( i );

  			if ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) staticVao = false;

  			let stride, offset;

  			if ( attribute.isInterleavedBufferAttribute === true ) {

  				stride = attribute.data.stride * attributeData.bytesPerElement;
  				offset = attribute.offset * attributeData.bytesPerElement;

  			} else {

  				stride = 0;
  				offset = 0;

  			}

  			if ( attributeData.isInteger ) {

  				gl.vertexAttribIPointer( i, attribute.itemSize, attributeData.type, stride, offset );

  			} else {

  				gl.vertexAttribPointer( i, attribute.itemSize, attributeData.type, attribute.normalized, stride, offset );

  			}

  			if ( attribute.isInstancedBufferAttribute && ! attribute.isInterleavedBufferAttribute ) {

  				gl.vertexAttribDivisor( i, attribute.meshPerAttribute );

  			} else if ( attribute.isInterleavedBufferAttribute && attribute.data.isInstancedInterleavedBuffer ) {

  				gl.vertexAttribDivisor( i, attribute.data.meshPerAttribute );

  			}

  		}

  		gl.bindBuffer( gl.ARRAY_BUFFER, null );

  		this.vaoCache[ key ] = vaoGPU;

  		return { vaoGPU, staticVao };

  	}

  	_getTransformFeedback( transformBuffers ) {

  		let key = '';

  		for ( let i = 0; i < transformBuffers.length; i ++ ) {

  			key += ':' + transformBuffers[ i ].id;

  		}

  		let transformFeedbackGPU = this.transformFeedbackCache[ key ];

  		if ( transformFeedbackGPU !== undefined ) {

  			return transformFeedbackGPU;

  		}

  		const { gl } = this;

  		transformFeedbackGPU = gl.createTransformFeedback();

  		gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );

  		for ( let i = 0; i < transformBuffers.length; i ++ ) {

  			const attributeData = transformBuffers[ i ];

  			gl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, i, attributeData.transformBuffer );

  		}

  		gl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );

  		this.transformFeedbackCache[ key ] = transformFeedbackGPU;

  		return transformFeedbackGPU;

  	}


  	_setupBindings( bindings, programGPU ) {

  		const gl = this.gl;

  		for ( const bindGroup of bindings ) {

  			for ( const binding of bindGroup.bindings ) {

  				const bindingData = this.get( binding );
  				const index = bindingData.index;

  				if ( binding.isUniformsGroup || binding.isUniformBuffer ) {

  					const location = gl.getUniformBlockIndex( programGPU, binding.name );
  					gl.uniformBlockBinding( programGPU, location, index );

  				} else if ( binding.isSampledTexture ) {

  					const location = gl.getUniformLocation( programGPU, binding.name );
  					gl.uniform1i( location, index );

  				}

  			}

  		}

  	}

  	_bindUniforms( bindings ) {

  		const { gl, state } = this;

  		for ( const bindGroup of bindings ) {

  			for ( const binding of bindGroup.bindings ) {

  				const bindingData = this.get( binding );
  				const index = bindingData.index;

  				if ( binding.isUniformsGroup || binding.isUniformBuffer ) {

  					// TODO USE bindBufferRange to group multiple uniform buffers
  					state.bindBufferBase( gl.UNIFORM_BUFFER, index, bindingData.bufferGPU );

  				} else if ( binding.isSampledTexture ) {

  					state.bindTexture( bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index );

  				}

  			}

  		}

  	}

  	dispose() {

  		this.renderer.domElement.removeEventListener( 'webglcontextlost', this._onContextLost );

  	}

  }

  class Sampler extends Binding {

  	constructor( name, texture ) {

  		super( name );

  		this.texture = texture;
  		this.version = texture ? texture.version : 0;

  		this.isSampler = true;

  	}

  }

  class NodeSampler extends Sampler {

  	constructor( name, textureNode, groupNode ) {

  		super( name, textureNode ? textureNode.value : null );

  		this.textureNode = textureNode;
  		this.groupNode = groupNode;

  	}

  	update() {

  		this.texture = this.textureNode.value;

  	}

  }

  class StorageBuffer extends Buffer {

  	constructor( name, attribute ) {

  		super( name, attribute ? attribute.array : null );

  		this.attribute = attribute;

  		this.isStorageBuffer = true;

  	}

  }

  let _id = 0;

  class NodeStorageBuffer extends StorageBuffer {

  	constructor( nodeUniform, groupNode ) {

  		super( 'StorageBuffer_' + _id ++, nodeUniform ? nodeUniform.value : null );

  		this.nodeUniform = nodeUniform;
  		this.access = nodeUniform ? nodeUniform.access : GPUBufferBindingType.Storage;
  		this.groupNode = groupNode;


  	}

  	get buffer() {

  		return this.nodeUniform.value;

  	}

  }

  class WebGPUTexturePassUtils extends DataMap {

  	constructor( device ) {

  		super();

  		this.device = device;

  		const mipmapVertexSource = `
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`;

  		const mipmapFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`;

  		const flipYFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;
  		this.mipmapSampler = device.createSampler( { minFilter: GPUFilterMode.Linear } );
  		this.flipYSampler = device.createSampler( { minFilter: GPUFilterMode.Nearest } ); //@TODO?: Consider using textureLoad()

  		// We'll need a new pipeline for every texture format used.
  		this.transferPipelines = {};
  		this.flipYPipelines = {};

  		this.mipmapVertexShaderModule = device.createShaderModule( {
  			label: 'mipmapVertex',
  			code: mipmapVertexSource
  		} );

  		this.mipmapFragmentShaderModule = device.createShaderModule( {
  			label: 'mipmapFragment',
  			code: mipmapFragmentSource
  		} );

  		this.flipYFragmentShaderModule = device.createShaderModule( {
  			label: 'flipYFragment',
  			code: flipYFragmentSource
  		} );

  	}

  	getTransferPipeline( format ) {

  		let pipeline = this.transferPipelines[ format ];

  		if ( pipeline === undefined ) {

  			pipeline = this.device.createRenderPipeline( {
  				label: `mipmap-${ format }`,
  				vertex: {
  					module: this.mipmapVertexShaderModule,
  					entryPoint: 'main'
  				},
  				fragment: {
  					module: this.mipmapFragmentShaderModule,
  					entryPoint: 'main',
  					targets: [ { format } ]
  				},
  				primitive: {
  					topology: GPUPrimitiveTopology.TriangleStrip,
  					stripIndexFormat: GPUIndexFormat.Uint32
  				},
  				layout: 'auto'
  			} );

  			this.transferPipelines[ format ] = pipeline;

  		}

  		return pipeline;

  	}

  	getFlipYPipeline( format ) {

  		let pipeline = this.flipYPipelines[ format ];

  		if ( pipeline === undefined ) {

  			pipeline = this.device.createRenderPipeline( {
  				label: `flipY-${ format }`,
  				vertex: {
  					module: this.mipmapVertexShaderModule,
  					entryPoint: 'main'
  				},
  				fragment: {
  					module: this.flipYFragmentShaderModule,
  					entryPoint: 'main',
  					targets: [ { format } ]
  				},
  				primitive: {
  					topology: GPUPrimitiveTopology.TriangleStrip,
  					stripIndexFormat: GPUIndexFormat.Uint32
  				},
  				layout: 'auto'
  			} );

  			this.flipYPipelines[ format ] = pipeline;

  		}

  		return pipeline;

  	}

  	flipY( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {

  		const format = textureGPUDescriptor.format;
  		const { width, height } = textureGPUDescriptor.size;

  		const transferPipeline = this.getTransferPipeline( format );
  		const flipYPipeline = this.getFlipYPipeline( format );

  		const tempTexture = this.device.createTexture( {
  			size: { width, height, depthOrArrayLayers: 1 },
  			format,
  			usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING
  		} );

  		const srcView = textureGPU.createView( {
  			baseMipLevel: 0,
  			mipLevelCount: 1,
  			dimension: GPUTextureViewDimension.TwoD,
  			baseArrayLayer
  		} );

  		const dstView = tempTexture.createView( {
  			baseMipLevel: 0,
  			mipLevelCount: 1,
  			dimension: GPUTextureViewDimension.TwoD,
  			baseArrayLayer: 0
  		} );

  		const commandEncoder = this.device.createCommandEncoder( {} );

  		const pass = ( pipeline, sourceView, destinationView ) => {

  			const bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.

  			const bindGroup = this.device.createBindGroup( {
  				layout: bindGroupLayout,
  				entries: [ {
  					binding: 0,
  					resource: this.flipYSampler
  				}, {
  					binding: 1,
  					resource: sourceView
  				} ]
  			} );

  			const passEncoder = commandEncoder.beginRenderPass( {
  				colorAttachments: [ {
  					view: destinationView,
  					loadOp: GPULoadOp.Clear,
  					storeOp: GPUStoreOp.Store,
  					clearValue: [ 0, 0, 0, 0 ]
  				} ]
  			} );

  			passEncoder.setPipeline( pipeline );
  			passEncoder.setBindGroup( 0, bindGroup );
  			passEncoder.draw( 4, 1, 0, 0 );
  			passEncoder.end();

  		};

  		pass( transferPipeline, srcView, dstView );
  		pass( flipYPipeline, dstView, srcView );

  		this.device.queue.submit( [ commandEncoder.finish() ] );

  		tempTexture.destroy();

  	}

  	generateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {

  		const textureData = this.get( textureGPU );

  		if ( textureData.useCount === undefined ) {

  			textureData.useCount = 0;
  			textureData.layers = [];

  		}

  		const passes = textureData.layers[ baseArrayLayer ] || this._mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer );

  		const commandEncoder = this.device.createCommandEncoder( {} );

  		this._mipmapRunBundles( commandEncoder, passes );

  		this.device.queue.submit( [ commandEncoder.finish() ] );

  		if ( textureData.useCount !== 0 ) textureData.layers[ baseArrayLayer ] = passes;

  		textureData.useCount ++;

  	}

  	_mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer ) {

  		const pipeline = this.getTransferPipeline( textureGPUDescriptor.format );

  		const bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.

  		let srcView = textureGPU.createView( {
  			baseMipLevel: 0,
  			mipLevelCount: 1,
  			dimension: GPUTextureViewDimension.TwoD,
  			baseArrayLayer
  		} );

  		const passes = [];

  		for ( let i = 1; i < textureGPUDescriptor.mipLevelCount; i ++ ) {

  			const bindGroup = this.device.createBindGroup( {
  				layout: bindGroupLayout,
  				entries: [ {
  					binding: 0,
  					resource: this.mipmapSampler
  				}, {
  					binding: 1,
  					resource: srcView
  				} ]
  			} );

  			const dstView = textureGPU.createView( {
  				baseMipLevel: i,
  				mipLevelCount: 1,
  				dimension: GPUTextureViewDimension.TwoD,
  				baseArrayLayer
  			} );

  			const passDescriptor = {
  				colorAttachments: [ {
  					view: dstView,
  					loadOp: GPULoadOp.Clear,
  					storeOp: GPUStoreOp.Store,
  					clearValue: [ 0, 0, 0, 0 ]
  				} ]
  			};

  			const passEncoder = this.device.createRenderBundleEncoder( {
  				colorFormats: [ textureGPUDescriptor.format ]
  			} );

  			passEncoder.setPipeline( pipeline );
  			passEncoder.setBindGroup( 0, bindGroup );
  			passEncoder.draw( 4, 1, 0, 0 );

  			passes.push( {
  				renderBundles: [ passEncoder.finish() ],
  				passDescriptor
  			} );

  			srcView = dstView;

  		}

  		return passes;

  	}

  	_mipmapRunBundles( commandEncoder, passes ) {

  		const levels = passes.length;

  		for ( let i = 0; i < levels; i ++ ) {

  			const pass = passes[ i ];

  			const passEncoder = commandEncoder.beginRenderPass( pass.passDescriptor );

  			passEncoder.executeBundles( pass.renderBundles );

  			passEncoder.end();

  		}

  	}

  }

  const _compareToWebGPU = {
  	[ NeverCompare ]: 'never',
  	[ LessCompare ]: 'less',
  	[ EqualCompare ]: 'equal',
  	[ LessEqualCompare ]: 'less-equal',
  	[ GreaterCompare ]: 'greater',
  	[ GreaterEqualCompare ]: 'greater-equal',
  	[ AlwaysCompare ]: 'always',
  	[ NotEqualCompare ]: 'not-equal'
  };

  const _flipMap = [ 0, 1, 3, 2, 4, 5 ];

  class WebGPUTextureUtils {

  	constructor( backend ) {

  		this.backend = backend;

  		this._passUtils = null;

  		this.defaultTexture = {};
  		this.defaultCubeTexture = {};
  		this.defaultVideoFrame = null;

  		this.colorBuffer = null;

  		this.depthTexture = new DepthTexture();
  		this.depthTexture.name = 'depthBuffer';

  	}

  	createSampler( texture ) {

  		const backend = this.backend;
  		const device = backend.device;

  		const textureGPU = backend.get( texture );

  		const samplerDescriptorGPU = {
  			addressModeU: this._convertAddressMode( texture.wrapS ),
  			addressModeV: this._convertAddressMode( texture.wrapT ),
  			addressModeW: this._convertAddressMode( texture.wrapR ),
  			magFilter: this._convertFilterMode( texture.magFilter ),
  			minFilter: this._convertFilterMode( texture.minFilter ),
  			mipmapFilter: this._convertFilterMode( texture.minFilter ),
  			maxAnisotropy: 1
  		};

  		// anisotropy can only be used when all filter modes are set to linear.

  		if ( samplerDescriptorGPU.magFilter === GPUFilterMode.Linear && samplerDescriptorGPU.minFilter === GPUFilterMode.Linear && samplerDescriptorGPU.mipmapFilter === GPUFilterMode.Linear ) {

  			samplerDescriptorGPU.maxAnisotropy = texture.anisotropy;

  		}

  		if ( texture.isDepthTexture && texture.compareFunction !== null ) {

  			samplerDescriptorGPU.compare = _compareToWebGPU[ texture.compareFunction ];

  		}

  		textureGPU.sampler = device.createSampler( samplerDescriptorGPU );

  	}

  	createDefaultTexture( texture ) {

  		let textureGPU;

  		const format = getFormat( texture );

  		if ( texture.isCubeTexture ) {

  			textureGPU = this._getDefaultCubeTextureGPU( format );

  		} else if ( texture.isVideoTexture ) {

  			this.backend.get( texture ).externalTexture = this._getDefaultVideoFrame();

  		} else {

  			textureGPU = this._getDefaultTextureGPU( format );

  		}

  		this.backend.get( texture ).texture = textureGPU;

  	}

  	createTexture( texture, options = {} ) {

  		const backend = this.backend;
  		const textureData = backend.get( texture );

  		if ( textureData.initialized ) {

  			throw new Error( 'WebGPUTextureUtils: Texture already initialized.' );

  		}

  		if ( options.needsMipmaps === undefined ) options.needsMipmaps = false;
  		if ( options.levels === undefined ) options.levels = 1;
  		if ( options.depth === undefined ) options.depth = 1;

  		const { width, height, depth, levels } = options;

  		if ( texture.isFramebufferTexture ) {

  			if ( options.renderTarget ) {

  				options.format = this.backend.utils.getCurrentColorFormat( options.renderTarget );

  			} else {

  				options.format = this.backend.utils.getPreferredCanvasFormat();

  			}

  		}

  		const dimension = this._getDimension( texture );
  		const format = texture.internalFormat || options.format || getFormat( texture, backend.device );

  		textureData.format = format;

  		let sampleCount = options.sampleCount !== undefined ? options.sampleCount : 1;

  		sampleCount = backend.utils.getSampleCount( sampleCount );

  		const primarySampleCount = texture.isRenderTargetTexture && ! texture.isMultisampleRenderTargetTexture ? 1 : sampleCount;

  		let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;

  		if ( texture.isStorageTexture === true ) {

  			usage |= GPUTextureUsage.STORAGE_BINDING;

  		}

  		if ( texture.isCompressedTexture !== true && texture.isCompressedArrayTexture !== true ) {

  			usage |= GPUTextureUsage.RENDER_ATTACHMENT;

  		}

  		const textureDescriptorGPU = {
  			label: texture.name,
  			size: {
  				width: width,
  				height: height,
  				depthOrArrayLayers: depth,
  			},
  			mipLevelCount: levels,
  			sampleCount: primarySampleCount,
  			dimension: dimension,
  			format: format,
  			usage: usage
  		};

  		// texture creation

  		if ( texture.isVideoTexture ) {

  			const video = texture.source.data;
  			const videoFrame = new VideoFrame( video );

  			textureDescriptorGPU.size.width = videoFrame.displayWidth;
  			textureDescriptorGPU.size.height = videoFrame.displayHeight;

  			videoFrame.close();

  			textureData.externalTexture = video;

  		} else {

  			if ( format === undefined ) {

  				console.warn( 'WebGPURenderer: Texture format not supported.' );

  				return this.createDefaultTexture( texture );

  			}

  			textureData.texture = backend.device.createTexture( textureDescriptorGPU );

  		}

  		if ( texture.isRenderTargetTexture && sampleCount > 1 && ! texture.isMultisampleRenderTargetTexture ) {

  			const msaaTextureDescriptorGPU = Object.assign( {}, textureDescriptorGPU );

  			msaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + '-msaa';
  			msaaTextureDescriptorGPU.sampleCount = sampleCount;

  			textureData.msaaTexture = backend.device.createTexture( msaaTextureDescriptorGPU );

  		}

  		textureData.initialized = true;

  		textureData.textureDescriptorGPU = textureDescriptorGPU;

  	}

  	destroyTexture( texture ) {

  		const backend = this.backend;
  		const textureData = backend.get( texture );

  		textureData.texture.destroy();

  		if ( textureData.msaaTexture !== undefined ) textureData.msaaTexture.destroy();

  		backend.delete( texture );

  	}

  	destroySampler( texture ) {

  		const backend = this.backend;
  		const textureData = backend.get( texture );

  		delete textureData.sampler;

  	}

  	generateMipmaps( texture ) {

  		const textureData = this.backend.get( texture );

  		if ( texture.isCubeTexture ) {

  			for ( let i = 0; i < 6; i ++ ) {

  				this._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );

  			}

  		} else {

  			const depth = texture.image.depth || 1;

  			for ( let i = 0; i < depth; i ++ ) {

  				this._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );

  			}

  		}

  	}

  	getColorBuffer() {

  		if ( this.colorBuffer ) this.colorBuffer.destroy();

  		const backend = this.backend;
  		const { width, height } = backend.getDrawingBufferSize();

  		this.colorBuffer = backend.device.createTexture( {
  			label: 'colorBuffer',
  			size: {
  				width: width,
  				height: height,
  				depthOrArrayLayers: 1
  			},
  			sampleCount: backend.utils.getSampleCount( backend.renderer.samples ),
  			format: backend.utils.getPreferredCanvasFormat(),
  			usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC
  		} );

  		return this.colorBuffer;

  	}

  	getDepthBuffer( depth = true, stencil = false ) {

  		const backend = this.backend;
  		const { width, height } = backend.getDrawingBufferSize();

  		const depthTexture = this.depthTexture;
  		const depthTextureGPU = backend.get( depthTexture ).texture;

  		let format, type;

  		if ( stencil ) {

  			format = DepthStencilFormat;
  			type = UnsignedInt248Type;

  		} else if ( depth ) {

  			format = DepthFormat;
  			type = UnsignedIntType;

  		}

  		if ( depthTextureGPU !== undefined ) {

  			if ( depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type ) {

  				return depthTextureGPU;

  			}

  			this.destroyTexture( depthTexture );

  		}

  		depthTexture.name = 'depthBuffer';
  		depthTexture.format = format;
  		depthTexture.type = type;
  		depthTexture.image.width = width;
  		depthTexture.image.height = height;

  		this.createTexture( depthTexture, { sampleCount: backend.utils.getSampleCount( backend.renderer.samples ), width, height } );

  		return backend.get( depthTexture ).texture;

  	}

  	updateTexture( texture, options ) {

  		const textureData = this.backend.get( texture );

  		const { textureDescriptorGPU } = textureData;

  		if ( texture.isRenderTargetTexture || ( textureDescriptorGPU === undefined /* unsupported texture format */ ) )
  			return;

  		// transfer texture data

  		if ( texture.isDataTexture ) {

  			this._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );

  		} else if ( texture.isDataArrayTexture || texture.isData3DTexture ) {

  			for ( let i = 0; i < options.image.depth; i ++ ) {

  				this._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, i, texture.flipY, i );

  			}

  		} else if ( texture.isCompressedTexture || texture.isCompressedArrayTexture ) {

  			this._copyCompressedBufferToTexture( texture.mipmaps, textureData.texture, textureDescriptorGPU );

  		} else if ( texture.isCubeTexture ) {

  			this._copyCubeMapToTexture( options.images, textureData.texture, textureDescriptorGPU, texture.flipY );

  		} else if ( texture.isVideoTexture ) {

  			const video = texture.source.data;

  			textureData.externalTexture = video;

  		} else {

  			this._copyImageToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );

  		}

  		//

  		textureData.version = texture.version;

  		if ( texture.onUpdate ) texture.onUpdate( texture );

  	}

  	async copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {

  		const device = this.backend.device;

  		const textureData = this.backend.get( texture );
  		const textureGPU = textureData.texture;
  		const format = textureData.textureDescriptorGPU.format;
  		const bytesPerTexel = this._getBytesPerTexel( format );

  		let bytesPerRow = width * bytesPerTexel;
  		bytesPerRow = Math.ceil( bytesPerRow / 256 ) * 256; // Align to 256 bytes

  		const readBuffer = device.createBuffer(
  			{
  				size: width * height * bytesPerTexel,
  				usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
  			}
  		);

  		const encoder = device.createCommandEncoder();

  		encoder.copyTextureToBuffer(
  			{
  				texture: textureGPU,
  				origin: { x, y, z: faceIndex },
  			},
  			{
  				buffer: readBuffer,
  				bytesPerRow: bytesPerRow
  			},
  			{
  				width: width,
  				height: height
  			}

  		);

  		const typedArrayType = this._getTypedArrayType( format );

  		device.queue.submit( [ encoder.finish() ] );

  		await readBuffer.mapAsync( GPUMapMode.READ );

  		const buffer = readBuffer.getMappedRange();

  		return new typedArrayType( buffer );

  	}

  	_isEnvironmentTexture( texture ) {

  		const mapping = texture.mapping;

  		return ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

  	}

  	_getDefaultTextureGPU( format ) {

  		let defaultTexture = this.defaultTexture[ format ];

  		if ( defaultTexture === undefined ) {

  			const texture = new Texture();
  			texture.minFilter = NearestFilter;
  			texture.magFilter = NearestFilter;

  			this.createTexture( texture, { width: 1, height: 1, format } );

  			this.defaultTexture[ format ] = defaultTexture = texture;

  		}

  		return this.backend.get( defaultTexture ).texture;

  	}

  	_getDefaultCubeTextureGPU( format ) {

  		let defaultCubeTexture = this.defaultTexture[ format ];

  		if ( defaultCubeTexture === undefined ) {

  			const texture = new CubeTexture();
  			texture.minFilter = NearestFilter;
  			texture.magFilter = NearestFilter;

  			this.createTexture( texture, { width: 1, height: 1, depth: 6 } );

  			this.defaultCubeTexture[ format ] = defaultCubeTexture = texture;

  		}

  		return this.backend.get( defaultCubeTexture ).texture;

  	}

  	_getDefaultVideoFrame() {

  		let defaultVideoFrame = this.defaultVideoFrame;

  		if ( defaultVideoFrame === null ) {

  			const init = {
  				timestamp: 0,
  				codedWidth: 1,
  				codedHeight: 1,
  				format: 'RGBA',
  			};

  			this.defaultVideoFrame = defaultVideoFrame = new VideoFrame( new Uint8Array( [ 0, 0, 0, 0xff ] ), init );

  		}

  		return defaultVideoFrame;

  	}

  	_copyCubeMapToTexture( images, textureGPU, textureDescriptorGPU, flipY ) {

  		for ( let i = 0; i < 6; i ++ ) {

  			const image = images[ i ];

  			const flipIndex = flipY === true ? _flipMap[ i ] : i;

  			if ( image.isDataTexture ) {

  				this._copyBufferToTexture( image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY );

  			} else {

  				this._copyImageToTexture( image, textureGPU, textureDescriptorGPU, flipIndex, flipY );

  			}

  		}

  	}

  	_copyImageToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY ) {

  		const device = this.backend.device;

  		device.queue.copyExternalImageToTexture(
  			{
  				source: image
  			}, {
  				texture: textureGPU,
  				mipLevel: 0,
  				origin: { x: 0, y: 0, z: originDepth }
  			}, {
  				width: image.width,
  				height: image.height,
  				depthOrArrayLayers: 1
  			}
  		);

  		if ( flipY === true ) {

  			this._flipY( textureGPU, textureDescriptorGPU, originDepth );

  		}

  	}

  	_getPassUtils() {

  		let passUtils = this._passUtils;

  		if ( passUtils === null ) {

  			this._passUtils = passUtils = new WebGPUTexturePassUtils( this.backend.device );

  		}

  		return passUtils;

  	}

  	_generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer = 0 ) {

  		this._getPassUtils().generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer );

  	}

  	_flipY( textureGPU, textureDescriptorGPU, originDepth = 0 ) {

  		this._getPassUtils().flipY( textureGPU, textureDescriptorGPU, originDepth );

  	}

  	_copyBufferToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth = 0 ) {

  		// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()
  		// @TODO: Consider to support valid buffer layouts with other formats like RGB

  		const device = this.backend.device;

  		const data = image.data;

  		const bytesPerTexel = this._getBytesPerTexel( textureDescriptorGPU.format );
  		const bytesPerRow = image.width * bytesPerTexel;

  		device.queue.writeTexture(
  			{
  				texture: textureGPU,
  				mipLevel: 0,
  				origin: { x: 0, y: 0, z: originDepth }
  			},
  			data,
  			{
  				offset: image.width * image.height * bytesPerTexel * depth,
  				bytesPerRow
  			},
  			{
  				width: image.width,
  				height: image.height,
  				depthOrArrayLayers: 1
  			} );

  		if ( flipY === true ) {

  			this._flipY( textureGPU, textureDescriptorGPU, originDepth );

  		}

  	}

  	_copyCompressedBufferToTexture( mipmaps, textureGPU, textureDescriptorGPU ) {

  		// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()

  		const device = this.backend.device;

  		const blockData = this._getBlockData( textureDescriptorGPU.format );
  		const isTextureArray = textureDescriptorGPU.size.depthOrArrayLayers > 1;

  		for ( let i = 0; i < mipmaps.length; i ++ ) {

  			const mipmap = mipmaps[ i ];

  			const width = mipmap.width;
  			const height = mipmap.height;
  			const depth = isTextureArray ? textureDescriptorGPU.size.depthOrArrayLayers : 1;

  			const bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;
  			const bytesPerImage = bytesPerRow * Math.ceil( height / blockData.height );

  			for ( let j = 0; j < depth; j ++ ) {

  				device.queue.writeTexture(
  					{
  						texture: textureGPU,
  						mipLevel: i,
  						origin: { x: 0, y: 0, z: j }
  					},
  					mipmap.data,
  					{
  						offset: j * bytesPerImage,
  						bytesPerRow,
  						rowsPerImage: Math.ceil( height / blockData.height )
  					},
  					{
  						width: Math.ceil( width / blockData.width ) * blockData.width,
  						height: Math.ceil( height / blockData.height ) * blockData.height,
  						depthOrArrayLayers: 1
  					}
  				);

  			}

  		}

  	}

  	_getBlockData( format ) {

  		// this method is only relevant for compressed texture formats

  		if ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1
  		if ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3
  		if ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5
  		if ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1
  		if ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2
  		if ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)
  		if ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)

  		if ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };

  		if ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };
  		if ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };
  		if ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };
  		if ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };
  		if ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };
  		if ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };
  		if ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };
  		if ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };
  		if ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };
  		if ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };
  		if ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };
  		if ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };
  		if ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };
  		if ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };

  	}

  	_convertAddressMode( value ) {

  		let addressMode = GPUAddressMode.ClampToEdge;

  		if ( value === RepeatWrapping ) {

  			addressMode = GPUAddressMode.Repeat;

  		} else if ( value === MirroredRepeatWrapping ) {

  			addressMode = GPUAddressMode.MirrorRepeat;

  		}

  		return addressMode;

  	}

  	_convertFilterMode( value ) {

  		let filterMode = GPUFilterMode.Linear;

  		if ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {

  			filterMode = GPUFilterMode.Nearest;

  		}

  		return filterMode;

  	}

  	_getBytesPerTexel( format ) {

  		// 8-bit formats
  		if ( format === GPUTextureFormat.R8Unorm ||
  			format === GPUTextureFormat.R8Snorm ||
  			format === GPUTextureFormat.R8Uint ||
  			format === GPUTextureFormat.R8Sint ) return 1;

  		// 16-bit formats
  		if ( format === GPUTextureFormat.R16Uint ||
  			format === GPUTextureFormat.R16Sint ||
  			format === GPUTextureFormat.R16Float ||
  			format === GPUTextureFormat.RG8Unorm ||
  			format === GPUTextureFormat.RG8Snorm ||
  			format === GPUTextureFormat.RG8Uint ||
  			format === GPUTextureFormat.RG8Sint ) return 2;

  		// 32-bit formats
  		if ( format === GPUTextureFormat.R32Uint ||
  			format === GPUTextureFormat.R32Sint ||
  			format === GPUTextureFormat.R32Float ||
  			format === GPUTextureFormat.RG16Uint ||
  			format === GPUTextureFormat.RG16Sint ||
  			format === GPUTextureFormat.RG16Float ||
  			format === GPUTextureFormat.RGBA8Unorm ||
  			format === GPUTextureFormat.RGBA8UnormSRGB ||
  			format === GPUTextureFormat.RGBA8Snorm ||
  			format === GPUTextureFormat.RGBA8Uint ||
  			format === GPUTextureFormat.RGBA8Sint ||
  			format === GPUTextureFormat.BGRA8Unorm ||
  			format === GPUTextureFormat.BGRA8UnormSRGB ||
  			// Packed 32-bit formats
  			format === GPUTextureFormat.RGB9E5UFloat ||
  			format === GPUTextureFormat.RGB10A2Unorm ||
  			format === GPUTextureFormat.RG11B10UFloat ||
  			format === GPUTextureFormat.Depth32Float ||
  			format === GPUTextureFormat.Depth24Plus ||
  			format === GPUTextureFormat.Depth24PlusStencil8 ||
  			format === GPUTextureFormat.Depth32FloatStencil8 ) return 4;

  		// 64-bit formats
  		if ( format === GPUTextureFormat.RG32Uint ||
  			format === GPUTextureFormat.RG32Sint ||
  			format === GPUTextureFormat.RG32Float ||
  			format === GPUTextureFormat.RGBA16Uint ||
  			format === GPUTextureFormat.RGBA16Sint ||
  			format === GPUTextureFormat.RGBA16Float ) return 8;

  		// 128-bit formats
  		if ( format === GPUTextureFormat.RGBA32Uint ||
  			format === GPUTextureFormat.RGBA32Sint ||
  			format === GPUTextureFormat.RGBA32Float ) return 16;


  	}

  	_getTypedArrayType( format ) {

  		if ( format === GPUTextureFormat.R8Uint ) return Uint8Array;
  		if ( format === GPUTextureFormat.R8Sint ) return Int8Array;
  		if ( format === GPUTextureFormat.R8Unorm ) return Uint8Array;
  		if ( format === GPUTextureFormat.R8Snorm ) return Int8Array;
  		if ( format === GPUTextureFormat.RG8Uint ) return Uint8Array;
  		if ( format === GPUTextureFormat.RG8Sint ) return Int8Array;
  		if ( format === GPUTextureFormat.RG8Unorm ) return Uint8Array;
  		if ( format === GPUTextureFormat.RG8Snorm ) return Int8Array;
  		if ( format === GPUTextureFormat.RGBA8Uint ) return Uint8Array;
  		if ( format === GPUTextureFormat.RGBA8Sint ) return Int8Array;
  		if ( format === GPUTextureFormat.RGBA8Unorm ) return Uint8Array;
  		if ( format === GPUTextureFormat.RGBA8Snorm ) return Int8Array;


  		if ( format === GPUTextureFormat.R16Uint ) return Uint16Array;
  		if ( format === GPUTextureFormat.R16Sint ) return Int16Array;
  		if ( format === GPUTextureFormat.RG16Uint ) return Uint16Array;
  		if ( format === GPUTextureFormat.RG16Sint ) return Int16Array;
  		if ( format === GPUTextureFormat.RGBA16Uint ) return Uint16Array;
  		if ( format === GPUTextureFormat.RGBA16Sint ) return Int16Array;
  		if ( format === GPUTextureFormat.R16Float ) return Uint16Array;
  		if ( format === GPUTextureFormat.RG16Float ) return Uint16Array;
  		if ( format === GPUTextureFormat.RGBA16Float ) return Uint16Array;


  		if ( format === GPUTextureFormat.R32Uint ) return Uint32Array;
  		if ( format === GPUTextureFormat.R32Sint ) return Int32Array;
  		if ( format === GPUTextureFormat.R32Float ) return Float32Array;
  		if ( format === GPUTextureFormat.RG32Uint ) return Uint32Array;
  		if ( format === GPUTextureFormat.RG32Sint ) return Int32Array;
  		if ( format === GPUTextureFormat.RG32Float ) return Float32Array;
  		if ( format === GPUTextureFormat.RGBA32Uint ) return Uint32Array;
  		if ( format === GPUTextureFormat.RGBA32Sint ) return Int32Array;
  		if ( format === GPUTextureFormat.RGBA32Float ) return Float32Array;

  		if ( format === GPUTextureFormat.BGRA8Unorm ) return Uint8Array;
  		if ( format === GPUTextureFormat.BGRA8UnormSRGB ) return Uint8Array;
  		if ( format === GPUTextureFormat.RGB10A2Unorm ) return Uint32Array;
  		if ( format === GPUTextureFormat.RGB9E5UFloat ) return Uint32Array;
  		if ( format === GPUTextureFormat.RG11B10UFloat ) return Uint32Array;

  		if ( format === GPUTextureFormat.Depth32Float ) return Float32Array;
  		if ( format === GPUTextureFormat.Depth24Plus ) return Uint32Array;
  		if ( format === GPUTextureFormat.Depth24PlusStencil8 ) return Uint32Array;
  		if ( format === GPUTextureFormat.Depth32FloatStencil8 ) return Float32Array;

  	}

  	_getDimension( texture ) {

  		let dimension;

  		if ( texture.isData3DTexture ) {

  			dimension = GPUTextureDimension.ThreeD;

  		} else {

  			dimension = GPUTextureDimension.TwoD;

  		}

  		return dimension;

  	}

  }

  function getFormat( texture, device = null ) {

  	const format = texture.format;
  	const type = texture.type;
  	const colorSpace = texture.colorSpace;

  	let formatGPU;

  	if ( texture.isCompressedTexture === true || texture.isCompressedArrayTexture === true ) {

  		switch ( format ) {

  			case RGBA_S3TC_DXT1_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;
  				break;

  			case RGBA_S3TC_DXT3_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;
  				break;

  			case RGBA_S3TC_DXT5_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;
  				break;

  			case RGB_ETC2_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;
  				break;

  			case RGBA_ETC2_EAC_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;
  				break;

  			case RGBA_ASTC_4x4_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;
  				break;

  			case RGBA_ASTC_5x4_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;
  				break;

  			case RGBA_ASTC_5x5_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;
  				break;

  			case RGBA_ASTC_6x5_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;
  				break;

  			case RGBA_ASTC_6x6_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;
  				break;

  			case RGBA_ASTC_8x5_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;
  				break;

  			case RGBA_ASTC_8x6_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;
  				break;

  			case RGBA_ASTC_8x8_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;
  				break;

  			case RGBA_ASTC_10x5_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;
  				break;

  			case RGBA_ASTC_10x6_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;
  				break;

  			case RGBA_ASTC_10x8_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;
  				break;

  			case RGBA_ASTC_10x10_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;
  				break;

  			case RGBA_ASTC_12x10_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;
  				break;

  			case RGBA_ASTC_12x12_Format:
  				formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;
  				break;

  			default:
  				console.error( 'WebGPURenderer: Unsupported texture format.', format );

  		}

  	} else {

  		switch ( format ) {

  			case RGBAFormat:

  				switch ( type ) {

  					case ByteType:
  						formatGPU = GPUTextureFormat.RGBA8Snorm;
  						break;

  					case ShortType:
  						formatGPU = GPUTextureFormat.RGBA16Sint;
  						break;

  					case UnsignedShortType:
  						formatGPU = GPUTextureFormat.RGBA16Uint;
  						break;
  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.RGBA32Uint;
  						break;

  					case IntType:
  						formatGPU = GPUTextureFormat.RGBA32Sint;
  						break;

  					case UnsignedByteType:
  						formatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
  						break;

  					case HalfFloatType:
  						formatGPU = GPUTextureFormat.RGBA16Float;
  						break;

  					case FloatType:
  						formatGPU = GPUTextureFormat.RGBA32Float;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );

  				}

  				break;

  			case RGBFormat:

  				switch ( type ) {

  					case UnsignedInt5999Type:
  						formatGPU = GPUTextureFormat.RGB9E5UFloat;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RGBFormat.', type );

  				}

  				break;

  			case RedFormat:

  				switch ( type ) {

  					case ByteType:
  						formatGPU = GPUTextureFormat.R8Snorm;
  						break;

  					case ShortType:
  						formatGPU = GPUTextureFormat.R16Sint;
  						break;

  					case UnsignedShortType:
  						formatGPU = GPUTextureFormat.R16Uint;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.R32Uint;
  						break;

  					case IntType:
  						formatGPU = GPUTextureFormat.R32Sint;
  						break;

  					case UnsignedByteType:
  						formatGPU = GPUTextureFormat.R8Unorm;
  						break;

  					case HalfFloatType:
  						formatGPU = GPUTextureFormat.R16Float;
  						break;

  					case FloatType:
  						formatGPU = GPUTextureFormat.R32Float;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );

  				}

  				break;

  			case RGFormat:

  				switch ( type ) {

  					case ByteType:
  						formatGPU = GPUTextureFormat.RG8Snorm;
  						break;

  					case ShortType:
  						formatGPU = GPUTextureFormat.RG16Sint;
  						break;

  					case UnsignedShortType:
  						formatGPU = GPUTextureFormat.RG16Uint;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.RG32Uint;
  						break;

  					case IntType:
  						formatGPU = GPUTextureFormat.RG32Sint;
  						break;

  					case UnsignedByteType:
  						formatGPU = GPUTextureFormat.RG8Unorm;
  						break;

  					case HalfFloatType:
  						formatGPU = GPUTextureFormat.RG16Float;
  						break;

  					case FloatType:
  						formatGPU = GPUTextureFormat.RG32Float;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );

  				}

  				break;

  			case DepthFormat:

  				switch ( type ) {

  					case UnsignedShortType:
  						formatGPU = GPUTextureFormat.Depth16Unorm;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.Depth24Plus;
  						break;

  					case FloatType:
  						formatGPU = GPUTextureFormat.Depth32Float;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );

  				}

  				break;

  			case DepthStencilFormat:

  				switch ( type ) {

  					case UnsignedInt248Type:
  						formatGPU = GPUTextureFormat.Depth24PlusStencil8;
  						break;

  					case FloatType:

  						if ( device && device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {

  							console.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.' );

  						}

  						formatGPU = GPUTextureFormat.Depth32FloatStencil8;

  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );

  				}

  				break;

  			case RedIntegerFormat:

  				switch ( type ) {

  					case IntType:
  						formatGPU = GPUTextureFormat.R32Sint;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.R32Uint;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RedIntegerFormat.', type );

  				}

  				break;

  			case RGIntegerFormat:

  				switch ( type ) {

  					case IntType:
  						formatGPU = GPUTextureFormat.RG32Sint;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.RG32Uint;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RGIntegerFormat.', type );

  				}

  				break;

  			case RGBAIntegerFormat:

  				switch ( type ) {

  					case IntType:
  						formatGPU = GPUTextureFormat.RGBA32Sint;
  						break;

  					case UnsignedIntType:
  						formatGPU = GPUTextureFormat.RGBA32Uint;
  						break;

  					default:
  						console.error( 'WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.', type );

  				}

  				break;

  			default:
  				console.error( 'WebGPURenderer: Unsupported texture format.', format );

  		}

  	}

  	return formatGPU;

  }

  const declarationRegexp = /^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i;
  const propertiesRegexp = /([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig;

  const wgslTypeLib$1 = {
  	'f32': 'float',
  	'i32': 'int',
  	'u32': 'uint',
  	'bool': 'bool',

  	'vec2<f32>': 'vec2',
   	'vec2<i32>': 'ivec2',
   	'vec2<u32>': 'uvec2',
   	'vec2<bool>': 'bvec2',

  	'vec2f': 'vec2',
  	'vec2i': 'ivec2',
  	'vec2u': 'uvec2',
  	'vec2b': 'bvec2',

  	'vec3<f32>': 'vec3',
  	'vec3<i32>': 'ivec3',
  	'vec3<u32>': 'uvec3',
  	'vec3<bool>': 'bvec3',

  	'vec3f': 'vec3',
  	'vec3i': 'ivec3',
  	'vec3u': 'uvec3',
  	'vec3b': 'bvec3',

  	'vec4<f32>': 'vec4',
  	'vec4<i32>': 'ivec4',
  	'vec4<u32>': 'uvec4',
  	'vec4<bool>': 'bvec4',

  	'vec4f': 'vec4',
  	'vec4i': 'ivec4',
  	'vec4u': 'uvec4',
  	'vec4b': 'bvec4',

  	'mat2x2<f32>': 'mat2',
  	'mat2x2f': 'mat2',

  	'mat3x3<f32>': 'mat3',
  	'mat3x3f': 'mat3',

  	'mat4x4<f32>': 'mat4',
  	'mat4x4f': 'mat4',

  	'sampler': 'sampler',

  	'texture_1d': 'texture',

  	'texture_2d': 'texture',
  	'texture_2d_array': 'texture',
  	'texture_multisampled_2d': 'cubeTexture',

  	'texture_depth_2d': 'depthTexture',

  	'texture_3d': 'texture3D',

  	'texture_cube': 'cubeTexture',
  	'texture_cube_array': 'cubeTexture',

  	'texture_storage_1d': 'storageTexture',
  	'texture_storage_2d': 'storageTexture',
  	'texture_storage_2d_array': 'storageTexture',
  	'texture_storage_3d': 'storageTexture'

  };

  const parse = ( source ) => {

  	source = source.trim();

  	const declaration = source.match( declarationRegexp );

  	if ( declaration !== null && declaration.length === 4 ) {

  		const inputsCode = declaration[ 2 ];
  		const propsMatches = [];
  		let match = null;

  		while ( ( match = propertiesRegexp.exec( inputsCode ) ) !== null ) {

  			propsMatches.push( { name: match[ 1 ], type: match[ 2 ] } );

  		}

  		// Process matches to correctly pair names and types
  		const inputs = [];
  		for ( let i = 0; i < propsMatches.length; i ++ ) {

  			const { name, type } = propsMatches[ i ];

  			let resolvedType = type;

  			if ( resolvedType.startsWith( 'ptr' ) ) {

  				resolvedType = 'pointer';

  			} else {

  				if ( resolvedType.startsWith( 'texture' ) ) {

  					resolvedType = type.split( '<' )[ 0 ];

  				}

  				resolvedType = wgslTypeLib$1[ resolvedType ];

  			}

  			inputs.push( new NodeFunctionInput( resolvedType, name ) );

  		}

  		const blockCode = source.substring( declaration[ 0 ].length );
  		const outputType = declaration[ 3 ] || 'void';

  		const name = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';
  		const type = wgslTypeLib$1[ outputType ] || outputType;

  		return {
  			type,
  			inputs,
  			name,
  			inputsCode,
  			blockCode,
  			outputType
  		};

  	} else {

  		throw new Error( 'FunctionNode: Function is not a WGSL code.' );

  	}

  };

  class WGSLNodeFunction extends NodeFunction {

  	constructor( source ) {

  		const { type, inputs, name, inputsCode, blockCode, outputType } = parse( source );

  		super( type, inputs, name );

  		this.inputsCode = inputsCode;
  		this.blockCode = blockCode;
  		this.outputType = outputType;

  	}

  	getCode( name = this.name ) {

  		const outputType = this.outputType !== 'void' ? '-> ' + this.outputType : '';

  		return `fn ${ name } ( ${ this.inputsCode.trim() } ) ${ outputType }` + this.blockCode;

  	}

  }

  class WGSLNodeParser extends NodeParser {

  	parseFunction( source ) {

  		return new WGSLNodeFunction( source );

  	}

  }

  // GPUShaderStage is not defined in browsers not supporting WebGPU
  const GPUShaderStage = self.GPUShaderStage;

  const gpuShaderStageLib = {
  	'vertex': GPUShaderStage ? GPUShaderStage.VERTEX : 1,
  	'fragment': GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,
  	'compute': GPUShaderStage ? GPUShaderStage.COMPUTE : 4
  };

  const supports = {
  	instance: true,
  	swizzleAssign: false,
  	storageBuffer: true
  };

  const wgslFnOpLib = {
  	'^^': 'tsl_xor'
  };

  const wgslTypeLib = {
  	float: 'f32',
  	int: 'i32',
  	uint: 'u32',
  	bool: 'bool',
  	color: 'vec3<f32>',

  	vec2: 'vec2<f32>',
  	ivec2: 'vec2<i32>',
  	uvec2: 'vec2<u32>',
  	bvec2: 'vec2<bool>',

  	vec3: 'vec3<f32>',
  	ivec3: 'vec3<i32>',
  	uvec3: 'vec3<u32>',
  	bvec3: 'vec3<bool>',

  	vec4: 'vec4<f32>',
  	ivec4: 'vec4<i32>',
  	uvec4: 'vec4<u32>',
  	bvec4: 'vec4<bool>',

  	mat2: 'mat2x2<f32>',
  	mat3: 'mat3x3<f32>',
  	mat4: 'mat4x4<f32>'
  };

  const wgslPolyfill = {
  	tsl_xor: new CodeNode( 'fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }' ),
  	mod_float: new CodeNode( 'fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }' ),
  	mod_vec2: new CodeNode( 'fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }' ),
  	mod_vec3: new CodeNode( 'fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }' ),
  	mod_vec4: new CodeNode( 'fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }' ),
  	equals_bool: new CodeNode( 'fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }' ),
  	equals_bvec2: new CodeNode( 'fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }' ),
  	equals_bvec3: new CodeNode( 'fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }' ),
  	equals_bvec4: new CodeNode( 'fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }' ),
  	repeatWrapping: new CodeNode( /* wgsl */`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
` ),
  	biquadraticTexture: new CodeNode( /* wgsl */`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
` )
  };

  const wgslMethods = {
  	dFdx: 'dpdx',
  	dFdy: '- dpdy',
  	mod_float: 'tsl_mod_float',
  	mod_vec2: 'tsl_mod_vec2',
  	mod_vec3: 'tsl_mod_vec3',
  	mod_vec4: 'tsl_mod_vec4',
  	equals_bool: 'tsl_equals_bool',
  	equals_bvec2: 'tsl_equals_bvec2',
  	equals_bvec3: 'tsl_equals_bvec3',
  	equals_bvec4: 'tsl_equals_bvec4',
  	inversesqrt: 'inverseSqrt',
  	bitcast: 'bitcast<f32>'
  };

  // WebGPU issue: does not support pow() with negative base on Windows

  if ( /Windows/g.test( navigator.userAgent ) ) {

  	wgslPolyfill.pow_float = new CodeNode( 'fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }' );
  	wgslPolyfill.pow_vec2 = new CodeNode( 'fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }', [ wgslPolyfill.pow_float ] );
  	wgslPolyfill.pow_vec3 = new CodeNode( 'fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }', [ wgslPolyfill.pow_float ] );
  	wgslPolyfill.pow_vec4 = new CodeNode( 'fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }', [ wgslPolyfill.pow_float ] );

  	wgslMethods.pow_float = 'tsl_pow_float';
  	wgslMethods.pow_vec2 = 'tsl_pow_vec2';
  	wgslMethods.pow_vec3 = 'tsl_pow_vec3';
  	wgslMethods.pow_vec4 = 'tsl_pow_vec4';

  }

  //

  let diagnostics = '';

  if ( /Firefox|Deno/g.test( navigator.userAgent ) !== true ) {

  	diagnostics += 'diagnostic( off, derivative_uniformity );\n';

  }

  //

  class WGSLNodeBuilder extends NodeBuilder {

  	constructor( object, renderer ) {

  		super( object, renderer, new WGSLNodeParser() );

  		this.uniformGroups = {};

  		this.builtins = {};

  		this.directives = {};

  		this.scopedArrays = new Map();

  	}

  	needsToWorkingColorSpace( texture ) {

  		return texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;

  	}

  	_generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			if ( depthSnippet ) {

  				return `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ depthSnippet } )`;

  			} else {

  				return `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet } )`;

  			}

  		} else if ( this.isFilteredTexture( texture ) ) {

  			return this.generateFilteredTexture( texture, textureProperty, uvSnippet );

  		} else {

  			return this.generateTextureLod( texture, textureProperty, uvSnippet, '0' );

  		}

  	}

  	_generateVideoSample( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			return `textureSampleBaseClampToEdge( ${ textureProperty }, ${ textureProperty }_sampler, vec2<f32>( ${ uvSnippet }.x, 1.0 - ${ uvSnippet }.y ) )`;

  		} else {

  			console.error( `WebGPURenderer: THREE.VideoTexture does not support ${ shaderStage } shader.` );

  		}

  	}

  	_generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false ) {

  			return `textureSampleLevel( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ levelSnippet } )`;

  		} else if ( this.isFilteredTexture( texture ) ) {

  			return this.generateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet );

  		} else {

  			return this.generateTextureLod( texture, textureProperty, uvSnippet, levelSnippet );

  		}

  	}

  	generateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet = '0' ) {

  		this._include( 'biquadraticTexture' );

  		return `tsl_biquadraticTexture( ${ textureProperty }, ${ uvSnippet }, i32( ${ levelSnippet } ) )`;

  	}

  	generateTextureLod( texture, textureProperty, uvSnippet, levelSnippet = '0' ) {

  		this._include( 'repeatWrapping' );

  		const dimension = texture.isMultisampleRenderTargetTexture === true ? `textureDimensions( ${ textureProperty } )` : `textureDimensions( ${ textureProperty }, 0 )`;

  		return `textureLoad( ${ textureProperty }, tsl_repeatWrapping( ${ uvSnippet }, ${ dimension } ), i32( ${ levelSnippet } ) )`;

  	}

  	generateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0u' ) {

  		if ( depthSnippet ) {

  			return `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ depthSnippet }, ${ levelSnippet } )`;

  		} else {

  			return `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;

  		}

  	}

  	generateTextureStore( texture, textureProperty, uvIndexSnippet, valueSnippet ) {

  		return `textureStore( ${ textureProperty }, ${ uvIndexSnippet }, ${ valueSnippet } )`;

  	}

  	isUnfilterable( texture ) {

  		return this.getComponentTypeFromTexture( texture ) !== 'float' || ( ! this.isAvailable( 'float32Filterable' ) && texture.isDataTexture === true && texture.type === FloatType ) || texture.isMultisampleRenderTargetTexture === true;

  	}

  	generateTexture( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		let snippet = null;

  		if ( texture.isVideoTexture === true ) {

  			snippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );

  		} else if ( this.isUnfilterable( texture ) ) {

  			snippet = this.generateTextureLod( texture, textureProperty, uvSnippet, '0', depthSnippet, shaderStage );

  		} else {

  			snippet = this._generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage );

  		}

  		return snippet;

  	}

  	generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			// TODO handle i32 or u32 --> uvSnippet, array_index: A, ddx, ddy
  			return `textureSampleGrad( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet },  ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;

  		} else {

  			console.error( `WebGPURenderer: THREE.TextureNode.gradient() does not support ${ shaderStage } shader.` );

  		}

  	}

  	generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			return `textureSampleCompare( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ compareSnippet } )`;

  		} else {

  			console.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );

  		}

  	}

  	generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		let snippet = null;

  		if ( texture.isVideoTexture === true ) {

  			snippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );

  		} else {

  			snippet = this._generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage );

  		}

  		return snippet;

  	}

  	generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet, shaderStage = this.shaderStage ) {

  		if ( shaderStage === 'fragment' ) {

  			return `textureSampleBias( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ biasSnippet } )`;

  		} else {

  			console.error( `WebGPURenderer: THREE.TextureNode.biasNode does not support ${ shaderStage } shader.` );

  		}

  	}

  	getPropertyName( node, shaderStage = this.shaderStage ) {

  		if ( node.isNodeVarying === true && node.needsInterpolation === true ) {

  			if ( shaderStage === 'vertex' ) {

  				return `varyings.${ node.name }`;

  			}

  		} else if ( node.isNodeUniform === true ) {

  			const name = node.name;
  			const type = node.type;

  			if ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {

  				return name;

  			} else if ( type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer' ) {

  				return `NodeBuffer_${ node.id }.${name}`;

  			} else {

  				return node.groupNode.name + '.' + name;

  			}

  		}

  		return super.getPropertyName( node );

  	}

  	getOutputStructName() {

  		return 'output';

  	}

  	_getUniformGroupCount( shaderStage ) {

  		return Object.keys( this.uniforms[ shaderStage ] ).length;

  	}

  	getFunctionOperator( op ) {

  		const fnOp = wgslFnOpLib[ op ];

  		if ( fnOp !== undefined ) {

  			this._include( fnOp );

  			return fnOp;

  		}

  		return null;

  	}

  	getStorageAccess( node ) {

  		if ( node.isStorageTextureNode ) {

  			switch ( node.access ) {

  				case GPUStorageTextureAccess.ReadOnly:

  					return 'read';

  				case GPUStorageTextureAccess.WriteOnly:

  					return 'write';

  				default:

  					return 'read_write';

  			}

  		} else {

  			switch ( node.access ) {

  				case GPUBufferBindingType.Storage:

  					return 'read_write';


  				case GPUBufferBindingType.ReadOnlyStorage:

  					return 'read';

  				default:

  					return 'write';

  			}

  		}

  	}

  	getUniformFromNode( node, type, shaderStage, name = null ) {

  		const uniformNode = super.getUniformFromNode( node, type, shaderStage, name );
  		const nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );

  		if ( nodeData.uniformGPU === undefined ) {

  			let uniformGPU;

  			const group = node.groupNode;
  			const groupName = group.name;

  			const bindings = this.getBindGroupArray( groupName, shaderStage );

  			if ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {

  				let texture = null;

  				if ( type === 'texture' || type === 'storageTexture' ) {

  					texture = new NodeSampledTexture( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );

  				} else if ( type === 'cubeTexture' ) {

  					texture = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );

  				} else if ( type === 'texture3D' ) {

  					texture = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group, node.access ? node.access : null );

  				}

  				texture.store = node.isStorageTextureNode === true;
  				texture.setVisibility( gpuShaderStageLib[ shaderStage ] );

  				if ( shaderStage === 'fragment' && this.isUnfilterable( node.value ) === false && texture.store === false ) {

  					const sampler = new NodeSampler( `${uniformNode.name}_sampler`, uniformNode.node, group );
  					sampler.setVisibility( gpuShaderStageLib[ shaderStage ] );

  					bindings.push( sampler, texture );

  					uniformGPU = [ sampler, texture ];

  				} else {

  					bindings.push( texture );

  					uniformGPU = [ texture ];

  				}

  			} else if ( type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer' ) {

  				const bufferClass = type === 'buffer' ? NodeUniformBuffer : NodeStorageBuffer;

  				const buffer = new bufferClass( node, group );
  				buffer.setVisibility( gpuShaderStageLib[ shaderStage ] );

  				bindings.push( buffer );

  				uniformGPU = buffer;

  			} else {

  				const uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );

  				let uniformsGroup = uniformsStage[ groupName ];

  				if ( uniformsGroup === undefined ) {

  					uniformsGroup = new NodeUniformsGroup( groupName, group );
  					uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );

  					uniformsStage[ groupName ] = uniformsGroup;

  					bindings.push( uniformsGroup );

  				}

  				uniformGPU = this.getNodeUniform( uniformNode, type );

  				uniformsGroup.addUniform( uniformGPU );

  			}

  			nodeData.uniformGPU = uniformGPU;

  		}

  		return uniformNode;

  	}

  	getBuiltin( name, property, type, shaderStage = this.shaderStage ) {

  		const map = this.builtins[ shaderStage ] || ( this.builtins[ shaderStage ] = new Map() );

  		if ( map.has( name ) === false ) {

  			map.set( name, {
  				name,
  				property,
  				type
  			} );

  		}

  		return property;

  	}

  	hasBuiltin( name, shaderStage = this.shaderStage ) {

  		return ( this.builtins[ shaderStage ] !== undefined && this.builtins[ shaderStage ].has( name ) );

  	}

  	getVertexIndex() {

  		if ( this.shaderStage === 'vertex' ) {

  			return this.getBuiltin( 'vertex_index', 'vertexIndex', 'u32', 'attribute' );

  		}

  		return 'vertexIndex';

  	}

  	buildFunctionCode( shaderNode ) {

  		const layout = shaderNode.layout;
  		const flowData = this.flowShaderNode( shaderNode );

  		const parameters = [];

  		for ( const input of layout.inputs ) {

  			parameters.push( input.name + ' : ' + this.getType( input.type ) );

  		}

  		//

  		let code = `fn ${ layout.name }( ${ parameters.join( ', ' ) } ) -> ${ this.getType( layout.type ) } {
${ flowData.vars }
${ flowData.code }
`;

  		if ( flowData.result ) {

  			code += `\treturn ${ flowData.result };\n`;

  		}

  		code += '\n}\n';

  		//

  		return code;

  	}

  	getInstanceIndex() {

  		if ( this.shaderStage === 'vertex' ) {

  			return this.getBuiltin( 'instance_index', 'instanceIndex', 'u32', 'attribute' );

  		}

  		return 'instanceIndex';

  	}

  	getInvocationLocalIndex() {

  		return this.getBuiltin( 'local_invocation_index', 'invocationLocalIndex', 'u32', 'attribute' );

  	}

  	getSubgroupSize() {

  		this.enableSubGroups();

  		return this.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );

  	}

  	getInvocationSubgroupIndex() {

  		this.enableSubGroups();

  		return this.getBuiltin( 'subgroup_invocation_id', 'invocationSubgroupIndex', 'u32', 'attribute' );

  	}

  	getSubgroupIndex() {

  		this.enableSubGroups();

  		return this.getBuiltin( 'subgroup_id', 'subgroupIndex', 'u32', 'attribute' );

  	}

  	getDrawIndex() {

  		return null;

  	}

  	getFrontFacing() {

  		return this.getBuiltin( 'front_facing', 'isFront', 'bool' );

  	}

  	getFragCoord() {

  		return this.getBuiltin( 'position', 'fragCoord', 'vec4<f32>' ) + '.xy';

  	}

  	getFragDepth() {

  		return 'output.' + this.getBuiltin( 'frag_depth', 'depth', 'f32', 'output' );

  	}

  	isFlipY() {

  		return false;

  	}

  	enableDirective( name, shaderStage = this.shaderStage ) {

  		const stage = this.directives[ shaderStage ] || ( this.directives[ shaderStage ] = new Set() );
  		stage.add( name );

  	}

  	getDirectives( shaderStage ) {

  		const snippets = [];
  		const directives = this.directives[ shaderStage ];

  		if ( directives !== undefined ) {

  			for ( const directive of directives ) {

  				snippets.push( `enable ${directive};` );

  			}

  		}

  		return snippets.join( '\n' );

  	}

  	enableSubGroups() {

  		this.enableDirective( 'subgroups' );

  	}

  	enableSubgroupsF16() {

  		this.enableDirective( 'subgroups-f16' );

  	}

  	enableClipDistances() {

  		this.enableDirective( 'clip_distances' );

  	}

  	enableShaderF16() {

  		this.enableDirective( 'f16' );

  	}

  	enableDualSourceBlending() {

  		this.enableDirective( 'dual_source_blending' );

  	}

  	getBuiltins( shaderStage ) {

  		const snippets = [];
  		const builtins = this.builtins[ shaderStage ];

  		if ( builtins !== undefined ) {

  			for ( const { name, property, type } of builtins.values() ) {

  				snippets.push( `@builtin( ${name} ) ${property} : ${type}` );

  			}

  		}

  		return snippets.join( ',\n\t' );

  	}

  	getScopedArray( name, scope, bufferType, bufferCount ) {

  		if ( this.scopedArrays.has( name ) === false ) {

  			this.scopedArrays.set( name, {
  				name,
  				scope,
  				bufferType,
  				bufferCount
  			} );

  		}

  		return name;

  	}

  	getScopedArrays( shaderStage ) {

  		if ( shaderStage !== 'compute' ) {

  			return;

  		}

  		const snippets = [];

  		for ( const { name, scope, bufferType, bufferCount } of this.scopedArrays.values() ) {

  			const type = this.getType( bufferType );

  			snippets.push( `var<${scope}> ${name}: array< ${type}, ${bufferCount} >;` );

  		}

  		return snippets.join( '\n' );

  	}

  	getAttributes( shaderStage ) {

  		const snippets = [];

  		if ( shaderStage === 'compute' ) {

  			this.getBuiltin( 'global_invocation_id', 'id', 'vec3<u32>', 'attribute' );
  			this.getBuiltin( 'workgroup_id', 'workgroupId', 'vec3<u32>', 'attribute' );
  			this.getBuiltin( 'local_invocation_id', 'localId', 'vec3<u32>', 'attribute' );
  			this.getBuiltin( 'num_workgroups', 'numWorkgroups', 'vec3<u32>', 'attribute' );

  			if ( this.renderer.hasFeature( 'subgroups' ) ) {

  				this.enableDirective( 'subgroups', shaderStage );
  				this.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );

  			}

  		}

  		if ( shaderStage === 'vertex' || shaderStage === 'compute' ) {

  			const builtins = this.getBuiltins( 'attribute' );

  			if ( builtins ) snippets.push( builtins );

  			const attributes = this.getAttributesArray();

  			for ( let index = 0, length = attributes.length; index < length; index ++ ) {

  				const attribute = attributes[ index ];
  				const name = attribute.name;
  				const type = this.getType( attribute.type );

  				snippets.push( `@location( ${index} ) ${ name } : ${ type }` );

  			}

  		}

  		return snippets.join( ',\n\t' );

  	}

  	getStructMembers( struct ) {

  		const snippets = [];
  		const members = struct.getMemberTypes();

  		for ( let i = 0; i < members.length; i ++ ) {

  			const member = members[ i ];
  			snippets.push( `\t@location( ${i} ) m${i} : ${ member }<f32>` );

  		}

  		const builtins = this.getBuiltins( 'output' );

  		if ( builtins ) snippets.push( '\t' + builtins );

  		return snippets.join( ',\n' );

  	}

  	getStructs( shaderStage ) {

  		const snippets = [];
  		const structs = this.structs[ shaderStage ];

  		for ( let index = 0, length = structs.length; index < length; index ++ ) {

  			const struct = structs[ index ];
  			const name = struct.name;

  			let snippet = `\struct ${ name } {\n`;
  			snippet += this.getStructMembers( struct );
  			snippet += '\n}';


  			snippets.push( snippet );

  			snippets.push( `\nvar<private> output : ${ name };\n\n` );

  		}

  		return snippets.join( '\n\n' );

  	}

  	getVar( type, name ) {

  		return `var ${ name } : ${ this.getType( type ) }`;

  	}

  	getVars( shaderStage ) {

  		const snippets = [];
  		const vars = this.vars[ shaderStage ];

  		if ( vars !== undefined ) {

  			for ( const variable of vars ) {

  				snippets.push( `\t${ this.getVar( variable.type, variable.name ) };` );

  			}

  		}

  		return `\n${ snippets.join( '\n' ) }\n`;

  	}

  	getVaryings( shaderStage ) {

  		const snippets = [];

  		if ( shaderStage === 'vertex' ) {

  			this.getBuiltin( 'position', 'Vertex', 'vec4<f32>', 'vertex' );

  		}

  		if ( shaderStage === 'vertex' || shaderStage === 'fragment' ) {

  			const varyings = this.varyings;
  			const vars = this.vars[ shaderStage ];

  			for ( let index = 0; index < varyings.length; index ++ ) {

  				const varying = varyings[ index ];

  				if ( varying.needsInterpolation ) {

  					let attributesSnippet = `@location( ${index} )`;

  					if ( /^(int|uint|ivec|uvec)/.test( varying.type ) ) {

  						attributesSnippet += ' @interpolate( flat )';


  					}

  					snippets.push( `${ attributesSnippet } ${ varying.name } : ${ this.getType( varying.type ) }` );

  				} else if ( shaderStage === 'vertex' && vars.includes( varying ) === false ) {

  					vars.push( varying );

  				}

  			}

  		}

  		const builtins = this.getBuiltins( shaderStage );

  		if ( builtins ) snippets.push( builtins );

  		const code = snippets.join( ',\n\t' );

  		return shaderStage === 'vertex' ? this._getWGSLStruct( 'VaryingsStruct', '\t' + code ) : code;

  	}

  	getUniforms( shaderStage ) {

  		const uniforms = this.uniforms[ shaderStage ];

  		const bindingSnippets = [];
  		const bufferSnippets = [];
  		const structSnippets = [];
  		const uniformGroups = {};

  		for ( const uniform of uniforms ) {

  			const groupName = uniform.groupNode.name;
  			const uniformIndexes = this.bindingsIndexes[ groupName ];

  			if ( uniform.type === 'texture' || uniform.type === 'cubeTexture' || uniform.type === 'storageTexture' || uniform.type === 'texture3D' ) {

  				const texture = uniform.node.value;

  				if ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false && uniform.node.isStorageTextureNode !== true ) {

  					if ( texture.isDepthTexture === true && texture.compareFunction !== null ) {

  						bindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler_comparison;` );

  					} else {

  						bindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler;` );

  					}

  				}

  				let textureType;

  				let multisampled = '';

  				if ( texture.isMultisampleRenderTargetTexture === true ) {

  					multisampled = '_multisampled';

  				}

  				if ( texture.isCubeTexture === true ) {

  					textureType = 'texture_cube<f32>';

  				} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {

  					textureType = 'texture_2d_array<f32>';

  				} else if ( texture.isDepthTexture === true ) {

  					textureType = `texture_depth${multisampled}_2d`;

  				} else if ( texture.isVideoTexture === true ) {

  					textureType = 'texture_external';

  				} else if ( texture.isData3DTexture === true ) {

  					textureType = 'texture_3d<f32>';

  				} else if ( uniform.node.isStorageTextureNode === true ) {

  					const format = getFormat( texture );
  					const access = this.getStorageAccess( uniform.node );

  					textureType = `texture_storage_2d<${ format }, ${ access }>`;

  				} else {

  					const componentPrefix = this.getComponentTypeFromTexture( texture ).charAt( 0 );

  					textureType = `texture${multisampled}_2d<${ componentPrefix }32>`;

  				}

  				bindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name } : ${ textureType };` );

  			} else if ( uniform.type === 'buffer' || uniform.type === 'storageBuffer' || uniform.type === 'indirectStorageBuffer' ) {

  				const bufferNode = uniform.node;
  				const bufferType = this.getType( bufferNode.bufferType );
  				const bufferCount = bufferNode.bufferCount;

  				const bufferCountSnippet = bufferCount > 0 && uniform.type === 'buffer' ? ', ' + bufferCount : '';
  				const bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${bufferType}>` : `${bufferType}`;
  				const bufferSnippet = `\t${ uniform.name } : array< ${ bufferTypeSnippet }${ bufferCountSnippet } >\n`;
  				const bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${ this.getStorageAccess( bufferNode ) }` : 'uniform';

  				bufferSnippets.push( this._getWGSLStructBinding( 'NodeBuffer_' + bufferNode.id, bufferSnippet, bufferAccessMode, uniformIndexes.binding ++, uniformIndexes.group ) );

  			} else {

  				const vectorType = this.getType( this.getVectorType( uniform.type ) );
  				const groupName = uniform.groupNode.name;

  				const group = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = {
  					index: uniformIndexes.binding ++,
  					id: uniformIndexes.group,
  					snippets: []
  				} );

  				group.snippets.push( `\t${ uniform.name } : ${ vectorType }` );

  			}

  		}

  		for ( const name in uniformGroups ) {

  			const group = uniformGroups[ name ];

  			structSnippets.push( this._getWGSLStructBinding( name, group.snippets.join( ',\n' ), 'uniform', group.index, group.id ) );

  		}

  		let code = bindingSnippets.join( '\n' );
  		code += bufferSnippets.join( '\n' );
  		code += structSnippets.join( '\n' );

  		return code;

  	}

  	buildCode() {

  		const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };

  		this.sortBindingGroups();

  		for ( const shaderStage in shadersData ) {

  			const stageData = shadersData[ shaderStage ];
  			stageData.uniforms = this.getUniforms( shaderStage );
  			stageData.attributes = this.getAttributes( shaderStage );
  			stageData.varyings = this.getVaryings( shaderStage );
  			stageData.structs = this.getStructs( shaderStage );
  			stageData.vars = this.getVars( shaderStage );
  			stageData.codes = this.getCodes( shaderStage );
  			stageData.directives = this.getDirectives( shaderStage );
  			stageData.scopedArrays = this.getScopedArrays( shaderStage );

  			//

  			let flow = '// code\n\n';
  			flow += this.flowCode[ shaderStage ];

  			const flowNodes = this.flowNodes[ shaderStage ];
  			const mainNode = flowNodes[ flowNodes.length - 1 ];

  			const outputNode = mainNode.outputNode;
  			const isOutputStruct = ( outputNode !== undefined && outputNode.isOutputStructNode === true );

  			for ( const node of flowNodes ) {

  				const flowSlotData = this.getFlowData( node/*, shaderStage*/ );
  				const slotName = node.name;

  				if ( slotName ) {

  					if ( flow.length > 0 ) flow += '\n';

  					flow += `\t// flow -> ${ slotName }\n\t`;

  				}

  				flow += `${ flowSlotData.code }\n\t`;

  				if ( node === mainNode && shaderStage !== 'compute' ) {

  					flow += '// result\n\n\t';

  					if ( shaderStage === 'vertex' ) {

  						flow += `varyings.Vertex = ${ flowSlotData.result };`;

  					} else if ( shaderStage === 'fragment' ) {

  						if ( isOutputStruct ) {

  							stageData.returnType = outputNode.nodeType;

  							flow += `return ${ flowSlotData.result };`;

  						} else {

  							let structSnippet = '\t@location(0) color: vec4<f32>';

  							const builtins = this.getBuiltins( 'output' );

  							if ( builtins ) structSnippet += ',\n\t' + builtins;

  							stageData.returnType = 'OutputStruct';
  							stageData.structs += this._getWGSLStruct( 'OutputStruct', structSnippet );
  							stageData.structs += '\nvar<private> output : OutputStruct;\n\n';

  							flow += `output.color = ${ flowSlotData.result };\n\n\treturn output;`;

  						}

  					}

  				}

  			}

  			stageData.flow = flow;


  		}

  		if ( this.material !== null ) {

  			this.vertexShader = this._getWGSLVertexCode( shadersData.vertex );
  			this.fragmentShader = this._getWGSLFragmentCode( shadersData.fragment );

  		} else {

  			this.computeShader = this._getWGSLComputeCode( shadersData.compute, ( this.object.workgroupSize || [ 64 ] ).join( ', ' ) );

  		}

  	}

  	getMethod( method, output = null ) {

  		let wgslMethod;

  		if ( output !== null ) {

  			wgslMethod = this._getWGSLMethod( method + '_' + output );

  		}

  		if ( wgslMethod === undefined ) {

  			wgslMethod = this._getWGSLMethod( method );

  		}

  		return wgslMethod || method;

  	}

  	getType( type ) {

  		return wgslTypeLib[ type ] || type;

  	}

  	isAvailable( name ) {

  		let result = supports[ name ];

  		if ( result === undefined ) {

  			if ( name === 'float32Filterable' ) {

  				result = this.renderer.hasFeature( 'float32-filterable' );

  			}

  			supports[ name ] = result;

  		}

  		return result;

  	}

  	_getWGSLMethod( method ) {

  		if ( wgslPolyfill[ method ] !== undefined ) {

  			this._include( method );

  		}

  		return wgslMethods[ method ];

  	}

  	_include( name ) {

  		const codeNode = wgslPolyfill[ name ];
  		codeNode.build( this );

  		if ( this.currentFunctionNode !== null ) {

  			this.currentFunctionNode.includes.push( codeNode );

  		}

  		return codeNode;

  	}

  	_getWGSLVertexCode( shaderData ) {

  		return `${ this.getSignature() }
// directives
${shaderData.directives}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}
var<private> varyings : VaryingsStruct;

// codes
${shaderData.codes}

@vertex
fn main( ${shaderData.attributes} ) -> VaryingsStruct {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

	return varyings;

}
`;

  	}

  	_getWGSLFragmentCode( shaderData ) {

  		return `${ this.getSignature() }
// global
${ diagnostics }

// uniforms
${shaderData.uniforms}

// structs
${shaderData.structs}

// codes
${shaderData.codes}

@fragment
fn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;

  	}

  	_getWGSLComputeCode( shaderData, workgroupSize ) {

  		return `${ this.getSignature() }
// directives
${shaderData.directives}

// system
var<private> instanceIndex : u32;

// locals
${shaderData.scopedArrays}

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@compute @workgroup_size( ${workgroupSize} )
fn main( ${shaderData.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${workgroupSize}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;

  	}

  	_getWGSLStruct( name, vars ) {

  		return `
struct ${name} {
${vars}
};`;

  	}

  	_getWGSLStructBinding( name, vars, access, binding = 0, group = 0 ) {

  		const structName = name + 'Struct';
  		const structSnippet = this._getWGSLStruct( structName, vars );

  		return `${structSnippet}
@binding( ${binding} ) @group( ${group} )
var<${access}> ${name} : ${structName};`;

  	}

  }

  class WebGPUUtils {

  	constructor( backend ) {

  		this.backend = backend;

  	}

  	getCurrentDepthStencilFormat( renderContext ) {

  		let format;

  		if ( renderContext.depthTexture !== null ) {

  			format = this.getTextureFormatGPU( renderContext.depthTexture );

  		} else if ( renderContext.depth && renderContext.stencil ) {

  			format = GPUTextureFormat.Depth24PlusStencil8;

  		} else if ( renderContext.depth ) {

  			format = GPUTextureFormat.Depth24Plus;

  		}

  		return format;

  	}

  	getTextureFormatGPU( texture ) {

  		return this.backend.get( texture ).format;

  	}

  	getCurrentColorFormat( renderContext ) {

  		let format;

  		if ( renderContext.textures !== null ) {

  			format = this.getTextureFormatGPU( renderContext.textures[ 0 ] );

  		} else {

  			format = this.getPreferredCanvasFormat(); // default context format

  		}

  		return format;

  	}

  	getCurrentColorSpace( renderContext ) {

  		if ( renderContext.textures !== null ) {

  			return renderContext.textures[ 0 ].colorSpace;

  		}

  		return this.backend.renderer.outputColorSpace;

  	}

  	getPrimitiveTopology( object, material ) {

  		if ( object.isPoints ) return GPUPrimitiveTopology.PointList;
  		else if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;
  		else if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;
  		else if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;

  	}

  	getSampleCount( sampleCount ) {

  		let count = 1;

  		if ( sampleCount > 1 ) {

  			// WebGPU only supports power-of-two sample counts and 2 is not a valid value
  			count = Math.pow( 2, Math.floor( Math.log2( sampleCount ) ) );

  			if ( count === 2 ) {

  				count = 4;

  			}

  		}

  		return count;

  	}

  	getSampleCountRenderContext( renderContext ) {

  		if ( renderContext.textures !== null ) {

  			return this.getSampleCount( renderContext.sampleCount );

  		}

  		return this.getSampleCount( this.backend.renderer.samples );

  	}

  	getPreferredCanvasFormat() {

  		// TODO: Remove this check when Quest 34.5 is out
  		// https://github.com/mrdoob/three.js/pull/29221/files#r1731833949

  		if ( navigator.userAgent.includes( 'Quest' ) ) {

  			return GPUTextureFormat.BGRA8Unorm;

  		} else {

  			return navigator.gpu.getPreferredCanvasFormat();

  		}

  	}

  }

  const typedArraysToVertexFormatPrefix = new Map( [
  	[ Int8Array, [ 'sint8', 'snorm8' ]],
  	[ Uint8Array, [ 'uint8', 'unorm8' ]],
  	[ Int16Array, [ 'sint16', 'snorm16' ]],
  	[ Uint16Array, [ 'uint16', 'unorm16' ]],
  	[ Int32Array, [ 'sint32', 'snorm32' ]],
  	[ Uint32Array, [ 'uint32', 'unorm32' ]],
  	[ Float32Array, [ 'float32', ]],
  ] );

  const typedAttributeToVertexFormatPrefix = new Map( [
  	[ Float16BufferAttribute, [ 'float16', ]],
  ] );

  const typeArraysToVertexFormatPrefixForItemSize1 = new Map( [
  	[ Int32Array, 'sint32' ],
  	[ Int16Array, 'sint32' ], // patch for INT16
  	[ Uint32Array, 'uint32' ],
  	[ Uint16Array, 'uint32' ], // patch for UINT16
  	[ Float32Array, 'float32' ]
  ] );

  class WebGPUAttributeUtils {

  	constructor( backend ) {

  		this.backend = backend;

  	}

  	createAttribute( attribute, usage ) {

  		const bufferAttribute = this._getBufferAttribute( attribute );

  		const backend = this.backend;
  		const bufferData = backend.get( bufferAttribute );

  		let buffer = bufferData.buffer;

  		if ( buffer === undefined ) {

  			const device = backend.device;

  			let array = bufferAttribute.array;

  			// patch for INT16 and UINT16
  			if ( attribute.normalized === false && ( array.constructor === Int16Array || array.constructor === Uint16Array ) ) {

  				const tempArray = new Uint32Array( array.length );
  				for ( let i = 0; i < array.length; i ++ ) {

  					tempArray[ i ] = array[ i ];

  				}

  				array = tempArray;

  			}

  			bufferAttribute.array = array;

  			if ( ( bufferAttribute.isStorageBufferAttribute || bufferAttribute.isStorageInstancedBufferAttribute ) && bufferAttribute.itemSize === 3 ) {

  				array = new array.constructor( bufferAttribute.count * 4 );

  				for ( let i = 0; i < bufferAttribute.count; i ++ ) {

  					array.set( bufferAttribute.array.subarray( i * 3, i * 3 + 3 ), i * 4 );

  				}

  				// Update BufferAttribute
  				bufferAttribute.itemSize = 4;
  				bufferAttribute.array = array;

  			}

  			const size = array.byteLength + ( ( 4 - ( array.byteLength % 4 ) ) % 4 ); // ensure 4 byte alignment, see #20441

  			buffer = device.createBuffer( {
  				label: bufferAttribute.name,
  				size: size,
  				usage: usage,
  				mappedAtCreation: true
  			} );

  			new array.constructor( buffer.getMappedRange() ).set( array );

  			buffer.unmap();

  			bufferData.buffer = buffer;

  		}

  	}

  	updateAttribute( attribute ) {

  		const bufferAttribute = this._getBufferAttribute( attribute );

  		const backend = this.backend;
  		const device = backend.device;

  		const buffer = backend.get( bufferAttribute ).buffer;

  		const array = bufferAttribute.array;
  		const updateRanges = bufferAttribute.updateRanges;

  		if ( updateRanges.length === 0 ) {

  			// Not using update ranges

  			device.queue.writeBuffer(
  				buffer,
  				0,
  				array,
  				0
  			);

  		} else {

  			for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

  				const range = updateRanges[ i ];
  				device.queue.writeBuffer(
  					buffer,
  					0,
  					array,
  					range.start * array.BYTES_PER_ELEMENT,
  					range.count * array.BYTES_PER_ELEMENT
  				);

  			}

  			bufferAttribute.clearUpdateRanges();

  		}

  	}

  	createShaderVertexBuffers( renderObject ) {

  		const attributes = renderObject.getAttributes();
  		const vertexBuffers = new Map();

  		for ( let slot = 0; slot < attributes.length; slot ++ ) {

  			const geometryAttribute = attributes[ slot ];
  			const bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;
  			const bufferAttribute = this._getBufferAttribute( geometryAttribute );

  			let vertexBufferLayout = vertexBuffers.get( bufferAttribute );

  			if ( vertexBufferLayout === undefined ) {

  				let arrayStride, stepMode;

  				if ( geometryAttribute.isInterleavedBufferAttribute === true ) {

  					arrayStride = geometryAttribute.data.stride * bytesPerElement;
  					stepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;

  				} else {

  					arrayStride = geometryAttribute.itemSize * bytesPerElement;
  					stepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;

  				}

  				// patch for INT16 and UINT16
  				if ( geometryAttribute.normalized === false && ( geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array ) ) {

  					arrayStride = 4;

  				}

  				vertexBufferLayout = {
  					arrayStride,
  					attributes: [],
  					stepMode
  				};

  				vertexBuffers.set( bufferAttribute, vertexBufferLayout );

  			}

  			const format = this._getVertexFormat( geometryAttribute );
  			const offset = ( geometryAttribute.isInterleavedBufferAttribute === true ) ? geometryAttribute.offset * bytesPerElement : 0;

  			vertexBufferLayout.attributes.push( {
  				shaderLocation: slot,
  				offset,
  				format
  			} );

  		}

  		return Array.from( vertexBuffers.values() );

  	}

  	destroyAttribute( attribute ) {

  		const backend = this.backend;
  		const data = backend.get( this._getBufferAttribute( attribute ) );

  		data.buffer.destroy();

  		backend.delete( attribute );

  	}

  	async getArrayBufferAsync( attribute ) {

  		const backend = this.backend;
  		const device = backend.device;

  		const data = backend.get( this._getBufferAttribute( attribute ) );

  		const bufferGPU = data.buffer;
  		const size = bufferGPU.size;

  		const readBufferGPU = device.createBuffer( {
  			label: attribute.name,
  			size,
  			usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
  		} );


  		const cmdEncoder = device.createCommandEncoder( {} );

  		cmdEncoder.copyBufferToBuffer(
  			bufferGPU,
  			0,
  			readBufferGPU,
  			0,
  			size
  		);

  		readBufferGPU.unmap();

  		const gpuCommands = cmdEncoder.finish();
  		device.queue.submit( [ gpuCommands ] );

  		await readBufferGPU.mapAsync( GPUMapMode.READ );

  		const arrayBuffer = readBufferGPU.getMappedRange();

  		return arrayBuffer;

  	}

  	_getVertexFormat( geometryAttribute ) {

  		const { itemSize, normalized } = geometryAttribute;
  		const ArrayType = geometryAttribute.array.constructor;
  		const AttributeType = geometryAttribute.constructor;

  		let format;

  		if ( itemSize == 1 ) {

  			format = typeArraysToVertexFormatPrefixForItemSize1.get( ArrayType );

  		} else {

  			const prefixOptions = typedAttributeToVertexFormatPrefix.get( AttributeType ) || typedArraysToVertexFormatPrefix.get( ArrayType );
  			const prefix = prefixOptions[ normalized ? 1 : 0 ];

  			if ( prefix ) {

  				const bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;
  				const paddedBytesPerUnit = Math.floor( ( bytesPerUnit + 3 ) / 4 ) * 4;
  				const paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;

  				if ( paddedItemSize % 1 ) {

  					throw new Error( 'THREE.WebGPUAttributeUtils: Bad vertex format item size.' );

  				}

  				format = `${prefix}x${paddedItemSize}`;

  			}

  		}

  		if ( ! format ) {

  			console.error( 'THREE.WebGPUAttributeUtils: Vertex format not supported yet.' );

  		}

  		return format;

  	}

  	_getBufferAttribute( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		return attribute;

  	}

  }

  class WebGPUBindingUtils {

  	constructor( backend ) {

  		this.backend = backend;
  		this.bindGroupLayoutCache = new WeakMap();

  	}

  	createBindingsLayout( bindGroup ) {

  		const backend = this.backend;
  		const device = backend.device;

  		const entries = [];

  		let index = 0;

  		for ( const binding of bindGroup.bindings ) {

  			const bindingGPU = {
  				binding: index ++,
  				visibility: binding.visibility
  			};

  			if ( binding.isUniformBuffer || binding.isStorageBuffer ) {

  				const buffer = {}; // GPUBufferBindingLayout

  				if ( binding.isStorageBuffer ) {

  					buffer.type = binding.access;

  				}

  				bindingGPU.buffer = buffer;

  			} else if ( binding.isSampler ) {

  				const sampler = {}; // GPUSamplerBindingLayout

  				if ( binding.texture.isDepthTexture ) {

  					if ( binding.texture.compareFunction !== null ) {

  						sampler.type = 'comparison';

  					}

  				}

  				bindingGPU.sampler = sampler;

  			} else if ( binding.isSampledTexture && binding.texture.isVideoTexture ) {

  				bindingGPU.externalTexture = {}; // GPUExternalTextureBindingLayout

  			} else if ( binding.isSampledTexture && binding.store ) {

  				const format = this.backend.get( binding.texture ).texture.format;
  				const access = binding.access;

  				bindingGPU.storageTexture = { format, access }; // GPUStorageTextureBindingLayout

  			} else if ( binding.isSampledTexture ) {

  				const texture = {}; // GPUTextureBindingLayout

  				if ( binding.texture.isMultisampleRenderTargetTexture === true ) {

  					texture.multisampled = true;

  				}

  				if ( binding.texture.isDepthTexture ) {

  					texture.sampleType = GPUTextureSampleType.Depth;

  				} else if ( binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture ) {

  					const type = binding.texture.type;

  					if ( type === IntType ) {

  						texture.sampleType = GPUTextureSampleType.SInt;

  					} else if ( type === UnsignedIntType ) {

  						texture.sampleType = GPUTextureSampleType.UInt;

  					} else if ( type === FloatType ) {

  						if ( this.backend.hasFeature( 'float32-filterable' ) ) {

  							texture.sampleType = GPUTextureSampleType.Float;

  						} else {

  							texture.sampleType = GPUTextureSampleType.UnfilterableFloat;

  						}

  					}

  				}

  				if ( binding.isSampledCubeTexture ) {

  					texture.viewDimension = GPUTextureViewDimension.Cube;

  				} else if ( binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture ) {

  					texture.viewDimension = GPUTextureViewDimension.TwoDArray;

  				} else if ( binding.isSampledTexture3D ) {

  					texture.viewDimension = GPUTextureViewDimension.ThreeD;

  				}

  				bindingGPU.texture = texture;

  			} else {

  				console.error( `WebGPUBindingUtils: Unsupported binding "${ binding }".` );

  			}

  			entries.push( bindingGPU );

  		}

  		return device.createBindGroupLayout( { entries } );

  	}

  	createBindings( bindGroup ) {

  		const { backend, bindGroupLayoutCache } = this;
  		const bindingsData = backend.get( bindGroup );

  		// setup (static) binding layout and (dynamic) binding group

  		let bindLayoutGPU = bindGroupLayoutCache.get( bindGroup.bindingsReference );

  		if ( bindLayoutGPU === undefined ) {

  			bindLayoutGPU = this.createBindingsLayout( bindGroup );
  			bindGroupLayoutCache.set( bindGroup.bindingsReference, bindLayoutGPU );

  		}

  		const bindGroupGPU = this.createBindGroup( bindGroup, bindLayoutGPU );

  		bindingsData.layout = bindLayoutGPU;
  		bindingsData.group = bindGroupGPU;

  	}

  	updateBinding( binding ) {

  		const backend = this.backend;
  		const device = backend.device;

  		const buffer = binding.buffer;
  		const bufferGPU = backend.get( binding ).buffer;

  		device.queue.writeBuffer( bufferGPU, 0, buffer, 0 );

  	}

  	createBindGroup( bindGroup, layoutGPU ) {

  		const backend = this.backend;
  		const device = backend.device;

  		let bindingPoint = 0;
  		const entriesGPU = [];

  		for ( const binding of bindGroup.bindings ) {

  			if ( binding.isUniformBuffer ) {

  				const bindingData = backend.get( binding );

  				if ( bindingData.buffer === undefined ) {

  					const byteLength = binding.byteLength;

  					const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;

  					const bufferGPU = device.createBuffer( {
  						label: 'bindingBuffer_' + binding.name,
  						size: byteLength,
  						usage: usage
  					} );

  					bindingData.buffer = bufferGPU;

  				}

  				entriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );

  			} else if ( binding.isStorageBuffer ) {

  				const bindingData = backend.get( binding );

  				if ( bindingData.buffer === undefined ) {

  					const attribute = binding.attribute;
  					//const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | /*GPUBufferUsage.COPY_SRC |*/ GPUBufferUsage.COPY_DST;

  					//backend.attributeUtils.createAttribute( attribute, usage ); // @TODO: Move it to universal renderer

  					bindingData.buffer = backend.get( attribute ).buffer;

  				}

  				entriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );

  			} else if ( binding.isSampler ) {

  				const textureGPU = backend.get( binding.texture );

  				entriesGPU.push( { binding: bindingPoint, resource: textureGPU.sampler } );

  			} else if ( binding.isSampledTexture ) {

  				const textureData = backend.get( binding.texture );

  				let resourceGPU;

  				if ( textureData.externalTexture !== undefined ) {

  					resourceGPU = device.importExternalTexture( { source: textureData.externalTexture } );

  				} else {

  					const mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;
  					const propertyName = `view-${ textureData.texture.width }-${ textureData.texture.height }-${ mipLevelCount }`;

  					resourceGPU = textureData[ propertyName ];

  					if ( resourceGPU === undefined ) {

  						const aspectGPU = GPUTextureAspect.All;

  						let dimensionViewGPU;

  						if ( binding.isSampledCubeTexture ) {

  							dimensionViewGPU = GPUTextureViewDimension.Cube;

  						} else if ( binding.isSampledTexture3D ) {

  							dimensionViewGPU = GPUTextureViewDimension.ThreeD;

  						} else if ( binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture ) {

  							dimensionViewGPU = GPUTextureViewDimension.TwoDArray;

  						} else {

  							dimensionViewGPU = GPUTextureViewDimension.TwoD;

  						}

  						resourceGPU = textureData[ propertyName ] = textureData.texture.createView( { aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount } );

  					}

  				}

  				entriesGPU.push( { binding: bindingPoint, resource: resourceGPU } );

  			}

  			bindingPoint ++;

  		}

  		return device.createBindGroup( {
  			label: 'bindGroup_' + bindGroup.name,
  			layout: layoutGPU,
  			entries: entriesGPU
  		} );

  	}

  }

  class WebGPUPipelineUtils {

  	constructor( backend ) {

  		this.backend = backend;

  	}

  	_getSampleCount( renderObjectContext ) {

  		return this.backend.utils.getSampleCountRenderContext( renderObjectContext );

  	}

  	createRenderPipeline( renderObject, promises ) {

  		const { object, material, geometry, pipeline } = renderObject;
  		const { vertexProgram, fragmentProgram } = pipeline;

  		const backend = this.backend;
  		const device = backend.device;
  		const utils = backend.utils;

  		const pipelineData = backend.get( pipeline );

  		// bind group layouts

  		const bindGroupLayouts = [];

  		for ( const bindGroup of renderObject.getBindings() ) {

  			const bindingsData = backend.get( bindGroup );

  			bindGroupLayouts.push( bindingsData.layout );

  		}

  		// vertex buffers

  		const vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );

  		// blending

  		let blending;

  		if ( material.transparent === true && material.blending !== NoBlending ) {

  			blending = this._getBlending( material );

  		}

  		// stencil

  		let stencilFront = {};

  		if ( material.stencilWrite === true ) {

  			stencilFront = {
  				compare: this._getStencilCompare( material ),
  				failOp: this._getStencilOperation( material.stencilFail ),
  				depthFailOp: this._getStencilOperation( material.stencilZFail ),
  				passOp: this._getStencilOperation( material.stencilZPass )
  			};

  		}

  		const colorWriteMask = this._getColorWriteMask( material );

  		const targets = [];

  		if ( renderObject.context.textures !== null ) {

  			const textures = renderObject.context.textures;

  			for ( let i = 0; i < textures.length; i ++ ) {

  				const colorFormat = utils.getTextureFormatGPU( textures[ i ] );

  				targets.push( {
  					format: colorFormat,
  					blend: blending,
  					writeMask: colorWriteMask
  				} );

  			}

  		} else {

  			const colorFormat = utils.getCurrentColorFormat( renderObject.context );

  			targets.push( {
  				format: colorFormat,
  				blend: blending,
  				writeMask: colorWriteMask
  			} );

  		}

  		const vertexModule = backend.get( vertexProgram ).module;
  		const fragmentModule = backend.get( fragmentProgram ).module;

  		const primitiveState = this._getPrimitiveState( object, geometry, material );
  		const depthCompare = this._getDepthCompare( material );
  		const depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );

  		const sampleCount = this._getSampleCount( renderObject.context );

  		const pipelineDescriptor = {
  			label: `renderPipeline_${ material.name || material.type }_${ material.id }`,
  			vertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),
  			fragment: Object.assign( {}, fragmentModule, { targets } ),
  			primitive: primitiveState,
  			multisample: {
  				count: sampleCount,
  				alphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1
  			},
  			layout: device.createPipelineLayout( {
  				bindGroupLayouts
  			} )
  		};


  		const depthStencil = {};
  		const renderDepth = renderObject.context.depth;
  		const renderStencil = renderObject.context.stencil;

  		if ( renderDepth === true || renderStencil === true ) {

  			if ( renderDepth === true ) {

  				depthStencil.format = depthStencilFormat;
  				depthStencil.depthWriteEnabled = material.depthWrite;
  				depthStencil.depthCompare = depthCompare;

  			}

  			if ( renderStencil === true ) {

  				depthStencil.stencilFront = stencilFront;
  				depthStencil.stencilBack = {}; // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)
  				depthStencil.stencilReadMask = material.stencilFuncMask;
  				depthStencil.stencilWriteMask = material.stencilWriteMask;

  			}

  			pipelineDescriptor.depthStencil = depthStencil;

  		}


  		if ( promises === null ) {

  			pipelineData.pipeline = device.createRenderPipeline( pipelineDescriptor );

  		} else {

  			const p = new Promise( ( resolve /*, reject*/ ) => {

  				device.createRenderPipelineAsync( pipelineDescriptor ).then( pipeline => {

  					pipelineData.pipeline = pipeline;
  					resolve();

  				} );

  			} );

  			promises.push( p );

  		}

  	}

  	createBundleEncoder( renderContext ) {

  		const backend = this.backend;
  		const { utils, device } = backend;

  		const depthStencilFormat = utils.getCurrentDepthStencilFormat( renderContext );
  		const colorFormat = utils.getCurrentColorFormat( renderContext );
  		const sampleCount = this._getSampleCount( renderContext );

  		const descriptor = {
  			label: 'renderBundleEncoder',
  			colorFormats: [ colorFormat ],
  			depthStencilFormat,
  			sampleCount
  		};

  		return device.createRenderBundleEncoder( descriptor );

  	}

  	createComputePipeline( pipeline, bindings ) {

  		const backend = this.backend;
  		const device = backend.device;

  		const computeProgram = backend.get( pipeline.computeProgram ).module;

  		const pipelineGPU = backend.get( pipeline );

  		// bind group layouts

  		const bindGroupLayouts = [];

  		for ( const bindingsGroup of bindings ) {

  			const bindingsData = backend.get( bindingsGroup );

  			bindGroupLayouts.push( bindingsData.layout );

  		}

  		pipelineGPU.pipeline = device.createComputePipeline( {
  			compute: computeProgram,
  			layout: device.createPipelineLayout( {
  				bindGroupLayouts
  			} )
  		} );

  	}

  	_getBlending( material ) {

  		let color, alpha;

  		const blending = material.blending;
  		const blendSrc = material.blendSrc;
  		const blendDst = material.blendDst;
  		const blendEquation = material.blendEquation;


  		if ( blending === CustomBlending ) {

  			const blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;
  			const blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;
  			const blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;

  			color = {
  				srcFactor: this._getBlendFactor( blendSrc ),
  				dstFactor: this._getBlendFactor( blendDst ),
  				operation: this._getBlendOperation( blendEquation )
  			};

  			alpha = {
  				srcFactor: this._getBlendFactor( blendSrcAlpha ),
  				dstFactor: this._getBlendFactor( blendDstAlpha ),
  				operation: this._getBlendOperation( blendEquationAlpha )
  			};

  		} else {

  			const premultipliedAlpha = material.premultipliedAlpha;

  			const setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {

  				color = {
  					srcFactor: srcRGB,
  					dstFactor: dstRGB,
  					operation: GPUBlendOperation.Add
  				};

  				alpha = {
  					srcFactor: srcAlpha,
  					dstFactor: dstAlpha,
  					operation: GPUBlendOperation.Add
  				};

  			};

  			if ( premultipliedAlpha ) {

  				switch ( blending ) {

  					case NormalBlending:
  						setBlend( GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );
  						break;

  					case AdditiveBlending:
  						setBlend( GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );
  						break;

  					case SubtractiveBlending:
  						setBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );
  						break;

  					case MultiplyBlending:
  						setBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha );
  						break;

  				}

  			} else {

  				switch ( blending ) {

  					case NormalBlending:
  						setBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );
  						break;

  					case AdditiveBlending:
  						setBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One );
  						break;

  					case SubtractiveBlending:
  						setBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );
  						break;

  					case MultiplyBlending:
  						setBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src );
  						break;

  				}

  			}

  		}

  		if ( color !== undefined && alpha !== undefined ) {

  			return { color, alpha };

  		} else {

  			console.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );

  		}

  	}

  	_getBlendFactor( blend ) {

  		let blendFactor;

  		switch ( blend ) {

  			case ZeroFactor:
  				blendFactor = GPUBlendFactor.Zero;
  				break;

  			case OneFactor:
  				blendFactor = GPUBlendFactor.One;
  				break;

  			case SrcColorFactor:
  				blendFactor = GPUBlendFactor.Src;
  				break;

  			case OneMinusSrcColorFactor:
  				blendFactor = GPUBlendFactor.OneMinusSrc;
  				break;

  			case SrcAlphaFactor:
  				blendFactor = GPUBlendFactor.SrcAlpha;
  				break;

  			case OneMinusSrcAlphaFactor:
  				blendFactor = GPUBlendFactor.OneMinusSrcAlpha;
  				break;

  			case DstColorFactor:
  				blendFactor = GPUBlendFactor.Dst;
  				break;

  			case OneMinusDstColorFactor:
  				blendFactor = GPUBlendFactor.OneMinusDstColor;
  				break;

  			case DstAlphaFactor:
  				blendFactor = GPUBlendFactor.DstAlpha;
  				break;

  			case OneMinusDstAlphaFactor:
  				blendFactor = GPUBlendFactor.OneMinusDstAlpha;
  				break;

  			case SrcAlphaSaturateFactor:
  				blendFactor = GPUBlendFactor.SrcAlphaSaturated;
  				break;

  			case BlendColorFactor:
  				blendFactor = GPUBlendFactor.Constant;
  				break;

  			case OneMinusBlendColorFactor:
  				blendFactor = GPUBlendFactor.OneMinusConstant;
  				break;

  			default:
  				console.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );

  		}

  		return blendFactor;

  	}

  	_getStencilCompare( material ) {

  		let stencilCompare;

  		const stencilFunc = material.stencilFunc;

  		switch ( stencilFunc ) {

  			case NeverStencilFunc:
  				stencilCompare = GPUCompareFunction.Never;
  				break;

  			case AlwaysStencilFunc:
  				stencilCompare = GPUCompareFunction.Always;
  				break;

  			case LessStencilFunc:
  				stencilCompare = GPUCompareFunction.Less;
  				break;

  			case LessEqualStencilFunc:
  				stencilCompare = GPUCompareFunction.LessEqual;
  				break;

  			case EqualStencilFunc:
  				stencilCompare = GPUCompareFunction.Equal;
  				break;

  			case GreaterEqualStencilFunc:
  				stencilCompare = GPUCompareFunction.GreaterEqual;
  				break;

  			case GreaterStencilFunc:
  				stencilCompare = GPUCompareFunction.Greater;
  				break;

  			case NotEqualStencilFunc:
  				stencilCompare = GPUCompareFunction.NotEqual;
  				break;

  			default:
  				console.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );

  		}

  		return stencilCompare;

  	}

  	_getStencilOperation( op ) {

  		let stencilOperation;

  		switch ( op ) {

  			case KeepStencilOp:
  				stencilOperation = GPUStencilOperation.Keep;
  				break;

  			case ZeroStencilOp:
  				stencilOperation = GPUStencilOperation.Zero;
  				break;

  			case ReplaceStencilOp:
  				stencilOperation = GPUStencilOperation.Replace;
  				break;

  			case InvertStencilOp:
  				stencilOperation = GPUStencilOperation.Invert;
  				break;

  			case IncrementStencilOp:
  				stencilOperation = GPUStencilOperation.IncrementClamp;
  				break;

  			case DecrementStencilOp:
  				stencilOperation = GPUStencilOperation.DecrementClamp;
  				break;

  			case IncrementWrapStencilOp:
  				stencilOperation = GPUStencilOperation.IncrementWrap;
  				break;

  			case DecrementWrapStencilOp:
  				stencilOperation = GPUStencilOperation.DecrementWrap;
  				break;

  			default:
  				console.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );

  		}

  		return stencilOperation;

  	}

  	_getBlendOperation( blendEquation ) {

  		let blendOperation;

  		switch ( blendEquation ) {

  			case AddEquation:
  				blendOperation = GPUBlendOperation.Add;
  				break;

  			case SubtractEquation:
  				blendOperation = GPUBlendOperation.Subtract;
  				break;

  			case ReverseSubtractEquation:
  				blendOperation = GPUBlendOperation.ReverseSubtract;
  				break;

  			case MinEquation:
  				blendOperation = GPUBlendOperation.Min;
  				break;

  			case MaxEquation:
  				blendOperation = GPUBlendOperation.Max;
  				break;

  			default:
  				console.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );

  		}

  		return blendOperation;

  	}

  	_getPrimitiveState( object, geometry, material ) {

  		const descriptor = {};
  		const utils = this.backend.utils;

  		descriptor.topology = utils.getPrimitiveTopology( object, material );

  		if ( geometry.index !== null && object.isLine === true && object.isLineSegments !== true ) {

  			descriptor.stripIndexFormat = ( geometry.index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;

  		}

  		switch ( material.side ) {

  			case FrontSide:
  				descriptor.frontFace = GPUFrontFace.CCW;
  				descriptor.cullMode = GPUCullMode.Back;
  				break;

  			case BackSide:
  				descriptor.frontFace = GPUFrontFace.CCW;
  				descriptor.cullMode = GPUCullMode.Front;
  				break;

  			case DoubleSide:
  				descriptor.frontFace = GPUFrontFace.CCW;
  				descriptor.cullMode = GPUCullMode.None;
  				break;

  			default:
  				console.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );
  				break;

  		}

  		return descriptor;

  	}

  	_getColorWriteMask( material ) {

  		return ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;

  	}

  	_getDepthCompare( material ) {

  		let depthCompare;

  		if ( material.depthTest === false ) {

  			depthCompare = GPUCompareFunction.Always;

  		} else {

  			const depthFunc = material.depthFunc;

  			switch ( depthFunc ) {

  				case NeverDepth:
  					depthCompare = GPUCompareFunction.Never;
  					break;

  				case AlwaysDepth:
  					depthCompare = GPUCompareFunction.Always;
  					break;

  				case LessDepth:
  					depthCompare = GPUCompareFunction.Less;
  					break;

  				case LessEqualDepth:
  					depthCompare = GPUCompareFunction.LessEqual;
  					break;

  				case EqualDepth:
  					depthCompare = GPUCompareFunction.Equal;
  					break;

  				case GreaterEqualDepth:
  					depthCompare = GPUCompareFunction.GreaterEqual;
  					break;

  				case GreaterDepth:
  					depthCompare = GPUCompareFunction.Greater;
  					break;

  				case NotEqualDepth:
  					depthCompare = GPUCompareFunction.NotEqual;
  					break;

  				default:
  					console.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );

  			}

  		}

  		return depthCompare;

  	}

  }

  /*// debugger tools
  import 'https://greggman.github.io/webgpu-avoid-redundant-state-setting/webgpu-check-redundant-state-setting.js';
  //*/


  //

  class WebGPUBackend extends Backend {

  	constructor( parameters = {} ) {

  		super( parameters );

  		this.isWebGPUBackend = true;

  		// some parameters require default values other than "undefined"
  		this.parameters.alpha = ( parameters.alpha === undefined ) ? true : parameters.alpha;

  		this.parameters.requiredLimits = ( parameters.requiredLimits === undefined ) ? {} : parameters.requiredLimits;

  		this.trackTimestamp = ( parameters.trackTimestamp === true );

  		this.device = null;
  		this.context = null;
  		this.colorBuffer = null;
  		this.defaultRenderPassdescriptor = null;

  		this.utils = new WebGPUUtils( this );
  		this.attributeUtils = new WebGPUAttributeUtils( this );
  		this.bindingUtils = new WebGPUBindingUtils( this );
  		this.pipelineUtils = new WebGPUPipelineUtils( this );
  		this.textureUtils = new WebGPUTextureUtils( this );
  		this.occludedResolveCache = new Map();

  	}

  	async init( renderer ) {

  		await super.init( renderer );

  		//

  		const parameters = this.parameters;

  		// create the device if it is not passed with parameters

  		let device;

  		if ( parameters.device === undefined ) {

  			const adapterOptions = {
  				powerPreference: parameters.powerPreference
  			};

  			const adapter = await navigator.gpu.requestAdapter( adapterOptions );

  			if ( adapter === null ) {

  				throw new Error( 'WebGPUBackend: Unable to create WebGPU adapter.' );

  			}

  			// feature support

  			const features = Object.values( GPUFeatureName );

  			const supportedFeatures = [];

  			for ( const name of features ) {

  				if ( adapter.features.has( name ) ) {

  					supportedFeatures.push( name );

  				}

  			}

  			const deviceDescriptor = {
  				requiredFeatures: supportedFeatures,
  				requiredLimits: parameters.requiredLimits
  			};

  			device = await adapter.requestDevice( deviceDescriptor );

  		} else {

  			device = parameters.device;

  		}

  		device.lost.then( ( info ) => {

  			const deviceLossInfo = {
  				api: 'WebGPU',
  				message: info.message || 'Unknown reason',
  				reason: info.reason || null,
  				originalEvent: info
  			};

  			renderer.onDeviceLost( deviceLossInfo );

  		} );

  		const context = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgpu' );

  		this.device = device;
  		this.context = context;

  		const alphaMode = parameters.alpha ? 'premultiplied' : 'opaque';

  		this.trackTimestamp = this.trackTimestamp && this.hasFeature( GPUFeatureName.TimestampQuery );

  		this.context.configure( {
  			device: this.device,
  			format: this.utils.getPreferredCanvasFormat(),
  			usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
  			alphaMode: alphaMode
  		} );

  		this.updateSize();

  	}

  	get coordinateSystem() {

  		return WebGPUCoordinateSystem;

  	}

  	async getArrayBufferAsync( attribute ) {

  		return await this.attributeUtils.getArrayBufferAsync( attribute );

  	}

  	getContext() {

  		return this.context;

  	}

  	_getDefaultRenderPassDescriptor() {

  		let descriptor = this.defaultRenderPassdescriptor;

  		if ( descriptor === null ) {

  			const renderer = this.renderer;

  			descriptor = {
  				colorAttachments: [ {
  					view: null
  				} ],
  			};

  			if ( this.renderer.depth === true || this.renderer.stencil === true ) {

  				descriptor.depthStencilAttachment = {
  					view: this.textureUtils.getDepthBuffer( renderer.depth, renderer.stencil ).createView()
  				};

  			}

  			const colorAttachment = descriptor.colorAttachments[ 0 ];

  			if ( this.renderer.samples > 0 ) {

  				colorAttachment.view = this.colorBuffer.createView();

  			} else {

  				colorAttachment.resolveTarget = undefined;

  			}

  			this.defaultRenderPassdescriptor = descriptor;

  		}

  		const colorAttachment = descriptor.colorAttachments[ 0 ];

  		if ( this.renderer.samples > 0 ) {

  			colorAttachment.resolveTarget = this.context.getCurrentTexture().createView();

  		} else {

  			colorAttachment.view = this.context.getCurrentTexture().createView();

  		}

  		return descriptor;

  	}

  	_getRenderPassDescriptor( renderContext ) {

  		const renderTarget = renderContext.renderTarget;
  		const renderTargetData = this.get( renderTarget );

  		let descriptors = renderTargetData.descriptors;

  		if ( descriptors === undefined ||
  			renderTargetData.width !== renderTarget.width ||
  			renderTargetData.height !== renderTarget.height ||
  			renderTargetData.activeMipmapLevel !== renderTarget.activeMipmapLevel ||
  			renderTargetData.samples !== renderTarget.samples
  		) {

  			descriptors = {};

  			renderTargetData.descriptors = descriptors;

  			// dispose

  			const onDispose = () => {

  				renderTarget.removeEventListener( 'dispose', onDispose );

  				this.delete( renderTarget );

  			};

  			renderTarget.addEventListener( 'dispose', onDispose );

  		}

  		const cacheKey = renderContext.getCacheKey();

  		let descriptor = descriptors[ cacheKey ];

  		if ( descriptor === undefined ) {

  			const textures = renderContext.textures;
  			const colorAttachments = [];

  			for ( let i = 0; i < textures.length; i ++ ) {

  				const textureData = this.get( textures[ i ] );

  				const textureView = textureData.texture.createView( {
  					baseMipLevel: renderContext.activeMipmapLevel,
  					mipLevelCount: 1,
  					baseArrayLayer: renderContext.activeCubeFace,
  					dimension: GPUTextureViewDimension.TwoD
  				} );

  				let view, resolveTarget;

  				if ( textureData.msaaTexture !== undefined ) {

  					view = textureData.msaaTexture.createView();
  					resolveTarget = textureView;

  				} else {

  					view = textureView;
  					resolveTarget = undefined;

  				}

  				colorAttachments.push( {
  					view,
  					resolveTarget,
  					loadOp: GPULoadOp.Load,
  					storeOp: GPUStoreOp.Store
  				} );

  			}


  			descriptor = {
  				colorAttachments,
  			};

  			if ( renderContext.depth ) {

  				const depthTextureData = this.get( renderContext.depthTexture );

  				const depthStencilAttachment = {
  					view: depthTextureData.texture.createView()
  				};
  				descriptor.depthStencilAttachment = depthStencilAttachment;

  			}

  			descriptors[ cacheKey ] = descriptor;

  			renderTargetData.width = renderTarget.width;
  			renderTargetData.height = renderTarget.height;
  			renderTargetData.samples = renderTarget.samples;
  			renderTargetData.activeMipmapLevel = renderTarget.activeMipmapLevel;

  		}

  		return descriptor;

  	}

  	beginRender( renderContext ) {

  		const renderContextData = this.get( renderContext );

  		const device = this.device;
  		const occlusionQueryCount = renderContext.occlusionQueryCount;

  		let occlusionQuerySet;

  		if ( occlusionQueryCount > 0 ) {

  			if ( renderContextData.currentOcclusionQuerySet ) renderContextData.currentOcclusionQuerySet.destroy();
  			if ( renderContextData.currentOcclusionQueryBuffer ) renderContextData.currentOcclusionQueryBuffer.destroy();

  			// Get a reference to the array of objects with queries. The renderContextData property
  			// can be changed by another render pass before the buffer.mapAsyc() completes.
  			renderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;
  			renderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;
  			renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;

  			//

  			occlusionQuerySet = device.createQuerySet( { type: 'occlusion', count: occlusionQueryCount } );

  			renderContextData.occlusionQuerySet = occlusionQuerySet;
  			renderContextData.occlusionQueryIndex = 0;
  			renderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );

  			renderContextData.lastOcclusionObject = null;

  		}

  		let descriptor;

  		if ( renderContext.textures === null ) {

  			descriptor = this._getDefaultRenderPassDescriptor();

  		} else {

  			descriptor = this._getRenderPassDescriptor( renderContext );

  		}

  		this.initTimestampQuery( renderContext, descriptor );

  		descriptor.occlusionQuerySet = occlusionQuerySet;

  		const depthStencilAttachment = descriptor.depthStencilAttachment;

  		if ( renderContext.textures !== null ) {

  			const colorAttachments = descriptor.colorAttachments;

  			for ( let i = 0; i < colorAttachments.length; i ++ ) {

  				const colorAttachment = colorAttachments[ i ];

  				if ( renderContext.clearColor ) {

  					colorAttachment.clearValue = i === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };
  					colorAttachment.loadOp = GPULoadOp.Clear;
  					colorAttachment.storeOp = GPUStoreOp.Store;

  				} else {

  					colorAttachment.loadOp = GPULoadOp.Load;
  					colorAttachment.storeOp = GPUStoreOp.Store;

  				}

  			}

  		} else {

  			const colorAttachment = descriptor.colorAttachments[ 0 ];

  			if ( renderContext.clearColor ) {

  				colorAttachment.clearValue = renderContext.clearColorValue;
  				colorAttachment.loadOp = GPULoadOp.Clear;
  				colorAttachment.storeOp = GPUStoreOp.Store;

  			} else {

  				colorAttachment.loadOp = GPULoadOp.Load;
  				colorAttachment.storeOp = GPUStoreOp.Store;

  			}

  		}

  		//

  		if ( renderContext.depth ) {

  			if ( renderContext.clearDepth ) {

  				depthStencilAttachment.depthClearValue = renderContext.clearDepthValue;
  				depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
  				depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;

  			} else {

  				depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
  				depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;

  			}

  		}

  		if ( renderContext.stencil ) {

  			if ( renderContext.clearStencil ) {

  				depthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;
  				depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
  				depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;

  			} else {

  				depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
  				depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;

  			}

  		}

  		//

  		const encoder = device.createCommandEncoder( { label: 'renderContext_' + renderContext.id } );
  		const currentPass = encoder.beginRenderPass( descriptor );

  		//

  		renderContextData.descriptor = descriptor;
  		renderContextData.encoder = encoder;
  		renderContextData.currentPass = currentPass;
  		renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
  		renderContextData.renderBundles = [];

  		//

  		if ( renderContext.viewport ) {

  			this.updateViewport( renderContext );

  		}

  		if ( renderContext.scissor ) {

  			const { x, y, width, height } = renderContext.scissorValue;

  			currentPass.setScissorRect( x, y, width, height );

  		}

  	}

  	finishRender( renderContext ) {

  		const renderContextData = this.get( renderContext );
  		const occlusionQueryCount = renderContext.occlusionQueryCount;

  		if ( renderContextData.renderBundles.length > 0 ) {

  			renderContextData.currentPass.executeBundles( renderContextData.renderBundles );

  		}

  		if ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {

  			renderContextData.currentPass.endOcclusionQuery();

  		}

  		renderContextData.currentPass.end();

  		if ( occlusionQueryCount > 0 ) {

  			const bufferSize = occlusionQueryCount * 8; // 8 byte entries for query results

  			//

  			let queryResolveBuffer = this.occludedResolveCache.get( bufferSize );

  			if ( queryResolveBuffer === undefined ) {

  				queryResolveBuffer = this.device.createBuffer(
  					{
  						size: bufferSize,
  						usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
  					}
  				);

  				this.occludedResolveCache.set( bufferSize, queryResolveBuffer );

  			}

  			//

  			const readBuffer = this.device.createBuffer(
  				{
  					size: bufferSize,
  					usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
  				}
  			);

  			// two buffers required here - WebGPU doesn't allow usage of QUERY_RESOLVE & MAP_READ to be combined
  			renderContextData.encoder.resolveQuerySet( renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0 );
  			renderContextData.encoder.copyBufferToBuffer( queryResolveBuffer, 0, readBuffer, 0, bufferSize );

  			renderContextData.occlusionQueryBuffer = readBuffer;

  			//

  			this.resolveOccludedAsync( renderContext );

  		}

  		this.prepareTimestampBuffer( renderContext, renderContextData.encoder );

  		this.device.queue.submit( [ renderContextData.encoder.finish() ] );


  		//

  		if ( renderContext.textures !== null ) {

  			const textures = renderContext.textures;

  			for ( let i = 0; i < textures.length; i ++ ) {

  				const texture = textures[ i ];

  				if ( texture.generateMipmaps === true ) {

  					this.textureUtils.generateMipmaps( texture );

  				}

  			}

  		}

  	}

  	isOccluded( renderContext, object ) {

  		const renderContextData = this.get( renderContext );

  		return renderContextData.occluded && renderContextData.occluded.has( object );

  	}

  	async resolveOccludedAsync( renderContext ) {

  		const renderContextData = this.get( renderContext );

  		// handle occlusion query results

  		const { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;

  		if ( currentOcclusionQueryBuffer && currentOcclusionQueryObjects ) {

  			const occluded = new WeakSet();

  			renderContextData.currentOcclusionQueryObjects = null;
  			renderContextData.currentOcclusionQueryBuffer = null;

  			await currentOcclusionQueryBuffer.mapAsync( GPUMapMode.READ );

  			const buffer = currentOcclusionQueryBuffer.getMappedRange();
  			const results = new BigUint64Array( buffer );

  			for ( let i = 0; i < currentOcclusionQueryObjects.length; i ++ ) {

  				if ( results[ i ] !== BigInt( 0 ) ) {

  					occluded.add( currentOcclusionQueryObjects[ i ] );

  				}

  			}

  			currentOcclusionQueryBuffer.destroy();

  			renderContextData.occluded = occluded;

  		}

  	}

  	updateViewport( renderContext ) {

  		const { currentPass } = this.get( renderContext );
  		const { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;

  		currentPass.setViewport( x, y, width, height, minDepth, maxDepth );

  	}

  	clear( color, depth, stencil, renderTargetData = null ) {

  		const device = this.device;
  		const renderer = this.renderer;

  		let colorAttachments = [];

  		let depthStencilAttachment;
  		let clearValue;

  		let supportsDepth;
  		let supportsStencil;

  		if ( color ) {

  			const clearColor = this.getClearColor();

  			if ( this.renderer.alpha === true ) {

  				// premultiply alpha

  				const a = clearColor.a;

  				clearValue = { r: clearColor.r * a, g: clearColor.g * a, b: clearColor.b * a, a: a };

  			} else {

  				clearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };

  			}

  		}

  		if ( renderTargetData === null ) {

  			supportsDepth = renderer.depth;
  			supportsStencil = renderer.stencil;

  			const descriptor = this._getDefaultRenderPassDescriptor();

  			if ( color ) {

  				colorAttachments = descriptor.colorAttachments;

  				const colorAttachment = colorAttachments[ 0 ];

  				colorAttachment.clearValue = clearValue;
  				colorAttachment.loadOp = GPULoadOp.Clear;
  				colorAttachment.storeOp = GPUStoreOp.Store;

  			}

  			if ( supportsDepth || supportsStencil ) {

  				depthStencilAttachment = descriptor.depthStencilAttachment;

  			}

  		} else {

  			supportsDepth = renderTargetData.depth;
  			supportsStencil = renderTargetData.stencil;

  			if ( color ) {

  				for ( const texture of renderTargetData.textures ) {

  					const textureData = this.get( texture );
  					const textureView = textureData.texture.createView();

  					let view, resolveTarget;

  					if ( textureData.msaaTexture !== undefined ) {

  						view = textureData.msaaTexture.createView();
  						resolveTarget = textureView;

  					} else {

  						view = textureView;
  						resolveTarget = undefined;

  					}

  					colorAttachments.push( {
  						view,
  						resolveTarget,
  						clearValue,
  						loadOp: GPULoadOp.Clear,
  						storeOp: GPUStoreOp.Store
  					} );

  				}

  			}

  			if ( supportsDepth || supportsStencil ) {

  				const depthTextureData = this.get( renderTargetData.depthTexture );

  				depthStencilAttachment = {
  					view: depthTextureData.texture.createView()
  				};

  			}

  		}

  		//

  		if ( supportsDepth ) {

  			if ( depth ) {

  				depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
  				depthStencilAttachment.depthClearValue = renderer.getClearDepth();
  				depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;

  			} else {

  				depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
  				depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;

  			}

  		}

  		//

  		if ( supportsStencil ) {

  			if ( stencil ) {

  				depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
  				depthStencilAttachment.stencilClearValue = renderer.getClearStencil();
  				depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;

  			} else {

  				depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
  				depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;

  			}

  		}

  		//

  		const encoder = device.createCommandEncoder( {} );
  		const currentPass = encoder.beginRenderPass( {
  			colorAttachments,
  			depthStencilAttachment
  		} );

  		currentPass.end();

  		device.queue.submit( [ encoder.finish() ] );

  	}

  	// compute

  	beginCompute( computeGroup ) {

  		const groupGPU = this.get( computeGroup );


  		const descriptor = {};

  		this.initTimestampQuery( computeGroup, descriptor );

  		groupGPU.cmdEncoderGPU = this.device.createCommandEncoder();

  		groupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass( descriptor );

  	}

  	compute( computeGroup, computeNode, bindings, pipeline ) {

  		const { passEncoderGPU } = this.get( computeGroup );

  		// pipeline

  		const pipelineGPU = this.get( pipeline ).pipeline;
  		passEncoderGPU.setPipeline( pipelineGPU );

  		// bind groups

  		for ( let i = 0, l = bindings.length; i < l; i ++ ) {

  			const bindGroup = bindings[ i ];
  			const bindingsData = this.get( bindGroup );

  			passEncoderGPU.setBindGroup( i, bindingsData.group );

  		}

  		const maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;

  		const computeNodeData = this.get( computeNode );

  		if ( computeNodeData.dispatchSize === undefined ) computeNodeData.dispatchSize = { x: 0, y: 1, z: 1 };

  		const { dispatchSize } = computeNodeData;

  		if ( computeNode.dispatchCount > maxComputeWorkgroupsPerDimension ) {

  			dispatchSize.x = Math.min( computeNode.dispatchCount, maxComputeWorkgroupsPerDimension );
  			dispatchSize.y = Math.ceil( computeNode.dispatchCount / maxComputeWorkgroupsPerDimension );

  		} else {

  			dispatchSize.x = computeNode.dispatchCount;

  		}

  		passEncoderGPU.dispatchWorkgroups(
  			dispatchSize.x,
  			dispatchSize.y,
  			dispatchSize.z
  		);

  	}

  	finishCompute( computeGroup ) {

  		const groupData = this.get( computeGroup );

  		groupData.passEncoderGPU.end();

  		this.prepareTimestampBuffer( computeGroup, groupData.cmdEncoderGPU );

  		this.device.queue.submit( [ groupData.cmdEncoderGPU.finish() ] );

  	}

  	async waitForGPU() {

  		await this.device.queue.onSubmittedWorkDone();

  	}

  	// render object

  	draw( renderObject, info ) {

  		const { object, context, pipeline } = renderObject;
  		const bindings = renderObject.getBindings();
  		const renderContextData = this.get( context );
  		const pipelineGPU = this.get( pipeline ).pipeline;
  		const currentSets = renderContextData.currentSets;
  		const passEncoderGPU = renderContextData.currentPass;

  		const drawParams = renderObject.getDrawParameters();

  		if ( drawParams === null ) return;

  		// pipeline

  		if ( currentSets.pipeline !== pipelineGPU ) {

  			passEncoderGPU.setPipeline( pipelineGPU );

  			currentSets.pipeline = pipelineGPU;

  		}

  		// bind groups

  		const currentBindingGroups = currentSets.bindingGroups;

  		for ( let i = 0, l = bindings.length; i < l; i ++ ) {

  			const bindGroup = bindings[ i ];
  			const bindingsData = this.get( bindGroup );

  			if ( currentBindingGroups[ bindGroup.index ] !== bindGroup.id ) {

  				passEncoderGPU.setBindGroup( bindGroup.index, bindingsData.group );
  				currentBindingGroups[ bindGroup.index ] = bindGroup.id;

  			}

  		}

  		// attributes

  		const index = renderObject.getIndex();

  		const hasIndex = ( index !== null );

  		// index

  		if ( hasIndex === true ) {

  			if ( currentSets.index !== index ) {

  				const buffer = this.get( index ).buffer;
  				const indexFormat = ( index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;

  				passEncoderGPU.setIndexBuffer( buffer, indexFormat );

  				currentSets.index = index;

  			}

  		}

  		// vertex buffers

  		const vertexBuffers = renderObject.getVertexBuffers();

  		for ( let i = 0, l = vertexBuffers.length; i < l; i ++ ) {

  			const vertexBuffer = vertexBuffers[ i ];

  			if ( currentSets.attributes[ i ] !== vertexBuffer ) {

  				const buffer = this.get( vertexBuffer ).buffer;
  				passEncoderGPU.setVertexBuffer( i, buffer );

  				currentSets.attributes[ i ] = vertexBuffer;

  			}

  		}

  		// occlusion queries - handle multiple consecutive draw calls for an object

  		if ( renderContextData.occlusionQuerySet !== undefined ) {

  			const lastObject = renderContextData.lastOcclusionObject;

  			if ( lastObject !== object ) {

  				if ( lastObject !== null && lastObject.occlusionTest === true ) {

  					passEncoderGPU.endOcclusionQuery();
  					renderContextData.occlusionQueryIndex ++;

  				}

  				if ( object.occlusionTest === true ) {

  					passEncoderGPU.beginOcclusionQuery( renderContextData.occlusionQueryIndex );
  					renderContextData.occlusionQueryObjects[ renderContextData.occlusionQueryIndex ] = object;

  				}

  				renderContextData.lastOcclusionObject = object;

  			}

  		}

  		// draw

  		if ( object.isBatchedMesh === true ) {

  			const starts = object._multiDrawStarts;
  			const counts = object._multiDrawCounts;
  			const drawCount = object._multiDrawCount;
  			const drawInstances = object._multiDrawInstances;

  			const bytesPerElement = hasIndex ? index.array.BYTES_PER_ELEMENT : 1;

  			for ( let i = 0; i < drawCount; i ++ ) {

  				const count = drawInstances ? drawInstances[ i ] : 1;
  				const firstInstance = count > 1 ? 0 : i;

  				passEncoderGPU.drawIndexed( counts[ i ], count, starts[ i ] / bytesPerElement, 0, firstInstance );

  			}

  		} else if ( hasIndex === true ) {

  			const { vertexCount: indexCount, instanceCount, firstVertex: firstIndex } = drawParams;

  			const indirect = renderObject.getIndirect();

  			if ( indirect !== null ) {

  				const buffer = this.get( indirect ).buffer;

  				passEncoderGPU.drawIndexedIndirect( buffer, 0 );

  			} else {

  				passEncoderGPU.drawIndexed( indexCount, instanceCount, firstIndex, 0, 0 );

  			}

  			info.update( object, indexCount, instanceCount );

  		} else {

  			const { vertexCount, instanceCount, firstVertex } = drawParams;

  			const indirect = renderObject.getIndirect();

  			if ( indirect !== null ) {

  				const buffer = this.get( indirect ).buffer;

  				passEncoderGPU.drawIndirect( buffer, 0 );

  			} else {

  				passEncoderGPU.draw( vertexCount, instanceCount, firstVertex, 0 );

  			}

  			info.update( object, vertexCount, instanceCount );

  		}

  	}

  	// cache key

  	needsRenderUpdate( renderObject ) {

  		const data = this.get( renderObject );

  		const { object, material } = renderObject;

  		const utils = this.utils;

  		const sampleCount = utils.getSampleCountRenderContext( renderObject.context );
  		const colorSpace = utils.getCurrentColorSpace( renderObject.context );
  		const colorFormat = utils.getCurrentColorFormat( renderObject.context );
  		const depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );
  		const primitiveTopology = utils.getPrimitiveTopology( object, material );

  		let needsUpdate = false;

  		if ( data.material !== material || data.materialVersion !== material.version ||
  			data.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha ||
  			data.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation ||
  			data.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha ||
  			data.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc ||
  			data.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc ||
  			data.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass ||
  			data.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask ||
  			data.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage ||
  			data.sampleCount !== sampleCount || data.colorSpace !== colorSpace ||
  			data.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat ||
  			data.primitiveTopology !== primitiveTopology ||
  			data.clippingContextCacheKey !== renderObject.clippingContext.cacheKey
  		) {

  			data.material = material; data.materialVersion = material.version;
  			data.transparent = material.transparent; data.blending = material.blending; data.premultipliedAlpha = material.premultipliedAlpha;
  			data.blendSrc = material.blendSrc; data.blendDst = material.blendDst; data.blendEquation = material.blendEquation;
  			data.blendSrcAlpha = material.blendSrcAlpha; data.blendDstAlpha = material.blendDstAlpha; data.blendEquationAlpha = material.blendEquationAlpha;
  			data.colorWrite = material.colorWrite;
  			data.depthWrite = material.depthWrite; data.depthTest = material.depthTest; data.depthFunc = material.depthFunc;
  			data.stencilWrite = material.stencilWrite; data.stencilFunc = material.stencilFunc;
  			data.stencilFail = material.stencilFail; data.stencilZFail = material.stencilZFail; data.stencilZPass = material.stencilZPass;
  			data.stencilFuncMask = material.stencilFuncMask; data.stencilWriteMask = material.stencilWriteMask;
  			data.side = material.side; data.alphaToCoverage = material.alphaToCoverage;
  			data.sampleCount = sampleCount;
  			data.colorSpace = colorSpace;
  			data.colorFormat = colorFormat;
  			data.depthStencilFormat = depthStencilFormat;
  			data.primitiveTopology = primitiveTopology;
  			data.clippingContextCacheKey = renderObject.clippingContext.cacheKey;

  			needsUpdate = true;

  		}

  		return needsUpdate;

  	}

  	getRenderCacheKey( renderObject ) {

  		const { object, material } = renderObject;

  		const utils = this.utils;
  		const renderContext = renderObject.context;

  		return [
  			material.transparent, material.blending, material.premultipliedAlpha,
  			material.blendSrc, material.blendDst, material.blendEquation,
  			material.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha,
  			material.colorWrite,
  			material.depthWrite, material.depthTest, material.depthFunc,
  			material.stencilWrite, material.stencilFunc,
  			material.stencilFail, material.stencilZFail, material.stencilZPass,
  			material.stencilFuncMask, material.stencilWriteMask,
  			material.side,
  			utils.getSampleCountRenderContext( renderContext ),
  			utils.getCurrentColorSpace( renderContext ), utils.getCurrentColorFormat( renderContext ), utils.getCurrentDepthStencilFormat( renderContext ),
  			utils.getPrimitiveTopology( object, material ),
  			renderObject.getGeometryCacheKey(),
  			renderObject.clippingContext.cacheKey
  		].join();

  	}

  	// textures

  	createSampler( texture ) {

  		this.textureUtils.createSampler( texture );

  	}

  	destroySampler( texture ) {

  		this.textureUtils.destroySampler( texture );

  	}

  	createDefaultTexture( texture ) {

  		this.textureUtils.createDefaultTexture( texture );

  	}

  	createTexture( texture, options ) {

  		this.textureUtils.createTexture( texture, options );

  	}

  	updateTexture( texture, options ) {

  		this.textureUtils.updateTexture( texture, options );

  	}

  	generateMipmaps( texture ) {

  		this.textureUtils.generateMipmaps( texture );

  	}

  	destroyTexture( texture ) {

  		this.textureUtils.destroyTexture( texture );

  	}

  	copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {

  		return this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );

  	}


  	initTimestampQuery( renderContext, descriptor ) {

  		if ( ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );

  		if ( ! renderContextData.timeStampQuerySet ) {

  			// Create a GPUQuerySet which holds 2 timestamp query results: one for the
  			// beginning and one for the end of compute pass execution.
  			const timeStampQuerySet = this.device.createQuerySet( { type: 'timestamp', count: 2 } );

  			const timestampWrites = {
  				querySet: timeStampQuerySet,
  				beginningOfPassWriteIndex: 0, // Write timestamp in index 0 when pass begins.
  				endOfPassWriteIndex: 1, // Write timestamp in index 1 when pass ends.
  			};

  			Object.assign( descriptor, {
  				timestampWrites,
  			} );

  			renderContextData.timeStampQuerySet = timeStampQuerySet;

  		}

  	}

  	// timestamp utils

  	prepareTimestampBuffer( renderContext, encoder ) {

  		if ( ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );


  		const size = 2 * BigInt64Array.BYTES_PER_ELEMENT;

  		if ( renderContextData.currentTimestampQueryBuffers === undefined ) {

  			renderContextData.currentTimestampQueryBuffers = {
  				resolveBuffer: this.device.createBuffer( {
  					label: 'timestamp resolve buffer',
  					size: size,
  					usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,
  				} ),
  				resultBuffer: this.device.createBuffer( {
  					label: 'timestamp result buffer',
  					size: size,
  					usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,
  				} ),
  				isMappingPending: false,
  			};

  		}

  		const { resolveBuffer, resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;

  		if ( isMappingPending === true ) return;

  		encoder.resolveQuerySet( renderContextData.timeStampQuerySet, 0, 2, resolveBuffer, 0 );
  		encoder.copyBufferToBuffer( resolveBuffer, 0, resultBuffer, 0, size );

  	}

  	async resolveTimestampAsync( renderContext, type = 'render' ) {

  		if ( ! this.trackTimestamp ) return;

  		const renderContextData = this.get( renderContext );

  		if ( renderContextData.currentTimestampQueryBuffers === undefined ) return;

  		const { resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;

  		if ( isMappingPending === true ) return;

  		renderContextData.currentTimestampQueryBuffers.isMappingPending = true;

  		resultBuffer.mapAsync( GPUMapMode.READ ).then( () => {

  			const times = new BigUint64Array( resultBuffer.getMappedRange() );
  			const duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;


  			this.renderer.info.updateTimestamp( type, duration );

  			resultBuffer.unmap();

  			renderContextData.currentTimestampQueryBuffers.isMappingPending = false;

  		} );

  	}

  	// node builder

  	createNodeBuilder( object, renderer ) {

  		return new WGSLNodeBuilder( object, renderer );

  	}

  	// program

  	createProgram( program ) {

  		const programGPU = this.get( program );

  		programGPU.module = {
  			module: this.device.createShaderModule( { code: program.code, label: program.stage } ),
  			entryPoint: 'main'
  		};

  	}

  	destroyProgram( program ) {

  		this.delete( program );

  	}

  	// pipelines

  	createRenderPipeline( renderObject, promises ) {

  		this.pipelineUtils.createRenderPipeline( renderObject, promises );

  	}

  	createComputePipeline( computePipeline, bindings ) {

  		this.pipelineUtils.createComputePipeline( computePipeline, bindings );

  	}

  	beginBundle( renderContext ) {

  		const renderContextData = this.get( renderContext );

  		renderContextData._currentPass = renderContextData.currentPass;
  		renderContextData._currentSets = renderContextData.currentSets;

  		renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
  		renderContextData.currentPass = this.pipelineUtils.createBundleEncoder( renderContext );

  	}

  	finishBundle( renderContext, bundle ) {

  		const renderContextData = this.get( renderContext );

  		const bundleEncoder = renderContextData.currentPass;
  		const bundleGPU = bundleEncoder.finish();

  		this.get( bundle ).bundleGPU = bundleGPU;

  		// restore render pass state

  		renderContextData.currentSets = renderContextData._currentSets;
  		renderContextData.currentPass = renderContextData._currentPass;

  	}

  	addBundle( renderContext, bundle ) {

  		const renderContextData = this.get( renderContext );

  		renderContextData.renderBundles.push( this.get( bundle ).bundleGPU );

  	}

  	// bindings

  	createBindings( bindGroup ) {

  		this.bindingUtils.createBindings( bindGroup );

  	}

  	updateBindings( bindGroup ) {

  		this.bindingUtils.createBindings( bindGroup );

  	}

  	updateBinding( binding ) {

  		this.bindingUtils.updateBinding( binding );

  	}

  	// attributes

  	createIndexAttribute( attribute ) {

  		this.attributeUtils.createAttribute( attribute, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );

  	}

  	createAttribute( attribute ) {

  		this.attributeUtils.createAttribute( attribute, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );

  	}

  	createStorageAttribute( attribute ) {

  		this.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );

  	}

  	createIndirectStorageAttribute( attribute ) {

  		this.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );

  	}

  	updateAttribute( attribute ) {

  		this.attributeUtils.updateAttribute( attribute );

  	}

  	destroyAttribute( attribute ) {

  		this.attributeUtils.destroyAttribute( attribute );

  	}

  	// canvas

  	updateSize() {

  		this.colorBuffer = this.textureUtils.getColorBuffer();
  		this.defaultRenderPassdescriptor = null;

  	}

  	// utils public

  	getMaxAnisotropy() {

  		return 16;

  	}

  	hasFeature( name ) {

  		return this.device.features.has( name );

  	}

  	copyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0 ) {

  		let dstX = 0;
  		let dstY = 0;
  		let dstLayer = 0;

  		let srcX = 0;
  		let srcY = 0;
  		let srcLayer = 0;

  		let srcWidth = srcTexture.image.width;
  		let srcHeight = srcTexture.image.height;

  		if ( srcRegion !== null ) {

  			srcX = srcRegion.x;
  			srcY = srcRegion.y;
  			srcLayer = srcRegion.z || 0;
  			srcWidth = srcRegion.width;
  			srcHeight = srcRegion.height;

  		}

  		if ( dstPosition !== null ) {

  			dstX = dstPosition.x;
  			dstY = dstPosition.y;
  			dstLayer = dstPosition.z || 0;

  		}

  		const encoder = this.device.createCommandEncoder( { label: 'copyTextureToTexture_' + srcTexture.id + '_' + dstTexture.id } );

  		const sourceGPU = this.get( srcTexture ).texture;
  		const destinationGPU = this.get( dstTexture ).texture;

  		encoder.copyTextureToTexture(
  			{
  				texture: sourceGPU,
  				mipLevel: level,
  				origin: { x: srcX, y: srcY, z: srcLayer }
  			},
  			{
  				texture: destinationGPU,
  				mipLevel: level,
  				origin: { x: dstX, y: dstY, z: dstLayer }
  			},
  			[
  				srcWidth,
  				srcHeight,
  				1
  			]
  		);

  		this.device.queue.submit( [ encoder.finish() ] );

  	}

  	copyFramebufferToTexture( texture, renderContext, rectangle ) {

  		const renderContextData = this.get( renderContext );

  		let sourceGPU = null;

  		if ( renderContext.renderTarget ) {

  			if ( texture.isDepthTexture ) {

  				sourceGPU = this.get( renderContext.depthTexture ).texture;

  			} else {

  				sourceGPU = this.get( renderContext.textures[ 0 ] ).texture;

  			}

  		} else {

  			if ( texture.isDepthTexture ) {

  				sourceGPU = this.textureUtils.getDepthBuffer( renderContext.depth, renderContext.stencil );

  			} else {

  				sourceGPU = this.context.getCurrentTexture();

  			}

  		}

  		const destinationGPU = this.get( texture ).texture;

  		if ( sourceGPU.format !== destinationGPU.format ) {

  			console.error( 'WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.', sourceGPU.format, destinationGPU.format );

  			return;

  		}

  		let encoder;

  		if ( renderContextData.currentPass ) {

  			renderContextData.currentPass.end();

  			encoder = renderContextData.encoder;

  		} else {

  			encoder = this.device.createCommandEncoder( { label: 'copyFramebufferToTexture_' + texture.id } );

  		}

  		encoder.copyTextureToTexture(
  			{
  				texture: sourceGPU,
  				origin: { x: rectangle.x, y: rectangle.y, z: 0 }
  			},
  			{
  				texture: destinationGPU
  			},
  			[
  				rectangle.z,
  				rectangle.w
  			]
  		);

  		if ( texture.generateMipmaps ) this.textureUtils.generateMipmaps( texture );

  		if ( renderContextData.currentPass ) {

  			const { descriptor } = renderContextData;

  			for ( let i = 0; i < descriptor.colorAttachments.length; i ++ ) {

  				descriptor.colorAttachments[ i ].loadOp = GPULoadOp.Load;

  			}

  			if ( renderContext.depth ) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
  			if ( renderContext.stencil ) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;

  			renderContextData.currentPass = encoder.beginRenderPass( descriptor );
  			renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };

  		} else {

  			this.device.queue.submit( [ encoder.finish() ] );

  		}

  	}

  }

  class IESSpotLight extends SpotLight {

  	constructor( color, intensity, distance, angle, penumbra, decay ) {

  		super( color, intensity, distance, angle, penumbra, decay );

  		this.iesMap = null;

  	}

  	copy( source, recursive ) {

  		super.copy( source, recursive );

  		this.iesMap = source.iesMap;

  		return this;

  	}

  }

  class StandardNodeLibrary extends NodeLibrary {

  	constructor() {

  		super();

  		this.addMaterial( MeshPhongNodeMaterial, MeshPhongMaterial );
  		this.addMaterial( MeshStandardNodeMaterial, MeshStandardMaterial );
  		this.addMaterial( MeshPhysicalNodeMaterial, MeshPhysicalMaterial );
  		this.addMaterial( MeshToonNodeMaterial, MeshToonMaterial );
  		this.addMaterial( MeshBasicNodeMaterial, MeshBasicMaterial );
  		this.addMaterial( MeshLambertNodeMaterial, MeshLambertMaterial );
  		this.addMaterial( MeshNormalNodeMaterial, MeshNormalMaterial );
  		this.addMaterial( MeshMatcapNodeMaterial, MeshMatcapMaterial );
  		this.addMaterial( LineBasicNodeMaterial, LineBasicMaterial );
  		this.addMaterial( LineDashedNodeMaterial, LineDashedMaterial );
  		this.addMaterial( PointsNodeMaterial, PointsMaterial );
  		this.addMaterial( SpriteNodeMaterial, SpriteMaterial );
  		this.addMaterial( ShadowNodeMaterial, ShadowMaterial );

  		this.addLight( PointLightNode, PointLight );
  		this.addLight( DirectionalLightNode, DirectionalLight );
  		this.addLight( RectAreaLightNode, RectAreaLight );
  		this.addLight( SpotLightNode, SpotLight );
  		this.addLight( AmbientLightNode, AmbientLight );
  		this.addLight( HemisphereLightNode, HemisphereLight );
  		this.addLight( LightProbeNode, LightProbe );
  		this.addLight( IESSpotLightNode, IESSpotLight );

  		this.addToneMapping( linearToneMapping, LinearToneMapping );
  		this.addToneMapping( reinhardToneMapping, ReinhardToneMapping );
  		this.addToneMapping( cineonToneMapping, CineonToneMapping );
  		this.addToneMapping( acesFilmicToneMapping, ACESFilmicToneMapping );
  		this.addToneMapping( agxToneMapping, AgXToneMapping );
  		this.addToneMapping( neutralToneMapping, NeutralToneMapping );

  	}

  }

  /*
  const debugHandler = {

  	get: function ( target, name ) {

  		// Add |update
  		if ( /^(create|destroy)/.test( name ) ) console.log( 'WebGPUBackend.' + name );

  		return target[ name ];

  	}

  };
  */
  class WebGPURenderer extends Renderer {

  	constructor( parameters = {} ) {

  		let BackendClass;

  		if ( parameters.forceWebGL ) {

  			BackendClass = WebGLBackend;

  		} else {

  			BackendClass = WebGPUBackend;

  			parameters.getFallback = () => {

  				console.warn( 'THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.' );

  				return new WebGLBackend( parameters );

  			};

  		}

  		const backend = new BackendClass( parameters );

  		//super( new Proxy( backend, debugHandler ) );
  		super( backend, parameters );

  		this.library = new StandardNodeLibrary();

  		this.isWebGPURenderer = true;

  	}

  }

  if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
  		revision: REVISION,
  	} } ) );

  }

  if ( typeof window !== 'undefined' ) {

  	if ( window.__THREE__ ) {

  		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

  	} else {

  		window.__THREE__ = REVISION;

  	}

  }

  const _changeEvent$2 = { type: 'change' };
  const _startEvent$1 = { type: 'start' };
  const _endEvent$1 = { type: 'end' };

  const _EPS$2 = 0.000001;
  const _STATE$1 = { NONE: - 1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };

  const _v2 = new Vector2$1();
  const _mouseChange = new Vector2$1();
  const _objectUp = new Vector3$1();
  const _pan = new Vector3$1();
  const _axis = new Vector3$1();
  const _quaternion = new Quaternion$1();
  const _eyeDirection = new Vector3$1();
  const _objectUpDirection = new Vector3$1();
  const _objectSidewaysDirection = new Vector3$1();
  const _moveDirection = new Vector3$1();

  class TrackballControls extends Controls {

  	constructor( object, domElement = null ) {

  		super( object, domElement );

  		// API

  		this.enabled = true;

  		this.screen = { left: 0, top: 0, width: 0, height: 0 };

  		this.rotateSpeed = 1.0;
  		this.zoomSpeed = 1.2;
  		this.panSpeed = 0.3;

  		this.noRotate = false;
  		this.noZoom = false;
  		this.noPan = false;

  		this.staticMoving = false;
  		this.dynamicDampingFactor = 0.2;

  		this.minDistance = 0;
  		this.maxDistance = Infinity;

  		this.minZoom = 0;
  		this.maxZoom = Infinity;

  		this.keys = [ 'KeyA' /*A*/, 'KeyS' /*S*/, 'KeyD' /*D*/ ];

  		this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
  		this.state = _STATE$1.NONE;
  		this.keyState = _STATE$1.NONE;

  		this.target = new Vector3$1();

  		// internals

  		this._lastPosition = new Vector3$1();
  		this._lastZoom = 1;
  		this._touchZoomDistanceStart = 0;
  		this._touchZoomDistanceEnd = 0;
  		this._lastAngle = 0;

  		this._eye = new Vector3$1();

  		this._movePrev = new Vector2$1();
  		this._moveCurr = new Vector2$1();

  		this._lastAxis = new Vector3$1();

  		this._zoomStart = new Vector2$1();
  		this._zoomEnd = new Vector2$1();

  		this._panStart = new Vector2$1();
  		this._panEnd = new Vector2$1();

  		this._pointers = [];
  		this._pointerPositions = {};

  		// event listeners

  		this._onPointerMove = onPointerMove$2.bind( this );
  		this._onPointerDown = onPointerDown$2.bind( this );
  		this._onPointerUp = onPointerUp$2.bind( this );
  		this._onPointerCancel = onPointerCancel$1.bind( this );
  		this._onContextMenu = onContextMenu$2.bind( this );
  		this._onMouseWheel = onMouseWheel$1.bind( this );
  		this._onKeyDown = onKeyDown$2.bind( this );
  		this._onKeyUp = onKeyUp$1.bind( this );

  		this._onTouchStart = onTouchStart$1.bind( this );
  		this._onTouchMove = onTouchMove$1.bind( this );
  		this._onTouchEnd = onTouchEnd.bind( this );

  		this._onMouseDown = onMouseDown$1.bind( this );
  		this._onMouseMove = onMouseMove$1.bind( this );
  		this._onMouseUp = onMouseUp.bind( this );

  		// for reset

  		this._target0 = this.target.clone();
  		this._position0 = this.object.position.clone();
  		this._up0 = this.object.up.clone();
  		this._zoom0 = this.object.zoom;

  		if ( domElement !== null ) {

  			this.connect();

  			this.handleResize();

  		}

  		// force an update at start
  		this.update();

  	}

  	connect() {

  		window.addEventListener( 'keydown', this._onKeyDown );
  		window.addEventListener( 'keyup', this._onKeyUp );

  		this.domElement.addEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.addEventListener( 'pointercancel', this._onPointerCancel );
  		this.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );
  		this.domElement.addEventListener( 'contextmenu', this._onContextMenu );

  		this.domElement.style.touchAction = 'none'; // disable touch scroll

  	}

  	disconnect() {

  		window.removeEventListener( 'keydown', this._onKeyDown );
  		window.removeEventListener( 'keyup', this._onKeyUp );

  		this.domElement.removeEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.removeEventListener( 'pointerup', this._onPointerUp );
  		this.domElement.removeEventListener( 'pointercancel', this._onPointerCancel );
  		this.domElement.removeEventListener( 'wheel', this._onMouseWheel );
  		this.domElement.removeEventListener( 'contextmenu', this._onContextMenu );

  		this.domElement.style.touchAction = 'auto'; // disable touch scroll

  	}

  	dispose() {

  		this.disconnect();

  	}

  	handleResize() {

  		const box = this.domElement.getBoundingClientRect();
  		// adjustments come from similar code in the jquery offset() function
  		const d = this.domElement.ownerDocument.documentElement;

  		this.screen.left = box.left + window.pageXOffset - d.clientLeft;
  		this.screen.top = box.top + window.pageYOffset - d.clientTop;
  		this.screen.width = box.width;
  		this.screen.height = box.height;

  	}

  	update() {

  		this._eye.subVectors( this.object.position, this.target );

  		if ( ! this.noRotate ) {

  			this._rotateCamera();

  		}

  		if ( ! this.noZoom ) {

  			this._zoomCamera();

  		}

  		if ( ! this.noPan ) {

  			this._panCamera();

  		}

  		this.object.position.addVectors( this.target, this._eye );

  		if ( this.object.isPerspectiveCamera ) {

  			this._checkDistances();

  			this.object.lookAt( this.target );

  			if ( this._lastPosition.distanceToSquared( this.object.position ) > _EPS$2 ) {

  				this.dispatchEvent( _changeEvent$2 );

  				this._lastPosition.copy( this.object.position );

  			}

  		} else if ( this.object.isOrthographicCamera ) {

  			this.object.lookAt( this.target );

  			if ( this._lastPosition.distanceToSquared( this.object.position ) > _EPS$2 || this._lastZoom !== this.object.zoom ) {

  				this.dispatchEvent( _changeEvent$2 );

  				this._lastPosition.copy( this.object.position );
  				this._lastZoom = this.object.zoom;

  			}

  		} else {

  			console.warn( 'THREE.TrackballControls: Unsupported camera type.' );

  		}

  	}

  	reset() {

  		this.state = _STATE$1.NONE;
  		this.keyState = _STATE$1.NONE;

  		this.target.copy( this._target0 );
  		this.object.position.copy( this._position0 );
  		this.object.up.copy( this._up0 );
  		this.object.zoom = this._zoom0;

  		this.object.updateProjectionMatrix();

  		this._eye.subVectors( this.object.position, this.target );

  		this.object.lookAt( this.target );

  		this.dispatchEvent( _changeEvent$2 );

  		this._lastPosition.copy( this.object.position );
  		this._lastZoom = this.object.zoom;

  	}

  	_panCamera() {

  		_mouseChange.copy( this._panEnd ).sub( this._panStart );

  		if ( _mouseChange.lengthSq() ) {

  			if ( this.object.isOrthographicCamera ) {

  				const scale_x = ( this.object.right - this.object.left ) / this.object.zoom / this.domElement.clientWidth;
  				const scale_y = ( this.object.top - this.object.bottom ) / this.object.zoom / this.domElement.clientWidth;

  				_mouseChange.x *= scale_x;
  				_mouseChange.y *= scale_y;

  			}

  			_mouseChange.multiplyScalar( this._eye.length() * this.panSpeed );

  			_pan.copy( this._eye ).cross( this.object.up ).setLength( _mouseChange.x );
  			_pan.add( _objectUp.copy( this.object.up ).setLength( _mouseChange.y ) );

  			this.object.position.add( _pan );
  			this.target.add( _pan );

  			if ( this.staticMoving ) {

  				this._panStart.copy( this._panEnd );

  			} else {

  				this._panStart.add( _mouseChange.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.dynamicDampingFactor ) );

  			}

  		}

  	}

  	_rotateCamera() {

  		_moveDirection.set( this._moveCurr.x - this._movePrev.x, this._moveCurr.y - this._movePrev.y, 0 );
  		let angle = _moveDirection.length();

  		if ( angle ) {

  			this._eye.copy( this.object.position ).sub( this.target );

  			_eyeDirection.copy( this._eye ).normalize();
  			_objectUpDirection.copy( this.object.up ).normalize();
  			_objectSidewaysDirection.crossVectors( _objectUpDirection, _eyeDirection ).normalize();

  			_objectUpDirection.setLength( this._moveCurr.y - this._movePrev.y );
  			_objectSidewaysDirection.setLength( this._moveCurr.x - this._movePrev.x );

  			_moveDirection.copy( _objectUpDirection.add( _objectSidewaysDirection ) );

  			_axis.crossVectors( _moveDirection, this._eye ).normalize();

  			angle *= this.rotateSpeed;
  			_quaternion.setFromAxisAngle( _axis, angle );

  			this._eye.applyQuaternion( _quaternion );
  			this.object.up.applyQuaternion( _quaternion );

  			this._lastAxis.copy( _axis );
  			this._lastAngle = angle;

  		} else if ( ! this.staticMoving && this._lastAngle ) {

  			this._lastAngle *= Math.sqrt( 1.0 - this.dynamicDampingFactor );
  			this._eye.copy( this.object.position ).sub( this.target );
  			_quaternion.setFromAxisAngle( this._lastAxis, this._lastAngle );
  			this._eye.applyQuaternion( _quaternion );
  			this.object.up.applyQuaternion( _quaternion );

  		}

  		this._movePrev.copy( this._moveCurr );

  	}

  	_zoomCamera() {

  		let factor;

  		if ( this.state === _STATE$1.TOUCH_ZOOM_PAN ) {

  			factor = this._touchZoomDistanceStart / this._touchZoomDistanceEnd;
  			this._touchZoomDistanceStart = this._touchZoomDistanceEnd;

  			if ( this.object.isPerspectiveCamera ) {

  				this._eye.multiplyScalar( factor );

  			} else if ( this.object.isOrthographicCamera ) {

  				this.object.zoom = MathUtils$1.clamp( this.object.zoom / factor, this.minZoom, this.maxZoom );

  				if ( this._lastZoom !== this.object.zoom ) {

  					this.object.updateProjectionMatrix();

  				}

  			} else {

  				console.warn( 'THREE.TrackballControls: Unsupported camera type' );

  			}

  		} else {

  			factor = 1.0 + ( this._zoomEnd.y - this._zoomStart.y ) * this.zoomSpeed;

  			if ( factor !== 1.0 && factor > 0.0 ) {

  				if ( this.object.isPerspectiveCamera ) {

  					this._eye.multiplyScalar( factor );

  				} else if ( this.object.isOrthographicCamera ) {

  					this.object.zoom = MathUtils$1.clamp( this.object.zoom / factor, this.minZoom, this.maxZoom );

  					if ( this._lastZoom !== this.object.zoom ) {

  						this.object.updateProjectionMatrix();

  					}

  				} else {

  					console.warn( 'THREE.TrackballControls: Unsupported camera type' );

  				}

  			}

  			if ( this.staticMoving ) {

  				this._zoomStart.copy( this._zoomEnd );

  			} else {

  				this._zoomStart.y += ( this._zoomEnd.y - this._zoomStart.y ) * this.dynamicDampingFactor;

  			}

  		}

  	}

  	_getMouseOnScreen( pageX, pageY ) {

  		_v2.set(
  			( pageX - this.screen.left ) / this.screen.width,
  			( pageY - this.screen.top ) / this.screen.height
  		);

  		return _v2;

  	}

  	_getMouseOnCircle( pageX, pageY ) {

  		_v2.set(
  			( ( pageX - this.screen.width * 0.5 - this.screen.left ) / ( this.screen.width * 0.5 ) ),
  			( ( this.screen.height + 2 * ( this.screen.top - pageY ) ) / this.screen.width ) // screen.width intentional
  		);

  		return _v2;

  	}

  	_addPointer( event ) {

  		this._pointers.push( event );

  	}

  	_removePointer( event ) {

  		delete this._pointerPositions[ event.pointerId ];

  		for ( let i = 0; i < this._pointers.length; i ++ ) {

  			if ( this._pointers[ i ].pointerId == event.pointerId ) {

  				this._pointers.splice( i, 1 );
  				return;

  			}

  		}

  	}

  	_trackPointer( event ) {

  		let position = this._pointerPositions[ event.pointerId ];

  		if ( position === undefined ) {

  			position = new Vector2$1();
  			this._pointerPositions[ event.pointerId ] = position;

  		}

  		position.set( event.pageX, event.pageY );

  	}

  	_getSecondPointerPosition( event ) {

  		const pointer = ( event.pointerId === this._pointers[ 0 ].pointerId ) ? this._pointers[ 1 ] : this._pointers[ 0 ];

  		return this._pointerPositions[ pointer.pointerId ];

  	}

  	_checkDistances() {

  		if ( ! this.noZoom || ! this.noPan ) {

  			if ( this._eye.lengthSq() > this.maxDistance * this.maxDistance ) {

  				this.object.position.addVectors( this.target, this._eye.setLength( this.maxDistance ) );
  				this._zoomStart.copy( this._zoomEnd );

  			}

  			if ( this._eye.lengthSq() < this.minDistance * this.minDistance ) {

  				this.object.position.addVectors( this.target, this._eye.setLength( this.minDistance ) );
  				this._zoomStart.copy( this._zoomEnd );

  			}

  		}

  	}

  }

  function onPointerDown$2( event ) {

  	if ( this.enabled === false ) return;

  	if ( this._pointers.length === 0 ) {

  		this.domElement.setPointerCapture( event.pointerId );

  		this.domElement.addEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.addEventListener( 'pointerup', this._onPointerUp );

  	}

  	//

  	this._addPointer( event );

  	if ( event.pointerType === 'touch' ) {

  		this._onTouchStart( event );

  	} else {

  		this._onMouseDown( event );

  	}

  }

  function onPointerMove$2( event ) {

  	if ( this.enabled === false ) return;

  	if ( event.pointerType === 'touch' ) {

  		this._onTouchMove( event );

  	} else {

  		this._onMouseMove( event );

  	}

  }

  function onPointerUp$2( event ) {

  	if ( this.enabled === false ) return;

  	if ( event.pointerType === 'touch' ) {

  		this._onTouchEnd( event );

  	} else {

  		this._onMouseUp();

  	}

  	//

  	this._removePointer( event );

  	if ( this._pointers.length === 0 ) {

  		this.domElement.releasePointerCapture( event.pointerId );

  		this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.removeEventListener( 'pointerup', this._onPointerUp );

  	}

  }

  function onPointerCancel$1( event ) {

  	this._removePointer( event );

  }

  function onKeyUp$1() {

  	if ( this.enabled === false ) return;

  	this.keyState = _STATE$1.NONE;

  	window.addEventListener( 'keydown', this._onKeyDown );

  }

  function onKeyDown$2( event ) {

  	if ( this.enabled === false ) return;

  	window.removeEventListener( 'keydown', this._onKeyDown );

  	if ( this.keyState !== _STATE$1.NONE ) {

  		return;

  	} else if ( event.code === this.keys[ _STATE$1.ROTATE ] && ! this.noRotate ) {

  		this.keyState = _STATE$1.ROTATE;

  	} else if ( event.code === this.keys[ _STATE$1.ZOOM ] && ! this.noZoom ) {

  		this.keyState = _STATE$1.ZOOM;

  	} else if ( event.code === this.keys[ _STATE$1.PAN ] && ! this.noPan ) {

  		this.keyState = _STATE$1.PAN;

  	}

  }

  function onMouseDown$1( event ) {

  	let mouseAction;

  	switch ( event.button ) {

  		case 0:
  			mouseAction = this.mouseButtons.LEFT;
  			break;

  		case 1:
  			mouseAction = this.mouseButtons.MIDDLE;
  			break;

  		case 2:
  			mouseAction = this.mouseButtons.RIGHT;
  			break;

  		default:
  			mouseAction = - 1;

  	}

  	switch ( mouseAction ) {

  		case MOUSE.DOLLY:
  			this.state = _STATE$1.ZOOM;
  			break;

  		case MOUSE.ROTATE:
  			this.state = _STATE$1.ROTATE;
  			break;

  		case MOUSE.PAN:
  			this.state = _STATE$1.PAN;
  			break;

  		default:
  			this.state = _STATE$1.NONE;

  	}

  	const state = ( this.keyState !== _STATE$1.NONE ) ? this.keyState : this.state;

  	if ( state === _STATE$1.ROTATE && ! this.noRotate ) {

  		this._moveCurr.copy( this._getMouseOnCircle( event.pageX, event.pageY ) );
  		this._movePrev.copy( this._moveCurr );

  	} else if ( state === _STATE$1.ZOOM && ! this.noZoom ) {

  		this._zoomStart.copy( this._getMouseOnScreen( event.pageX, event.pageY ) );
  		this._zoomEnd.copy( this._zoomStart );

  	} else if ( state === _STATE$1.PAN && ! this.noPan ) {

  		this._panStart.copy( this._getMouseOnScreen( event.pageX, event.pageY ) );
  		this._panEnd.copy( this._panStart );

  	}

  	this.dispatchEvent( _startEvent$1 );

  }

  function onMouseMove$1( event ) {

  	const state = ( this.keyState !== _STATE$1.NONE ) ? this.keyState : this.state;

  	if ( state === _STATE$1.ROTATE && ! this.noRotate ) {

  		this._movePrev.copy( this._moveCurr );
  		this._moveCurr.copy( this._getMouseOnCircle( event.pageX, event.pageY ) );

  	} else if ( state === _STATE$1.ZOOM && ! this.noZoom ) {

  		this._zoomEnd.copy( this._getMouseOnScreen( event.pageX, event.pageY ) );

  	} else if ( state === _STATE$1.PAN && ! this.noPan ) {

  		this._panEnd.copy( this._getMouseOnScreen( event.pageX, event.pageY ) );

  	}

  }

  function onMouseUp() {

  	this.state = _STATE$1.NONE;

  	this.dispatchEvent( _endEvent$1 );

  }

  function onMouseWheel$1( event ) {

  	if ( this.enabled === false ) return;

  	if ( this.noZoom === true ) return;

  	event.preventDefault();

  	switch ( event.deltaMode ) {

  		case 2:
  			// Zoom in pages
  			this._zoomStart.y -= event.deltaY * 0.025;
  			break;

  		case 1:
  			// Zoom in lines
  			this._zoomStart.y -= event.deltaY * 0.01;
  			break;

  		default:
  			// undefined, 0, assume pixels
  			this._zoomStart.y -= event.deltaY * 0.00025;
  			break;

  	}

  	this.dispatchEvent( _startEvent$1 );
  	this.dispatchEvent( _endEvent$1 );

  }

  function onContextMenu$2( event ) {

  	if ( this.enabled === false ) return;

  	event.preventDefault();

  }

  function onTouchStart$1( event ) {

  	this._trackPointer( event );

  	switch ( this._pointers.length ) {

  		case 1:
  			this.state = _STATE$1.TOUCH_ROTATE;
  			this._moveCurr.copy( this._getMouseOnCircle( this._pointers[ 0 ].pageX, this._pointers[ 0 ].pageY ) );
  			this._movePrev.copy( this._moveCurr );
  			break;

  		default: // 2 or more
  			this.state = _STATE$1.TOUCH_ZOOM_PAN;
  			const dx = this._pointers[ 0 ].pageX - this._pointers[ 1 ].pageX;
  			const dy = this._pointers[ 0 ].pageY - this._pointers[ 1 ].pageY;
  			this._touchZoomDistanceEnd = this._touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );

  			const x = ( this._pointers[ 0 ].pageX + this._pointers[ 1 ].pageX ) / 2;
  			const y = ( this._pointers[ 0 ].pageY + this._pointers[ 1 ].pageY ) / 2;
  			this._panStart.copy( this._getMouseOnScreen( x, y ) );
  			this._panEnd.copy( this._panStart );
  			break;

  	}

  	this.dispatchEvent( _startEvent$1 );

  }

  function onTouchMove$1( event ) {

  	this._trackPointer( event );

  	switch ( this._pointers.length ) {

  		case 1:
  			this._movePrev.copy( this._moveCurr );
  			this._moveCurr.copy( this._getMouseOnCircle( event.pageX, event.pageY ) );
  			break;

  		default: // 2 or more

  			const position = this._getSecondPointerPosition( event );

  			const dx = event.pageX - position.x;
  			const dy = event.pageY - position.y;
  			this._touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );

  			const x = ( event.pageX + position.x ) / 2;
  			const y = ( event.pageY + position.y ) / 2;
  			this._panEnd.copy( this._getMouseOnScreen( x, y ) );
  			break;

  	}

  }

  function onTouchEnd( event ) {

  	switch ( this._pointers.length ) {

  		case 0:
  			this.state = _STATE$1.NONE;
  			break;

  		case 1:
  			this.state = _STATE$1.TOUCH_ROTATE;
  			this._moveCurr.copy( this._getMouseOnCircle( event.pageX, event.pageY ) );
  			this._movePrev.copy( this._moveCurr );
  			break;

  		case 2:
  			this.state = _STATE$1.TOUCH_ZOOM_PAN;

  			for ( let i = 0; i < this._pointers.length; i ++ ) {

  				if ( this._pointers[ i ].pointerId !== event.pointerId ) {

  					const position = this._pointerPositions[ this._pointers[ i ].pointerId ];
  					this._moveCurr.copy( this._getMouseOnCircle( position.x, position.y ) );
  					this._movePrev.copy( this._moveCurr );
  					break;

  				}

  			}

  			break;

  	}

  	this.dispatchEvent( _endEvent$1 );

  }

  // OrbitControls performs orbiting, dollying (zooming), and panning.
  // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
  //
  //    Orbit - left mouse / touch: one-finger move
  //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
  //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

  const _changeEvent$1 = { type: 'change' };
  const _startEvent = { type: 'start' };
  const _endEvent = { type: 'end' };
  const _ray = new Ray$1();
  const _plane = new Plane$1();
  const _TILT_LIMIT = Math.cos( 70 * MathUtils$1.DEG2RAD );

  const _v = new Vector3$1();
  const _twoPI = 2 * Math.PI;

  const _STATE = {
  	NONE: - 1,
  	ROTATE: 0,
  	DOLLY: 1,
  	PAN: 2,
  	TOUCH_ROTATE: 3,
  	TOUCH_PAN: 4,
  	TOUCH_DOLLY_PAN: 5,
  	TOUCH_DOLLY_ROTATE: 6
  };
  const _EPS$1 = 0.000001;

  class OrbitControls extends Controls {

  	constructor( object, domElement = null ) {

  		super( object, domElement );

  		this.state = _STATE.NONE;

  		// Set to false to disable this control
  		this.enabled = true;

  		// "target" sets the location of focus, where the object orbits around
  		this.target = new Vector3$1();

  		// Sets the 3D cursor (similar to Blender), from which the maxTargetRadius takes effect
  		this.cursor = new Vector3$1();

  		// How far you can dolly in and out ( PerspectiveCamera only )
  		this.minDistance = 0;
  		this.maxDistance = Infinity;

  		// How far you can zoom in and out ( OrthographicCamera only )
  		this.minZoom = 0;
  		this.maxZoom = Infinity;

  		// Limit camera target within a spherical area around the cursor
  		this.minTargetRadius = 0;
  		this.maxTargetRadius = Infinity;

  		// How far you can orbit vertically, upper and lower limits.
  		// Range is 0 to Math.PI radians.
  		this.minPolarAngle = 0; // radians
  		this.maxPolarAngle = Math.PI; // radians

  		// How far you can orbit horizontally, upper and lower limits.
  		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
  		this.minAzimuthAngle = - Infinity; // radians
  		this.maxAzimuthAngle = Infinity; // radians

  		// Set to true to enable damping (inertia)
  		// If damping is enabled, you must call controls.update() in your animation loop
  		this.enableDamping = false;
  		this.dampingFactor = 0.05;

  		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
  		// Set to false to disable zooming
  		this.enableZoom = true;
  		this.zoomSpeed = 1.0;

  		// Set to false to disable rotating
  		this.enableRotate = true;
  		this.rotateSpeed = 1.0;

  		// Set to false to disable panning
  		this.enablePan = true;
  		this.panSpeed = 1.0;
  		this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
  		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push
  		this.zoomToCursor = false;

  		// Set to true to automatically rotate around the target
  		// If auto-rotate is enabled, you must call controls.update() in your animation loop
  		this.autoRotate = false;
  		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

  		// The four arrow keys
  		this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };

  		// Mouse buttons
  		this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

  		// Touch fingers
  		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

  		// for reset
  		this.target0 = this.target.clone();
  		this.position0 = this.object.position.clone();
  		this.zoom0 = this.object.zoom;

  		// the target DOM element for key events
  		this._domElementKeyEvents = null;

  		// internals

  		this._lastPosition = new Vector3$1();
  		this._lastQuaternion = new Quaternion$1();
  		this._lastTargetPosition = new Vector3$1();

  		// so camera.up is the orbit axis
  		this._quat = new Quaternion$1().setFromUnitVectors( object.up, new Vector3$1( 0, 1, 0 ) );
  		this._quatInverse = this._quat.clone().invert();

  		// current position in spherical coordinates
  		this._spherical = new Spherical();
  		this._sphericalDelta = new Spherical();

  		this._scale = 1;
  		this._panOffset = new Vector3$1();

  		this._rotateStart = new Vector2$1();
  		this._rotateEnd = new Vector2$1();
  		this._rotateDelta = new Vector2$1();

  		this._panStart = new Vector2$1();
  		this._panEnd = new Vector2$1();
  		this._panDelta = new Vector2$1();

  		this._dollyStart = new Vector2$1();
  		this._dollyEnd = new Vector2$1();
  		this._dollyDelta = new Vector2$1();

  		this._dollyDirection = new Vector3$1();
  		this._mouse = new Vector2$1();
  		this._performCursorZoom = false;

  		this._pointers = [];
  		this._pointerPositions = {};

  		this._controlActive = false;

  		// event listeners

  		this._onPointerMove = onPointerMove$1.bind( this );
  		this._onPointerDown = onPointerDown$1.bind( this );
  		this._onPointerUp = onPointerUp$1.bind( this );
  		this._onContextMenu = onContextMenu$1.bind( this );
  		this._onMouseWheel = onMouseWheel.bind( this );
  		this._onKeyDown = onKeyDown$1.bind( this );

  		this._onTouchStart = onTouchStart.bind( this );
  		this._onTouchMove = onTouchMove.bind( this );

  		this._onMouseDown = onMouseDown.bind( this );
  		this._onMouseMove = onMouseMove.bind( this );

  		this._interceptControlDown = interceptControlDown.bind( this );
  		this._interceptControlUp = interceptControlUp.bind( this );

  		//

  		if ( this.domElement !== null ) {

  			this.connect();

  		}

  		this.update();

  	}

  	connect() {

  		this.domElement.addEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.addEventListener( 'pointercancel', this._onPointerUp );

  		this.domElement.addEventListener( 'contextmenu', this._onContextMenu );
  		this.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );

  		const document = this.domElement.getRootNode(); // offscreen canvas compatibility
  		document.addEventListener( 'keydown', this._interceptControlDown, { passive: true, capture: true } );

  		this.domElement.style.touchAction = 'none'; // disable touch scroll

  	}

  	disconnect() {

  		this.domElement.removeEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.removeEventListener( 'pointerup', this._onPointerUp );
  		this.domElement.removeEventListener( 'pointercancel', this._onPointerUp );

  		this.domElement.removeEventListener( 'wheel', this._onMouseWheel );
  		this.domElement.removeEventListener( 'contextmenu', this._onContextMenu );

  		this.stopListenToKeyEvents();

  		const document = this.domElement.getRootNode(); // offscreen canvas compatibility
  		document.removeEventListener( 'keydown', this._interceptControlDown, { capture: true } );

  		this.domElement.style.touchAction = 'auto';

  	}

  	dispose() {

  		this.disconnect();

  	}

  	getPolarAngle() {

  		return this._spherical.phi;

  	}

  	getAzimuthalAngle() {

  		return this._spherical.theta;

  	}

  	getDistance() {

  		return this.object.position.distanceTo( this.target );

  	}

  	listenToKeyEvents( domElement ) {

  		domElement.addEventListener( 'keydown', this._onKeyDown );
  		this._domElementKeyEvents = domElement;

  	}

  	stopListenToKeyEvents() {

  		if ( this._domElementKeyEvents !== null ) {

  			this._domElementKeyEvents.removeEventListener( 'keydown', this._onKeyDown );
  			this._domElementKeyEvents = null;

  		}

  	}

  	saveState() {

  		this.target0.copy( this.target );
  		this.position0.copy( this.object.position );
  		this.zoom0 = this.object.zoom;

  	}

  	reset() {

  		this.target.copy( this.target0 );
  		this.object.position.copy( this.position0 );
  		this.object.zoom = this.zoom0;

  		this.object.updateProjectionMatrix();
  		this.dispatchEvent( _changeEvent$1 );

  		this.update();

  		this.state = _STATE.NONE;

  	}

  	update( deltaTime = null ) {

  		const position = this.object.position;

  		_v.copy( position ).sub( this.target );

  		// rotate offset to "y-axis-is-up" space
  		_v.applyQuaternion( this._quat );

  		// angle from z-axis around y-axis
  		this._spherical.setFromVector3( _v );

  		if ( this.autoRotate && this.state === _STATE.NONE ) {

  			this._rotateLeft( this._getAutoRotationAngle( deltaTime ) );

  		}

  		if ( this.enableDamping ) {

  			this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;
  			this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;

  		} else {

  			this._spherical.theta += this._sphericalDelta.theta;
  			this._spherical.phi += this._sphericalDelta.phi;

  		}

  		// restrict theta to be between desired limits

  		let min = this.minAzimuthAngle;
  		let max = this.maxAzimuthAngle;

  		if ( isFinite( min ) && isFinite( max ) ) {

  			if ( min < - Math.PI ) min += _twoPI; else if ( min > Math.PI ) min -= _twoPI;

  			if ( max < - Math.PI ) max += _twoPI; else if ( max > Math.PI ) max -= _twoPI;

  			if ( min <= max ) {

  				this._spherical.theta = Math.max( min, Math.min( max, this._spherical.theta ) );

  			} else {

  				this._spherical.theta = ( this._spherical.theta > ( min + max ) / 2 ) ?
  					Math.max( min, this._spherical.theta ) :
  					Math.min( max, this._spherical.theta );

  			}

  		}

  		// restrict phi to be between desired limits
  		this._spherical.phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, this._spherical.phi ) );

  		this._spherical.makeSafe();


  		// move target to panned location

  		if ( this.enableDamping === true ) {

  			this.target.addScaledVector( this._panOffset, this.dampingFactor );

  		} else {

  			this.target.add( this._panOffset );

  		}

  		// Limit the target distance from the cursor to create a sphere around the center of interest
  		this.target.sub( this.cursor );
  		this.target.clampLength( this.minTargetRadius, this.maxTargetRadius );
  		this.target.add( this.cursor );

  		let zoomChanged = false;
  		// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera
  		// we adjust zoom later in these cases
  		if ( this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera ) {

  			this._spherical.radius = this._clampDistance( this._spherical.radius );

  		} else {

  			const prevRadius = this._spherical.radius;
  			this._spherical.radius = this._clampDistance( this._spherical.radius * this._scale );
  			zoomChanged = prevRadius != this._spherical.radius;

  		}

  		_v.setFromSpherical( this._spherical );

  		// rotate offset back to "camera-up-vector-is-up" space
  		_v.applyQuaternion( this._quatInverse );

  		position.copy( this.target ).add( _v );

  		this.object.lookAt( this.target );

  		if ( this.enableDamping === true ) {

  			this._sphericalDelta.theta *= ( 1 - this.dampingFactor );
  			this._sphericalDelta.phi *= ( 1 - this.dampingFactor );

  			this._panOffset.multiplyScalar( 1 - this.dampingFactor );

  		} else {

  			this._sphericalDelta.set( 0, 0, 0 );

  			this._panOffset.set( 0, 0, 0 );

  		}

  		// adjust camera position
  		if ( this.zoomToCursor && this._performCursorZoom ) {

  			let newRadius = null;
  			if ( this.object.isPerspectiveCamera ) {

  				// move the camera down the pointer ray
  				// this method avoids floating point error
  				const prevRadius = _v.length();
  				newRadius = this._clampDistance( prevRadius * this._scale );

  				const radiusDelta = prevRadius - newRadius;
  				this.object.position.addScaledVector( this._dollyDirection, radiusDelta );
  				this.object.updateMatrixWorld();

  				zoomChanged = !! radiusDelta;

  			} else if ( this.object.isOrthographicCamera ) {

  				// adjust the ortho camera position based on zoom changes
  				const mouseBefore = new Vector3$1( this._mouse.x, this._mouse.y, 0 );
  				mouseBefore.unproject( this.object );

  				const prevZoom = this.object.zoom;
  				this.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );
  				this.object.updateProjectionMatrix();

  				zoomChanged = prevZoom !== this.object.zoom;

  				const mouseAfter = new Vector3$1( this._mouse.x, this._mouse.y, 0 );
  				mouseAfter.unproject( this.object );

  				this.object.position.sub( mouseAfter ).add( mouseBefore );
  				this.object.updateMatrixWorld();

  				newRadius = _v.length();

  			} else {

  				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );
  				this.zoomToCursor = false;

  			}

  			// handle the placement of the target
  			if ( newRadius !== null ) {

  				if ( this.screenSpacePanning ) {

  					// position the orbit target in front of the new camera position
  					this.target.set( 0, 0, - 1 )
  						.transformDirection( this.object.matrix )
  						.multiplyScalar( newRadius )
  						.add( this.object.position );

  				} else {

  					// get the ray and translation plane to compute target
  					_ray.origin.copy( this.object.position );
  					_ray.direction.set( 0, 0, - 1 ).transformDirection( this.object.matrix );

  					// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid
  					// extremely large values
  					if ( Math.abs( this.object.up.dot( _ray.direction ) ) < _TILT_LIMIT ) {

  						this.object.lookAt( this.target );

  					} else {

  						_plane.setFromNormalAndCoplanarPoint( this.object.up, this.target );
  						_ray.intersectPlane( _plane, this.target );

  					}

  				}

  			}

  		} else if ( this.object.isOrthographicCamera ) {

  			const prevZoom = this.object.zoom;
  			this.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );

  			if ( prevZoom !== this.object.zoom ) {

  				this.object.updateProjectionMatrix();
  				zoomChanged = true;

  			}

  		}

  		this._scale = 1;
  		this._performCursorZoom = false;

  		// update condition is:
  		// min(camera displacement, camera rotation in radians)^2 > EPS
  		// using small-angle approximation cos(x/2) = 1 - x^2 / 8

  		if ( zoomChanged ||
  			this._lastPosition.distanceToSquared( this.object.position ) > _EPS$1 ||
  			8 * ( 1 - this._lastQuaternion.dot( this.object.quaternion ) ) > _EPS$1 ||
  			this._lastTargetPosition.distanceToSquared( this.target ) > _EPS$1 ) {

  			this.dispatchEvent( _changeEvent$1 );

  			this._lastPosition.copy( this.object.position );
  			this._lastQuaternion.copy( this.object.quaternion );
  			this._lastTargetPosition.copy( this.target );

  			return true;

  		}

  		return false;

  	}

  	_getAutoRotationAngle( deltaTime ) {

  		if ( deltaTime !== null ) {

  			return ( _twoPI / 60 * this.autoRotateSpeed ) * deltaTime;

  		} else {

  			return _twoPI / 60 / 60 * this.autoRotateSpeed;

  		}

  	}

  	_getZoomScale( delta ) {

  		const normalizedDelta = Math.abs( delta * 0.01 );
  		return Math.pow( 0.95, this.zoomSpeed * normalizedDelta );

  	}

  	_rotateLeft( angle ) {

  		this._sphericalDelta.theta -= angle;

  	}

  	_rotateUp( angle ) {

  		this._sphericalDelta.phi -= angle;

  	}

  	_panLeft( distance, objectMatrix ) {

  		_v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
  		_v.multiplyScalar( - distance );

  		this._panOffset.add( _v );

  	}

  	_panUp( distance, objectMatrix ) {

  		if ( this.screenSpacePanning === true ) {

  			_v.setFromMatrixColumn( objectMatrix, 1 );

  		} else {

  			_v.setFromMatrixColumn( objectMatrix, 0 );
  			_v.crossVectors( this.object.up, _v );

  		}

  		_v.multiplyScalar( distance );

  		this._panOffset.add( _v );

  	}

  	// deltaX and deltaY are in pixels; right and down are positive
  	_pan( deltaX, deltaY ) {

  		const element = this.domElement;

  		if ( this.object.isPerspectiveCamera ) {

  			// perspective
  			const position = this.object.position;
  			_v.copy( position ).sub( this.target );
  			let targetDistance = _v.length();

  			// half of the fov is center to top of screen
  			targetDistance *= Math.tan( ( this.object.fov / 2 ) * Math.PI / 180.0 );

  			// we use only clientHeight here so aspect ratio does not distort speed
  			this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.object.matrix );
  			this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.object.matrix );

  		} else if ( this.object.isOrthographicCamera ) {

  			// orthographic
  			this._panLeft( deltaX * ( this.object.right - this.object.left ) / this.object.zoom / element.clientWidth, this.object.matrix );
  			this._panUp( deltaY * ( this.object.top - this.object.bottom ) / this.object.zoom / element.clientHeight, this.object.matrix );

  		} else {

  			// camera neither orthographic nor perspective
  			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
  			this.enablePan = false;

  		}

  	}

  	_dollyOut( dollyScale ) {

  		if ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {

  			this._scale /= dollyScale;

  		} else {

  			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
  			this.enableZoom = false;

  		}

  	}

  	_dollyIn( dollyScale ) {

  		if ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {

  			this._scale *= dollyScale;

  		} else {

  			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
  			this.enableZoom = false;

  		}

  	}

  	_updateZoomParameters( x, y ) {

  		if ( ! this.zoomToCursor ) {

  			return;

  		}

  		this._performCursorZoom = true;

  		const rect = this.domElement.getBoundingClientRect();
  		const dx = x - rect.left;
  		const dy = y - rect.top;
  		const w = rect.width;
  		const h = rect.height;

  		this._mouse.x = ( dx / w ) * 2 - 1;
  		this._mouse.y = - ( dy / h ) * 2 + 1;

  		this._dollyDirection.set( this._mouse.x, this._mouse.y, 1 ).unproject( this.object ).sub( this.object.position ).normalize();

  	}

  	_clampDistance( dist ) {

  		return Math.max( this.minDistance, Math.min( this.maxDistance, dist ) );

  	}

  	//
  	// event callbacks - update the object state
  	//

  	_handleMouseDownRotate( event ) {

  		this._rotateStart.set( event.clientX, event.clientY );

  	}

  	_handleMouseDownDolly( event ) {

  		this._updateZoomParameters( event.clientX, event.clientX );
  		this._dollyStart.set( event.clientX, event.clientY );

  	}

  	_handleMouseDownPan( event ) {

  		this._panStart.set( event.clientX, event.clientY );

  	}

  	_handleMouseMoveRotate( event ) {

  		this._rotateEnd.set( event.clientX, event.clientY );

  		this._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );

  		const element = this.domElement;

  		this._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height

  		this._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );

  		this._rotateStart.copy( this._rotateEnd );

  		this.update();

  	}

  	_handleMouseMoveDolly( event ) {

  		this._dollyEnd.set( event.clientX, event.clientY );

  		this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );

  		if ( this._dollyDelta.y > 0 ) {

  			this._dollyOut( this._getZoomScale( this._dollyDelta.y ) );

  		} else if ( this._dollyDelta.y < 0 ) {

  			this._dollyIn( this._getZoomScale( this._dollyDelta.y ) );

  		}

  		this._dollyStart.copy( this._dollyEnd );

  		this.update();

  	}

  	_handleMouseMovePan( event ) {

  		this._panEnd.set( event.clientX, event.clientY );

  		this._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );

  		this._pan( this._panDelta.x, this._panDelta.y );

  		this._panStart.copy( this._panEnd );

  		this.update();

  	}

  	_handleMouseWheel( event ) {

  		this._updateZoomParameters( event.clientX, event.clientY );

  		if ( event.deltaY < 0 ) {

  			this._dollyIn( this._getZoomScale( event.deltaY ) );

  		} else if ( event.deltaY > 0 ) {

  			this._dollyOut( this._getZoomScale( event.deltaY ) );

  		}

  		this.update();

  	}

  	_handleKeyDown( event ) {

  		let needsUpdate = false;

  		switch ( event.code ) {

  			case this.keys.UP:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					this._rotateUp( _twoPI * this.rotateSpeed / this.domElement.clientHeight );

  				} else {

  					this._pan( 0, this.keyPanSpeed );

  				}

  				needsUpdate = true;
  				break;

  			case this.keys.BOTTOM:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					this._rotateUp( - _twoPI * this.rotateSpeed / this.domElement.clientHeight );

  				} else {

  					this._pan( 0, - this.keyPanSpeed );

  				}

  				needsUpdate = true;
  				break;

  			case this.keys.LEFT:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					this._rotateLeft( _twoPI * this.rotateSpeed / this.domElement.clientHeight );

  				} else {

  					this._pan( this.keyPanSpeed, 0 );

  				}

  				needsUpdate = true;
  				break;

  			case this.keys.RIGHT:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					this._rotateLeft( - _twoPI * this.rotateSpeed / this.domElement.clientHeight );

  				} else {

  					this._pan( - this.keyPanSpeed, 0 );

  				}

  				needsUpdate = true;
  				break;

  		}

  		if ( needsUpdate ) {

  			// prevent the browser from scrolling on cursor keys
  			event.preventDefault();

  			this.update();

  		}


  	}

  	_handleTouchStartRotate( event ) {

  		if ( this._pointers.length === 1 ) {

  			this._rotateStart.set( event.pageX, event.pageY );

  		} else {

  			const position = this._getSecondPointerPosition( event );

  			const x = 0.5 * ( event.pageX + position.x );
  			const y = 0.5 * ( event.pageY + position.y );

  			this._rotateStart.set( x, y );

  		}

  	}

  	_handleTouchStartPan( event ) {

  		if ( this._pointers.length === 1 ) {

  			this._panStart.set( event.pageX, event.pageY );

  		} else {

  			const position = this._getSecondPointerPosition( event );

  			const x = 0.5 * ( event.pageX + position.x );
  			const y = 0.5 * ( event.pageY + position.y );

  			this._panStart.set( x, y );

  		}

  	}

  	_handleTouchStartDolly( event ) {

  		const position = this._getSecondPointerPosition( event );

  		const dx = event.pageX - position.x;
  		const dy = event.pageY - position.y;

  		const distance = Math.sqrt( dx * dx + dy * dy );

  		this._dollyStart.set( 0, distance );

  	}

  	_handleTouchStartDollyPan( event ) {

  		if ( this.enableZoom ) this._handleTouchStartDolly( event );

  		if ( this.enablePan ) this._handleTouchStartPan( event );

  	}

  	_handleTouchStartDollyRotate( event ) {

  		if ( this.enableZoom ) this._handleTouchStartDolly( event );

  		if ( this.enableRotate ) this._handleTouchStartRotate( event );

  	}

  	_handleTouchMoveRotate( event ) {

  		if ( this._pointers.length == 1 ) {

  			this._rotateEnd.set( event.pageX, event.pageY );

  		} else {

  			const position = this._getSecondPointerPosition( event );

  			const x = 0.5 * ( event.pageX + position.x );
  			const y = 0.5 * ( event.pageY + position.y );

  			this._rotateEnd.set( x, y );

  		}

  		this._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );

  		const element = this.domElement;

  		this._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height

  		this._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );

  		this._rotateStart.copy( this._rotateEnd );

  	}

  	_handleTouchMovePan( event ) {

  		if ( this._pointers.length === 1 ) {

  			this._panEnd.set( event.pageX, event.pageY );

  		} else {

  			const position = this._getSecondPointerPosition( event );

  			const x = 0.5 * ( event.pageX + position.x );
  			const y = 0.5 * ( event.pageY + position.y );

  			this._panEnd.set( x, y );

  		}

  		this._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );

  		this._pan( this._panDelta.x, this._panDelta.y );

  		this._panStart.copy( this._panEnd );

  	}

  	_handleTouchMoveDolly( event ) {

  		const position = this._getSecondPointerPosition( event );

  		const dx = event.pageX - position.x;
  		const dy = event.pageY - position.y;

  		const distance = Math.sqrt( dx * dx + dy * dy );

  		this._dollyEnd.set( 0, distance );

  		this._dollyDelta.set( 0, Math.pow( this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed ) );

  		this._dollyOut( this._dollyDelta.y );

  		this._dollyStart.copy( this._dollyEnd );

  		const centerX = ( event.pageX + position.x ) * 0.5;
  		const centerY = ( event.pageY + position.y ) * 0.5;

  		this._updateZoomParameters( centerX, centerY );

  	}

  	_handleTouchMoveDollyPan( event ) {

  		if ( this.enableZoom ) this._handleTouchMoveDolly( event );

  		if ( this.enablePan ) this._handleTouchMovePan( event );

  	}

  	_handleTouchMoveDollyRotate( event ) {

  		if ( this.enableZoom ) this._handleTouchMoveDolly( event );

  		if ( this.enableRotate ) this._handleTouchMoveRotate( event );

  	}

  	// pointers

  	_addPointer( event ) {

  		this._pointers.push( event.pointerId );

  	}

  	_removePointer( event ) {

  		delete this._pointerPositions[ event.pointerId ];

  		for ( let i = 0; i < this._pointers.length; i ++ ) {

  			if ( this._pointers[ i ] == event.pointerId ) {

  				this._pointers.splice( i, 1 );
  				return;

  			}

  		}

  	}

  	_isTrackingPointer( event ) {

  		for ( let i = 0; i < this._pointers.length; i ++ ) {

  			if ( this._pointers[ i ] == event.pointerId ) return true;

  		}

  		return false;

  	}

  	_trackPointer( event ) {

  		let position = this._pointerPositions[ event.pointerId ];

  		if ( position === undefined ) {

  			position = new Vector2$1();
  			this._pointerPositions[ event.pointerId ] = position;

  		}

  		position.set( event.pageX, event.pageY );

  	}

  	_getSecondPointerPosition( event ) {

  		const pointerId = ( event.pointerId === this._pointers[ 0 ] ) ? this._pointers[ 1 ] : this._pointers[ 0 ];

  		return this._pointerPositions[ pointerId ];

  	}

  	//

  	_customWheelEvent( event ) {

  		const mode = event.deltaMode;

  		// minimal wheel event altered to meet delta-zoom demand
  		const newEvent = {
  			clientX: event.clientX,
  			clientY: event.clientY,
  			deltaY: event.deltaY,
  		};

  		switch ( mode ) {

  			case 1: // LINE_MODE
  				newEvent.deltaY *= 16;
  				break;

  			case 2: // PAGE_MODE
  				newEvent.deltaY *= 100;
  				break;

  		}

  		// detect if event was triggered by pinching
  		if ( event.ctrlKey && ! this._controlActive ) {

  			newEvent.deltaY *= 10;

  		}

  		return newEvent;

  	}

  }

  function onPointerDown$1( event ) {

  	if ( this.enabled === false ) return;

  	if ( this._pointers.length === 0 ) {

  		this.domElement.setPointerCapture( event.pointerId );

  		this.domElement.addEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.addEventListener( 'pointerup', this._onPointerUp );

  	}

  	//

  	if ( this._isTrackingPointer( event ) ) return;

  	//

  	this._addPointer( event );

  	if ( event.pointerType === 'touch' ) {

  		this._onTouchStart( event );

  	} else {

  		this._onMouseDown( event );

  	}

  }

  function onPointerMove$1( event ) {

  	if ( this.enabled === false ) return;

  	if ( event.pointerType === 'touch' ) {

  		this._onTouchMove( event );

  	} else {

  		this._onMouseMove( event );

  	}

  }

  function onPointerUp$1( event ) {

  	this._removePointer( event );

  	switch ( this._pointers.length ) {

  		case 0:

  			this.domElement.releasePointerCapture( event.pointerId );

  			this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  			this.domElement.removeEventListener( 'pointerup', this._onPointerUp );

  			this.dispatchEvent( _endEvent );

  			this.state = _STATE.NONE;

  			break;

  		case 1:

  			const pointerId = this._pointers[ 0 ];
  			const position = this._pointerPositions[ pointerId ];

  			// minimal placeholder event - allows state correction on pointer-up
  			this._onTouchStart( { pointerId: pointerId, pageX: position.x, pageY: position.y } );

  			break;

  	}

  }

  function onMouseDown( event ) {

  	let mouseAction;

  	switch ( event.button ) {

  		case 0:

  			mouseAction = this.mouseButtons.LEFT;
  			break;

  		case 1:

  			mouseAction = this.mouseButtons.MIDDLE;
  			break;

  		case 2:

  			mouseAction = this.mouseButtons.RIGHT;
  			break;

  		default:

  			mouseAction = - 1;

  	}

  	switch ( mouseAction ) {

  		case MOUSE.DOLLY:

  			if ( this.enableZoom === false ) return;

  			this._handleMouseDownDolly( event );

  			this.state = _STATE.DOLLY;

  			break;

  		case MOUSE.ROTATE:

  			if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  				if ( this.enablePan === false ) return;

  				this._handleMouseDownPan( event );

  				this.state = _STATE.PAN;

  			} else {

  				if ( this.enableRotate === false ) return;

  				this._handleMouseDownRotate( event );

  				this.state = _STATE.ROTATE;

  			}

  			break;

  		case MOUSE.PAN:

  			if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  				if ( this.enableRotate === false ) return;

  				this._handleMouseDownRotate( event );

  				this.state = _STATE.ROTATE;

  			} else {

  				if ( this.enablePan === false ) return;

  				this._handleMouseDownPan( event );

  				this.state = _STATE.PAN;

  			}

  			break;

  		default:

  			this.state = _STATE.NONE;

  	}

  	if ( this.state !== _STATE.NONE ) {

  		this.dispatchEvent( _startEvent );

  	}

  }

  function onMouseMove( event ) {

  	switch ( this.state ) {

  		case _STATE.ROTATE:

  			if ( this.enableRotate === false ) return;

  			this._handleMouseMoveRotate( event );

  			break;

  		case _STATE.DOLLY:

  			if ( this.enableZoom === false ) return;

  			this._handleMouseMoveDolly( event );

  			break;

  		case _STATE.PAN:

  			if ( this.enablePan === false ) return;

  			this._handleMouseMovePan( event );

  			break;

  	}

  }

  function onMouseWheel( event ) {

  	if ( this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE ) return;

  	event.preventDefault();

  	this.dispatchEvent( _startEvent );

  	this._handleMouseWheel( this._customWheelEvent( event ) );

  	this.dispatchEvent( _endEvent );

  }

  function onKeyDown$1( event ) {

  	if ( this.enabled === false || this.enablePan === false ) return;

  	this._handleKeyDown( event );

  }

  function onTouchStart( event ) {

  	this._trackPointer( event );

  	switch ( this._pointers.length ) {

  		case 1:

  			switch ( this.touches.ONE ) {

  				case TOUCH.ROTATE:

  					if ( this.enableRotate === false ) return;

  					this._handleTouchStartRotate( event );

  					this.state = _STATE.TOUCH_ROTATE;

  					break;

  				case TOUCH.PAN:

  					if ( this.enablePan === false ) return;

  					this._handleTouchStartPan( event );

  					this.state = _STATE.TOUCH_PAN;

  					break;

  				default:

  					this.state = _STATE.NONE;

  			}

  			break;

  		case 2:

  			switch ( this.touches.TWO ) {

  				case TOUCH.DOLLY_PAN:

  					if ( this.enableZoom === false && this.enablePan === false ) return;

  					this._handleTouchStartDollyPan( event );

  					this.state = _STATE.TOUCH_DOLLY_PAN;

  					break;

  				case TOUCH.DOLLY_ROTATE:

  					if ( this.enableZoom === false && this.enableRotate === false ) return;

  					this._handleTouchStartDollyRotate( event );

  					this.state = _STATE.TOUCH_DOLLY_ROTATE;

  					break;

  				default:

  					this.state = _STATE.NONE;

  			}

  			break;

  		default:

  			this.state = _STATE.NONE;

  	}

  	if ( this.state !== _STATE.NONE ) {

  		this.dispatchEvent( _startEvent );

  	}

  }

  function onTouchMove( event ) {

  	this._trackPointer( event );

  	switch ( this.state ) {

  		case _STATE.TOUCH_ROTATE:

  			if ( this.enableRotate === false ) return;

  			this._handleTouchMoveRotate( event );

  			this.update();

  			break;

  		case _STATE.TOUCH_PAN:

  			if ( this.enablePan === false ) return;

  			this._handleTouchMovePan( event );

  			this.update();

  			break;

  		case _STATE.TOUCH_DOLLY_PAN:

  			if ( this.enableZoom === false && this.enablePan === false ) return;

  			this._handleTouchMoveDollyPan( event );

  			this.update();

  			break;

  		case _STATE.TOUCH_DOLLY_ROTATE:

  			if ( this.enableZoom === false && this.enableRotate === false ) return;

  			this._handleTouchMoveDollyRotate( event );

  			this.update();

  			break;

  		default:

  			this.state = _STATE.NONE;

  	}

  }

  function onContextMenu$1( event ) {

  	if ( this.enabled === false ) return;

  	event.preventDefault();

  }

  function interceptControlDown( event ) {

  	if ( event.key === 'Control' ) {

  		this._controlActive = true;

  		const document = this.domElement.getRootNode(); // offscreen canvas compatibility

  		document.addEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );

  	}

  }

  function interceptControlUp( event ) {

  	if ( event.key === 'Control' ) {

  		this._controlActive = false;

  		const document = this.domElement.getRootNode(); // offscreen canvas compatibility

  		document.removeEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );

  	}

  }

  const _changeEvent = { type: 'change' };

  const _EPS = 0.000001;
  const _tmpQuaternion = new Quaternion$1();

  class FlyControls extends Controls {

  	constructor( object, domElement = null ) {

  		super( object, domElement );

  		this.movementSpeed = 1.0;
  		this.rollSpeed = 0.005;

  		this.dragToLook = false;
  		this.autoForward = false;

  		// internals

  		this._moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };
  		this._moveVector = new Vector3$1( 0, 0, 0 );
  		this._rotationVector = new Vector3$1( 0, 0, 0 );
  		this._lastQuaternion = new Quaternion$1();
  		this._lastPosition = new Vector3$1();
  		this._status = 0;

  		// event listeners

  		this._onKeyDown = onKeyDown.bind( this );
  		this._onKeyUp = onKeyUp.bind( this );
  		this._onPointerMove = onPointerMove.bind( this );
  		this._onPointerDown = onPointerDown.bind( this );
  		this._onPointerUp = onPointerUp.bind( this );
  		this._onPointerCancel = onPointerCancel.bind( this );
  		this._onContextMenu = onContextMenu.bind( this );

  		//

  		if ( domElement !== null ) {

  			this.connect();

  		}

  	}

  	connect() {

  		window.addEventListener( 'keydown', this._onKeyDown );
  		window.addEventListener( 'keyup', this._onKeyUp );

  		this.domElement.addEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.addEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.addEventListener( 'pointerup', this._onPointerUp );
  		this.domElement.addEventListener( 'pointercancel', this._onPointerCancel );
  		this.domElement.addEventListener( 'contextmenu', this._onContextMenu );

  	}

  	disconnect() {

  		window.removeEventListener( 'keydown', this._onKeyDown );
  		window.removeEventListener( 'keyup', this._onKeyUp );

  		this.domElement.removeEventListener( 'pointermove', this._onPointerMove );
  		this.domElement.removeEventListener( 'pointerdown', this._onPointerDown );
  		this.domElement.removeEventListener( 'pointerup', this._onPointerUp );
  		this.domElement.removeEventListener( 'pointercancel', this._onPointerCancel );
  		this.domElement.removeEventListener( 'contextmenu', this._onContextMenu );

  	}

  	dispose() {

  		this.disconnect();

  	}

  	update( delta ) {

  		if ( this.enabled === false ) return;

  		const object = this.object;

  		const moveMult = delta * this.movementSpeed;
  		const rotMult = delta * this.rollSpeed;

  		object.translateX( this._moveVector.x * moveMult );
  		object.translateY( this._moveVector.y * moveMult );
  		object.translateZ( this._moveVector.z * moveMult );

  		_tmpQuaternion.set( this._rotationVector.x * rotMult, this._rotationVector.y * rotMult, this._rotationVector.z * rotMult, 1 ).normalize();
  		object.quaternion.multiply( _tmpQuaternion );

  		if (
  			this._lastPosition.distanceToSquared( object.position ) > _EPS ||
  			8 * ( 1 - this._lastQuaternion.dot( object.quaternion ) ) > _EPS
  		) {

  			this.dispatchEvent( _changeEvent );
  			this._lastQuaternion.copy( object.quaternion );
  			this._lastPosition.copy( object.position );

  		}

  	}

  	// private

  	_updateMovementVector() {

  		const forward = ( this._moveState.forward || ( this.autoForward && ! this._moveState.back ) ) ? 1 : 0;

  		this._moveVector.x = ( - this._moveState.left + this._moveState.right );
  		this._moveVector.y = ( - this._moveState.down + this._moveState.up );
  		this._moveVector.z = ( - forward + this._moveState.back );

  		//console.log( 'move:', [ this._moveVector.x, this._moveVector.y, this._moveVector.z ] );

  	}

  	_updateRotationVector() {

  		this._rotationVector.x = ( - this._moveState.pitchDown + this._moveState.pitchUp );
  		this._rotationVector.y = ( - this._moveState.yawRight + this._moveState.yawLeft );
  		this._rotationVector.z = ( - this._moveState.rollRight + this._moveState.rollLeft );

  		//console.log( 'rotate:', [ this._rotationVector.x, this._rotationVector.y, this._rotationVector.z ] );

  	}

  	_getContainerDimensions() {

  		if ( this.domElement != document ) {

  			return {
  				size: [ this.domElement.offsetWidth, this.domElement.offsetHeight ],
  				offset: [ this.domElement.offsetLeft, this.domElement.offsetTop ]
  			};

  		} else {

  			return {
  				size: [ window.innerWidth, window.innerHeight ],
  				offset: [ 0, 0 ]
  			};

  		}

  	}

  }

  function onKeyDown( event ) {

  	if ( event.altKey || this.enabled === false ) {

  		return;

  	}

  	switch ( event.code ) {

  		case 'ShiftLeft':
  		case 'ShiftRight': this.movementSpeedMultiplier = .1; break;

  		case 'KeyW': this._moveState.forward = 1; break;
  		case 'KeyS': this._moveState.back = 1; break;

  		case 'KeyA': this._moveState.left = 1; break;
  		case 'KeyD': this._moveState.right = 1; break;

  		case 'KeyR': this._moveState.up = 1; break;
  		case 'KeyF': this._moveState.down = 1; break;

  		case 'ArrowUp': this._moveState.pitchUp = 1; break;
  		case 'ArrowDown': this._moveState.pitchDown = 1; break;

  		case 'ArrowLeft': this._moveState.yawLeft = 1; break;
  		case 'ArrowRight': this._moveState.yawRight = 1; break;

  		case 'KeyQ': this._moveState.rollLeft = 1; break;
  		case 'KeyE': this._moveState.rollRight = 1; break;

  	}

  	this._updateMovementVector();
  	this._updateRotationVector();

  }

  function onKeyUp( event ) {

  	if ( this.enabled === false ) return;

  	switch ( event.code ) {

  		case 'ShiftLeft':
  		case 'ShiftRight': this.movementSpeedMultiplier = 1; break;

  		case 'KeyW': this._moveState.forward = 0; break;
  		case 'KeyS': this._moveState.back = 0; break;

  		case 'KeyA': this._moveState.left = 0; break;
  		case 'KeyD': this._moveState.right = 0; break;

  		case 'KeyR': this._moveState.up = 0; break;
  		case 'KeyF': this._moveState.down = 0; break;

  		case 'ArrowUp': this._moveState.pitchUp = 0; break;
  		case 'ArrowDown': this._moveState.pitchDown = 0; break;

  		case 'ArrowLeft': this._moveState.yawLeft = 0; break;
  		case 'ArrowRight': this._moveState.yawRight = 0; break;

  		case 'KeyQ': this._moveState.rollLeft = 0; break;
  		case 'KeyE': this._moveState.rollRight = 0; break;

  	}

  	this._updateMovementVector();
  	this._updateRotationVector();

  }

  function onPointerDown( event ) {

  	if ( this.enabled === false ) return;

  	if ( this.dragToLook ) {

  		this._status ++;

  	} else {

  		switch ( event.button ) {

  			case 0: this._moveState.forward = 1; break;
  			case 2: this._moveState.back = 1; break;

  		}

  		this._updateMovementVector();

  	}

  }

  function onPointerMove( event ) {

  	if ( this.enabled === false ) return;

  	if ( ! this.dragToLook || this._status > 0 ) {

  		const container = this._getContainerDimensions();
  		const halfWidth = container.size[ 0 ] / 2;
  		const halfHeight = container.size[ 1 ] / 2;

  		this._moveState.yawLeft = - ( ( event.pageX - container.offset[ 0 ] ) - halfWidth ) / halfWidth;
  		this._moveState.pitchDown = ( ( event.pageY - container.offset[ 1 ] ) - halfHeight ) / halfHeight;

  		this._updateRotationVector();

  	}

  }

  function onPointerUp( event ) {

  	if ( this.enabled === false ) return;

  	if ( this.dragToLook ) {

  		this._status --;

  		this._moveState.yawLeft = this._moveState.pitchDown = 0;

  	} else {

  		switch ( event.button ) {

  			case 0: this._moveState.forward = 0; break;
  			case 2: this._moveState.back = 0; break;

  		}

  		this._updateMovementVector();

  	}

  	this._updateRotationVector();

  }

  function onPointerCancel() {

  	if ( this.enabled === false ) return;

  	if ( this.dragToLook ) {

  		this._status = 0;

  		this._moveState.yawLeft = this._moveState.pitchDown = 0;

  	} else {

  		this._moveState.forward = 0;
  		this._moveState.back = 0;

  		this._updateMovementVector();

  	}

  	this._updateRotationVector();

  }

  function onContextMenu( event ) {

  	if ( this.enabled === false ) return;

  	event.preventDefault();

  }

  /**
   * Full-screen textured quad shader
   */

  const CopyShader = {

  	name: 'CopyShader',

  	uniforms: {

  		'tDiffuse': { value: null },
  		'opacity': { value: 1.0 }

  	},

  	vertexShader: /* glsl */`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,

  	fragmentShader: /* glsl */`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`

  };

  class Pass {

  	constructor() {

  		this.isPass = true;

  		// if set to true, the pass is processed by the composer
  		this.enabled = true;

  		// if set to true, the pass indicates to swap read and write buffer after rendering
  		this.needsSwap = true;

  		// if set to true, the pass clears its buffer before rendering
  		this.clear = false;

  		// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
  		this.renderToScreen = false;

  	}

  	setSize( /* width, height */ ) {}

  	render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {

  		console.error( 'THREE.Pass: .render() must be implemented in derived pass.' );

  	}

  	dispose() {}

  }

  // Helper for passes that need to fill the viewport with a single quad.

  const _camera = new OrthographicCamera$1( - 1, 1, 1, - 1, 0, 1 );

  // https://github.com/mrdoob/three.js/pull/21358

  class FullscreenTriangleGeometry extends BufferGeometry$1 {

  	constructor() {

  		super();

  		this.setAttribute( 'position', new Float32BufferAttribute$1( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute$1( [ 0, 2, 0, 0, 2, 0 ], 2 ) );

  	}

  }

  const _geometry = new FullscreenTriangleGeometry();

  class FullScreenQuad {

  	constructor( material ) {

  		this._mesh = new Mesh$1( _geometry, material );

  	}

  	dispose() {

  		this._mesh.geometry.dispose();

  	}

  	render( renderer ) {

  		renderer.render( this._mesh, _camera );

  	}

  	get material() {

  		return this._mesh.material;

  	}

  	set material( value ) {

  		this._mesh.material = value;

  	}

  }

  class ShaderPass extends Pass {

  	constructor( shader, textureID ) {

  		super();

  		this.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';

  		if ( shader instanceof ShaderMaterial$1 ) {

  			this.uniforms = shader.uniforms;

  			this.material = shader;

  		} else if ( shader ) {

  			this.uniforms = UniformsUtils.clone( shader.uniforms );

  			this.material = new ShaderMaterial$1( {

  				name: ( shader.name !== undefined ) ? shader.name : 'unspecified',
  				defines: Object.assign( {}, shader.defines ),
  				uniforms: this.uniforms,
  				vertexShader: shader.vertexShader,
  				fragmentShader: shader.fragmentShader

  			} );

  		}

  		this.fsQuad = new FullScreenQuad( this.material );

  	}

  	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

  		if ( this.uniforms[ this.textureID ] ) {

  			this.uniforms[ this.textureID ].value = readBuffer.texture;

  		}

  		this.fsQuad.material = this.material;

  		if ( this.renderToScreen ) {

  			renderer.setRenderTarget( null );
  			this.fsQuad.render( renderer );

  		} else {

  			renderer.setRenderTarget( writeBuffer );
  			// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
  			if ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
  			this.fsQuad.render( renderer );

  		}

  	}

  	dispose() {

  		this.material.dispose();

  		this.fsQuad.dispose();

  	}

  }

  class MaskPass extends Pass {

  	constructor( scene, camera ) {

  		super();

  		this.scene = scene;
  		this.camera = camera;

  		this.clear = true;
  		this.needsSwap = false;

  		this.inverse = false;

  	}

  	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

  		const context = renderer.getContext();
  		const state = renderer.state;

  		// don't update color or depth

  		state.buffers.color.setMask( false );
  		state.buffers.depth.setMask( false );

  		// lock buffers

  		state.buffers.color.setLocked( true );
  		state.buffers.depth.setLocked( true );

  		// set up stencil

  		let writeValue, clearValue;

  		if ( this.inverse ) {

  			writeValue = 0;
  			clearValue = 1;

  		} else {

  			writeValue = 1;
  			clearValue = 0;

  		}

  		state.buffers.stencil.setTest( true );
  		state.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );
  		state.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );
  		state.buffers.stencil.setClear( clearValue );
  		state.buffers.stencil.setLocked( true );

  		// draw into the stencil buffer

  		renderer.setRenderTarget( readBuffer );
  		if ( this.clear ) renderer.clear();
  		renderer.render( this.scene, this.camera );

  		renderer.setRenderTarget( writeBuffer );
  		if ( this.clear ) renderer.clear();
  		renderer.render( this.scene, this.camera );

  		// unlock color and depth buffer and make them writable for subsequent rendering/clearing

  		state.buffers.color.setLocked( false );
  		state.buffers.depth.setLocked( false );

  		state.buffers.color.setMask( true );
  		state.buffers.depth.setMask( true );

  		// only render where stencil is set to 1

  		state.buffers.stencil.setLocked( false );
  		state.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1
  		state.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );
  		state.buffers.stencil.setLocked( true );

  	}

  }

  class ClearMaskPass extends Pass {

  	constructor() {

  		super();

  		this.needsSwap = false;

  	}

  	render( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {

  		renderer.state.buffers.stencil.setLocked( false );
  		renderer.state.buffers.stencil.setTest( false );

  	}

  }

  class EffectComposer {

  	constructor( renderer, renderTarget ) {

  		this.renderer = renderer;

  		this._pixelRatio = renderer.getPixelRatio();

  		if ( renderTarget === undefined ) {

  			const size = renderer.getSize( new Vector2$1() );
  			this._width = size.width;
  			this._height = size.height;

  			renderTarget = new WebGLRenderTarget$1( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType$1 } );
  			renderTarget.texture.name = 'EffectComposer.rt1';

  		} else {

  			this._width = renderTarget.width;
  			this._height = renderTarget.height;

  		}

  		this.renderTarget1 = renderTarget;
  		this.renderTarget2 = renderTarget.clone();
  		this.renderTarget2.texture.name = 'EffectComposer.rt2';

  		this.writeBuffer = this.renderTarget1;
  		this.readBuffer = this.renderTarget2;

  		this.renderToScreen = true;

  		this.passes = [];

  		this.copyPass = new ShaderPass( CopyShader );
  		this.copyPass.material.blending = NoBlending$1;

  		this.clock = new Clock();

  	}

  	swapBuffers() {

  		const tmp = this.readBuffer;
  		this.readBuffer = this.writeBuffer;
  		this.writeBuffer = tmp;

  	}

  	addPass( pass ) {

  		this.passes.push( pass );
  		pass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

  	}

  	insertPass( pass, index ) {

  		this.passes.splice( index, 0, pass );
  		pass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

  	}

  	removePass( pass ) {

  		const index = this.passes.indexOf( pass );

  		if ( index !== - 1 ) {

  			this.passes.splice( index, 1 );

  		}

  	}

  	isLastEnabledPass( passIndex ) {

  		for ( let i = passIndex + 1; i < this.passes.length; i ++ ) {

  			if ( this.passes[ i ].enabled ) {

  				return false;

  			}

  		}

  		return true;

  	}

  	render( deltaTime ) {

  		// deltaTime value is in seconds

  		if ( deltaTime === undefined ) {

  			deltaTime = this.clock.getDelta();

  		}

  		const currentRenderTarget = this.renderer.getRenderTarget();

  		let maskActive = false;

  		for ( let i = 0, il = this.passes.length; i < il; i ++ ) {

  			const pass = this.passes[ i ];

  			if ( pass.enabled === false ) continue;

  			pass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );
  			pass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );

  			if ( pass.needsSwap ) {

  				if ( maskActive ) {

  					const context = this.renderer.getContext();
  					const stencil = this.renderer.state.buffers.stencil;

  					//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );
  					stencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );

  					this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );

  					//context.stencilFunc( context.EQUAL, 1, 0xffffffff );
  					stencil.setFunc( context.EQUAL, 1, 0xffffffff );

  				}

  				this.swapBuffers();

  			}

  			if ( MaskPass !== undefined ) {

  				if ( pass instanceof MaskPass ) {

  					maskActive = true;

  				} else if ( pass instanceof ClearMaskPass ) {

  					maskActive = false;

  				}

  			}

  		}

  		this.renderer.setRenderTarget( currentRenderTarget );

  	}

  	reset( renderTarget ) {

  		if ( renderTarget === undefined ) {

  			const size = this.renderer.getSize( new Vector2$1() );
  			this._pixelRatio = this.renderer.getPixelRatio();
  			this._width = size.width;
  			this._height = size.height;

  			renderTarget = this.renderTarget1.clone();
  			renderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

  		}

  		this.renderTarget1.dispose();
  		this.renderTarget2.dispose();
  		this.renderTarget1 = renderTarget;
  		this.renderTarget2 = renderTarget.clone();

  		this.writeBuffer = this.renderTarget1;
  		this.readBuffer = this.renderTarget2;

  	}

  	setSize( width, height ) {

  		this._width = width;
  		this._height = height;

  		const effectiveWidth = this._width * this._pixelRatio;
  		const effectiveHeight = this._height * this._pixelRatio;

  		this.renderTarget1.setSize( effectiveWidth, effectiveHeight );
  		this.renderTarget2.setSize( effectiveWidth, effectiveHeight );

  		for ( let i = 0; i < this.passes.length; i ++ ) {

  			this.passes[ i ].setSize( effectiveWidth, effectiveHeight );

  		}

  	}

  	setPixelRatio( pixelRatio ) {

  		this._pixelRatio = pixelRatio;

  		this.setSize( this._width, this._height );

  	}

  	dispose() {

  		this.renderTarget1.dispose();
  		this.renderTarget2.dispose();

  		this.copyPass.dispose();

  	}

  }

  class RenderPass extends Pass {

  	constructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {

  		super();

  		this.scene = scene;
  		this.camera = camera;

  		this.overrideMaterial = overrideMaterial;

  		this.clearColor = clearColor;
  		this.clearAlpha = clearAlpha;

  		this.clear = true;
  		this.clearDepth = false;
  		this.needsSwap = false;
  		this._oldClearColor = new Color$1();

  	}

  	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

  		const oldAutoClear = renderer.autoClear;
  		renderer.autoClear = false;

  		let oldClearAlpha, oldOverrideMaterial;

  		if ( this.overrideMaterial !== null ) {

  			oldOverrideMaterial = this.scene.overrideMaterial;

  			this.scene.overrideMaterial = this.overrideMaterial;

  		}

  		if ( this.clearColor !== null ) {

  			renderer.getClearColor( this._oldClearColor );
  			renderer.setClearColor( this.clearColor, renderer.getClearAlpha() );

  		}

  		if ( this.clearAlpha !== null ) {

  			oldClearAlpha = renderer.getClearAlpha();
  			renderer.setClearAlpha( this.clearAlpha );

  		}

  		if ( this.clearDepth == true ) {

  			renderer.clearDepth();

  		}

  		renderer.setRenderTarget( this.renderToScreen ? null : readBuffer );

  		if ( this.clear === true ) {

  			// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
  			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

  		}

  		renderer.render( this.scene, this.camera );

  		// restore

  		if ( this.clearColor !== null ) {

  			renderer.setClearColor( this._oldClearColor );

  		}

  		if ( this.clearAlpha !== null ) {

  			renderer.setClearAlpha( oldClearAlpha );

  		}

  		if ( this.overrideMaterial !== null ) {

  			this.scene.overrideMaterial = oldOverrideMaterial;

  		}

  		renderer.autoClear = oldAutoClear;

  	}

  }

  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }

  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }

  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }

  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
      return !!t;
    })();
  }

  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }

  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function _wrapNativeSuper(t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  // based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js
  /**
   * Parse errors.md and turn it into a simple hash of code: message
   * @private
   */
  var ERRORS = {
    "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
    "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
    "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
    "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
    "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
    "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
    "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
    "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
    "9": "Please provide a number of steps to the modularScale helper.\n\n",
    "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
    "11": "Invalid value passed as base to modularScale, expected number or em string but got \"%s\"\n\n",
    "12": "Expected a string ending in \"px\" or a number passed as the first argument to %s(), got \"%s\" instead.\n\n",
    "13": "Expected a string ending in \"px\" or a number passed as the second argument to %s(), got \"%s\" instead.\n\n",
    "14": "Passed invalid pixel value (\"%s\") to %s(), please pass a value like \"12px\" or 12.\n\n",
    "15": "Passed invalid base value (\"%s\") to %s(), please pass a value like \"12px\" or 12.\n\n",
    "16": "You must provide a template to this method.\n\n",
    "17": "You passed an unsupported selector state to this method.\n\n",
    "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
    "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
    "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
    "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
    "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
    "23": "fontFace expects a name of a font-family.\n\n",
    "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
    "25": "fontFace expects localFonts to be an array.\n\n",
    "26": "fontFace expects fileFormats to be an array.\n\n",
    "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
    "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
    "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
    "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
    "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
    "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
    "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
    "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
    "35": "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.\n\n",
    "36": "Property must be a string value.\n\n",
    "37": "Syntax Error at %s.\n\n",
    "38": "Formula contains a function that needs parentheses at %s.\n\n",
    "39": "Formula is missing closing parenthesis at %s.\n\n",
    "40": "Formula has too many closing parentheses at %s.\n\n",
    "41": "All values in a formula must have the same unit or be unitless.\n\n",
    "42": "Please provide a number of steps to the modularScale helper.\n\n",
    "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
    "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
    "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
    "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
    "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
    "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
    "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
    "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
    "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
    "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
    "53": "fontFace expects localFonts to be an array.\n\n",
    "54": "fontFace expects fileFormats to be an array.\n\n",
    "55": "fontFace expects a name of a font-family.\n\n",
    "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
    "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
    "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
    "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
    "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
    "61": "Property must be a string value.\n\n",
    "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
    "63": "borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.\n\n",
    "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
    "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
    "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
    "67": "You must provide a template to this method.\n\n",
    "68": "You passed an unsupported selector state to this method.\n\n",
    "69": "Expected a string ending in \"px\" or a number passed as the first argument to %s(), got %s instead.\n\n",
    "70": "Expected a string ending in \"px\" or a number passed as the second argument to %s(), got %s instead.\n\n",
    "71": "Passed invalid pixel value %s to %s(), please pass a value like \"12px\" or 12.\n\n",
    "72": "Passed invalid base value %s to %s(), please pass a value like \"12px\" or 12.\n\n",
    "73": "Please provide a valid CSS variable.\n\n",
    "74": "CSS variable not found and no default was provided.\n\n",
    "75": "important requires a valid style object, got a %s instead.\n\n",
    "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
    "77": "remToPx expects a value in \"rem\" but you provided it in \"%s\".\n\n",
    "78": "base must be set in \"px\" or \"%\" but you set it in \"%s\".\n"
  };

  /**
   * super basic version of sprintf
   * @private
   */
  function format() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var a = args[0];
    var b = [];
    var c;
    for (c = 1; c < args.length; c += 1) {
      b.push(args[c]);
    }
    b.forEach(function (d) {
      a = a.replace(/%[a-z]/, d);
    });
    return a;
  }

  /**
   * Create an error file out of errors.md for development and a simple web link to the full errors
   * in production mode.
   * @private
   */
  var PolishedError = /*#__PURE__*/function (_Error) {
    _inheritsLoose(PolishedError, _Error);
    function PolishedError(code) {
      var _this;
      if (process.env.NODE_ENV === 'production') {
        _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
      } else {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this = _Error.call(this, format.apply(void 0, [ERRORS[code]].concat(args))) || this;
      }
      return _assertThisInitialized(_this);
    }
    return PolishedError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  function colorToInt(color) {
    return Math.round(color * 255);
  }
  function convertToInt(red, green, blue) {
    return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
  }
  function hslToRgb(hue, saturation, lightness, convert) {
    if (convert === void 0) {
      convert = convertToInt;
    }
    if (saturation === 0) {
      // achromatic
      return convert(lightness, lightness, lightness);
    }

    // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV
    var huePrime = (hue % 360 + 360) % 360 / 60;
    var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
    var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
    var red = 0;
    var green = 0;
    var blue = 0;
    if (huePrime >= 0 && huePrime < 1) {
      red = chroma;
      green = secondComponent;
    } else if (huePrime >= 1 && huePrime < 2) {
      red = secondComponent;
      green = chroma;
    } else if (huePrime >= 2 && huePrime < 3) {
      green = chroma;
      blue = secondComponent;
    } else if (huePrime >= 3 && huePrime < 4) {
      green = secondComponent;
      blue = chroma;
    } else if (huePrime >= 4 && huePrime < 5) {
      red = secondComponent;
      blue = chroma;
    } else if (huePrime >= 5 && huePrime < 6) {
      red = chroma;
      blue = secondComponent;
    }
    var lightnessModification = lightness - chroma / 2;
    var finalRed = red + lightnessModification;
    var finalGreen = green + lightnessModification;
    var finalBlue = blue + lightnessModification;
    return convert(finalRed, finalGreen, finalBlue);
  }

  var namedColorMap = {
    aliceblue: 'f0f8ff',
    antiquewhite: 'faebd7',
    aqua: '00ffff',
    aquamarine: '7fffd4',
    azure: 'f0ffff',
    beige: 'f5f5dc',
    bisque: 'ffe4c4',
    black: '000',
    blanchedalmond: 'ffebcd',
    blue: '0000ff',
    blueviolet: '8a2be2',
    brown: 'a52a2a',
    burlywood: 'deb887',
    cadetblue: '5f9ea0',
    chartreuse: '7fff00',
    chocolate: 'd2691e',
    coral: 'ff7f50',
    cornflowerblue: '6495ed',
    cornsilk: 'fff8dc',
    crimson: 'dc143c',
    cyan: '00ffff',
    darkblue: '00008b',
    darkcyan: '008b8b',
    darkgoldenrod: 'b8860b',
    darkgray: 'a9a9a9',
    darkgreen: '006400',
    darkgrey: 'a9a9a9',
    darkkhaki: 'bdb76b',
    darkmagenta: '8b008b',
    darkolivegreen: '556b2f',
    darkorange: 'ff8c00',
    darkorchid: '9932cc',
    darkred: '8b0000',
    darksalmon: 'e9967a',
    darkseagreen: '8fbc8f',
    darkslateblue: '483d8b',
    darkslategray: '2f4f4f',
    darkslategrey: '2f4f4f',
    darkturquoise: '00ced1',
    darkviolet: '9400d3',
    deeppink: 'ff1493',
    deepskyblue: '00bfff',
    dimgray: '696969',
    dimgrey: '696969',
    dodgerblue: '1e90ff',
    firebrick: 'b22222',
    floralwhite: 'fffaf0',
    forestgreen: '228b22',
    fuchsia: 'ff00ff',
    gainsboro: 'dcdcdc',
    ghostwhite: 'f8f8ff',
    gold: 'ffd700',
    goldenrod: 'daa520',
    gray: '808080',
    green: '008000',
    greenyellow: 'adff2f',
    grey: '808080',
    honeydew: 'f0fff0',
    hotpink: 'ff69b4',
    indianred: 'cd5c5c',
    indigo: '4b0082',
    ivory: 'fffff0',
    khaki: 'f0e68c',
    lavender: 'e6e6fa',
    lavenderblush: 'fff0f5',
    lawngreen: '7cfc00',
    lemonchiffon: 'fffacd',
    lightblue: 'add8e6',
    lightcoral: 'f08080',
    lightcyan: 'e0ffff',
    lightgoldenrodyellow: 'fafad2',
    lightgray: 'd3d3d3',
    lightgreen: '90ee90',
    lightgrey: 'd3d3d3',
    lightpink: 'ffb6c1',
    lightsalmon: 'ffa07a',
    lightseagreen: '20b2aa',
    lightskyblue: '87cefa',
    lightslategray: '789',
    lightslategrey: '789',
    lightsteelblue: 'b0c4de',
    lightyellow: 'ffffe0',
    lime: '0f0',
    limegreen: '32cd32',
    linen: 'faf0e6',
    magenta: 'f0f',
    maroon: '800000',
    mediumaquamarine: '66cdaa',
    mediumblue: '0000cd',
    mediumorchid: 'ba55d3',
    mediumpurple: '9370db',
    mediumseagreen: '3cb371',
    mediumslateblue: '7b68ee',
    mediumspringgreen: '00fa9a',
    mediumturquoise: '48d1cc',
    mediumvioletred: 'c71585',
    midnightblue: '191970',
    mintcream: 'f5fffa',
    mistyrose: 'ffe4e1',
    moccasin: 'ffe4b5',
    navajowhite: 'ffdead',
    navy: '000080',
    oldlace: 'fdf5e6',
    olive: '808000',
    olivedrab: '6b8e23',
    orange: 'ffa500',
    orangered: 'ff4500',
    orchid: 'da70d6',
    palegoldenrod: 'eee8aa',
    palegreen: '98fb98',
    paleturquoise: 'afeeee',
    palevioletred: 'db7093',
    papayawhip: 'ffefd5',
    peachpuff: 'ffdab9',
    peru: 'cd853f',
    pink: 'ffc0cb',
    plum: 'dda0dd',
    powderblue: 'b0e0e6',
    purple: '800080',
    rebeccapurple: '639',
    red: 'f00',
    rosybrown: 'bc8f8f',
    royalblue: '4169e1',
    saddlebrown: '8b4513',
    salmon: 'fa8072',
    sandybrown: 'f4a460',
    seagreen: '2e8b57',
    seashell: 'fff5ee',
    sienna: 'a0522d',
    silver: 'c0c0c0',
    skyblue: '87ceeb',
    slateblue: '6a5acd',
    slategray: '708090',
    slategrey: '708090',
    snow: 'fffafa',
    springgreen: '00ff7f',
    steelblue: '4682b4',
    tan: 'd2b48c',
    teal: '008080',
    thistle: 'd8bfd8',
    tomato: 'ff6347',
    turquoise: '40e0d0',
    violet: 'ee82ee',
    wheat: 'f5deb3',
    white: 'fff',
    whitesmoke: 'f5f5f5',
    yellow: 'ff0',
    yellowgreen: '9acd32'
  };

  /**
   * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
   * @private
   */
  function nameToHex(color) {
    if (typeof color !== 'string') return color;
    var normalizedColorName = color.toLowerCase();
    return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
  }

  var hexRegex = /^#[a-fA-F0-9]{6}$/;
  var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
  var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
  var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
  var rgbRegex = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
  var rgbaRegex = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
  var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
  var hslaRegex = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;

  /**
   * Returns an RgbColor or RgbaColor object. This utility function is only useful
   * if want to extract a color component. With the color util `toColorString` you
   * can convert a RgbColor or RgbaColor object back to a string.
   *
   * @example
   * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
   * const color1 = parseToRgb('rgb(255, 0, 0)');
   * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
   * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
   */
  function parseToRgb(color) {
    if (typeof color !== 'string') {
      throw new PolishedError(3);
    }
    var normalizedColor = nameToHex(color);
    if (normalizedColor.match(hexRegex)) {
      return {
        red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
        green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
        blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
      };
    }
    if (normalizedColor.match(hexRgbaRegex)) {
      var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
      return {
        red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
        green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
        blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
        alpha: alpha
      };
    }
    if (normalizedColor.match(reducedHexRegex)) {
      return {
        red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
        green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
        blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
      };
    }
    if (normalizedColor.match(reducedRgbaHexRegex)) {
      var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
      return {
        red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
        green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
        blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
        alpha: _alpha
      };
    }
    var rgbMatched = rgbRegex.exec(normalizedColor);
    if (rgbMatched) {
      return {
        red: parseInt("" + rgbMatched[1], 10),
        green: parseInt("" + rgbMatched[2], 10),
        blue: parseInt("" + rgbMatched[3], 10)
      };
    }
    var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
    if (rgbaMatched) {
      return {
        red: parseInt("" + rgbaMatched[1], 10),
        green: parseInt("" + rgbaMatched[2], 10),
        blue: parseInt("" + rgbaMatched[3], 10),
        alpha: parseFloat("" + rgbaMatched[4]) > 1 ? parseFloat("" + rgbaMatched[4]) / 100 : parseFloat("" + rgbaMatched[4])
      };
    }
    var hslMatched = hslRegex.exec(normalizedColor);
    if (hslMatched) {
      var hue = parseInt("" + hslMatched[1], 10);
      var saturation = parseInt("" + hslMatched[2], 10) / 100;
      var lightness = parseInt("" + hslMatched[3], 10) / 100;
      var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
      var hslRgbMatched = rgbRegex.exec(rgbColorString);
      if (!hslRgbMatched) {
        throw new PolishedError(4, normalizedColor, rgbColorString);
      }
      return {
        red: parseInt("" + hslRgbMatched[1], 10),
        green: parseInt("" + hslRgbMatched[2], 10),
        blue: parseInt("" + hslRgbMatched[3], 10)
      };
    }
    var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
    if (hslaMatched) {
      var _hue = parseInt("" + hslaMatched[1], 10);
      var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
      var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
      var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";
      var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
      if (!_hslRgbMatched) {
        throw new PolishedError(4, normalizedColor, _rgbColorString);
      }
      return {
        red: parseInt("" + _hslRgbMatched[1], 10),
        green: parseInt("" + _hslRgbMatched[2], 10),
        blue: parseInt("" + _hslRgbMatched[3], 10),
        alpha: parseFloat("" + hslaMatched[4]) > 1 ? parseFloat("" + hslaMatched[4]) / 100 : parseFloat("" + hslaMatched[4])
      };
    }
    throw new PolishedError(5);
  }

  function rgbToHsl(color) {
    // make sure rgb are contained in a set of [0, 255]
    var red = color.red / 255;
    var green = color.green / 255;
    var blue = color.blue / 255;
    var max = Math.max(red, green, blue);
    var min = Math.min(red, green, blue);
    var lightness = (max + min) / 2;
    if (max === min) {
      // achromatic
      if (color.alpha !== undefined) {
        return {
          hue: 0,
          saturation: 0,
          lightness: lightness,
          alpha: color.alpha
        };
      } else {
        return {
          hue: 0,
          saturation: 0,
          lightness: lightness
        };
      }
    }
    var hue;
    var delta = max - min;
    var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
    switch (max) {
      case red:
        hue = (green - blue) / delta + (green < blue ? 6 : 0);
        break;
      case green:
        hue = (blue - red) / delta + 2;
        break;
      default:
        // blue case
        hue = (red - green) / delta + 4;
        break;
    }
    hue *= 60;
    if (color.alpha !== undefined) {
      return {
        hue: hue,
        saturation: saturation,
        lightness: lightness,
        alpha: color.alpha
      };
    }
    return {
      hue: hue,
      saturation: saturation,
      lightness: lightness
    };
  }

  /**
   * Returns an HslColor or HslaColor object. This utility function is only useful
   * if want to extract a color component. With the color util `toColorString` you
   * can convert a HslColor or HslaColor object back to a string.
   *
   * @example
   * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1
   * const color1 = parseToHsl('rgb(255, 0, 0)');
   * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2
   * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');
   */
  function parseToHsl(color) {
    // Note: At a later stage we can optimize this function as right now a hsl
    // color would be parsed converted to rgb values and converted back to hsl.
    return rgbToHsl(parseToRgb(color));
  }

  /**
   * Reduces hex values if possible e.g. #ff8866 to #f86
   * @private
   */
  var reduceHexValue = function reduceHexValue(value) {
    if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
      return "#" + value[1] + value[3] + value[5];
    }
    return value;
  };
  var reduceHexValue$1 = reduceHexValue;

  function numberToHex(value) {
    var hex = value.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  }

  function colorToHex(color) {
    return numberToHex(Math.round(color * 255));
  }
  function convertToHex(red, green, blue) {
    return reduceHexValue$1("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
  }
  function hslToHex(hue, saturation, lightness) {
    return hslToRgb(hue, saturation, lightness, convertToHex);
  }

  /**
   * Returns a string value for the color. The returned result is the smallest possible hex notation.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: hsl(359, 0.75, 0.4),
   *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${hsl(359, 0.75, 0.4)};
   *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#b3191c";
   *   background: "#b3191c";
   * }
   */
  function hsl(value, saturation, lightness) {
    if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number') {
      return hslToHex(value, saturation, lightness);
    } else if (typeof value === 'object' && saturation === undefined && lightness === undefined) {
      return hslToHex(value.hue, value.saturation, value.lightness);
    }
    throw new PolishedError(1);
  }

  /**
   * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: hsla(359, 0.75, 0.4, 0.7),
   *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),
   *   background: hsla(359, 0.75, 0.4, 1),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${hsla(359, 0.75, 0.4, 0.7)};
   *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};
   *   background: ${hsla(359, 0.75, 0.4, 1)};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "rgba(179,25,28,0.7)";
   *   background: "rgba(179,25,28,0.7)";
   *   background: "#b3191c";
   * }
   */
  function hsla(value, saturation, lightness, alpha) {
    if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number' && typeof alpha === 'number') {
      return alpha >= 1 ? hslToHex(value, saturation, lightness) : "rgba(" + hslToRgb(value, saturation, lightness) + "," + alpha + ")";
    } else if (typeof value === 'object' && saturation === undefined && lightness === undefined && alpha === undefined) {
      return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : "rgba(" + hslToRgb(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
    }
    throw new PolishedError(2);
  }

  /**
   * Returns a string value for the color. The returned result is the smallest possible hex notation.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: rgb(255, 205, 100),
   *   background: rgb({ red: 255, green: 205, blue: 100 }),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${rgb(255, 205, 100)};
   *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#ffcd64";
   *   background: "#ffcd64";
   * }
   */
  function rgb(value, green, blue) {
    if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {
      return reduceHexValue$1("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
    } else if (typeof value === 'object' && green === undefined && blue === undefined) {
      return reduceHexValue$1("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
    }
    throw new PolishedError(6);
  }

  /**
   * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
   *
   * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: rgba(255, 205, 100, 0.7),
   *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
   *   background: rgba(255, 205, 100, 1),
   *   background: rgba('#ffffff', 0.4),
   *   background: rgba('black', 0.7),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${rgba(255, 205, 100, 0.7)};
   *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
   *   background: ${rgba(255, 205, 100, 1)};
   *   background: ${rgba('#ffffff', 0.4)};
   *   background: ${rgba('black', 0.7)};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "rgba(255,205,100,0.7)";
   *   background: "rgba(255,205,100,0.7)";
   *   background: "#ffcd64";
   *   background: "rgba(255,255,255,0.4)";
   *   background: "rgba(0,0,0,0.7)";
   * }
   */
  function rgba(firstValue, secondValue, thirdValue, fourthValue) {
    if (typeof firstValue === 'string' && typeof secondValue === 'number') {
      var rgbValue = parseToRgb(firstValue);
      return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
    } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {
      return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
    } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {
      return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
    }
    throw new PolishedError(7);
  }

  var isRgb = function isRgb(color) {
    return typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');
  };
  var isRgba = function isRgba(color) {
    return typeof color.red === 'number' && typeof color.green === 'number' && typeof color.blue === 'number' && typeof color.alpha === 'number';
  };
  var isHsl = function isHsl(color) {
    return typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && (typeof color.alpha !== 'number' || typeof color.alpha === 'undefined');
  };
  var isHsla = function isHsla(color) {
    return typeof color.hue === 'number' && typeof color.saturation === 'number' && typeof color.lightness === 'number' && typeof color.alpha === 'number';
  };

  /**
   * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.
   * This util is useful in case you only know on runtime which color object is
   * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: toColorString({ red: 255, green: 205, blue: 100 }),
   *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),
   *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),
   *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};
   *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};
   *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};
   *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#ffcd64";
   *   background: "rgba(255,205,100,0.72)";
   *   background: "#00f";
   *   background: "rgba(179,25,25,0.72)";
   * }
   */

  function toColorString(color) {
    if (typeof color !== 'object') throw new PolishedError(8);
    if (isRgba(color)) return rgba(color);
    if (isRgb(color)) return rgb(color);
    if (isHsla(color)) return hsla(color);
    if (isHsl(color)) return hsl(color);
    throw new PolishedError(8);
  }

  // Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js
  // eslint-disable-next-line no-unused-vars
  // eslint-disable-next-line no-unused-vars
  // eslint-disable-next-line no-redeclare
  function curried(f, length, acc) {
    return function fn() {
      // eslint-disable-next-line prefer-rest-params
      var combined = acc.concat(Array.prototype.slice.call(arguments));
      return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
    };
  }

  // eslint-disable-next-line no-redeclare
  function curry(f) {
    // eslint-disable-line no-redeclare
    return curried(f, f.length, []);
  }

  /**
   * Changes the hue of the color. Hue is a number between 0 to 360. The first
   * argument for adjustHue is the amount of degrees the color is rotated around
   * the color wheel, always producing a positive hue value.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: adjustHue(180, '#448'),
   *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${adjustHue(180, '#448')};
   *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#888844";
   *   background: "rgba(136,136,68,0.7)";
   * }
   */
  function adjustHue(degree, color) {
    if (color === 'transparent') return color;
    var hslColor = parseToHsl(color);
    return toColorString(_extends({}, hslColor, {
      hue: hslColor.hue + parseFloat(degree)
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(adjustHue);

  function guard(lowerBoundary, upperBoundary, value) {
    return Math.max(lowerBoundary, Math.min(upperBoundary, value));
  }

  /**
   * Returns a string value for the darkened color.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: darken(0.2, '#FFCD64'),
   *   background: darken('0.2', 'rgba(255,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${darken(0.2, '#FFCD64')};
   *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#ffbd31";
   *   background: "rgba(255,189,49,0.7)";
   * }
   */
  function darken(amount, color) {
    if (color === 'transparent') return color;
    var hslColor = parseToHsl(color);
    return toColorString(_extends({}, hslColor, {
      lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(darken);

  /**
   * Decreases the intensity of a color. Its range is between 0 to 1. The first
   * argument of the desaturate function is the amount by how much the color
   * intensity should be decreased.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: desaturate(0.2, '#CCCD64'),
   *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${desaturate(0.2, '#CCCD64')};
   *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#b8b979";
   *   background: "rgba(184,185,121,0.7)";
   * }
   */
  function desaturate(amount, color) {
    if (color === 'transparent') return color;
    var hslColor = parseToHsl(color);
    return toColorString(_extends({}, hslColor, {
      saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(desaturate);

  /**
   * Returns a string value for the lightened color.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: lighten(0.2, '#CCCD64'),
   *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${lighten(0.2, '#FFCD64')};
   *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#e5e6b1";
   *   background: "rgba(229,230,177,0.7)";
   * }
   */
  function lighten(amount, color) {
    if (color === 'transparent') return color;
    var hslColor = parseToHsl(color);
    return toColorString(_extends({}, hslColor, {
      lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(lighten);

  /**
   * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: mix(0.5, '#f00', '#00f')
   *   background: mix(0.25, '#f00', '#00f')
   *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${mix(0.5, '#f00', '#00f')};
   *   background: ${mix(0.25, '#f00', '#00f')};
   *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#7f007f";
   *   background: "#3f00bf";
   *   background: "rgba(63, 0, 191, 0.75)";
   * }
   */
  function mix(weight, color, otherColor) {
    if (color === 'transparent') return otherColor;
    if (otherColor === 'transparent') return color;
    if (weight === 0) return otherColor;
    var parsedColor1 = parseToRgb(color);
    var color1 = _extends({}, parsedColor1, {
      alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1
    });
    var parsedColor2 = parseToRgb(otherColor);
    var color2 = _extends({}, parsedColor2, {
      alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1
    });

    // The formula is copied from the original Sass implementation:
    // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method
    var alphaDelta = color1.alpha - color2.alpha;
    var x = parseFloat(weight) * 2 - 1;
    var y = x * alphaDelta === -1 ? x : x + alphaDelta;
    var z = 1 + x * alphaDelta;
    var weight1 = (y / z + 1) / 2.0;
    var weight2 = 1 - weight1;
    var mixedColor = {
      red: Math.floor(color1.red * weight1 + color2.red * weight2),
      green: Math.floor(color1.green * weight1 + color2.green * weight2),
      blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
      alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight))
    };
    return rgba(mixedColor);
  }

  // prettier-ignore
  var curriedMix = curry /* ::<number | string, string, string, string> */(mix);
  var mix$1 = curriedMix;

  /**
   * Increases the opacity of a color. Its range for the amount is between 0 to 1.
   *
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');
   *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),
   *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};
   *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},
   *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#fff";
   *   background: "rgba(255,255,255,0.7)";
   *   background: "rgba(255,0,0,0.7)";
   * }
   */
  function opacify(amount, color) {
    if (color === 'transparent') return color;
    var parsedColor = parseToRgb(color);
    var alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;
    var colorWithAlpha = _extends({}, parsedColor, {
      alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
    });
    return rgba(colorWithAlpha);
  }

  // prettier-ignore
  var curriedOpacify = curry /* ::<number | string, string, string> */(opacify);
  var curriedOpacify$1 = curriedOpacify;

  /**
   * Increases the intensity of a color. Its range is between 0 to 1. The first
   * argument of the saturate function is the amount by how much the color
   * intensity should be increased.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: saturate(0.2, '#CCCD64'),
   *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${saturate(0.2, '#FFCD64')};
   *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#e0e250";
   *   background: "rgba(224,226,80,0.7)";
   * }
   */
  function saturate(amount, color) {
    if (color === 'transparent') return color;
    var hslColor = parseToHsl(color);
    return toColorString(_extends({}, hslColor, {
      saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(saturate);

  /**
   * Sets the hue of a color to the provided value. The hue range can be
   * from 0 and 359.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: setHue(42, '#CCCD64'),
   *   background: setHue('244', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${setHue(42, '#CCCD64')};
   *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#cdae64";
   *   background: "rgba(107,100,205,0.7)";
   * }
   */
  function setHue(hue, color) {
    if (color === 'transparent') return color;
    return toColorString(_extends({}, parseToHsl(color), {
      hue: parseFloat(hue)
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(setHue);

  /**
   * Sets the lightness of a color to the provided value. The lightness range can be
   * from 0 and 1.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: setLightness(0.2, '#CCCD64'),
   *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${setLightness(0.2, '#CCCD64')};
   *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#4d4d19";
   *   background: "rgba(223,224,159,0.7)";
   * }
   */
  function setLightness(lightness, color) {
    if (color === 'transparent') return color;
    return toColorString(_extends({}, parseToHsl(color), {
      lightness: parseFloat(lightness)
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(setLightness);

  /**
   * Sets the saturation of a color to the provided value. The saturation range can be
   * from 0 and 1.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: setSaturation(0.2, '#CCCD64'),
   *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${setSaturation(0.2, '#CCCD64')};
   *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};
   * `
   *
   * // CSS in JS Output
   * element {
   *   background: "#adad84";
   *   background: "rgba(228,229,76,0.7)";
   * }
   */
  function setSaturation(saturation, color) {
    if (color === 'transparent') return color;
    return toColorString(_extends({}, parseToHsl(color), {
      saturation: parseFloat(saturation)
    }));
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(setSaturation);

  /**
   * Shades a color by mixing it with black. `shade` can produce
   * hue shifts, where as `darken` manipulates the luminance channel and therefore
   * doesn't produce hue shifts.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: shade(0.25, '#00f')
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${shade(0.25, '#00f')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#00003f";
   * }
   */

  function shade(percentage, color) {
    if (color === 'transparent') return color;
    return mix$1(parseFloat(percentage), 'rgb(0, 0, 0)', color);
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(shade);

  /**
   * Tints a color by mixing it with white. `tint` can produce
   * hue shifts, where as `lighten` manipulates the luminance channel and therefore
   * doesn't produce hue shifts.
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: tint(0.25, '#00f')
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${tint(0.25, '#00f')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "#bfbfff";
   * }
   */

  function tint(percentage, color) {
    if (color === 'transparent') return color;
    return mix$1(parseFloat(percentage), 'rgb(255, 255, 255)', color);
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(tint);

  /**
   * Decreases the opacity of a color. Its range for the amount is between 0 to 1.
   *
   *
   * @example
   * // Styles as object usage
   * const styles = {
   *   background: transparentize(0.1, '#fff'),
   *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),
   *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),
   * }
   *
   * // styled-components usage
   * const div = styled.div`
   *   background: ${transparentize(0.1, '#fff')};
   *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')};
   *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')};
   * `
   *
   * // CSS in JS Output
   *
   * element {
   *   background: "rgba(255,255,255,0.9)";
   *   background: "rgba(255,255,255,0.8)";
   *   background: "rgba(255,0,0,0.3)";
   * }
   */
  function transparentize(amount, color) {
    if (color === 'transparent') return color;
    var parsedColor = parseToRgb(color);
    var alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;
    var colorWithAlpha = _extends({}, parsedColor, {
      alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
    });
    return rgba(colorWithAlpha);
  }

  // prettier-ignore
  curry /* ::<number | string, string, string> */(transparentize);

  /**
   * The Ease class provides a collection of easing functions for use with tween.js.
   */
  var Easing = Object.freeze({
      Linear: Object.freeze({
          None: function (amount) {
              return amount;
          },
          In: function (amount) {
              return amount;
          },
          Out: function (amount) {
              return amount;
          },
          InOut: function (amount) {
              return amount;
          },
      }),
      Quadratic: Object.freeze({
          In: function (amount) {
              return amount * amount;
          },
          Out: function (amount) {
              return amount * (2 - amount);
          },
          InOut: function (amount) {
              if ((amount *= 2) < 1) {
                  return 0.5 * amount * amount;
              }
              return -0.5 * (--amount * (amount - 2) - 1);
          },
      }),
      Cubic: Object.freeze({
          In: function (amount) {
              return amount * amount * amount;
          },
          Out: function (amount) {
              return --amount * amount * amount + 1;
          },
          InOut: function (amount) {
              if ((amount *= 2) < 1) {
                  return 0.5 * amount * amount * amount;
              }
              return 0.5 * ((amount -= 2) * amount * amount + 2);
          },
      }),
      Quartic: Object.freeze({
          In: function (amount) {
              return amount * amount * amount * amount;
          },
          Out: function (amount) {
              return 1 - --amount * amount * amount * amount;
          },
          InOut: function (amount) {
              if ((amount *= 2) < 1) {
                  return 0.5 * amount * amount * amount * amount;
              }
              return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
          },
      }),
      Quintic: Object.freeze({
          In: function (amount) {
              return amount * amount * amount * amount * amount;
          },
          Out: function (amount) {
              return --amount * amount * amount * amount * amount + 1;
          },
          InOut: function (amount) {
              if ((amount *= 2) < 1) {
                  return 0.5 * amount * amount * amount * amount * amount;
              }
              return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
          },
      }),
      Sinusoidal: Object.freeze({
          In: function (amount) {
              return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);
          },
          Out: function (amount) {
              return Math.sin((amount * Math.PI) / 2);
          },
          InOut: function (amount) {
              return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
          },
      }),
      Exponential: Object.freeze({
          In: function (amount) {
              return amount === 0 ? 0 : Math.pow(1024, amount - 1);
          },
          Out: function (amount) {
              return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
          },
          InOut: function (amount) {
              if (amount === 0) {
                  return 0;
              }
              if (amount === 1) {
                  return 1;
              }
              if ((amount *= 2) < 1) {
                  return 0.5 * Math.pow(1024, amount - 1);
              }
              return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
          },
      }),
      Circular: Object.freeze({
          In: function (amount) {
              return 1 - Math.sqrt(1 - amount * amount);
          },
          Out: function (amount) {
              return Math.sqrt(1 - --amount * amount);
          },
          InOut: function (amount) {
              if ((amount *= 2) < 1) {
                  return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
              }
              return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
          },
      }),
      Elastic: Object.freeze({
          In: function (amount) {
              if (amount === 0) {
                  return 0;
              }
              if (amount === 1) {
                  return 1;
              }
              return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
          },
          Out: function (amount) {
              if (amount === 0) {
                  return 0;
              }
              if (amount === 1) {
                  return 1;
              }
              return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
          },
          InOut: function (amount) {
              if (amount === 0) {
                  return 0;
              }
              if (amount === 1) {
                  return 1;
              }
              amount *= 2;
              if (amount < 1) {
                  return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
              }
              return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
          },
      }),
      Back: Object.freeze({
          In: function (amount) {
              var s = 1.70158;
              return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
          },
          Out: function (amount) {
              var s = 1.70158;
              return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
          },
          InOut: function (amount) {
              var s = 1.70158 * 1.525;
              if ((amount *= 2) < 1) {
                  return 0.5 * (amount * amount * ((s + 1) * amount - s));
              }
              return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
          },
      }),
      Bounce: Object.freeze({
          In: function (amount) {
              return 1 - Easing.Bounce.Out(1 - amount);
          },
          Out: function (amount) {
              if (amount < 1 / 2.75) {
                  return 7.5625 * amount * amount;
              }
              else if (amount < 2 / 2.75) {
                  return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
              }
              else if (amount < 2.5 / 2.75) {
                  return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
              }
              else {
                  return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
              }
          },
          InOut: function (amount) {
              if (amount < 0.5) {
                  return Easing.Bounce.In(amount * 2) * 0.5;
              }
              return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
          },
      }),
      generatePow: function (power) {
          if (power === void 0) { power = 4; }
          power = power < Number.EPSILON ? Number.EPSILON : power;
          power = power > 10000 ? 10000 : power;
          return {
              In: function (amount) {
                  return Math.pow(amount, power);
              },
              Out: function (amount) {
                  return 1 - Math.pow((1 - amount), power);
              },
              InOut: function (amount) {
                  if (amount < 0.5) {
                      return Math.pow((amount * 2), power) / 2;
                  }
                  return (1 - Math.pow((2 - amount * 2), power)) / 2 + 0.5;
              },
          };
      },
  });

  var now = function () { return performance.now(); };

  /**
   * Controlling groups of tweens
   *
   * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
   * In these cases, you may want to create your own smaller groups of tween
   */
  var Group = /** @class */ (function () {
      function Group() {
          var tweens = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              tweens[_i] = arguments[_i];
          }
          this._tweens = {};
          this._tweensAddedDuringUpdate = {};
          this.add.apply(this, tweens);
      }
      Group.prototype.getAll = function () {
          var _this = this;
          return Object.keys(this._tweens).map(function (tweenId) { return _this._tweens[tweenId]; });
      };
      Group.prototype.removeAll = function () {
          this._tweens = {};
      };
      Group.prototype.add = function () {
          var _a;
          var tweens = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              tweens[_i] = arguments[_i];
          }
          for (var _b = 0, tweens_1 = tweens; _b < tweens_1.length; _b++) {
              var tween = tweens_1[_b];
              // Remove from any other group first, a tween can only be in one group at a time.
              // @ts-expect-error library internal access
              (_a = tween._group) === null || _a === void 0 ? void 0 : _a.remove(tween);
              // @ts-expect-error library internal access
              tween._group = this;
              this._tweens[tween.getId()] = tween;
              this._tweensAddedDuringUpdate[tween.getId()] = tween;
          }
      };
      Group.prototype.remove = function () {
          var tweens = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              tweens[_i] = arguments[_i];
          }
          for (var _a = 0, tweens_2 = tweens; _a < tweens_2.length; _a++) {
              var tween = tweens_2[_a];
              // @ts-expect-error library internal access
              tween._group = undefined;
              delete this._tweens[tween.getId()];
              delete this._tweensAddedDuringUpdate[tween.getId()];
          }
      };
      /** Return true if all tweens in the group are not paused or playing. */
      Group.prototype.allStopped = function () {
          return this.getAll().every(function (tween) { return !tween.isPlaying(); });
      };
      Group.prototype.update = function (time, preserve) {
          if (time === void 0) { time = now(); }
          if (preserve === void 0) { preserve = true; }
          var tweenIds = Object.keys(this._tweens);
          if (tweenIds.length === 0)
              return;
          // Tweens are updated in "batches". If you add a new tween during an
          // update, then the new tween will be updated in the next batch.
          // If you remove a tween during an update, it may or may not be updated.
          // However, if the removed tween was added during the current batch,
          // then it will not be updated.
          while (tweenIds.length > 0) {
              this._tweensAddedDuringUpdate = {};
              for (var i = 0; i < tweenIds.length; i++) {
                  var tween = this._tweens[tweenIds[i]];
                  var autoStart = !preserve;
                  if (tween && tween.update(time, autoStart) === false && !preserve)
                      this.remove(tween);
              }
              tweenIds = Object.keys(this._tweensAddedDuringUpdate);
          }
      };
      return Group;
  }());

  /**
   *
   */
  var Interpolation = {
      Linear: function (v, k) {
          var m = v.length - 1;
          var f = m * k;
          var i = Math.floor(f);
          var fn = Interpolation.Utils.Linear;
          if (k < 0) {
              return fn(v[0], v[1], f);
          }
          if (k > 1) {
              return fn(v[m], v[m - 1], m - f);
          }
          return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
      },
      Bezier: function (v, k) {
          var b = 0;
          var n = v.length - 1;
          var pw = Math.pow;
          var bn = Interpolation.Utils.Bernstein;
          for (var i = 0; i <= n; i++) {
              b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
          }
          return b;
      },
      CatmullRom: function (v, k) {
          var m = v.length - 1;
          var f = m * k;
          var i = Math.floor(f);
          var fn = Interpolation.Utils.CatmullRom;
          if (v[0] === v[m]) {
              if (k < 0) {
                  i = Math.floor((f = m * (1 + k)));
              }
              return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
          }
          else {
              if (k < 0) {
                  return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
              }
              if (k > 1) {
                  return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
              }
              return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
          }
      },
      Utils: {
          Linear: function (p0, p1, t) {
              return (p1 - p0) * t + p0;
          },
          Bernstein: function (n, i) {
              var fc = Interpolation.Utils.Factorial;
              return fc(n) / fc(i) / fc(n - i);
          },
          Factorial: (function () {
              var a = [1];
              return function (n) {
                  var s = 1;
                  if (a[n]) {
                      return a[n];
                  }
                  for (var i = n; i > 1; i--) {
                      s *= i;
                  }
                  a[n] = s;
                  return s;
              };
          })(),
          CatmullRom: function (p0, p1, p2, p3, t) {
              var v0 = (p2 - p0) * 0.5;
              var v1 = (p3 - p1) * 0.5;
              var t2 = t * t;
              var t3 = t * t2;
              return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
          },
      },
  };

  /**
   * Utils
   */
  var Sequence = /** @class */ (function () {
      function Sequence() {
      }
      Sequence.nextId = function () {
          return Sequence._nextId++;
      };
      Sequence._nextId = 0;
      return Sequence;
  }());

  var mainGroup = new Group();

  /**
   * Tween.js - Licensed under the MIT license
   * https://github.com/tweenjs/tween.js
   * ----------------------------------------------
   *
   * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
   * Thank you all, you're awesome!
   */
  var Tween = /** @class */ (function () {
      function Tween(object, group) {
          this._isPaused = false;
          this._pauseStart = 0;
          this._valuesStart = {};
          this._valuesEnd = {};
          this._valuesStartRepeat = {};
          this._duration = 1000;
          this._isDynamic = false;
          this._initialRepeat = 0;
          this._repeat = 0;
          this._yoyo = false;
          this._isPlaying = false;
          this._reversed = false;
          this._delayTime = 0;
          this._startTime = 0;
          this._easingFunction = Easing.Linear.None;
          this._interpolationFunction = Interpolation.Linear;
          // eslint-disable-next-line
          this._chainedTweens = [];
          this._onStartCallbackFired = false;
          this._onEveryStartCallbackFired = false;
          this._id = Sequence.nextId();
          this._isChainStopped = false;
          this._propertiesAreSetUp = false;
          this._goToEnd = false;
          this._object = object;
          if (typeof group === 'object') {
              this._group = group;
              group.add(this);
          }
          // Use "true" to restore old behavior (will be removed in future release).
          else if (group === true) {
              this._group = mainGroup;
              mainGroup.add(this);
          }
      }
      Tween.prototype.getId = function () {
          return this._id;
      };
      Tween.prototype.isPlaying = function () {
          return this._isPlaying;
      };
      Tween.prototype.isPaused = function () {
          return this._isPaused;
      };
      Tween.prototype.getDuration = function () {
          return this._duration;
      };
      Tween.prototype.to = function (target, duration) {
          if (duration === void 0) { duration = 1000; }
          if (this._isPlaying)
              throw new Error('Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.');
          this._valuesEnd = target;
          this._propertiesAreSetUp = false;
          this._duration = duration < 0 ? 0 : duration;
          return this;
      };
      Tween.prototype.duration = function (duration) {
          if (duration === void 0) { duration = 1000; }
          this._duration = duration < 0 ? 0 : duration;
          return this;
      };
      Tween.prototype.dynamic = function (dynamic) {
          if (dynamic === void 0) { dynamic = false; }
          this._isDynamic = dynamic;
          return this;
      };
      Tween.prototype.start = function (time, overrideStartingValues) {
          if (time === void 0) { time = now(); }
          if (overrideStartingValues === void 0) { overrideStartingValues = false; }
          if (this._isPlaying) {
              return this;
          }
          this._repeat = this._initialRepeat;
          if (this._reversed) {
              // If we were reversed (f.e. using the yoyo feature) then we need to
              // flip the tween direction back to forward.
              this._reversed = false;
              for (var property in this._valuesStartRepeat) {
                  this._swapEndStartRepeatValues(property);
                  this._valuesStart[property] = this._valuesStartRepeat[property];
              }
          }
          this._isPlaying = true;
          this._isPaused = false;
          this._onStartCallbackFired = false;
          this._onEveryStartCallbackFired = false;
          this._isChainStopped = false;
          this._startTime = time;
          this._startTime += this._delayTime;
          if (!this._propertiesAreSetUp || overrideStartingValues) {
              this._propertiesAreSetUp = true;
              // If dynamic is not enabled, clone the end values instead of using the passed-in end values.
              if (!this._isDynamic) {
                  var tmp = {};
                  for (var prop in this._valuesEnd)
                      tmp[prop] = this._valuesEnd[prop];
                  this._valuesEnd = tmp;
              }
              this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);
          }
          return this;
      };
      Tween.prototype.startFromCurrentValues = function (time) {
          return this.start(time, true);
      };
      Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {
          for (var property in _valuesEnd) {
              var startValue = _object[property];
              var startValueIsArray = Array.isArray(startValue);
              var propType = startValueIsArray ? 'array' : typeof startValue;
              var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
              // If `to()` specifies a property that doesn't exist in the source object,
              // we should not set that property in the object
              if (propType === 'undefined' || propType === 'function') {
                  continue;
              }
              // Check if an Array was provided as property value
              if (isInterpolationList) {
                  var endValues = _valuesEnd[property];
                  if (endValues.length === 0) {
                      continue;
                  }
                  // Handle an array of relative values.
                  // Creates a local copy of the Array with the start value at the front
                  var temp = [startValue];
                  for (var i = 0, l = endValues.length; i < l; i += 1) {
                      var value = this._handleRelativeValue(startValue, endValues[i]);
                      if (isNaN(value)) {
                          isInterpolationList = false;
                          console.warn('Found invalid interpolation list. Skipping.');
                          break;
                      }
                      temp.push(value);
                  }
                  if (isInterpolationList) {
                      // if (_valuesStart[property] === undefined) { // handle end values only the first time. NOT NEEDED? setupProperties is now guarded by _propertiesAreSetUp.
                      _valuesEnd[property] = temp;
                      // }
                  }
              }
              // handle the deepness of the values
              if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {
                  _valuesStart[property] = startValueIsArray ? [] : {};
                  var nestedObject = startValue;
                  for (var prop in nestedObject) {
                      _valuesStart[property][prop] = nestedObject[prop];
                  }
                  // TODO? repeat nested values? And yoyo? And array values?
                  _valuesStartRepeat[property] = startValueIsArray ? [] : {};
                  var endValues = _valuesEnd[property];
                  // If dynamic is not enabled, clone the end values instead of using the passed-in end values.
                  if (!this._isDynamic) {
                      var tmp = {};
                      for (var prop in endValues)
                          tmp[prop] = endValues[prop];
                      _valuesEnd[property] = endValues = tmp;
                  }
                  this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);
              }
              else {
                  // Save the starting value, but only once unless override is requested.
                  if (typeof _valuesStart[property] === 'undefined' || overrideStartingValues) {
                      _valuesStart[property] = startValue;
                  }
                  if (!startValueIsArray) {
                      // eslint-disable-next-line
                      // @ts-ignore FIXME?
                      _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
                  }
                  if (isInterpolationList) {
                      // eslint-disable-next-line
                      // @ts-ignore FIXME?
                      _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
                  }
                  else {
                      _valuesStartRepeat[property] = _valuesStart[property] || 0;
                  }
              }
          }
      };
      Tween.prototype.stop = function () {
          if (!this._isChainStopped) {
              this._isChainStopped = true;
              this.stopChainedTweens();
          }
          if (!this._isPlaying) {
              return this;
          }
          this._isPlaying = false;
          this._isPaused = false;
          if (this._onStopCallback) {
              this._onStopCallback(this._object);
          }
          return this;
      };
      Tween.prototype.end = function () {
          this._goToEnd = true;
          this.update(this._startTime + this._duration);
          return this;
      };
      Tween.prototype.pause = function (time) {
          if (time === void 0) { time = now(); }
          if (this._isPaused || !this._isPlaying) {
              return this;
          }
          this._isPaused = true;
          this._pauseStart = time;
          return this;
      };
      Tween.prototype.resume = function (time) {
          if (time === void 0) { time = now(); }
          if (!this._isPaused || !this._isPlaying) {
              return this;
          }
          this._isPaused = false;
          this._startTime += time - this._pauseStart;
          this._pauseStart = 0;
          return this;
      };
      Tween.prototype.stopChainedTweens = function () {
          for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
              this._chainedTweens[i].stop();
          }
          return this;
      };
      Tween.prototype.group = function (group) {
          if (!group) {
              console.warn('tween.group() without args has been removed, use group.add(tween) instead.');
              return this;
          }
          group.add(this);
          return this;
      };
      /**
       * Removes the tween from whichever group it is in.
       */
      Tween.prototype.remove = function () {
          var _a;
          (_a = this._group) === null || _a === void 0 ? void 0 : _a.remove(this);
          return this;
      };
      Tween.prototype.delay = function (amount) {
          if (amount === void 0) { amount = 0; }
          this._delayTime = amount;
          return this;
      };
      Tween.prototype.repeat = function (times) {
          if (times === void 0) { times = 0; }
          this._initialRepeat = times;
          this._repeat = times;
          return this;
      };
      Tween.prototype.repeatDelay = function (amount) {
          this._repeatDelayTime = amount;
          return this;
      };
      Tween.prototype.yoyo = function (yoyo) {
          if (yoyo === void 0) { yoyo = false; }
          this._yoyo = yoyo;
          return this;
      };
      Tween.prototype.easing = function (easingFunction) {
          if (easingFunction === void 0) { easingFunction = Easing.Linear.None; }
          this._easingFunction = easingFunction;
          return this;
      };
      Tween.prototype.interpolation = function (interpolationFunction) {
          if (interpolationFunction === void 0) { interpolationFunction = Interpolation.Linear; }
          this._interpolationFunction = interpolationFunction;
          return this;
      };
      // eslint-disable-next-line
      Tween.prototype.chain = function () {
          var tweens = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              tweens[_i] = arguments[_i];
          }
          this._chainedTweens = tweens;
          return this;
      };
      Tween.prototype.onStart = function (callback) {
          this._onStartCallback = callback;
          return this;
      };
      Tween.prototype.onEveryStart = function (callback) {
          this._onEveryStartCallback = callback;
          return this;
      };
      Tween.prototype.onUpdate = function (callback) {
          this._onUpdateCallback = callback;
          return this;
      };
      Tween.prototype.onRepeat = function (callback) {
          this._onRepeatCallback = callback;
          return this;
      };
      Tween.prototype.onComplete = function (callback) {
          this._onCompleteCallback = callback;
          return this;
      };
      Tween.prototype.onStop = function (callback) {
          this._onStopCallback = callback;
          return this;
      };
      /**
       * @returns true if the tween is still playing after the update, false
       * otherwise (calling update on a paused tween still returns true because
       * it is still playing, just paused).
       *
       * @param autoStart - When true, calling update will implicitly call start()
       * as well. Note, if you stop() or end() the tween, but are still calling
       * update(), it will start again!
       */
      Tween.prototype.update = function (time, autoStart) {
          var _this = this;
          var _a;
          if (time === void 0) { time = now(); }
          if (autoStart === void 0) { autoStart = Tween.autoStartOnUpdate; }
          if (this._isPaused)
              return true;
          var property;
          if (!this._goToEnd && !this._isPlaying) {
              if (autoStart)
                  this.start(time, true);
              else
                  return false;
          }
          this._goToEnd = false;
          if (time < this._startTime) {
              return true;
          }
          if (this._onStartCallbackFired === false) {
              if (this._onStartCallback) {
                  this._onStartCallback(this._object);
              }
              this._onStartCallbackFired = true;
          }
          if (this._onEveryStartCallbackFired === false) {
              if (this._onEveryStartCallback) {
                  this._onEveryStartCallback(this._object);
              }
              this._onEveryStartCallbackFired = true;
          }
          var elapsedTime = time - this._startTime;
          var durationAndDelay = this._duration + ((_a = this._repeatDelayTime) !== null && _a !== void 0 ? _a : this._delayTime);
          var totalTime = this._duration + this._repeat * durationAndDelay;
          var calculateElapsedPortion = function () {
              if (_this._duration === 0)
                  return 1;
              if (elapsedTime > totalTime) {
                  return 1;
              }
              var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);
              var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;
              // TODO use %?
              // const timeIntoCurrentRepeat = elapsedTime % durationAndDelay
              var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);
              if (portion === 0 && elapsedTime === _this._duration) {
                  return 1;
              }
              return portion;
          };
          var elapsed = calculateElapsedPortion();
          var value = this._easingFunction(elapsed);
          // properties transformations
          this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
          if (this._onUpdateCallback) {
              this._onUpdateCallback(this._object, elapsed);
          }
          if (this._duration === 0 || elapsedTime >= this._duration) {
              if (this._repeat > 0) {
                  var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);
                  if (isFinite(this._repeat)) {
                      this._repeat -= completeCount;
                  }
                  // Reassign starting values, restart by making startTime = now
                  for (property in this._valuesStartRepeat) {
                      if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {
                          this._valuesStartRepeat[property] =
                              // eslint-disable-next-line
                              // @ts-ignore FIXME?
                              this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
                      }
                      if (this._yoyo) {
                          this._swapEndStartRepeatValues(property);
                      }
                      this._valuesStart[property] = this._valuesStartRepeat[property];
                  }
                  if (this._yoyo) {
                      this._reversed = !this._reversed;
                  }
                  this._startTime += durationAndDelay * completeCount;
                  if (this._onRepeatCallback) {
                      this._onRepeatCallback(this._object);
                  }
                  this._onEveryStartCallbackFired = false;
                  return true;
              }
              else {
                  if (this._onCompleteCallback) {
                      this._onCompleteCallback(this._object);
                  }
                  for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
                      // Make the chained tweens start exactly at the time they should,
                      // even if the `update()` method was called way past the duration of the tween
                      this._chainedTweens[i].start(this._startTime + this._duration, false);
                  }
                  this._isPlaying = false;
                  return false;
              }
          }
          return true;
      };
      Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {
          for (var property in _valuesEnd) {
              // Don't update properties that do not exist in the source object
              if (_valuesStart[property] === undefined) {
                  continue;
              }
              var start = _valuesStart[property] || 0;
              var end = _valuesEnd[property];
              var startIsArray = Array.isArray(_object[property]);
              var endIsArray = Array.isArray(end);
              var isInterpolationList = !startIsArray && endIsArray;
              if (isInterpolationList) {
                  _object[property] = this._interpolationFunction(end, value);
              }
              else if (typeof end === 'object' && end) {
                  // eslint-disable-next-line
                  // @ts-ignore FIXME?
                  this._updateProperties(_object[property], start, end, value);
              }
              else {
                  // Parses relative end values with start as base (e.g.: +10, -3)
                  end = this._handleRelativeValue(start, end);
                  // Protect against non numeric properties.
                  if (typeof end === 'number') {
                      // eslint-disable-next-line
                      // @ts-ignore FIXME?
                      _object[property] = start + (end - start) * value;
                  }
              }
          }
      };
      Tween.prototype._handleRelativeValue = function (start, end) {
          if (typeof end !== 'string') {
              return end;
          }
          if (end.charAt(0) === '+' || end.charAt(0) === '-') {
              return start + parseFloat(end);
          }
          return parseFloat(end);
      };
      Tween.prototype._swapEndStartRepeatValues = function (property) {
          var tmp = this._valuesStartRepeat[property];
          var endValue = this._valuesEnd[property];
          if (typeof endValue === 'string') {
              this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
          }
          else {
              this._valuesStartRepeat[property] = this._valuesEnd[property];
          }
          this._valuesEnd[property] = tmp;
      };
      Tween.autoStartOnUpdate = false;
      return Tween;
  }());
  /**
   * Controlling groups of tweens
   *
   * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.
   * In these cases, you may want to create your own smaller groups of tweens.
   */
  var TWEEN = mainGroup;
  // This is the best way to export things in a way that's compatible with both ES
  // Modules and CommonJS, without build hacks, and so as not to break the
  // existing API.
  // https://github.com/rollup/rollup/issues/1961#issuecomment-423037881
  /**
   * @deprecated The global TWEEN Group will be removed in a following major
   * release. To migrate, create a `new Group()` instead of using `TWEEN` as a
   * group.
   *
   * Old code:
   *
   * ```js
   * import * as TWEEN from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new TWEEN.Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   TWEEN.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   *
   * New code:
   *
   * ```js
   * import {Tween, Group} from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * const group = new Group()
   * group.add(tween)
   * group.add(tween2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   group.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   */
  TWEEN.getAll.bind(TWEEN);
  /**
   * @deprecated The global TWEEN Group will be removed in a following major
   * release. To migrate, create a `new Group()` instead of using `TWEEN` as a
   * group.
   *
   * Old code:
   *
   * ```js
   * import * as TWEEN from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new TWEEN.Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   TWEEN.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   *
   * New code:
   *
   * ```js
   * import {Tween, Group} from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * const group = new Group()
   * group.add(tween)
   * group.add(tween2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   group.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   */
  TWEEN.removeAll.bind(TWEEN);
  /**
   * @deprecated The global TWEEN Group will be removed in a following major
   * release. To migrate, create a `new Group()` instead of using `TWEEN` as a
   * group.
   *
   * Old code:
   *
   * ```js
   * import * as TWEEN from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new TWEEN.Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   TWEEN.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   *
   * New code:
   *
   * ```js
   * import {Tween, Group} from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * const group = new Group()
   * group.add(tween)
   * group.add(tween2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   group.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   */
  TWEEN.add.bind(TWEEN);
  /**
   * @deprecated The global TWEEN Group will be removed in a following major
   * release. To migrate, create a `new Group()` instead of using `TWEEN` as a
   * group.
   *
   * Old code:
   *
   * ```js
   * import * as TWEEN from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new TWEEN.Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   TWEEN.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   *
   * New code:
   *
   * ```js
   * import {Tween, Group} from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * const group = new Group()
   * group.add(tween)
   * group.add(tween2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   group.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   */
  TWEEN.remove.bind(TWEEN);
  /**
   * @deprecated The global TWEEN Group will be removed in a following major
   * release. To migrate, create a `new Group()` instead of using `TWEEN` as a
   * group.
   *
   * Old code:
   *
   * ```js
   * import * as TWEEN from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new TWEEN.Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   TWEEN.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   *
   * New code:
   *
   * ```js
   * import {Tween, Group} from '@tweenjs/tween.js'
   *
   * //...
   *
   * const tween = new Tween(obj)
   * const tween2 = new TWEEN.Tween(obj2)
   *
   * //...
   *
   * const group = new Group()
   * group.add(tween)
   * group.add(tween2)
   *
   * //...
   *
   * requestAnimationFrame(function loop(time) {
   *   group.update(time)
   *   requestAnimationFrame(loop)
   * })
   * ```
   */
  TWEEN.update.bind(TWEEN);

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;
    if (typeof document === 'undefined') {
      return;
    }
    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';
    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }
    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".scene-nav-info {\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n  color: slategrey;\n  opacity: 0.7;\n  font-size: 10px;\n}\n\n.scene-tooltip {\n  top: 0;\n  color: lavender;\n  font-size: 15px;\n}\n\n.scene-nav-info, .scene-tooltip {\n  position: absolute;\n  font-family: sans-serif;\n  pointer-events: none;\n  user-select: none;\n}\n\n.scene-container canvas:focus {\n  outline: none;\n}";
  styleInject(css_248z);

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  var three$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists
  : {
    WebGLRenderer: WebGLRenderer,
    Scene: Scene$1,
    PerspectiveCamera: PerspectiveCamera$1,
    Raycaster: Raycaster,
    SRGBColorSpace: SRGBColorSpace$1,
    TextureLoader: TextureLoader,
    Vector2: Vector2$1,
    Vector3: Vector3$1,
    Box3: Box3$1,
    Color: Color$1,
    Mesh: Mesh$1,
    SphereGeometry: SphereGeometry$1,
    MeshBasicMaterial: MeshBasicMaterial$1,
    BackSide: BackSide$1,
    EventDispatcher: EventDispatcher$1,
    MOUSE: MOUSE,
    Quaternion: Quaternion$1,
    Spherical: Spherical,
    Clock: Clock
  };
  var threeRenderObjects = index$2({
    props: {
      width: {
        "default": window.innerWidth,
        onChange: function onChange(width, state, prevWidth) {
          isNaN(width) && (state.width = prevWidth);
        }
      },
      height: {
        "default": window.innerHeight,
        onChange: function onChange(height, state, prevHeight) {
          isNaN(height) && (state.height = prevHeight);
        }
      },
      backgroundColor: {
        "default": '#000011'
      },
      backgroundImageUrl: {},
      onBackgroundImageLoaded: {},
      showNavInfo: {
        "default": true
      },
      skyRadius: {
        "default": 50000
      },
      objects: {
        "default": []
      },
      lights: {
        "default": []
      },
      enablePointerInteraction: {
        "default": true,
        onChange: function onChange(_, state) {
          // Reset hover state
          state.hoverObj = null;
          if (state.toolTipElem) state.toolTipElem.innerHTML = '';
        },
        triggerUpdate: false
      },
      lineHoverPrecision: {
        "default": 1,
        triggerUpdate: false
      },
      hoverOrderComparator: {
        "default": function _default() {
          return -1;
        },
        triggerUpdate: false
      },
      // keep existing order by default
      hoverFilter: {
        "default": function _default() {
          return true;
        },
        triggerUpdate: false
      },
      // exclude objects from interaction
      tooltipContent: {
        triggerUpdate: false
      },
      hoverDuringDrag: {
        "default": false,
        triggerUpdate: false
      },
      clickAfterDrag: {
        "default": false,
        triggerUpdate: false
      },
      onHover: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onClick: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onRightClick: {
        triggerUpdate: false
      }
    },
    methods: {
      tick: function tick(state) {
        if (state.initialised) {
          state.controls.update && state.controls.update(Math.min(1, state.clock.getDelta())); // timedelta is required for fly controls

          state.postProcessingComposer ? state.postProcessingComposer.render() // if using postprocessing, switch the output to it
          : state.renderer.render(state.scene, state.camera);
          state.extraRenderers.forEach(function (r) {
            return r.render(state.scene, state.camera);
          });
          if (state.enablePointerInteraction) {
            // Update tooltip and trigger onHover events
            var topObject = null;
            if (state.hoverDuringDrag || !state.isPointerDragging) {
              var intersects = this.intersectingObjects(state.pointerPos.x, state.pointerPos.y).filter(function (d) {
                return state.hoverFilter(d.object);
              }).sort(function (a, b) {
                return state.hoverOrderComparator(a.object, b.object);
              });
              var topIntersect = intersects.length ? intersects[0] : null;
              topObject = topIntersect ? topIntersect.object : null;
              state.intersectionPoint = topIntersect ? topIntersect.point : null;
            }
            if (topObject !== state.hoverObj) {
              state.onHover(topObject, state.hoverObj);
              state.toolTipElem.innerHTML = topObject ? index$1(state.tooltipContent)(topObject) || '' : '';
              state.hoverObj = topObject;
            }
          }
          state.tweenGroup.update(); // update camera animation tweens
        }
        return this;
      },
      getPointerPos: function getPointerPos(state) {
        var _state$pointerPos = state.pointerPos,
          x = _state$pointerPos.x,
          y = _state$pointerPos.y;
        return {
          x: x,
          y: y
        };
      },
      cameraPosition: function cameraPosition(state, position, lookAt, transitionDuration) {
        var camera = state.camera;

        // Setter
        if (position && state.initialised) {
          var finalPos = position;
          var finalLookAt = lookAt || {
            x: 0,
            y: 0,
            z: 0
          };
          if (!transitionDuration) {
            // no animation
            setCameraPos(finalPos);
            setLookAt(finalLookAt);
          } else {
            var camPos = Object.assign({}, camera.position);
            var camLookAt = getLookAt();
            state.tweenGroup.add(new Tween(camPos).to(finalPos, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(setCameraPos).start());

            // Face direction in 1/3rd of time
            state.tweenGroup.add(new Tween(camLookAt).to(finalLookAt, transitionDuration / 3).easing(Easing.Quadratic.Out).onUpdate(setLookAt).start());
          }
          return this;
        }

        // Getter
        return Object.assign({}, camera.position, {
          lookAt: getLookAt()
        });

        //

        function setCameraPos(pos) {
          var x = pos.x,
            y = pos.y,
            z = pos.z;
          if (x !== undefined) camera.position.x = x;
          if (y !== undefined) camera.position.y = y;
          if (z !== undefined) camera.position.z = z;
        }
        function setLookAt(lookAt) {
          var lookAtVect = new three$1.Vector3(lookAt.x, lookAt.y, lookAt.z);
          if (state.controls.target) {
            state.controls.target = lookAtVect;
          } else {
            // Fly controls doesn't have target attribute
            camera.lookAt(lookAtVect); // note: lookAt may be overridden by other controls in some cases
          }
        }
        function getLookAt() {
          return Object.assign(new three$1.Vector3(0, 0, -1000).applyQuaternion(camera.quaternion).add(camera.position));
        }
      },
      zoomToFit: function zoomToFit(state) {
        var transitionDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
        for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          bboxArgs[_key - 3] = arguments[_key];
        }
        return this.fitToBbox(this.getBbox.apply(this, bboxArgs), transitionDuration, padding);
      },
      fitToBbox: function fitToBbox(state, bbox) {
        var transitionDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
        // based on https://discourse.threejs.org/t/camera-zoom-to-fit-object/936/24
        var camera = state.camera;
        if (bbox) {
          var center = new three$1.Vector3(0, 0, 0); // reset camera aim to center
          var maxBoxSide = Math.max.apply(Math, _toConsumableArray(Object.entries(bbox).map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
              coordType = _ref2[0],
              coords = _ref2[1];
            return Math.max.apply(Math, _toConsumableArray(coords.map(function (c) {
              return Math.abs(center[coordType] - c);
            })));
          }))) * 2;

          // find distance that fits whole bbox within padded fov
          var paddedFov = (1 - padding * 2 / state.height) * camera.fov;
          var fitHeightDistance = maxBoxSide / Math.atan(paddedFov * Math.PI / 180);
          var fitWidthDistance = fitHeightDistance / camera.aspect;
          var distance = Math.max(fitHeightDistance, fitWidthDistance);
          if (distance > 0) {
            var newCameraPosition = center.clone().sub(camera.position).normalize().multiplyScalar(-distance);
            this.cameraPosition(newCameraPosition, center, transitionDuration);
          }
        }
        return this;
      },
      getBbox: function getBbox(state) {
        var objFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
          return true;
        };
        var box = new three$1.Box3(new three$1.Vector3(0, 0, 0), new three$1.Vector3(0, 0, 0));
        var objs = state.objects.filter(objFilter);
        if (!objs.length) return null;
        objs.forEach(function (obj) {
          return box.expandByObject(obj);
        });

        // extract global x,y,z min/max
        return Object.assign.apply(Object, _toConsumableArray(['x', 'y', 'z'].map(function (c) {
          return _defineProperty({}, c, [box.min[c], box.max[c]]);
        })));
      },
      getScreenCoords: function getScreenCoords(state, x, y, z) {
        var vec = new three$1.Vector3(x, y, z);
        vec.project(this.camera()); // project to the camera plane
        return {
          // align relative pos to canvas dimensions
          x: (vec.x + 1) * state.width / 2,
          y: -(vec.y - 1) * state.height / 2
        };
      },
      getSceneCoords: function getSceneCoords(state, screenX, screenY) {
        var distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var relCoords = new three$1.Vector2(screenX / state.width * 2 - 1, -(screenY / state.height) * 2 + 1);
        var raycaster = new three$1.Raycaster();
        raycaster.setFromCamera(relCoords, state.camera);
        return Object.assign({}, raycaster.ray.at(distance, new three$1.Vector3()));
      },
      intersectingObjects: function intersectingObjects(state, x, y) {
        var relCoords = new three$1.Vector2(x / state.width * 2 - 1, -(y / state.height) * 2 + 1);
        var raycaster = new three$1.Raycaster();
        raycaster.params.Line.threshold = state.lineHoverPrecision; // set linePrecision
        raycaster.setFromCamera(relCoords, state.camera);
        return raycaster.intersectObjects(state.objects, true);
      },
      renderer: function renderer(state) {
        return state.renderer;
      },
      scene: function scene(state) {
        return state.scene;
      },
      camera: function camera(state) {
        return state.camera;
      },
      postProcessingComposer: function postProcessingComposer(state) {
        return state.postProcessingComposer;
      },
      controls: function controls(state) {
        return state.controls;
      },
      tbControls: function tbControls(state) {
        return state.controls;
      } // to be deprecated
    },
    stateInit: function stateInit() {
      return {
        scene: new three$1.Scene(),
        camera: new three$1.PerspectiveCamera(),
        clock: new three$1.Clock(),
        tweenGroup: new Group()
      };
    },
    init: function init(domNode, state) {
      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref4$controlType = _ref4.controlType,
        controlType = _ref4$controlType === void 0 ? 'trackball' : _ref4$controlType,
        _ref4$useWebGPU = _ref4.useWebGPU,
        useWebGPU = _ref4$useWebGPU === void 0 ? false : _ref4$useWebGPU,
        _ref4$rendererConfig = _ref4.rendererConfig,
        rendererConfig = _ref4$rendererConfig === void 0 ? {} : _ref4$rendererConfig,
        _ref4$extraRenderers = _ref4.extraRenderers,
        extraRenderers = _ref4$extraRenderers === void 0 ? [] : _ref4$extraRenderers,
        _ref4$waitForLoadComp = _ref4.waitForLoadComplete,
        waitForLoadComplete = _ref4$waitForLoadComp === void 0 ? true : _ref4$waitForLoadComp;
      // Wipe DOM
      domNode.innerHTML = '';

      // Add relative container
      domNode.appendChild(state.container = document.createElement('div'));
      state.container.className = 'scene-container';
      state.container.style.position = 'relative';

      // Add nav info section
      state.container.appendChild(state.navInfo = document.createElement('div'));
      state.navInfo.className = 'scene-nav-info';
      state.navInfo.textContent = {
        orbit: 'Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan',
        trackball: 'Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan',
        fly: 'WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw'
      }[controlType] || '';
      state.navInfo.style.display = state.showNavInfo ? null : 'none';

      // Setup tooltip
      state.toolTipElem = document.createElement('div');
      state.toolTipElem.classList.add('scene-tooltip');
      state.container.appendChild(state.toolTipElem);

      // Capture pointer coords on move or touchstart
      state.pointerPos = new three$1.Vector2();
      state.pointerPos.x = -2; // Initialize off canvas
      state.pointerPos.y = -2;
      ['pointermove', 'pointerdown'].forEach(function (evType) {
        return state.container.addEventListener(evType, function (ev) {
          // track click state
          evType === 'pointerdown' && (state.isPointerPressed = true);

          // detect point drag
          !state.isPointerDragging && ev.type === 'pointermove' && (ev.pressure > 0 || state.isPointerPressed) // ev.pressure always 0 on Safari, so we used the isPointerPressed tracker
          && (ev.pointerType !== 'touch' || ev.movementX === undefined || [ev.movementX, ev.movementY].some(function (m) {
            return Math.abs(m) > 1;
          })) // relax drag trigger sensitivity on touch events
          && (state.isPointerDragging = true);
          if (state.enablePointerInteraction) {
            // update the pointer pos
            var offset = getOffset(state.container);
            state.pointerPos.x = ev.pageX - offset.left;
            state.pointerPos.y = ev.pageY - offset.top;

            // Move tooltip
            state.toolTipElem.style.top = "".concat(state.pointerPos.y, "px");
            state.toolTipElem.style.left = "".concat(state.pointerPos.x, "px");
            // adjust horizontal position to not exceed canvas boundaries
            state.toolTipElem.style.transform = "translate(-".concat(state.pointerPos.x / state.width * 100, "%, ").concat(
            // flip to above if near bottom
            state.height - state.pointerPos.y < 100 ? 'calc(-100% - 8px)' : '21px', ")");
          }
          function getOffset(el) {
            var rect = el.getBoundingClientRect(),
              scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
              scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            return {
              top: rect.top + scrollTop,
              left: rect.left + scrollLeft
            };
          }
        }, {
          passive: true
        });
      });

      // Handle click events on objs
      state.container.addEventListener('pointerup', function (ev) {
        state.isPointerPressed = false;
        if (state.isPointerDragging) {
          state.isPointerDragging = false;
          if (!state.clickAfterDrag) return; // don't trigger onClick after pointer drag (camera motion via controls)
        }
        requestAnimationFrame(function () {
          // trigger click events asynchronously, to allow hoverObj to be set (on frame)
          if (ev.button === 0) {
            // left-click
            state.onClick(state.hoverObj || null, ev, state.intersectionPoint); // trigger background clicks with null
          }
          if (ev.button === 2 && state.onRightClick) {
            // right-click
            state.onRightClick(state.hoverObj || null, ev, state.intersectionPoint);
          }
        });
      }, {
        passive: true,
        capture: true
      }); // use capture phase to prevent propagation blocking from controls (specifically for fly)

      state.container.addEventListener('contextmenu', function (ev) {
        if (state.onRightClick) ev.preventDefault(); // prevent default contextmenu behavior and allow pointerup to fire instead
      });

      // Setup renderer, camera and controls
      state.renderer = new (useWebGPU ? WebGPURenderer : three$1.WebGLRenderer)(Object.assign({
        antialias: true,
        alpha: true
      }, rendererConfig));
      state.renderer.setPixelRatio(Math.min(2, window.devicePixelRatio)); // clamp device pixel ratio
      state.container.appendChild(state.renderer.domElement);

      // Setup extra renderers
      state.extraRenderers = extraRenderers;
      state.extraRenderers.forEach(function (r) {
        // overlay them on top of main renderer
        r.domElement.style.position = 'absolute';
        r.domElement.style.top = '0px';
        r.domElement.style.pointerEvents = 'none';
        state.container.appendChild(r.domElement);
      });

      // configure post-processing composer
      state.postProcessingComposer = new EffectComposer(state.renderer);
      state.postProcessingComposer.addPass(new RenderPass(state.scene, state.camera)); // render scene as first pass

      // configure controls
      state.controls = new {
        trackball: TrackballControls,
        orbit: OrbitControls,
        fly: FlyControls
      }[controlType](state.camera, state.renderer.domElement);
      if (controlType === 'fly') {
        state.controls.movementSpeed = 300;
        state.controls.rollSpeed = Math.PI / 6;
        state.controls.dragToLook = true;
      }
      if (controlType === 'trackball' || controlType === 'orbit') {
        state.controls.minDistance = 0.1;
        state.controls.maxDistance = state.skyRadius;
        state.controls.addEventListener('start', function () {
          state.controlsEngaged = true;
        });
        state.controls.addEventListener('change', function () {
          if (state.controlsEngaged) {
            state.controlsDragging = true;
          }
        });
        state.controls.addEventListener('end', function () {
          state.controlsEngaged = false;
          state.controlsDragging = false;
        });
      }
      [state.renderer, state.postProcessingComposer].concat(_toConsumableArray(state.extraRenderers)).forEach(function (r) {
        return r.setSize(state.width, state.height);
      });
      state.camera.aspect = state.width / state.height;
      state.camera.updateProjectionMatrix();
      state.camera.position.z = 1000;

      // add sky
      state.scene.add(state.skysphere = new three$1.Mesh());
      state.skysphere.visible = false;
      state.loadComplete = state.scene.visible = !waitForLoadComplete;
      window.scene = state.scene;
    },
    update: function update(state, changedProps) {
      // resize canvas
      if (state.width && state.height && (changedProps.hasOwnProperty('width') || changedProps.hasOwnProperty('height'))) {
        state.container.style.width = "".concat(state.width, "px");
        state.container.style.height = "".concat(state.height, "px");
        [state.renderer, state.postProcessingComposer].concat(_toConsumableArray(state.extraRenderers)).forEach(function (r) {
          return r.setSize(state.width, state.height);
        });
        state.camera.aspect = state.width / state.height;
        state.camera.updateProjectionMatrix();
      }
      if (changedProps.hasOwnProperty('skyRadius') && state.skyRadius) {
        state.controls.hasOwnProperty('maxDistance') && changedProps.skyRadius && (state.controls.maxDistance = Math.min(state.controls.maxDistance, state.skyRadius));
        state.camera.far = state.skyRadius * 2.5;
        state.camera.updateProjectionMatrix();
        state.skysphere.geometry = new three$1.SphereGeometry(state.skyRadius);
      }
      if (changedProps.hasOwnProperty('backgroundColor')) {
        var alpha = parseToRgb(state.backgroundColor).alpha;
        if (alpha === undefined) alpha = 1;
        state.renderer.setClearColor(new three$1.Color(curriedOpacify$1(1, state.backgroundColor)), alpha);
      }
      if (changedProps.hasOwnProperty('backgroundImageUrl')) {
        if (!state.backgroundImageUrl) {
          state.skysphere.visible = false;
          state.skysphere.material.map = null;
          !state.loadComplete && finishLoad();
        } else {
          new three$1.TextureLoader().load(state.backgroundImageUrl, function (texture) {
            texture.colorSpace = three$1.SRGBColorSpace;
            state.skysphere.material = new three$1.MeshBasicMaterial({
              map: texture,
              side: three$1.BackSide
            });
            state.skysphere.visible = true;

            // triggered when background image finishes loading (asynchronously to allow 1 frame to load texture)
            state.onBackgroundImageLoaded && setTimeout(state.onBackgroundImageLoaded);
            !state.loadComplete && finishLoad();
          });
        }
      }
      changedProps.hasOwnProperty('showNavInfo') && (state.navInfo.style.display = state.showNavInfo ? null : 'none');
      if (changedProps.hasOwnProperty('lights')) {
        (changedProps.lights || []).forEach(function (light) {
          return state.scene.remove(light);
        }); // Clear the place
        state.lights.forEach(function (light) {
          return state.scene.add(light);
        }); // Add to scene
      }
      if (changedProps.hasOwnProperty('objects')) {
        (changedProps.objects || []).forEach(function (obj) {
          return state.scene.remove(obj);
        }); // Clear the place
        state.objects.forEach(function (obj) {
          return state.scene.add(obj);
        }); // Add to scene
      }

      //

      function finishLoad() {
        state.loadComplete = state.scene.visible = true;
      }
    }
  });

  function linkKapsule (kapsulePropName, kapsuleType) {
    var dummyK = new kapsuleType(); // To extract defaults
    dummyK._destructor && dummyK._destructor();
    return {
      linkProp: function linkProp(prop) {
        // link property config
        return {
          "default": dummyK[prop](),
          onChange: function onChange(v, state) {
            state[kapsulePropName][prop](v);
          },
          triggerUpdate: false
        };
      },
      linkMethod: function linkMethod(method) {
        // link method pass-through
        return function (state) {
          var kapsuleInstance = state[kapsulePropName];
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
          return returnVal === kapsuleInstance ? this // chain based on the parent object, not the inner kapsule
          : returnVal;
        };
      }
    };
  }

  var three = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists
  : {
    AmbientLight: AmbientLight$1,
    DirectionalLight: DirectionalLight$1,
    Vector3: Vector3$1,
    REVISION: REVISION$1
  };

  //

  var CAMERA_DISTANCE2NODES_FACTOR = 170;

  //

  // Expose config from forceGraph
  var bindFG = linkKapsule('forceGraph', threeForcegraph);
  var linkedFGProps = Object.assign.apply(Object, _toConsumableArray$4(['jsonUrl', 'graphData', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'nodeVal', 'nodeResolution', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeVisibility', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaDecay', 'd3VelocityDecay', 'd3AlphaMin', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'].map(function (p) {
    return _defineProperty$3({}, p, bindFG.linkProp(p));
  })));
  var linkedFGMethods = Object.assign.apply(Object, _toConsumableArray$4(['refresh', 'getGraphBbox', 'd3Force', 'd3ReheatSimulation', 'emitParticle'].map(function (p) {
    return _defineProperty$3({}, p, bindFG.linkMethod(p));
  })));

  // Expose config from renderObjs
  var bindRenderObjs = linkKapsule('renderObjs', threeRenderObjects);
  var linkedRenderObjsProps = Object.assign.apply(Object, _toConsumableArray$4(['width', 'height', 'backgroundColor', 'showNavInfo', 'enablePointerInteraction'].map(function (p) {
    return _defineProperty$3({}, p, bindRenderObjs.linkProp(p));
  })));
  var linkedRenderObjsMethods = Object.assign.apply(Object, _toConsumableArray$4(['lights', 'cameraPosition', 'postProcessingComposer'].map(function (p) {
    return _defineProperty$3({}, p, bindRenderObjs.linkMethod(p));
  })).concat([{
    graph2ScreenCoords: bindRenderObjs.linkMethod('getScreenCoords'),
    screen2GraphCoords: bindRenderObjs.linkMethod('getSceneCoords')
  }]));

  //

  var _3dForceGraph = index$2({
    props: _objectSpread2$2(_objectSpread2$2({
      nodeLabel: {
        "default": 'name',
        triggerUpdate: false
      },
      linkLabel: {
        "default": 'name',
        triggerUpdate: false
      },
      linkHoverPrecision: {
        "default": 1,
        onChange: function onChange(p, state) {
          return state.renderObjs.lineHoverPrecision(p);
        },
        triggerUpdate: false
      },
      enableNavigationControls: {
        "default": true,
        onChange: function onChange(enable, state) {
          var controls = state.renderObjs.controls();
          if (controls) {
            controls.enabled = enable;
            // trigger mouseup on re-enable to prevent sticky controls
            enable && controls.domElement && controls.domElement.dispatchEvent(new PointerEvent('pointerup'));
          }
        },
        triggerUpdate: false
      },
      enableNodeDrag: {
        "default": true,
        triggerUpdate: false
      },
      onNodeDrag: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onNodeDragEnd: {
        "default": function _default() {},
        triggerUpdate: false
      },
      onNodeClick: {
        triggerUpdate: false
      },
      onNodeRightClick: {
        triggerUpdate: false
      },
      onNodeHover: {
        triggerUpdate: false
      },
      onLinkClick: {
        triggerUpdate: false
      },
      onLinkRightClick: {
        triggerUpdate: false
      },
      onLinkHover: {
        triggerUpdate: false
      },
      onBackgroundClick: {
        triggerUpdate: false
      },
      onBackgroundRightClick: {
        triggerUpdate: false
      }
    }, linkedFGProps), linkedRenderObjsProps),
    methods: _objectSpread2$2(_objectSpread2$2({
      zoomToFit: function zoomToFit(state, transitionDuration, padding) {
        var _state$forceGraph;
        for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          bboxArgs[_key - 3] = arguments[_key];
        }
        state.renderObjs.fitToBbox((_state$forceGraph = state.forceGraph).getGraphBbox.apply(_state$forceGraph, bboxArgs), transitionDuration, padding);
        return this;
      },
      pauseAnimation: function pauseAnimation(state) {
        if (state.animationFrameRequestId !== null) {
          cancelAnimationFrame(state.animationFrameRequestId);
          state.animationFrameRequestId = null;
        }
        return this;
      },
      resumeAnimation: function resumeAnimation(state) {
        if (state.animationFrameRequestId === null) {
          this._animationCycle();
        }
        return this;
      },
      _animationCycle: function _animationCycle(state) {
        if (state.enablePointerInteraction) {
          // reset canvas cursor (override dragControls cursor)
          this.renderer().domElement.style.cursor = null;
        }

        // Frame cycle
        state.forceGraph.tickFrame();
        state.renderObjs.tick();
        state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
      },
      scene: function scene(state) {
        return state.renderObjs.scene();
      },
      // Expose scene
      camera: function camera(state) {
        return state.renderObjs.camera();
      },
      // Expose camera
      renderer: function renderer(state) {
        return state.renderObjs.renderer();
      },
      // Expose renderer
      controls: function controls(state) {
        return state.renderObjs.controls();
      },
      // Expose controls
      tbControls: function tbControls(state) {
        return state.renderObjs.tbControls();
      },
      // To be deprecated
      _destructor: function _destructor() {
        this.pauseAnimation();
        this.graphData({
          nodes: [],
          links: []
        });
      }
    }, linkedFGMethods), linkedRenderObjsMethods),
    stateInit: function stateInit(_ref5) {
      var controlType = _ref5.controlType,
        rendererConfig = _ref5.rendererConfig,
        extraRenderers = _ref5.extraRenderers;
      var forceGraph = new threeForcegraph();
      return {
        forceGraph: forceGraph,
        renderObjs: threeRenderObjects({
          controlType: controlType,
          rendererConfig: rendererConfig,
          extraRenderers: extraRenderers
        }).objects([forceGraph]) // Populate scene
        .lights([new three.AmbientLight(0xcccccc, Math.PI), new three.DirectionalLight(0xffffff, 0.6 * Math.PI)])
      };
    },
    init: function init(domNode, state) {
      // Wipe DOM
      domNode.innerHTML = '';

      // Add relative container
      domNode.appendChild(state.container = document.createElement('div'));
      state.container.style.position = 'relative';

      // Add renderObjs
      var roDomNode = document.createElement('div');
      state.container.appendChild(roDomNode);
      state.renderObjs(roDomNode);
      var camera = state.renderObjs.camera();
      var renderer = state.renderObjs.renderer();
      var controls = state.renderObjs.controls();
      controls.enabled = !!state.enableNavigationControls;
      state.lastSetCameraZ = camera.position.z;

      // Add info space
      var infoElem;
      state.container.appendChild(infoElem = document.createElement('div'));
      infoElem.className = 'graph-info-msg';
      infoElem.textContent = '';

      // config forcegraph
      state.forceGraph.onLoading(function () {
        infoElem.textContent = 'Loading...';
      }).onFinishLoading(function () {
        infoElem.textContent = '';
      }).onUpdate(function () {
        // sync graph data structures
        state.graphData = state.forceGraph.graphData();

        // re-aim camera, if still in default position (not user modified)
        if (camera.position.x === 0 && camera.position.y === 0 && camera.position.z === state.lastSetCameraZ && state.graphData.nodes.length) {
          camera.lookAt(state.forceGraph.position);
          state.lastSetCameraZ = camera.position.z = Math.cbrt(state.graphData.nodes.length) * CAMERA_DISTANCE2NODES_FACTOR;
        }
      }).onFinishUpdate(function () {
        // Setup node drag interaction
        if (state._dragControls) {
          var curNodeDrag = state.graphData.nodes.find(function (node) {
            return node.__initialFixedPos && !node.__disposeControlsAfterDrag;
          }); // detect if there's a node being dragged using the existing drag controls
          if (curNodeDrag) {
            curNodeDrag.__disposeControlsAfterDrag = true; // postpone previous controls disposal until drag ends
          } else {
            state._dragControls.dispose(); // cancel previous drag controls
          }
          state._dragControls = undefined;
        }
        if (state.enableNodeDrag && state.enablePointerInteraction && state.forceEngine === 'd3') {
          // Can't access node positions programmatically in ngraph
          var dragControls = state._dragControls = new DragControls(state.graphData.nodes.map(function (node) {
            return node.__threeObj;
          }).filter(function (obj) {
            return obj;
          }), camera, renderer.domElement);
          dragControls.addEventListener('dragstart', function (event) {
            controls.enabled = false; // Disable controls while dragging

            // track drag object movement
            event.object.__initialPos = event.object.position.clone();
            event.object.__prevPos = event.object.position.clone();
            var node = getGraphObj(event.object).__data;
            !node.__initialFixedPos && (node.__initialFixedPos = {
              fx: node.fx,
              fy: node.fy,
              fz: node.fz
            });
            !node.__initialPos && (node.__initialPos = {
              x: node.x,
              y: node.y,
              z: node.z
            });

            // lock node
            ['x', 'y', 'z'].forEach(function (c) {
              return node["f".concat(c)] = node[c];
            });

            // drag cursor
            renderer.domElement.classList.add('grabbable');
          });
          dragControls.addEventListener('drag', function (event) {
            var nodeObj = getGraphObj(event.object);
            if (!event.object.hasOwnProperty('__graphObjType')) {
              // If dragging a child of the node, update the node object instead
              var initPos = event.object.__initialPos;
              var prevPos = event.object.__prevPos;
              var _newPos = event.object.position;
              nodeObj.position.add(_newPos.clone().sub(prevPos)); // translate node object by the motion delta
              prevPos.copy(_newPos);
              _newPos.copy(initPos); // reset child back to its initial position
            }
            var node = nodeObj.__data;
            var newPos = nodeObj.position;
            var translate = {
              x: newPos.x - node.x,
              y: newPos.y - node.y,
              z: newPos.z - node.z
            };
            // Move fx/fy/fz (and x/y/z) of nodes based on object new position
            ['x', 'y', 'z'].forEach(function (c) {
              return node["f".concat(c)] = node[c] = newPos[c];
            });
            state.forceGraph.d3AlphaTarget(0.3) // keep engine running at low intensity throughout drag
            .resetCountdown(); // prevent freeze while dragging

            node.__dragged = true;
            state.onNodeDrag(node, translate);
          });
          dragControls.addEventListener('dragend', function (event) {
            delete event.object.__initialPos; // remove tracking attributes
            delete event.object.__prevPos;
            var node = getGraphObj(event.object).__data;

            // dispose previous controls if needed
            if (node.__disposeControlsAfterDrag) {
              dragControls.dispose();
              delete node.__disposeControlsAfterDrag;
            }
            var initFixedPos = node.__initialFixedPos;
            var initPos = node.__initialPos;
            var translate = {
              x: initPos.x - node.x,
              y: initPos.y - node.y,
              z: initPos.z - node.z
            };
            if (initFixedPos) {
              ['x', 'y', 'z'].forEach(function (c) {
                var fc = "f".concat(c);
                if (initFixedPos[fc] === undefined) {
                  delete node[fc];
                }
              });
              delete node.__initialFixedPos;
              delete node.__initialPos;
              if (node.__dragged) {
                delete node.__dragged;
                state.onNodeDragEnd(node, translate);
              }
            }
            state.forceGraph.d3AlphaTarget(0) // release engine low intensity
            .resetCountdown(); // let the engine readjust after releasing fixed nodes

            if (state.enableNavigationControls) {
              controls.enabled = true; // Re-enable controls
              controls.domElement && controls.domElement.ownerDocument && controls.domElement.ownerDocument.dispatchEvent(
              // simulate mouseup to ensure the controls don't take over after dragend
              new PointerEvent('pointerup', {
                pointerType: 'touch'
              }));
            }

            // clear cursor
            renderer.domElement.classList.remove('grabbable');
          });
        }
      });

      // config renderObjs
      three.REVISION < 155 && (state.renderObjs.renderer().useLegacyLights = false); // force behavior for three < 155
      state.renderObjs.hoverOrderComparator(function (a, b) {
        // Prioritize graph objects
        var aObj = getGraphObj(a);
        if (!aObj) return 1;
        var bObj = getGraphObj(b);
        if (!bObj) return -1;

        // Prioritize nodes over links
        var isNode = function isNode(o) {
          return o.__graphObjType === 'node';
        };
        return isNode(bObj) - isNode(aObj);
      }).tooltipContent(function (obj) {
        var graphObj = getGraphObj(obj);
        return graphObj ? index$1(state["".concat(graphObj.__graphObjType, "Label")])(graphObj.__data) || '' : '';
      }).hoverDuringDrag(false).onHover(function (obj) {
        // Update tooltip and trigger onHover events
        var hoverObj = getGraphObj(obj);
        if (hoverObj !== state.hoverObj) {
          var prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;
          var prevObjData = state.hoverObj ? state.hoverObj.__data : null;
          var objType = hoverObj ? hoverObj.__graphObjType : null;
          var objData = hoverObj ? hoverObj.__data : null;
          if (prevObjType && prevObjType !== objType) {
            // Hover out
            var fn = state["on".concat(prevObjType === 'node' ? 'Node' : 'Link', "Hover")];
            fn && fn(null, prevObjData);
          }
          if (objType) {
            // Hover in
            var _fn = state["on".concat(objType === 'node' ? 'Node' : 'Link', "Hover")];
            _fn && _fn(objData, prevObjType === objType ? prevObjData : null);
          }

          // set pointer if hovered object is clickable
          renderer.domElement.classList[hoverObj && state["on".concat(objType === 'node' ? 'Node' : 'Link', "Click")] || !hoverObj && state.onBackgroundClick ? 'add' : 'remove']('clickable');
          state.hoverObj = hoverObj;
        }
      }).clickAfterDrag(false).onClick(function (obj, ev) {
        var graphObj = getGraphObj(obj);
        if (graphObj) {
          var fn = state["on".concat(graphObj.__graphObjType === 'node' ? 'Node' : 'Link', "Click")];
          fn && fn(graphObj.__data, ev);
        } else {
          state.onBackgroundClick && state.onBackgroundClick(ev);
        }
      }).onRightClick(function (obj, ev) {
        // Handle right-click events
        var graphObj = getGraphObj(obj);
        if (graphObj) {
          var fn = state["on".concat(graphObj.__graphObjType === 'node' ? 'Node' : 'Link', "RightClick")];
          fn && fn(graphObj.__data, ev);
        } else {
          state.onBackgroundRightClick && state.onBackgroundRightClick(ev);
        }
      });

      //

      // Kick-off renderer
      this._animationCycle();
    }
  });

  //

  function getGraphObj(object) {
    var obj = object;
    // recurse up object chain until finding the graph object
    while (obj && !obj.hasOwnProperty('__graphObjType')) {
      obj = obj.parent;
    }
    return obj;
  }

  return _3dForceGraph;

}));
//# sourceMappingURL=3d-force-graph.js.map
